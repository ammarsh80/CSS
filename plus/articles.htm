<!DOCTYPE html>
<!-- saved from url=(0030)https://la-cascade.io/articles -->
<html lang="fr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width"><meta name="next-head-count" content="2"><script async="" src="./articles_files/js"></script><script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'G-ES0TD6FYCD', {
              page_path: window.location.pathname,
            });
          </script><link rel="icon" href="https://la-cascade.io/favicon.ico"><link rel="preload" href="./articles_files/920062120c5175e2.css" as="style"><link rel="stylesheet" href="./articles_files/920062120c5175e2.css" data-n-g=""><noscript data-n-css=""></noscript><script defer="" nomodule="" src="./articles_files/polyfills-5cd94c89d3acac5f.js.téléchargement"></script><script src="./articles_files/webpack-e443416cc051def9.js.téléchargement" defer=""></script><script src="./articles_files/framework-01395af778c6fb71.js.téléchargement" defer=""></script><script src="./articles_files/main-19f792e1bb880a1b.js.téléchargement" defer=""></script><script src="./articles_files/_app-93eaf2a603c53c6c.js.téléchargement" defer=""></script><script src="./articles_files/articles-4b4c2c743fc68b1d.js.téléchargement" defer=""></script><script src="./articles_files/_buildManifest.js.téléchargement" defer=""></script><script src="./articles_files/_ssgManifest.js.téléchargement" defer=""></script><script src="./articles_files/_middlewareManifest.js.téléchargement" defer=""></script><link as="script" rel="prefetch" href="./articles_files/748-504f0504968cf01f.js.téléchargement"><link as="script" rel="prefetch" href="./articles_files/[slug]-11d8555a8ae9a512.js.téléchargement"><link as="script" rel="prefetch" href="./articles_files/[slug]-180cbaa3e5d99e25.js.téléchargement"><link as="script" rel="prefetch" href="./articles_files/index-311f8a8edca58f18.js.téléchargement"><link as="script" rel="prefetch" href="./articles_files/tags-9a7270fed1c52c53.js.téléchargement"><link as="script" rel="prefetch" href="./articles_files/675-b9e4539e8c0434c4.js.téléchargement"><link as="script" rel="prefetch" href="./articles_files/auteurs-c11bcbf0d6ed7a96.js.téléchargement"><link as="script" rel="prefetch" href="./articles_files/search-1194e545683efead.js.téléchargement"><title></title><link as="script" rel="prefetch" href="./articles_files/[slug]-e2a97fc5956bafdd.js.téléchargement"></head><body><div id="__next" data-reactroot=""><div class="allSite"><header class="header"><h1 class="siteTitle"><a href="https://la-cascade.io/">La Cascade</a></h1><div class="headerLinks"><a id="articles-link" href="https://la-cascade.io/articles">Articles</a><a id="tags-link" href="https://la-cascade.io/tags">Tags</a><a id="authors-link" href="https://la-cascade.io/auteurs">Auteurs</a></div><span class="search"><a href="https://la-cascade.io/search">Rechercher</a></span></header><main class="content"><div><h1 class="welcomeTitle">Tous les articles</h1><div><p>➡️ Il y a <b>110 articles</b></p><br><ul><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comprendre-wai-aria-un-guide-complet">Comprendre WAI-ARIA, un guide complet</a></h2><div class="articleMeta"><span class="authorNameArticles">Kate Kalcevich,</span><span class="articleDate">1er octobre 2022,</span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgb(180, 50, 38); color: white;"><a href="https://la-cascade.io/tags/dom">dom</a></span></div><div class="articleExcerpt">Dans cet article, Kate Kalcevich explique quand et comment utiliser ARIA  afin d'aider les personnes handicapées utilisant des technologies d'assistance pour naviguer sur Internet. Allons-y!</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/des-styles-de-listes-creatifs">Des styles de listes créatifs</a></h2><div class="articleMeta"><span class="authorNameArticles">Michelle Barker,</span><span class="articleDate">5 septembre 2022,</span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">Un aperçu de quelques façons utiles et créatives de styliser une liste.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/grille-css-et-formes-personnalisees-1">Grille CSS et formes personnalisées, 1</a></h2><div class="articleMeta"><span class="authorNameArticles">Temani Afif,</span><span class="articleDate">28 août 2022,</span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt"></div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/utiliser-css-has">Utiliser :has() comme sélecteur de parent et bien plus</a></h2><div class="articleMeta"><span class="authorNameArticles">Jen Simmons,</span><span class="articleDate">25 août 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span></div><div class="articleExcerpt">Comment appliquer un style à un élément en fonction de ce qui se passe à l'intérieur de cet élément : la révolution :has()</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/zoomer-les-images-dans-une-grille">Zoomer les images dans une grille</a></h2><div class="articleMeta"><span class="authorNameArticles">Temani Afif,</span><span class="articleDate">9 août 2022,</span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Temani Afif ajoute un effet de survol aux images dans une grille implicite, pas si simple, mais Temani a le don rare de décortiquer les pbs pour les résoudre simplement.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-grid-grille-implicite-et-placement-automatique">CSS Grid : grille implicite et placement automatique</a></h2><div class="articleMeta"><span class="authorNameArticles">Temani Afif,</span><span class="articleDate">3 août 2022,</span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">L'article le plus clair sur les grilles implicites et le placement automatique dans CSS Grid.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/ecrivez-html-comme-du-html">Écrire HTML à la manière HTML (pas XHTML)</a></h2><div class="articleMeta"><span class="authorNameArticles">Jens Oliver Meiert,</span><span class="articleDate">26 juillet 2022,</span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span></div><div class="articleExcerpt">Avec Jens Oliver Meiert, redécouvrez le HTML et participez à l'élaboration d'une nouvelle méthode moderne d'écriture du HTML.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/une-table-des-matieres-parfaite-avec-html-et-css">Une table des matières parfaite avec HTML et CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Nicholas C Zakas,</span><span class="articleDate">25 juillet 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">Créer une table des matières pour un document à imprimer s'avère légèrement compliqué, Nicholas C. Zakas propose ici une solution simple en purs HTML et CSS.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/la-difference-entre-nth-child-et-nth-of-type">La différence entre :nth-child et :nth-of-type</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">24 juillet 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span></div><div class="articleExcerpt">La différence entre nth-child et nth-of-type n'est pas forcément évidente et pourtant elle est fondamentale.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/last-of-type">:last-of-type</a></h2><div class="articleMeta"><span class="authorNameArticles">Sara Cope,</span><span class="articleDate">23 juillet 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span></div><div class="articleExcerpt">La pseudo-classe last-of-type cible un élément qui est le dernier enfant d'un type donné dans la liste des enfants de l'élément parent.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comment-apprendre-css">Comment apprendre CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">18 juin 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span></div><div class="articleExcerpt">Pas besoin d'apprendre par cœur chaque propriété CSS, l'important est de comprendre les fondamentaux : cet article de Rachel Andrew vous guidera dans votre apprentissage de CSS.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/controler-affichage-du-texte">Contrôler l'affichage du texte</a></h2><div class="articleMeta"><span class="authorNameArticles">Will Boyd,</span><span class="articleDate">8 mai 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span></div><div class="articleExcerpt">Comment gérer le retour à la ligne ou les césures ? Il y a beaucoup plus de façons qu'on ne le pense, et plein d'astuces possibles.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/ameliorer-un-texte-a-faible-contraste">Améliorer un texte à faible contraste</a></h2><div class="articleMeta"><span class="authorNameArticles">Ben Myers,</span><span class="articleDate">29 avril 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span><span class="articleTag" style="background-color: rgb(138, 36, 15); color: white;"><a href="https://la-cascade.io/tags/couleur">couleur</a></span></div><div class="articleExcerpt">Le contraste insuffisant d'un texte est un obstacle grave pour les utilisateurs malvoyants ou simplement à la vue déclinante. Et pourtant, ce problème d'accessibilité lié au contraste est encore très (trop) répandu !</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/une-taille-de-police-enfantine">Une taille de police enfantine</a></h2><div class="articleMeta"><span class="authorNameArticles">Tyler Sticka,</span><span class="articleDate">27 avril 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(50, 50, 228, 0.9); color: white;"><a href="https://la-cascade.io/tags/typographie">typographie</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">Défense et illustration des tailles de police plus grandes pour nos utilisateurs, par Tyler Sticka. La Cascade ne peut que plussoyer.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comprendre-cssgrid-grid-template-areas">Comprendre CSS Grid : Grid template areas</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">18 avril 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span></div><div class="articleExcerpt">Dans cette nouvelle série, Rachel Andrew analyse la spécification CSS Grid Layout. Elle poursuit ici avec les zones de grille.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comprendre-cssgrid-lines">Comprendre CSS Grid : les lignes Grid</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">17 avril 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span></div><div class="articleExcerpt">Dans cette nouvelle série, Rachel Andrew analyse la spécification CSS Grid Layout. Elle poursuit ici avec les lignes de grille.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comprendre-cssgrid-creer-un-container-grid">Comprendre CSS Grid : créer un container Grid</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">16 avril 2022,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span></div><div class="articleExcerpt">Dans cette nouvelle série, Rachel Andrew analyse la spécification CSS Grid Layout. Elle commence par ce qui se passe quand on crée un conteneur grid.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-grid-difference-entre-grilles-explicite-et-implicite">CSS Grid : la différence entre grilles explicite et implicite</a></h2><div class="articleMeta"><span class="authorNameArticles">Manuel Matuzovic,</span><span class="articleDate">5 mars 2021,</span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt"></div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/la-propriete-css-clip-path">La propriété CSS Clip Path</a></h2><div class="articleMeta"><span class="authorNameArticles">Sara Cope,</span><span class="articleDate">27 décembre 2020,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt"></div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/sticky-footer-de-5-facons">Sticky footer, de 5 façons</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">3 janvier 2020,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span></div><div class="articleExcerpt">Une brève histoire des sticky footers, par Chris Coyier, depuis les pieds de page collants à l'ancienne jusqu'aux techniques Flexbox et CSS-Grid.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/listes-css-marqueurs-et-compteurs">Listes CSS, marqueurs et compteurs</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">29 juillet 2019,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.2); color: black;"><a href="https://la-cascade.io/tags/pseudo-elements">pseudo-elements</a></span></div><div class="articleExcerpt"></div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/alignement-en-css-guide-complet">Alignement en CSS, un guide complet</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">18 mai 2019,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span></div><div class="articleExcerpt">Tout sur l'alignement en CSS par Rachel Andrew. Les choses ont beaucoup évolué dernièrement avec Flexbox, CSS Grid et la spécification Box Alignment. Dans la continuité de ses articles de référence déjà traduits dans la Cascade.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comment-fonctionne-calc">Comment fonctionne calc()</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">12 janvier 2019,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(175, 80, 120); color: white;"><a href="https://la-cascade.io/tags/sass">sass</a></span><span class="articleTag" style="background-color: rgba(50, 50, 228, 0.9); color: white;"><a href="https://la-cascade.io/tags/typographie">typographie</a></span></div><div class="articleExcerpt">La fonction calc( ) de CSS nous permet de calculer des valeurs de propriétés. Ire Aderinokun passe en revue son fonctionnement, son utilité et quelques cas pratiques.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/la-propriete-css-visibility-et-laccessibilite">La propriété CSS visibility et l'accessibilité</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">16 décembre 2018,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">Le DOM (Document Object Model) est une interface pour vos pages web. C'est une API permettant aux programmes de lire et de manipuler le contenu de la page, sa structure et ses styles. Passons tout cela en revue pour comprendre comment ça marche.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-flexbox-et-la-dimension-des-boites">CSS Flexbox et la dimension des boîtes</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">9 décembre 2018,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">Nous allons explorer le dimensionnement en Flexbox, qui est souvent un casse-tête : comment Flexbox décide-t-il de la taille de nos items ?</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-flexbox-et-lalignement-guide-complet">CSS Flexbox et l'alignement, guide complet</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">9 décembre 2018,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">Dans cet article, nous examinons les propriétés d'alignement de Flexbox tout en découvrant quelques règles de base qui nous aideront à nous rappeler comment elles fonctionnent sur les axes principal et transversal</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/le-dom-cest-quoi-exactement">Le DOM, c'est quoi exactement ?</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">1er décembre 2018,</span><span class="articleTag" style="background-color: rgb(180, 50, 38); color: white;"><a href="https://la-cascade.io/tags/dom">dom</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(239, 216, 27, 0.7); color: black;"><a href="https://la-cascade.io/tags/javascript">javascript</a></span></div><div class="articleExcerpt">Le DOM (Document Object Model) est une interface pour vos pages web. C'est une API permettant aux programmes de lire et de manipuler le contenu de la page, sa structure et ses styles. Passons tout cela en revue pour comprendre comment ça marche.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/que-se-passe-t-il-quand-on-cree-un-flexbox-flex-container">Que se passe-t-il quand on crée un Flexbox flex container?</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Andrew,</span><span class="articleDate">28 octobre 2018,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">Lorsque les gens trouvent Flexbox difficile ou déroutant, c'est souvent parce qu'ils essaient de l'utiliser comme Grid layout.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comment-fonctionne-css-display-content">Comment fonctionne CSS display: contents</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">20 octobre 2018,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Nous pouvons contrôler la façon dont la boîte et ses enfants sont dessinés sur la page grâce à la propriété CSS display</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/limbrication-des-selecteurs-dans-sass">L'imbrication des sélecteurs dans Sass</a></h2><div class="articleMeta"><span class="authorNameArticles">Kitty Giraudel,</span><span class="articleDate">3 septembre 2018,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(175, 80, 120); color: white;"><a href="https://la-cascade.io/tags/sass">sass</a></span></div><div class="articleExcerpt">L'imbrication de sélecteurs est une fonctionnalité des préprocesseurs CSS d'utilisation tellement courante qu'elle peut devenir problématique. Par Kitty Giraudel.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/sass-mixin-ou-placeholder">Sass mixin ou placeholder</a></h2><div class="articleMeta"><span class="authorNameArticles">Kitty Giraudel,</span><span class="articleDate">8 août 2018,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(175, 80, 120); color: white;"><a href="https://la-cascade.io/tags/sass">sass</a></span></div><div class="articleExcerpt">Kitty Giraudel est un spécialiste internationalement reconnu de Sass. Il explique ici clairement et simplement la différence entre mixin et placeholder, comment utiliser l'un ou l'autre ou... combiner les deux.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/creer-des-systemes-de-menu-accessibles">Créer des systèmes de menu accessibles</a></h2><div class="articleMeta"><span class="authorNameArticles">Heydon Pickering,</span><span class="articleDate">1er mars 2018,</span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(239, 216, 27, 0.7); color: black;"><a href="https://la-cascade.io/tags/javascript">javascript</a></span></div><div class="articleExcerpt">Il existe de nombreux types de menus différents sur le Web. Créer des expériences inclusives est une question d'utilisation des bons modèles de menu aux bons endroits, avec le balisage et le comportement adéquats.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/sass-et-interpolation">Sass et interpolation</a></h2><div class="articleMeta"><span class="authorNameArticles">Kitty Giraudel,</span><span class="articleDate">4 novembre 2017,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(175, 80, 120); color: white;"><a href="https://la-cascade.io/tags/sass">sass</a></span></div><div class="articleExcerpt">Tout ce que vous avez toujours voulu savoir sur l'interpolation dans Sass, expliqué par Kitty Giraudel. Une bonne introduction toute simple et les cas d'utilisation principaux, pour interpoler avec plaisir.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-grid-comment-fonctionne-minmax">CSS Grid : comment fonctionne minmax()</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">19 juin 2017,</span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">La fonction minmax() est l'une des plus utiles parmi les nouveautés introduites par la spécification CSS Grid Layout. Ire Aderinokun la présente à sa façon habituelle: systématique, claire et complète!</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/json-pour-les-debutants">JSON pour les débutants</a></h2><div class="articleMeta"><span class="authorNameArticles">Louis Lazaris,</span><span class="articleDate">23 mars 2017,</span><span class="articleTag" style="background-color: rgba(15, 101, 12, 0.9); color: white;"><a href="https://la-cascade.io/tags/json">json</a></span></div><div class="articleExcerpt">JSON est un format de données facilitant le stockage et l'échange de données entre tous langages de programmation. Louis Lazaris propose une introduction simple, mais détaillée, pour comprendre JSON et JSONP.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/grid-et-flexbox-le-duo-gagnant">Grid et Flexbox, le duo gagnant</a></h2><div class="articleMeta"><span class="authorNameArticles">Chen Hui Jing,</span><span class="articleDate">5 mars 2017,</span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">CSS Grid et Flexbox sont faits pour fonctionner ensemble. Grid pour l'organisation générale, Flexbox pour les ajustements spécifiques. Chen Hui Jing le démontre avec un exemple magistral (et quelques bonus).</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/sass-tout-sur-extend">Sass, tout sur @extend</a></h2><div class="articleMeta"><span class="authorNameArticles">Kitty Giraudel,</span><span class="articleDate">28 février 2017,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(175, 80, 120); color: white;"><a href="https://la-cascade.io/tags/sass">sass</a></span></div><div class="articleExcerpt">Kitty Giraudel, notre grand spécialiste de Sass, est de retour. Il fait le point de façon précise et claire sur ce que personne ne vous avait jamais dit sur @extend.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/svg-la-syntaxe-path">SVG, la syntaxe Path</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">29 décembre 2016,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">L'élément path de SVG est l'outil de dessin le plus perfectionné qui soit, mais sa syntaxe ne semble pas aisée. Chris Coyier décortique brillamment ce langage, pas si compliqué finalement.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comprendre-svg-viewbox">Comprendre SVG viewBox</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">26 décembre 2016,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Tout savoir sur SVG viewbox. L'attribut viewBox est l'un des premiers qu'on rencontre quand on débute avec SVG, cette introduction de Dudley Storey vous simplifiera la vie.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/utiliser-svg-use">Utiliser SVG use</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">26 décembre 2016,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">use est l'outil de clonage de SVG, il permet de dupliquer des éléments existants ou prédéfinis et d'alléger votre code.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-initial-inherit-unset-et-revert">CSS Initial, Inherit, Unset et Revert</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">8 mai 2016,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span></div><div class="articleExcerpt">Il existe quatre valeurs applicables (en théorie) à n'importe quelle propriété CSS, ce sont les valeurs explicites par défaut. Avec Ire Aderinokun apprenez à les connaître et à les différencier.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-grid-layout-guide-complet">CSS Grid Layout, guide complet</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris House,</span><span class="articleDate">18 avril 2016,</span><span class="articleTag" style="background-color: rgb(2, 120, 120); color: white;"><a href="https://la-cascade.io/tags/cssgrid">cssgrid</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">Avec Flexbox, le module CSS Grid Layout représente l'avenir de la mise page CSS. Chris House a conçu un guide complet et plein d'exemples pour enfin comprendre cette spécification complexe.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/sur-not-et-la-specifite">Sur :not et la spécifité</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">20 mars 2016,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span></div><div class="articleExcerpt">Ire Aderinokun revisite ici la pseudo-classe de négation, nous montre l'envers du décor et nous offre un crash course sur la spécificité!</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/backgrounds-svg-hexagones-et-ecailles">Backgrounds SVG : hexagones et écailles</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">14 février 2016,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span></div><div class="articleExcerpt">Dudley Storey poursuit sa passionnante série sur les backgrounds SVG, ici avec des motifs en tuiles hexagonales et en écailles. On y apprend quelques petites astuces relatives à l'encodage base64.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/cacher-des-elements-avec-css">Cacher des éléments avec CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">23 janvier 2016,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">Encore un article d'Ire Aderinokun, qu'on aime beaucoup ici pour ses analyses en profondeur et la clarté de ses explications. Avez-vous bien tout considéré lorsque vous cachez un élément HTML?</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/controler-le-modele-de-boite">Contrôler le modèle de boîte</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">23 janvier 2016,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span></div><div class="articleExcerpt">Dans cet article simple et complet, Ire Aderinokun rappelle les bases du modèle de boîte CSS et montre pourquoi vous devriez utiliser box-sizing.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/creer-un-cube-en-css">Créer un cube en CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">David Walsh,</span><span class="articleDate">07 février 2016,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span></div><div class="articleExcerpt">David Walsh s’amuse à créer un cube 3D en CSS. En chemin, on suit la logique de construction, on apprend ou on révise la 3D CSS et les animations.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comprendre-svg-preserveaspectratio">Comprendre SVG preserveAspectRatio</a></h2><div class="articleMeta"><span class="authorNameArticles">Joni Trythall,</span><span class="articleDate">22 novembre 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Après SVG viewport et viewBox, Joni Trythall présente le complément logique, l'attribut preserveAspectRatio. Là aussi, les choses sont d'abord un peu complexes, mais présentées par Joni elles deviennent très claires.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comprendre-svg-viewbox-et-viewport">Comprendre SVG viewBox et viewport</a></h2><div class="articleMeta"><span class="authorNameArticles">Joni Trythall,</span><span class="articleDate">22 novembre 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">SVG viewport et viewBox peuvent sembler compliqués et intimidants lorsqu’on débute avec SVG. Excellente introduction agrémentée d'illustrations fruitées.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comment-fonctionne-z-index">Comment fonctionne z-index</a></h2><div class="articleMeta"><span class="authorNameArticles">Ire Aderinokun,</span><span class="articleDate">02 novembre 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span></div><div class="articleExcerpt">Ça n'est pas évident à première vue, mais les éléments HTML sont générés en 3D. La propriété CSS z-index spécifie le niveau et le contexte d'empilement.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-bases-de-svg-groupes">Les bases de SVG : Groupes</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">17 octobre 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Suite des bases de SVG par Dudley Storey : les groupes SVG ressemblent aux éléments div des pages web mais il existe des différences qu’il est important de bien comprendre.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/bien-utiliser-lattribut-alt">Bien utiliser l'attribut alt</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">03 octobre 2015,</span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">Dudley Storey fait le point sur les règles à connaître concernant l'attribut alt d'alternative textuelle pour les images, indispensable pour l'accessibilité et le SEO.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-roots-le-retour-aux-racines">CSS :root, le retour aux racines</a></h2><div class="articleMeta"><span class="authorNameArticles">Simurai,</span><span class="articleDate">14 septembre 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span></div><div class="articleExcerpt">La cascade CSS est la meilleure et la pire des choses. Dans cet article limpide, Simurai donne quelques astuces simples pour réduire les problèmes de spécificité et mieux comprendre CSS.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/nth-child">:nth-child</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">06 septembre 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span></div><div class="articleExcerpt">Le sélecteur :nth-child (“n-ième enfant”) permet de sélectionner un ou plusieurs éléments en fonction de leur ordre dans la source et selon des critères que vous déterminez.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/motifs-svg-japonais">Motifs SVG japonais</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">3 août 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span></div><div class="articleExcerpt">Pour le plaisir, Dudley Storey a réalisé deux nouveaux backgrounds SVG dérivés des motifs géométriques traditionnels japonais. Un approfondissement de la série sur SVG, mine de rien, ça devient sérieux!</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/creer-de-superbes-diagrammes-avec-svg-et-blend-modes">Créer de superbes diagrammes avec SVG et Blend Modes</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">30 juillet 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span></div><div class="articleExcerpt">Une nouvelle association de SVG et CSS Blend Modes pour de nouveaux effets créatifs. De quoi vous faire regretter le bureau, les graphiques et les diagrammes en camembert. Merci Dudley!</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/backgrounds-pop-art-avec-svg-et-blend-modes">Backgrounds Pop-Art avec SVG et Blend Modes</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">19 juillet 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span></div><div class="articleExcerpt">Dudley Storey nous a appris à dessiner avec SVG. Ces lignes peuvent devenir complexes, on peut les mélanger à des images via Blend Modes pour créer des backgrounds “pop art</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/backgrounds-svg-les-rayures">Backgrounds SVG : les rayures</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">19 juillet 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span></div><div class="articleExcerpt">Dans la continuité des articles sur les bases de SVG, Dudley Storey commence une série sur les motifs et les backgrounds. SVG permet de réaliser des choses impossibles en CSS.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/diagonales-et-motifs-svg-en-background">Diagonales et motifs SVG en background</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">19 juillet 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Lorsque nous comprenons les bases des motifs SVG, c'est un monde de créativité qui s'ouvre. Après les bases de SVG, Dudley Storey nous montre comment créer des backgrounds en SVG.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/pourquoi-height-100-ne-marche-pas">Pourquoi height: 100% ne marche pas</a></h2><div class="articleMeta"><span class="authorNameArticles">Maujor,</span><span class="articleDate">19 juillet 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Le blog que Maujor consacre à CSS depuis 2006 est bien connu au Brésil pour ses articles spécialisés ou de vulgarisation. Celui-ci fait le point sur le problème height:100%.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/mecanique-des-polices-de-caracteres-2-2">Mécanique des polices de caractères, 2</a></h2><div class="articleMeta"><span class="authorNameArticles">Tobias Frere-Jones,</span><span class="articleDate">18 juillet 2015,</span><span class="articleTag" style="background-color: rgba(50, 50, 228, 0.9); color: white;"><a href="https://la-cascade.io/tags/typographie">typographie</a></span></div><div class="articleExcerpt">Deuxième article de la brillante série de Tobias Frere-Jones. Après les questions de dimensions, Tobias aborde celles de l’épaisseur du trait et des graisses.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/guide-de-flexbox-space-between-loublie">Guide de Flexbox : space-between, l'oublié</a></h2><div class="articleMeta"><span class="authorNameArticles">Noah Blon,</span><span class="articleDate">5 juillet 2015,</span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">Tout comprendre sur space-between, le héros oublié de Flexbox. Noah Blon propose un cas pratique d'utilisation de cette valeur de justify-content dans Flexbox, super pratique pour vos mises en page.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-bases-de-svg-lignes-simples-et-multiples">Les bases de SVG : Lignes simples et multiples</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">4 juillet 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Après les formes de base de SVG, Dudley Storey présente les lignes, simples et multiples et... ce n’est pas si simple.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/le-path-vers-la-lumiere">Le $Path vers la lumière</a></h2><div class="articleMeta"><span class="authorNameArticles">Olivier Lacan,</span><span class="articleDate">7 juin 2015,</span><span class="articleTag" style="background-color: rgba(239, 216, 27, 0.7); color: black;"><a href="https://la-cascade.io/tags/outils">outils</a></span></div><div class="articleExcerpt">L'installation de logiciels sur notre machine est souvent un processus pénible et semé d'embûches. Mieux connaître $PATH facilitera notre vie et nous évitera quelques crises</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-bases-de-svg-polygones">Les bases de SVG : Polygones</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">7 juin 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Dudley Storey termine la série d'articles sur les formes de bases SVG avec les polygones : triangles, étoiles et autres formes plus complexes.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/lajustement-optique">L'ajustement optique</a></h2><div class="articleMeta"><span class="authorNameArticles">Luke Jones,</span><span class="articleDate">31 mai 2015",</span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span><span class="articleTag" style="background-color: rgba(50, 50, 228, 0.9); color: white;"><a href="https://la-cascade.io/tags/typographie">typographie</a></span></div><div class="articleExcerpt">Les designers ne doivent pas compter sur les seuls logiciels pour faire le travail d'ajustement, mais également sur leurs yeux et leur instinct. Preuves à l'appui.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/astuces-css-avec-checkbox">Astuces CSS avec checkbox</a></h2><div class="articleMeta"><span class="authorNameArticles">Will Boyd,</span><span class="articleDate">28 juin 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.2); color: black;"><a href="https://la-cascade.io/tags/pseudo-elements">pseudo-elements</a></span></div><div class="articleExcerpt">C'est incroyable ce qu'on peut faire avec un élément aussi modeste que les cases à cocher... du moins lorsqu'on s'appelle Will Boyd et qu'on a de la créativité à revendre !</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-bases-de-svg-rectangles-et-carres">Les bases de SVG : Rectangles et Carrés</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">26 mai 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Dudley Storey reconstitue un célèbre tableau de Mondrian et nous montre chemin faisant tout ce qu'il faut savoir pour créer des rectangles en SVG.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-bases-de-svg-cercles-et-ellipses">Les bases de SVG : Cercles et ellipses</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">25 mai 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Même lorsqu’on utilise un logiciel de création graphique pour créer des SVG, la connaissance de la syntaxe permet de créer plus rapidement et efficacement des formes simples.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/comprendre-clip-path">Comprendre Clip Path</a></h2><div class="articleMeta"><span class="authorNameArticles">Andrew Minns,</span><span class="articleDate">09 mai 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span></div><div class="articleExcerpt">La propriété clip-path de CSS est un super outil pour réaliser des effets de style</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/5-regles-pour-rendre-svg-accessible">5 règles pour rendre SVG accessible</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">8 mai 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">SVG est formidable pour le design responsif, la performance et la qualité vectorielle, mais rendre SVG accessible demande encore un peu de travail, rendu simple avec ces 5 règles proposées par Dudley Storey.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/rendre-svg-accessible">5 règles pour rendre SVG accessible</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">8 mai 2015,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">rendre SVG accessible demande encore du travail, simple avec ces 5 règles proposées par Dudley Storey</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/3-raisons-dutiliser-hsl-pour-vos-couleurs">3 raisons d'utiliser HSL pour vos couleurs</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">4 mai 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span><span class="articleTag" style="background-color: rgb(138, 36, 15); color: white;"><a href="https://la-cascade.io/tags/couleur">couleur</a></span></div><div class="articleExcerpt">Pourquoi utiliser HSL ? Quelle différence entre HSL et RGB ? Dudley Storey passe en revue quelques situations où HSL peut vraiment vous changer la vie.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/utiliser-hsl-pour-vos-couleurs">Utiliser HSL pour vos couleurs</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">3 mai 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span><span class="articleTag" style="background-color: rgb(138, 36, 15); color: white;"><a href="https://la-cascade.io/tags/couleur">couleur</a></span></div><div class="articleExcerpt">La méthode HSL de création de couleurs est bien connue des designers mais négligée par les codeurs. Dudley Storey nous en montre ici tout l'intérêt.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/un-carrousel-responsif-en-pur-css">Un carrousel responsif en pur CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">25 avril 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">De plus en plus les développeurs web ont besoin de solutions responsives et performantes. Dudley Storey propose ici un carrousel responsive en pur CSS qui répond parfaitement à ces objectifs.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/fonctionnement-des-polices-de-caracteres-1">Mécanique des polices de caractères, 1</a></h2><div class="articleMeta"><span class="authorNameArticles">Tobias Frere-Jones,</span><span class="articleDate">14 février 2015,</span><span class="articleTag" style="background-color: rgba(50, 50, 228, 0.9); color: white;"><a href="https://la-cascade.io/tags/typographie">typographie</a></span></div><div class="articleExcerpt">Notre esprit veut dessiner une forme, mais nos yeux veulent en voir une autre. Cette série d'articles de Tobias Frere-Jones explore le travail en coulisses permettant aux polices d'être fonctionnelles.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/un-surlignage-simple-en-css">Un surlignage simple en CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">14 février 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(239, 216, 27, 0.7); color: black;"><a href="https://la-cascade.io/tags/javascript">javascript</a></span></div><div class="articleExcerpt">Surligner les rangées d'un tableau en CSS est très facile, mais les colonnes ? Les pseudo-éléments sont mis à contribution dans ce tutoriel court, facile et astucieux de l'indispensable Chris Coyier.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/le-morphing-en-svg">Le morphing en SVG</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">7 février 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: rgba(239, 216, 27, 0.7); color: black;"><a href="https://la-cascade.io/tags/javascript">javascript</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span></div><div class="articleExcerpt">Certaines propriétés SVG ne sont pas animables avec CSS. Chris Coyier montre ici comment réaliser simplement un morphing avec SMIL et Javascript.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/shape-blobbing">Shape Blobbing</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">7 février 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span></div><div class="articleExcerpt">Le shape blobbing c'est cet effet d'aspiration d'une goutte par une autre, réalisable en CSS à partir de filtres pour le flou et le contraste. Tutoriel clair de Chris Coyier.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/quest-ce-quun-element-remplace">Qu'est-ce qu'un élément remplacé ?</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">13 janvier 2015,</span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span></div><div class="articleExcerpt">Avez-vous déjà entendu parler des éléments HTML remplacés ? Vous les utilisez pourtant tous les jours sans le savoir, et connaître leur nature peut vous éviter quelques soucis.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/utiliser-css-object-fit">Utiliser CSS object-fit</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">13 janvier 2015,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">La propriété object-fit de CSS offre des options de redimensionnement et de présentation des images qui faciliteront la vie des designers.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/5-facons-danimer-de-maniere-responsable">5 façons d'animer de manière responsable</a></h2><div class="articleMeta"><span class="authorNameArticles">Rachel Nabors,</span><span class="articleDate">23 décembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">Nous vivons une époque formidable de l'animation web. Mais tout à notre excitation, nous oublions parfois de nous poser la question du pourquoi ?</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/guide-des-animations-svg">Guide des animations SVG (SMIL)</a></h2><div class="articleMeta"><span class="authorNameArticles">Sara Soueidan,</span><span class="articleDate">17 décembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span></div><div class="articleExcerpt">Pour tout savoir sur les animations SVG avec SMIL. Les animations SMIL permettent des choses impossibles avec CSS.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/css-aider-la-veuve-et-lorphelin">CSS, aider la veuve et l'orpheline</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">14 décembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(50, 50, 228, 0.9); color: white;"><a href="https://la-cascade.io/tags/typographie">typographie</a></span></div><div class="articleExcerpt">CSS nous permet de contrôler facilement la première ligne d'un texte, mais sa capacité à contrôler la dernière ligne reste limitée. Un rappel sur widows et orphans par Dudley Storey.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/toi-seul-utiliser-only-child-de-css">Toi seul : utiliser only-child de CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">10 décembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Les cas d'utilisation de only-child sont nombreux. Comme souvent avec les pseudo-classes, il nous permet d'écrire un code concis et adapté au contenu généré dynamiquement.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/video-en-background">Créer un background vidéo fullscreen avec HTML5</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">10 décembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(20, 20, 20, 0.7); color: white;"><a href="https://la-cascade.io/tags/video">video</a></span></div><div class="articleExcerpt">Il n'est pas possible d'intégrer une vidéo avec les propriétés CSS background ou background-image, mais Dudley Storey nous montre comment forcer l'apparition d'une vidéo responsive fullscreen derrière les éléments HTML.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/rendre-svg-responsif">Rendre un SVG responsif</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">9 décembre 2014,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Infiniment redimensionnable, le format SVG n'en est pas moins étonnamment difficile à rendre responsif. Dudley Storey montre comment y parvenir.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/la-premiere-variable-css-currentcolor">La première variable CSS : currentColor</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">2 décembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(138, 36, 15); color: white;"><a href="https://la-cascade.io/tags/couleur">couleur</a></span></div><div class="articleExcerpt">En attendant l'arrivée des variables CSS, Dudley Storey nous rappelle l'existence de currentColor et nous en montre quelques applications</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/empty-une-pseudo-classe-pas-si-vide">:empty, une pseudo-classe pas si vide</a></h2><div class="articleMeta"><span class="authorNameArticles">Dudley Storey,</span><span class="articleDate">29 novembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span></div><div class="articleExcerpt">Dudley Storey montre ici comment utiliser la pseudo-classe :empty, depuis l'application d'un style CSS aux tableaux et aux navigations dynamiques, jusqu'au nettoyage de votre balisage HTML.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/la-pseudo-classe-de-negation">La pseudo-classe de négation</a></h2><div class="articleMeta"><span class="authorNameArticles">Shay Howe,</span><span class="articleDate">07 novembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span></div><div class="articleExcerpt">Parmi les pseudo-classes, il en est une qu'on oublie souvent, c'est :not(). La pseudo-classe de négation peut pourtant s'avérer très utile dans bien des situations, comme l'explique ici Shay Howe.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/portal-css">Portal CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Donovan Hutchinson,</span><span class="articleDate">1er novembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span></div><div class="articleExcerpt">Ce projet de Donovan Hutchinson est une excellente introduction aux transformations et animations CSS, ludique et claire.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/centrer-en-css-un-guide-complet">Centrer en CSS, un guide complet</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">6 septembre 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">Le centrage en CSS est souvent un véritable casse-tête, car il existe plusieurs techniques différentes selon les cas d'utilisation. Chris Coyier les a listées et nous donne toutes les solutions.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/une-liste-de-raccourcis-emmet">Raccourcis et astuces Emmet</a></h2><div class="articleMeta"><span class="authorNameArticles">Jordan Moore,</span><span class="articleDate">28 juillet 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span></div><div class="articleExcerpt">Emmet est un plugin pour éditeurs de textes qui vous aide à créer HTML et CSS à la vitesse de l'éclair. Rappel des raccourcis principaux et quelques fonctionnalités moins connues.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/creer-des-spheres-en-css">Créer des sphères en CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Donovan Hutchinson,</span><span class="articleDate">26 juillet 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span></div><div class="articleExcerpt">Nous aussi nous pouvons faire des bulles, grâce à Donovan Hutchinson, maître des sphères.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-filtres-css">Les filtres CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Paula Borowska,</span><span class="articleDate">26 juillet 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">En été, il n'y a pas que les filtres solaires, c'est aussi le moment idéal pour se pencher sur une propriété qui peut être utile... par Paula Borowska.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-degrades-svg">Les dégradés SVG</a></h2><div class="articleMeta"><span class="authorNameArticles">Joni Trythall,</span><span class="articleDate">6 juin 2014,</span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span></div><div class="articleExcerpt">Les dégradés SVG permettent de remplir quasiment sans effort une forme complexe, et par rapport aux dégradés CSS ils présentent l'avantage d'être présents dans le DOM</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/subtilites-de-css3-transitions">Subtilités de CSS3 Transitions</a></h2><div class="articleMeta"><span class="authorNameArticles">Louis Lazaris,</span><span class="articleDate">30 mai 2014,</span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span></div><div class="articleExcerpt">Louis Lazaris montre quelques utilisations inattendues des transitions CSS3 et un piège à éviter. Animez vos pages en pur CSS.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/animer-un-svg-avec-css">Animer un SVG avec CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">23 avril 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(255, 179, 56, 0.95); color: black;"><a href="https://la-cascade.io/tags/svg">svg</a></span><span class="articleTag" style="background-color: rgba(120, 33, 109, 0.95); color: white;"><a href="https://la-cascade.io/tags/animation">animation</a></span></div><div class="articleExcerpt">Chris Coyier s'est amusé à créer une petite animation SVG en CSS, sans passer par des bibliothèques compliquées. C'est fait maison, simple, efficace et expliqué de façon claire comme toujours.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/combinateurs-et-pseudo-classes-css">Combinateurs et pseudo-classes CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Steven Bradley,</span><span class="articleDate">13 avril 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.2); color: black;"><a href="https://la-cascade.io/tags/pseudo-elements">pseudo-elements</a></span><span class="articleTag" style="background-color: rgba(2, 149, 136, 0.4); color: black;"><a href="https://la-cascade.io/tags/pseudo-classes">pseudo-classes</a></span></div><div class="articleExcerpt">Nous poursuivons notre introduction aux basiques de CSS avec un article de Steven Bradley sur les combinateurs et les pseudo-classes. La maîtrise de cette syntaxe vous aidera à mieux coder.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-pseudo-elements-css-before-et-after">Pseudo-éléments :before &amp; :after</a></h2><div class="articleMeta"><span class="authorNameArticles">Louis Lazaris,</span><span class="articleDate">5 avril 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.2); color: black;"><a href="https://la-cascade.io/tags/pseudo-elements">pseudo-elements</a></span><span class="articleTag" style="background-color: black; color: white;"><a href="https://la-cascade.io/tags/accessibilite">accessibilite</a></span></div><div class="articleExcerpt">Cet article de Louis Lazaris s'adresse à ceux qui ont découvert avec émerveillement les trucs sympas qu'on peut faire avec les pseudo-éléments et veulent mieux connaître cette technique très utilisée. On commence par :before et :after.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/centrer-une-div-guide-complet">Centrer un bloc div, guide complet</a></h2><div class="articleMeta"><span class="authorNameArticles">Steve Pear,</span><span class="articleDate">28 mars 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">Un guide complet pour centrer une div. Steve Pear fait le tour de la question du centrage de div en CSS et propose des solutions pour tous les cas de figure.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/les-degrades-css">Les dégradés CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">09 mars 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Surligner les rangées d'un tableau en CSS est très facile, mais les colonnes ? Les pseudo-éléments sont mis à contribution dans ce tutoriel court, facile et astucieux de l'indispensable Chris Coyier.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/flexbox-guide-complet">Flexbox, guide complet</a></h2><div class="articleMeta"><span class="authorNameArticles">Chris Coyier,</span><span class="articleDate">1er février 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span><span class="articleTag" style="background-color: rgb(148, 90, 175); color: white;"><a href="https://la-cascade.io/tags/flexbox">flexbox</a></span></div><div class="articleExcerpt">Le module Flexbox Layout fournit une façon plus efficace de disposer, aligner et distribuer l'espace entre les éléments de votre page. 4 riches articles de Chris Coyier sont réunis ici.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/la-difference-entre-block-et-inline">CSS Block, Inline et Inline-Block</a></h2><div class="articleMeta"><span class="authorNameArticles">Louis Lazaris,</span><span class="articleDate">18 janvier 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Le premier d'une série de 3 articles de Louis Lazaris sur des notions de base de CSS. Nous commençons aujourd'hui avec les notions parfois confuses de Block, Inline et Inline-Block.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/le-positionnement-css">Le positionnement CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Louis Lazaris,</span><span class="articleDate">18 janvier 2014,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Une technique de mise en page CSS qui est là pour durer est le positionnement CSS, c'est à dire l'utilisation de la propriété position</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/de-la-typographie-web">De la Typographie Web</a></h2><div class="articleMeta"><span class="authorNameArticles">Jason Santa Maria,</span><span class="articleDate">22 décembre 2013,</span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span><span class="articleTag" style="background-color: rgba(50, 50, 228, 0.9); color: white;"><a href="https://la-cascade.io/tags/typographie">typographie</a></span></div><div class="articleExcerpt">Être designer demande une compréhension profonde de la typographie et de la sélection et de l'association des polices de caractères. Le grand Jason Santa Maria l'explique avec intelligence et sensibilité.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/emmet-un-turbo-dans-votre-css">Emmet, un turbo dans votre CSS</a></h2><div class="articleMeta"><span class="authorNameArticles">Josh Medeski,</span><span class="articleDate">20 décembre 2013,</span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Josh Medeski se concentre ici sur Emmet pour CSS : comment Emmet transforme instantanément de simples abréviations en snippets de code CSS complexes.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/goodbye-zen-coding-hello-emmet">Goodbye, Zen Coding. Hello, Emmet!</a></h2><div class="articleMeta"><span class="authorNameArticles">Zeno Rocha,</span><span class="articleDate">20 décembre 2013,</span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Emmet, anciennement connu comme Zen Coding, est le plugin d'éditeur de texte qui vous fera gagner le plus de temps.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/le-web-95-de-typographie">Le web, 95% de typographie</a></h2><div class="articleMeta"><span class="authorNameArticles">Oliver Reichenstein,</span><span class="articleDate">11 décembre 2013,</span><span class="articleTag" style="background-color: rgba(0, 204, 255, 0.5); color: black;"><a href="https://la-cascade.io/tags/design">design</a></span><span class="articleTag" style="background-color: rgba(50, 50, 228, 0.9); color: white;"><a href="https://la-cascade.io/tags/typographie">typographie</a></span></div><div class="articleExcerpt">Un bref rappel par Oliver Reichenstein, fondateur d'Information Architects, de l'importance de la typographie dans le web, ce qu'elle est et ce qu'elle n'est pas. Simple, direct, éclairant et inspirant.</div></li><li class="titleBlock" style="list-style-type: none;"><h2 class="titleList"><a href="https://la-cascade.io/articles/box-sizing-pour-les-nuls">Box-sizing pour les nuls</a></h2><div class="articleMeta"><span class="authorNameArticles">Paula Borowska,</span><span class="articleDate">11 décembre 2013,</span><span class="articleTag" style="background-color: rgb(200, 64, 32); color: white;"><a href="https://la-cascade.io/tags/html">html</a></span><span class="articleTag" style="background-color: rgba(36, 75, 221, 0.8); color: white;"><a href="https://la-cascade.io/tags/css">css</a></span></div><div class="articleExcerpt">Box-sizing est une alternative au modèle de boîte standard. Elle est très simple et peut réellement changer votre travail. Une très bonne introduction par Paula Borowska.</div></li></ul></div></div></main><footer class="footer">Toutes traductions par&nbsp;&nbsp;<a href="https://la-cascade.io/">La Cascade</a>  <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a><a href="https://la-cascade.io/motivation">motivation</a>  <a href="https://la-cascade.io/articles">articles</a> <a href="https://la-cascade.io/tags">tags</a>  <a href="https://la-cascade.io/auteurs">auteurs</a>  <a href="https://la-cascade.io/search">rechercher</a></footer></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"articles":[{"slug":"comprendre-wai-aria-un-guide-complet","title":"Comprendre WAI-ARIA, un guide complet","author":{"name":"Kate Kalcevich","lastname":"Kalcevich"},"original":{"date":"13 septembre 2022","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2022/09/wai-aria-guide/","copyright":"2022"},"dateCascade":"1er octobre 2022","dateMachine":"2O221001","tags":["accessibilite","html","dom"],"about":["Aria","TechnologiesAssistance","AccessibiliteWeb","Accessibility","ScreenReader","ArbreAccessibilite"],"excerpt":"Dans cet article, Kate Kalcevich explique quand et comment utiliser ARIA  afin d'aider les personnes handicapées utilisant des technologies d'assistance pour naviguer sur Internet. Allons-y!","featured":false,"featuredImage":"","order":null,"content":"\nL'[Initiative pour l'accessibilité du Web - _Applications Internet riches accessibles (WAI-ARIA)_](https://www.w3.org/TR/wai-aria-1.1/) est une spécification technique qui fournit des directives sur la manière d'améliorer l'accessibilité des applications Web. Alors que les directives d'accessibilité au contenu Web (WCAG) se concentrent davantage sur le contenu Web statique, **WAI-ARIA s'attache à rendre les interactions plus accessibles**.\n\nLes interactions sur le Web sont connues pour être inaccessibles, alors qu'elles font souvent partie des fonctions les plus critiques telles que\u0026nbsp;:\n\n- la soumission d'une demande d'emploi,\n- l'achat dans un magasin en ligne, ou\n- la réservation d'un rendez-vous médical.\n\nJe suis actuellement responsable de l'innovation en matière d'accessibilité chez [Fable](https://makeitfable.com/), une entreprise qui met en relation des organisations avec des personnes handicapées pour des recherches sur les utilisateurs et des tests d'accessibilité, et qui propose des formations personnalisées aux équipes numériques afin qu'elles acquièrent les compétences nécessaires à la création de produits inclusifs.\n\nEn tant qu'instructeur pour le développement Web accessible, je passe beaucoup de temps à examiner le code source des sites Web et des applications Web, et ARIA est l'une des choses que je vois les développeurs utiliser le plus mal.\n\n## HTML\n\nLorsque vous utilisez des éléments HTML tels que `input`, `select` et `button`, il se passe deux choses concernant l'accessibilité\u0026nbsp;: les informations sur l'élément sont transmises au [DOM](/articles/le-dom-cest-quoi-exactement) (Document Object Model) et dans un [arbre d'accessibilité](https://developer.mozilla.org/fr/docs/Glossary/Accessibility_tree). Les technologies d'assistance peuvent accéder aux nœuds de l'arbre d'accessibilité pour comprendre\u0026nbsp;:\n\n- de quel type d'élément il s'agit en vérifiant son rôle, par exemple, une case à cocher\u0026nbsp;;\n- dans quel état se trouve l'élément, par exemple, coché/non coché\u0026nbsp;;\n- le nom de l'élément, par exemple, \"Inscrivez-vous à notre bulletin d'information\".\n\nL'autre chose que vous obtenez en utilisant les éléments HTML est l'_interactivité du clavier_. Par exemple, une case à cocher peut être mise en focus à l'aide de la touche de tabulation et sélectionnée à l'aide de la barre d'espacement (les interactions spécifiques peuvent varier selon le navigateur et le système d'exploitation, mais le fait est qu'elles sont disponibles et normalisées sur tous les sites Web lorsque vous utilisez des éléments HTML).\n\nLorsque vous n'utilisez pas les éléménts HTML modernes, par exemple, si vous construisez votre propre sélection personnalisée à l'aide de `\u003cdiv\u003e` et de `\u003cspan\u003e` ou si vous utilisez une bibliothèque de composants, vous devez faire un travail supplémentaire pour fournir des informations sur l'élément et construire l'interactivité du clavier pour les utilisateurs de technologies d'assistance. C'est là que l'ARIA entre en jeu.\n\n## ARIA\n\nLes applications Internet riches accessibles (ARIA) comprennent un ensemble de rôles et d'attributs qui définissent les moyens de rendre le contenu et les applications Web plus accessibles aux personnes handicapées.\n\nVous pouvez utiliser ARIA pour transmettre des informations à l'arbre d'accessibilité. Les rôles et attributs ARIA n'incluent pas d'interactivité avec le clavier. L'ajout de `role=\"button\"` à une `\u003cdiv\u003e` ne le fait pas réagir lorsque vous appuyez sur la touche **Entrée** de votre clavier —\u0026nbsp;cela, vous devez le construire en utilisant JavaScript ou un autre langage. Toutefois, le [guide ARIA des pratiques de création de site](https://www.w3.org/WAI/ARIA/apg/patterns/) comprend une liste de l'interactivité du clavier décrivant _ce qui_ qui devrait être ajouté à divers composants tels que les accordéons, les boutons, les carrousels, etc.\n\n### Rôles\n\nCommençons par les rôles. Qu'est-ce que c'est que ce truc dans le code ci-dessous ?\n\n```html\n\u003cdiv className=\"dd-wrapper\"\u003e\n  \u003cdiv className=\"dd-header\"\u003e\n    \u003cdiv className=\"dd-header-title\"\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cdiv className=\"dd-list\"\u003e\n    \u003cbutton className=\"dd-list-item\"\u003e\u003c/button\u003e\n    \u003cbutton className=\"dd-list-item\"\u003e\u003c/button\u003e\n    \u003cbutton className=\"dd-list-item\"\u003e\u003c/button\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n```\n\nIl s'agit en fait d'un extrait de code que j'ai trouvé en ligne à partir d'un élément `select` pour React. L'élément est complètement méconnaissable à partir du code, et c'est exactement le problème que rencontrerait toute technologie d'assistance —\u0026nbsp;elle ne peut pas dire à l'utilisateur ce qu'est cet élément ni comment interagir avec lui car il n'y a pas de rôle ARIA.\n\nRegardez ce que nous pouvons faire ici :\n\n```html\n\u003cdiv className=\"dd-wrapper\" role=\"listbox\"\u003e\u003c/div\u003e\n```\n\nPeut-être ne connaissez-vous pas bien les _listbox_, c'est un type de `select` qu'un utilisateur de lecteur d'écran pourrait reconnaître et avec lequel il saurait interagir. Maintenant, vous pourriez simplement utiliser `\u003cselect\u003e`, et vous n'auriez pas à lui donner de rôle car il en a déjà un que le DOM et l'arbre d'accessibilité reconnaîtront, mais je sais que ce n'est pas toujours une option réalisable.\n\nUn rôle indique à un utilisateur de technologie d'assistance ce qu'est la chose avec laquelle il peut interagir, alors assurez-vous d'utiliser le bon rôle. Un bouton est très différent d'une bannière. Choisissez un rôle qui correspond à la fonction du composant que vous construisez.\n\nUne autre chose que vous devez savoir sur les rôles ARIA est qu'ils remplacent le rôle inhérent d'un élément HTML.\n\n```html\n\u003cimg role=\"button\" /\u003e\n```\n\nIl ne s'agit plus d'une image mais d'un bouton. Il y a très peu de raisons de faire cela, et à moins de savoir exactement ce qu'on fait et pourquoi, je m'abstiendrais de remplacer les rôles HTML existants. Il existe de nombreuses autres façons d'y parvenir qui sont plus logiques du point de vue de l'accessibilité et de la robustesse du code\u0026nbsp;:\n\n```html\n\u003cbutton\u003e\u003cimg src=\"image.png\" alt=\"Imprimer\" /\u003e\u003c/button\u003e\n\u003cinput type=\"image\" src=\"image.png\" alt=\"Imprimer\" /\u003e\n\u003cbutton style=\"background : url(image.png)\" /\u003eImprimer\u003c/button\u003e\n```\n\nSi vous créez un composant, vous pouvez consulter le modèle de ce composant dans Le guide ARIA des [bonnes pratiques de construction de sites](https://www.w3.org/WAI/ARIA/apg/patterns/), qui contient des informations sur le ou les rôles à utiliser. Vous pouvez également consulter [tous les rôles disponibles dans la documentation Web mdn](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles).\n\nEn résumé, si vous construisez un élément qui n'a pas de balise HTML sémantique pour le décrire (c'est-à-dire tout élément interactif construit à l'aide de `\u003cdiv\u003e` ou `\u003cspan\u003e`), il doit avoir un rôle ARIA pour que les technologies d'assistance puissent reconnaître ce qu'il est.\n\n### États et propriétés (également appelés attributs ARIA)\n\nEn plus de savoir ce qu'est un élément, s'il a un état (par exemple, caché, désactivé, invalide, en lecture seule, sélectionné, etc.) ou change d'état (par exemple, coché/non coché, ouvert/fermé, etc.), vous devez indiquer aux utilisateurs de technologies d'assistance quel est son état actuel et son nouvel état chaque fois qu'il change. Vous pouvez également partager certaines propriétés d'un élément. [La différence entre les états et les propriétés n'est pas vraiment claire ou importante](https://www.w3.org/TR/wai-aria-1.0/states_and_properties), alors appelons-les simplement des attributs.\n\nVoici quelques-uns des attributs ARIA les plus courants que vous pourriez être amenés à utiliser :\n\n- **aria-checked**  \n  Il est utilisé avec =\"true\" ou =\"false\" pour indiquer si les cases à cocher et les boutons radio sont actuellement cochés ou non.\n- **aria-current**  \n  Il est utilisé avec =\"true\" ou =\"false\" pour indiquer la page actuelle dans le fil d'Ariane ou la pagination.\n- **aria-describedby**  \n  Elle est utilisée avec l'id d'un élément pour ajouter plus d'informations à un champ de formulaire en plus de son étiquette. `aria-describedby` peut être utilisée pour donner des exemples du format requis pour un champ, par exemple une date, ou pour ajouter un message d'erreur à un champ de formulaire.\n\n```html\n\u003clabel for=\"anniversaire\"\u003eAnniversaire\u003c/label\u003e\n\u003cinput type=\"text\" id=\"birthday\" aria-describedby=\"date-format\" /\u003e\n\u003cspan id=\"date-format\"\u003eMM-DD-YYYY\u003c/span\u003e\n```\n\n- **aria-expanded**  \n  Il est utilisé avec =\"true\" ou =\"false\" pour indiquer si le fait d'appuyer sur un bouton affichera plus de contenu. Les exemples incluent les accordéons et les éléments de navigation avec sous-menus.\n\n```html\n\u003cbutton aria-expanded=\"false\"\u003eProduits\u003c/button\u003e\n```\n\nCeci indique que le menu Produits ouvrira un sous-menu (par exemple, de différentes catégories de produits). En revanche, si vous le codez comme ceci...\n\n```html\n\u003ca href=\"/produits/\"\u003eProduits\u003c/a\u003e\n```\n\n...l'utilisateur s'attendra à ce qu'il s'agisse d'un lien et à ce qu'en cliquant dessus, il accède à une nouvelle page. Ce que le bouton plus `aria-expanded` dit à un utilisateur de technologie d'assistance, c'est qu'il ne va pas vers une nouvelle page, mais qu'il reste en fait sur la même page et ouvre un sous-menu. Cette simple différence entre `\u003cbouton\u003e` et `\u003ca\u003e` et l'ajout d'`aria-expanded` communique tellement sur la façon d'interagir avec les éléments et ce qui se passera lorsque vous le ferez.\n\n- **aria-hidden**  \n  Il est utilisé avec =\"true\" ou =\"false\" pour cacher quelque chose qui est visible, mais que vous ne voulez pas que les utilisateurs de technologies d'assistance connaissent. _Utilisez-le avec une extrême prudence_ car il y a très peu de cas où vous ne voulez pas que des informations équivalentes soient présentées.\n\nUn cas d'utilisation intéressant que j'ai vu est une carte comportant à la fois une image et le titre textuel de la carte renvoyant à la même page, mais structurée comme deux liens distincts. Imaginez un grand nombre de ces cartes sur une page. Pour un utilisateur de lecteur d'écran, il entendrait chaque lien lu deux fois. Les liens d'image ont donc utilisé `aria-hidden=\"true\"`. La solution idéale serait de combiner les liens en un seul qui contiendrait à la fois une image et le titre du texte, mais le codage dans la vie réelle n'est pas toujours idéal et vous n'avez pas toujours ce niveau de contrôle.\n\nNotez que cela enfreint la quatrième règle d'ARIA (que nous aborderons plus tard), mais d'une manière qui ne nuit pas à l'accessibilité. Utilisez-la avec une extrême prudence lorsqu'il n'existe pas de meilleure solution de contournement et que vous l'avez testée avec des utilisateurs de technologies d'assistance.\n\n- **aria-required**  \n  Il est utilisé avec =\"true\" ou =\"false\" pour indiquer si un élément de formulaire doit être rempli pour que le formulaire puisse être soumis.\n\nSi vous construisez un composant, vous pouvez consulter les attributs de ce composant dans [le guide des pratiques de création ARIA](https://www.w3.org/WAI/ARIA/apg/patterns/). La docs web mdn couvre [les états et les propriétés ainsi que les rôles ARIA](https://developer.mozilla.org/fr/docs/Web/Accessibility/ARIA/Attributes).\n\nGardez à l'esprit que tous ces attributs ARIA indiquent quelque chose à l'utilisateur, mais que vous devez toujours coder la chose que vous lui dites. `aria-checked=\"true\"` ne vérifie pas réellement une case à cocher\u0026nbsp;; il indique simplement à l'utilisateur que la case est cochée, donc il vaut mieux que ce soit vrai ou vous aggraverez les choses au lieu de les améliorer pour l'accessibilité. L'exception serait `aria-hidden=\"true\"` qui supprime un élément de l'arbre d'accessibilité, le cachant effectivement à toute personne utilisant une technologie d'assistance qui ne peut pas voir.\n\nNous savons donc maintenant comment utiliser ARIA pour expliquer ce qu'est un élément, dans quel état il se trouve et quelles sont ses propriétés. La dernière chose que je vais aborder est la gestion du focus.\n\n## Gestion du focus\n\n**Tout ce qui est interactif sur un site Web ou une application Web doit pouvoir recevoir le focus**. Tout le monde n'utilise pas une souris, un trackpad ou un écran tactile pour interagir avec les sites. De nombreuses personnes utilisent leur clavier ou un dispositif technologique d'assistance qui émule un clavier. Cela signifie que pour tout ce sur quoi vous pouvez cliquer, vous devez également être capable d'utiliser la touche de tabulation ou les touches fléchées pour l'atteindre et la touche _Entrée_, et parfois la barre d'espacement, pour le sélectionner.\n\nIl y a trois concepts dont vous devrez tenir compte si vous utilisez `\u003cdiv\u003e` et `\u003cspan\u003e` pour créer des éléments interactifs\u0026nbsp;:\n\n1. Vous devez ajouter tabindex=\"0\" pour qu'un clavier ou un émulateur puisse se concentrer sur eux.\n2. Pour tout ce qui accepte la saisie au clavier, vous devez ajouter un écouteur d'événements (_Event Listener_) pour écouter les pressions sur les touches.\n3. Vous devez ajouter le rôle approprié pour qu'un utilisateur de lecteur d'écran puisse identifier l'élément que vous avez construit.\n\nN'oubliez pas que les contrôles HTML natifs acceptent déjà le focus et l'entrée clavier et ont des rôles inhérents. C'est exactement ce que vous devez faire lorsque vous créez des éléments personnalisés à partir de HTML non sémantique.\n\n[Ben Myers](/auteurs/ben-myers) fait une plongée profonde dans [la transformation d'une div en bouton](https://benmyers.dev/blog/clickable-divs/), et je vais partager quelques extraits de son exemple ici. Remarquez le `tabindex` et le `role` :\n\n```html\n\u003cdiv tabindex=\"0\" role=\"button\" onclick=\"doSomething() ;\"\u003e\n  Cliquez sur moi !\n\u003c/div\u003e\n```\n\nEt vous aurez besoin de JavaScript pour écouter les pressions sur les touches :\n\n```js\nconst ENTER = 13\nconst SPACE = 32\n// Sélectionnez votre bouton et enregistrez-le dans 'myButton'.\nmyButton.addEventListener('keydown', function (event) {\n  if (event.keyCode === ENTER || event.keyCode === SPACE) {\n    event.preventDefault() // Empêche les soumissions involontaires de formulaires, les défilements de pages, etc.\n    doSomething(event)\n  }\n})\n```\n\nLorsqu'il s'agit de déterminer les touches à écouter, je vous suggère de consulter le composant que vous construisez dans le guide des pratiques de création ARIA et de suivre les recommandations relatives à l'interaction avec le clavier.\n\n## Erreurs courantes\n\nPour avoir examiné beaucoup de code au cours de ma vie, je peux attester que certaines erreurs d'accessibilité sont régulièrement commises. Voici une liste des erreurs les plus courantes que je trouve et comment les éviter\u0026nbsp;:\n\n### Utilisation d'un attribut aria-labelledby faisant référence à un ID qui n'existe pas\n\nPar exemple, une modale qui a un titre dans la modale mais dont l'attribut `aria-labelledby` fait référence à quelque chose d'autre qui n'existe plus. C'est probablement quelque chose qui a été supprimé par un autre développeur qui n'a pas réalisé que la connexion `aria-labelledby` était là. Pour éviter cela, le titre de la modale aurait pu être un `\u003ch1\u003e` et soit `aria-labelledby` aurait pu faire référence au `\u003ch1\u003e`, soit on aurait pu mettre le focus sur le `\u003ch1\u003e` lorsque la modale s'ouvre et, du coup, un utilisateur de lecteur d'écran pourrait savoir ce qui se passe, tant que `role=\"dialog\"` est également utilisé. Essayez d'éviter les structures fragiles qui, si quelqu'un d'autre venait à modifier le code, se briseraient facilement.\n\n### Ne pas déplacer le focus dans la nouvelle modale lorsqu'elle s'ouvre\n\nCombien de fois ai-je vu un utilisateur de lecteur d'écran continuer à naviguer sur la page située sous la modale, parce qu'il ne savait pas qu'une modale s'était ouverte, soit être complètement perdu parce qu'il ne trouvait pas le contenu de la modale. Il existe plusieurs façons de déplacer le focus au sein d'une modale, mais l'une des méthodes les plus récentes consiste à ajouter `inert` au repère `\u003cmain\u003e` (et, bien sûr, s'assurer que la modale n'est pas à l'intérieur de `\u003cmain\u003e`). Inert bénéficie d'[une meilleure prise en charge par les navigateurs](https://caniuse.com/?search=inert) ces derniers temps. Pour en savoir plus, consultez l'article de Lars Magnus Klavenes intitulé [Accessible modal dialogs using inert](https://larsmagnus.co/blog/accessible-modal-dialogs-using-inert).\n\n### Ajout de rôles qui font double emploi avec le HTML\n\nEn général, il est inutile d'écrire `\u003cbutton role=\"button\"\u003e`. Il existe un cas où il pourrait être judicieux de le faire. VoiceOver et Safari suppriment la sémantique des éléments de liste lorsque `list-style : none` est utilisé. C'est fait exprès car si rien n'indique à un utilisateur voyant que le contenu est une liste, pourquoi dire à un utilisateur de lecteur d'écran qu'il s'agit d'une liste ? Si vous voulez passer outre, vous pouvez ajouter un `role=\"list\"` ARIA explicite à `\u003cul\u003e`.\n\n[Adrian Roselli](https://adrianroselli.com/) dit qu'une liste non stylisée n'étant pas annoncée comme une liste \"..._peut ne pas être un gros problème à moins que les tests utilisateurs disent que vous avez vraiment besoin d'une liste_.\" Je suis d'accord avec lui sur ce point, mais je suis aussi d'accord avec la correction si vos tests utilisateurs montrent que c'est bénéfique.\n\n### Ajout de `tabindex=\"0\"` à tous les éléments\n\nParfois, les développeurs commencent à utiliser un lecteur d'écran et supposent que la tabulation est la seule façon de naviguer et que, par conséquent, tout ce qui ne comporte pas de `tabindex` n'est pas accessible. Ce n'est PAS vrai. N'oubliez pas que si vous ne savez pas comment utiliser un lecteur d'écran, vous ne pouvez pas résoudre les problèmes d'utilisabilité. Rencontrez un utilisateur quotidien de lecteur d'écran pour les résoudre.\n\n### Utilisation de rôles enfants sans rôles parents\n\nPar exemple, `role=\"option\"` doit avoir un parent direct avec `role=\"listbox\"`.\n\n```html\n\u003cdiv role=\"listbox\"\u003e\n  \u003cul\u003e\n    \u003cli role=\"option\"\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n```\n\nLe code ci-dessus n'est pas valide car il y a un `\u003cul\u003e` entre les éléments parent et enfant. Cela peut être corrigé en ajoutant un rôle de présentation pour essentiellement cacher le `\u003cul\u003e` de l'arbre d'accessibilité, comme `\u003cul role=\"presentation\"\u003e`.\n\n### Utilisation de role=\"menu\" pour la navigation\n\nLa navigation d'un site Web est en réalité une _table des matières_ et non un menu. Les menus ARIA ne sont pas destinés à être utilisés pour la navigation mais pour le comportement des applications, comme les menus d'une application de bureau. Utilisez plutôt `\u003cnav\u003e`, et si vous avez des liens de navigation enfants, ceux-ci doivent être cachés jusqu'à ce qu'on appuie sur un bouton pour les afficher :\n\n```html\n\u003cnav aria-label=\"Main menu\"\u003e\n  \u003cbutton aria-expanded=\"false\"\u003eProduits\u003c/button\u003e\n  \u003cul hidden\u003e\n    \u003cli\u003ePyjama chat\u003c/li\u003e\n    ...\n  \u003c/ul\u003e\n\u003c/nav\u003e\n```\n\nSi vous voulez en savoir plus, Heydon Pickering fait une plongée profonde dans la [construction de systèmes de menus accessibles](https://www.smashingmagazine.com/2017/11/building-accessible-menu-systems/) dans son article de Smashing Magazine.\n\nEn ce qui concerne la navigation, utiliser `\u003cnav\u003e` plusieurs fois sur une page sans donner à chaque instance une étiquette unique signifie que les utilisateurs de lecteurs d'écran devront explorer chaque région de navigation pour trouver celle qu'ils recherchent. Un simple `aria-label` sur chaque `\u003cnav\u003e` rendra les choses beaucoup plus faciles.\n\n```html\n\u003cnav aria-label=\"Service client\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#\"\u003eAide\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#\"\u003eSuivi des commandes\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#\"\u003eExpédition et livraison\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#\"\u003eRetours\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#\"\u003eNous contacter\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#\"\u003eTrouver un magasin\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\n```\n\n## Comment valider ARIA\n\nUtilisez des vérificateurs d'accessibilité automatisés comme [Axe](https://www.deque.com/axe/browser-extensions/) ou les [extensions WAVE](https://wave.webaim.org/extension/) lorsque vous exécutez votre code dans un navigateur. Les vérificateurs d'accessibilité comme [Axe pour Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter) ou [ESLint pour les éléments JSX](https://github.com/jsx-eslint/eslint-plugin-jsx-a11y) vérifieront votre code à mesure que vous l'écrivez.\n\nÉcoutez votre code avec un lecteur d'écran. De même que vous ne publierez jamais un code sans l'exécuter dans un navigateur pour vous assurer qu'il fonctionne, de même l'utilisation d'un lecteur d'écran vous permettra de vérifier qu'il fonctionne pour tous les publics. [NVDA](https://www.nvaccess.org/) est gratuit pour Windows, et [VoiceOver](https://www.apple.com/ca/accessibility/vision/) est intégré aux Mac et iPhones. [TalkBack](https://support.google.com/accessibility/android/topic/3529932?hl=en\u0026ref_topic=9078845) est intégré aux téléphones Android.\n\n**Testez avec des utilisateurs de technologies d'assistance**. Je considère cela comme obligatoire pour toute grande organisation qui dispose d'un budget pour l'accessibilité (et elles devraient toutes le faire). Il existe des entreprises qui peuvent recruter des utilisateurs de technologies d'assistance pour les tests ou effectuer des tests utilisateurs pour vous, et l'entreprise pour laquelle je travaille peut fournir des délais de 2 jours pour les tests utilisateurs qui sont, ou non, modérés par vous pour soutenir les tests d'accessibilité à grande échelle.\n\n### Frameworks et bibliothèques de composants\n\nSi vous utilisez un framework Web, une façon d'alléger un peu le travail de construction pour l'accessibilité est d'utiliser une bibliothèque de composants intégrant l'accessibilité. J'ajouterai une mise en garde toutefois\u0026nbsp;: l'accessibilité peut être complexe et tout ce qui se prétend accessible n'est pas toujours utilisable par les utilisateurs de technologies d'assistance. La meilleure façon de garantir l'accessibilité est de toujours **tester avec les utilisateurs** pour lesquels vous construisez.\n\nVoici quelques points de départ pour votre recherche :\n\n- [React Aria](https://react-spectrum.adobe.com/react-aria/index.html)\n- [Vue A11y](https://vue-a11y.com/)\n- [Material Design 3](https://m3.material.io/)\n- [Lion](https://lion-web.netlify.app/)\n- [Open UI](https://open-ui.org/)\n\n## Conclusion\n\nAvec un peu de chance, cet article aura démystifié ARIA pour vous. Comme un langage secret connu de la seule l'élite de l'accessibilité, il a ses propres règles Fight Club-esque.\n\nLa première règle de l'ARIA est \"N'utilisez pas l'ARIA\". Un `\u003cbutton\u003e` sera toujours mieux que `\u003cdiv role=\"button\"\u003e`.  \nDeuxièmement, ne remplacez pas la sémantique native. Au lieu de `\u003cbutton role=\"heading\"\u003e`, utilisez `\u003ch3\u003e\u003cbutton\u003e`.  \nEnfin, n'oubliez jamais que tous les éléments interactifs ARIA doivent fonctionner avec le clavier.  \nN'utilisez pas `role=\"presentation\"` ou `aria-hidden=\"true\"` sur un élément focalisable. `\u003cbutton role=\"presentation\"\u003e` signifie que vous cachez ce bouton uniquement aux utilisateurs de technologies d'assistance. Ce n'est pas seulement inaccessible, c'est carrément exclure certains utilisateurs.  \nDernier point, mais non le moindre, tous les éléments interactifs doivent avoir un nom accessible. Il existe de nombreuses façons de le faire, et en voici quelques-unes :\n\n```html\n\u003cbutton\u003eImprimer\u003c/button\u003e (le nom est le texte du bouton)\n\n\u003cdiv aria-label=\"Settings\"\u003e\u003csvg\u003e\u003c/div\u003e (l'aria-label attribue un nom)\n\n\u003cdiv aria-labelledby=\"myName\"\u003e\n  \u003ch1 id=\"myName\"\u003eLa rubrique\u003c/h1\u003e\n\u003c/div\u003e\n\n\u003clabel for=\"name\"\u003eNom\u003c/label\u003e\n\u003cinput type=\"text\" id=\"name\" /\u003e\n```\n\nJe pense volontiers à ARIA comme à un outil utilisé par l'équipe d'élite des opérations spéciales à laquelle vous faites appel pour vos défis d'accessibilité les plus difficiles. Peut-être ai-je juste toujours voulu faire des pompes à un bras comme Emily Blunt dans Edge of Tomorrow, et c'est ce qui s'en rapproche le plus. Quoi qu'il en soit, j'espère que tout ceci vous a été utile et que vous n'êtes plus confus au sujet d'ARIA. Allez-y et construisez des choses accessibles\u0026nbsp;!\n"},{"slug":"des-styles-de-listes-creatifs","title":"Des styles de listes créatifs","author":{"name":"Michelle Barker","lastname":"Barker"},"original":{"date":"24 août 2022","site":"webdev","siteUrl":"https://web.dev/","postUrl":"https://web.dev/creative-list-styling/","copyright":"2022"},"dateCascade":"5 septembre 2022","dateMachine":"2O220905","tags":["design","html","css","accessibilite"],"about":["Marker","Counter",":Before","List Style","Ordered List","Unordered List"],"excerpt":"Un aperçu de quelques façons utiles et créatives de styliser une liste.","featured":false,"featuredImage":"/images/unordered-list.avif","order":null,"content":"\nQue nous vient-il à l'esprit lorsque nous pensons à une liste\u0026nbsp;? Le premier exemple peut-être, le plus évident, est la liste de courses —\u0026nbsp;la plus simple des listes, une collection d'articles sans ordre particulier. Mais nous utilisons les listes de toutes sortes de façons sur le Web. Une série de concerts à venir\u0026nbsp;? Très probablement une liste. Un processus de réservation en plusieurs étapes\u0026nbsp;? Sans doute une liste. Une galerie d'images\u0026nbsp;? Même elle pourrait être considérée comme une _liste d'images avec des légendes_.\n\nDans cet article, nous allons nous plonger dans les différents types de listes HTML disponibles sur le Web et savoir quand les utiliser, y compris certains attributs que vous ne connaissez peut-être pas. Nous examinerons également quelques façons utiles et créatives de leur appliquer un style avec CSS.\n\n## Quand utiliser une liste\u0026nbsp;?\n\nUn élément de liste HTML doit être utilisé lorsque des éléments doivent être regroupés de manière sémantique. Les technologies d'assistance (comme les lecteurs d'écran) signaleront à l'utilisateur la présence d'une liste et le nombre d'éléments. Si vous pensez, par exemple, à une grille de produits sur un site d'achat, connaître cette information serait très utile. Par conséquent, l'utilisation d'un élément de liste pourrait être un bon choix.\n\n## Types de liste\n\nEn ce qui concerne le balisage, nous avons le choix entre trois éléments de liste différents\u0026nbsp;:\n\n- Liste non ordonnée\n- Liste ordonnée\n- Liste de description\n\nLe choix de l'une ou l'autre dépend du cas d'utilisation.\n\n## Liste non ordonnée (ul)\n\nL'élément liste non ordonnée (`\u003cul\u003e`) est le plus utile lorsque les éléments de la liste ne correspondent à aucun ordre particulier. Par défaut, il s'affiche sous la forme d'une liste à puces. Un exemple est une liste de courses, où l'ordre n'a pas d'importance.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/unordered-list.avif\" width=\"800\" height=\"362\" alt=\"Une liste de courses, non ordonnée\"/\u003e\u003c/figure\u003e\n\nUn exemple plus courant sur le Web est le menu de navigation. Quand on crée un menu, il convient d'envelopper le `ul` dans un élément `nav` et d'identifier le menu avec une étiquette, pour aider les technologies d'assistance. Nous devons également identifier la page actuelle dans le menu, ce que nous pouvons faire en utilisant l'attribut `aria-current`\u0026nbsp;:\n\n```html\n\u003cnav aria-label=\"Navigation principale\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003ca href=\"/page-1\" aria-current=\"page\"\u003eElément de menu 1\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003ca href=\"/page-2\"\u003eElément de menu 2\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003ca href=\"/page-2\"\u003eMenu élément 2\u003c/a\u003e\n    \u003c/li\u003e\n    ...\n  \u003c/ul\u003e\n\u003c/nav\u003e\n```\n\nCet [article sur la structure des menus](https://www.w3.org/WAI/tutorials/menus/structure/) présente un certain nombre de recommandations pour garantir que nos menus de navigation soient accessibles à tous.\n\n## Liste ordonnée (ol)\n\nUn élément de liste ordonnée (`\u003col\u003e`) est le meilleur choix lorsque l'ordre des éléments est important, comme dans le cas d'un processus en plusieurs étapes. Par défaut, les éléments de la liste sont numérotés. Un exemple pourrait être un ensemble d'instructions, où les étapes doivent être accomplies dans l'ordre.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/ordered-list.avif\" width=\"800\" height=\"620\" alt=\"Une liste d'instructions pour préparer le thé, avec un numéro d'ordre\"/\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_mdxjLEd\" src=\"//codepen.io/web-dot-dev/embed/mdxjLEd?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=mdxjLEd\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/mdxjLEd\"\u003e\n  Ordered list\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLes éléments `\u003col\u003e` et `\u003cul\u003e` ne peuvent contenir que des éléments `\u003cli\u003e` comme enfants directs.\n\n## Liste de description (dl)\n\nUne liste de description contient des termes (éléments `\u003cdt\u003e`) et des descriptions (`\u003cdd\u003e`). Chaque terme peut être accompagné de plus d'une description. Les cas d'utilisation possibles pourraient inclure un glossaire de termes, ou peut-être un menu de restaurant. Les listes de descriptions ne sont pas affichées avec des marqueurs par défaut, bien que les navigateurs aient tendance à indenter l'élément `\u003cdd\u003e`.\n\nEn HTML, il est permis de regrouper des termes avec les descriptions qui les accompagnent à l'aide d'un élément `\u003cdiv\u003e`. Cela peut être utile à des fins de style, comme nous le verrons plus tard.\n\n```html\n\u003cdl\u003e- Ceci est valide --\u003e\n\u003cdl\u003e\n    \u003cdt\u003eTerme 1\u003c/dt\u003e\n    \u003cdd\u003eC'est la première description du premier terme de la liste\u003c/dt\u003e.\n    \u003cdd\u003eC'est la deuxième description du premier terme de la liste\u003c/dt\u003e\n    \u003cdt\u003eTerme 2\u003c/dt\u003e\n    \u003cdd\u003eC'est la description du deuxième terme de la liste\u003c/dd\u003e\n\u003c/dl\u003e\n\n\u003c!-- Ceci est également valable --\u003e\n\u003cdl\u003e\n    \u003cdiv\u003e\n        \u003cdt\u003eTerme 1\u003c/dt\u003e\n        \u003cdd\u003eC'est la première description du premier terme de la liste\u003c/dd\u003e.\n        \u003cdd\u003eC'est la deuxième description du premier terme de la liste\u003c/dd\u003e\n    \u003c/div\u003e\n    \u003cdiv\u003e\n        \u003cdt\u003eTerme 2\u003c/dt\u003e\n        \u003cdd\u003eC'est la description du deuxième terme de la liste\u003c/dd\u003e\n    \u003c/div\u003e\n\u003c/dl\u003e\n```\n\n## Style de liste simple\n\nL'une des utilisations les plus simples d'une liste est dans un bloc de texte du `\u003cbody\u003e`. Très souvent, ces listes simples n'ont pas besoin d'un style élaboré, mais nous pourrions vouloir personnaliser les marqueurs d'une liste ordonnée ou non ordonnée dans une certaine mesure, par exemple avec une couleur de marque (_brand_), ou en utilisant une image personnalisée pour nos puces. Nous pouvons faire beaucoup de choses avec `list-style` et le pseudo-élément `::marker`\u0026nbsp;!\n\n_Pour vous rafraîchir la mémoire sur les bases du style de liste, consultez le tutoriel de web.dev [Apprendre le CSS](https://web.dev/learn/css/lists/), ainsi qu'une plongée en profondeur dans l'utilisation de `::marker` dans ce guide sur les [puces personnalisées](https://web.dev/css-marker-pseudo-element/). Continuez à lire pour découvrir des choses que vous ne savez peut-être pas encore\u0026nbsp;!_\n\n## ::marker\n\nEn plus de donner à nos marqueurs de liste un style de base, nous pouvons créer des puces cycliques. Ici, nous utilisons trois URL d'images différentes pour la valeur de contenu du pseudo-élément `::marker`, ce qui ajoute à l'aspect manuscrit de notre exemple de liste de courses (au lieu d'utiliser une seule image pour tout) :\n\n```css\n::marker {\n  content: url('/marker-1.svg') ' ';\n}\n\nli:nth-child(3n)::marker {\n  content: url('/marker-2.svg') ' ';\n}\n\nli:nth-child(3n - 1)::marker {\n  content: url('/marker-3.svg') ' ';\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_poLZVbr\" src=\"//codepen.io/web-dot-dev/embed/poLZVbr?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=poLZVbr\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/poLZVbr\"\u003e\n  Handwritten shopping list with custom markers\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Compteur personnalisé\n\nPour certaines listes ordonnées, nous pourrions vouloir utiliser la valeur du compteur, mais y ajouter une autre valeur. Nous pouvons utiliser le compteur `list-item` comme valeur pour la propriété `content` de notre marqueur et y ajouter tout autre contenu\u0026nbsp;:\n\n```css\n::marker {\n  content: counter(list-item) '🐈 ';\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_zYWLjBa\" src=\"//codepen.io/web-dot-dev/embed/zYWLjBa?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=zYWLjBa\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/zYWLjBa\"\u003e\n  Handwritten list with custom markers\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNos compteurs s'incrémentent automatiquement de un, mais nous pouvons leur permettre de s'incrémenter d'une valeur différente si nous le souhaitons, en définissant la propriété `counter-increment` sur l'élément de la liste. Par exemple, ceci incrémentera nos compteurs de trois à chaque fois :\n\n```css\nli {\n  counter-increment: list-item 3;\n}\n```\n\nNous pourrions approfondir bien d'autres choses avec les compteurs. L'article [Listes, marqueurs et compteurs CSS](/articles/listes-css-marqueurs-et-compteurs) de [Rachel Andrew](/auteurs/rachel-andrew) explique certaines des possibilités plus en détail.\n\n## Limites de la stylisation de ::marker\n\nNous souhaitons parfois avoir plus de contrôle sur la position et le style de nos marqueurs. Il n'est pas possible de positionner le marqueur à l'aide de [flexbox](/tags/flexbox) ou de [grid](/tags/cssgrid), par exemple, ce qui peut parfois être un inconvénient si vous avez besoin d'un autre alignement. `::marker` expose un nombre limité de propriétés CSS pour le style. Si notre conception nécessite autre chose qu'un style de base, il est préférable d'utiliser un autre pseudo-élément.\n\n## Styliser des listes qui ne ressemblent pas à des listes\n\nParfois, nous souhaitons donner à nos listes un style totalement différent du style par défaut. C'est souvent le cas avec un menu de navigation, par exemple, où nous souhaitons généralement supprimer tous les marqueurs, et pourrions afficher notre liste horizontalement, à l'aide de flexbox. Une pratique courante consiste à régler la propriété `list-style` sur `none`. Cela signifie que le pseudo-élément `::marker` ne sera plus accessible dans le DOM.\n\n\u003e **Attention**  \n\u003e _Un mot d'avertissement :_ `list-style : none` _fera que Safari ne reconnaîtra plus une liste non ordonnée dans l'arbre d'accessibilité, et par conséquent qu'un lecteur d'écran n'annoncera plus les informations utiles telles que le nombre d'éléments. Une solution simple (en supposant que votre liste doive être lue comme telle) consiste à utiliser_ `role=\"list\"` sur l'élément* `\u003cul\u003e` *ou* `\u003col\u003e` *de votre HTML, [comme le recommande l'expert en accessibilité Scott O'Hara](https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html).\\*\n\n## Marqueurs personnalisés avec ::before\n\nL'utilisation du pseudo-élément `::before` était un moyen courant de créer des marqueurs de liste personnalisés avant l'arrivée de `::marker`. Mais même aujourd'hui, il peut nous offrir plus de flexibilité, lorsque nous en avons besoin, pour le style visuellement complexe des listes.\n\nComme pour `::marker`, nous pouvons ajouter nos propres styles de puce personnalisés en utilisant l'attribut `content`. Contrairement à l'utilisation de `::marker`, nous devons effectuer un positionnement manuel, car nous ne bénéficions pas des avantages automatiques offerts par `list-style-position`. Mais nous pouvons la positionner relativement facilement avec [flexbox](/tags/flexbox), ce qui ouvre un plus grand nombre de possibilités d'alignement. Par exemple, nous pourrions alterner la position du marqueur\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_OJvwZRM\" src=\"//codepen.io/web-dot-dev/embed/OJvwZRM?height=850\u0026amp;theme-id=light\u0026amp;slug-hash=OJvwZRM\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"850\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/OJvwZRM\"\u003e\n  Alternating list\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi nous stylisons une liste ordonnée à l'aide de l'élément `::before`, nous pouvons également souhaiter utiliser des compteurs pour ajouter nos marqueurs numériques.\n\n```css\nli::before {\n  counter-increment: list-item;\n  content: counter(list-item);\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_NWYBMRb\" src=\"//codepen.io/web-dot-dev/embed/NWYBMRb?height=900\u0026amp;theme-id=light\u0026amp;slug-hash=NWYBMRb\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"900\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/NWYBMRb\"\u003e\n  Alternating list\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nL'utilisation de `::before` au lieu de `::marker` nous permet d'accéder pleinement aux propriétés CSS pour un style personnalisé, ainsi que de permettre des animations et des transitions —\u0026nbsp;pour lesquelles la compatibilité est limitée pour `::marker`.\n\n## Attributs de liste\n\nLes éléments de listes ordonnées acceptent certains attributs facultatifs, qui peuvent nous aider dans bon nombre de cas d'utilisation.\n\n### Listes inversées\n\nSi nous disposons d'une liste des 10 meilleurs albums de l'année dernière, nous pourrions vouloir effectuer un compte à rebours de 10 à 1. Nous pourrions utiliser des compteurs personnalisés pour cela, et les incrémenter négativement. Ou bien nous pourrions simplement utiliser l'attribut `reversed` dans le HTML. Je dirais qu'il est généralement plus judicieux, d'un point de vue sémantique, d'utiliser l'attribut `reversed` plutôt que d'incrémenter négativement le compteur dans le CSS, à moins que les compteurs n'aient qu'une valeur de présentaton. Si le CSS ne se charge pas, vous verrez quand même les chiffres décomptés correctement dans le HTML. En outre, nous devons tenir compte de la manière dont un lecteur d'écran interpréterait la liste.\n\nPrenez cette démonstration des 10 meilleurs albums de 2021. Si les compteurs étaient incrémentés uniquement à l'aide de CSS, une personne accédant à la page à l'aide d'un lecteur d'écran pourrait en conclure que les chiffres comptent vers le haut, de sorte que le numéro 10 est en fait le numéro 1.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_qBoyYaL\" src=\"//codepen.io/web-dot-dev/embed/qBoyYaL?height=700\u0026amp;theme-id=light\u0026amp;slug-hash=qBoyYaL\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"700\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/qBoyYaL\"\u003e\n  Reversed list\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous pouvez voir dans la démo qu'en utilisant l'attribut inversé, nos marqueurs ont déjà la valeur correcte, sans aucun effort supplémentaire de notre part\u0026nbsp;! Mais si nous créons des marqueurs de liste personnalisés en utilisant le pseudo-élément `::before`, nous devons ajuster nos compteurs. Il nous suffit d'indiquer à notre compteur `list-item` de s'incrémenter négativement\u0026nbsp;:\n\n```css\nli::before {\n  counter-increment: list-item -1;\n  content: counter(list-item);\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_QWmBrGp\" src=\"//codepen.io/web-dot-dev/embed/QWmBrGp?height=700\u0026amp;theme-id=light\u0026amp;slug-hash=QWmBrGp\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"700\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/QWmBrGp\"\u003e\n  Reversed list with ::before\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Diviser les listes\n\nL'attribut `start` nous permet de spécifier la valeur numérique à partir de laquelle la liste doit commencer. Cela peut notamment être utile dans les cas où vous souhaitez diviser une liste en groupes.\n\nReprenons notre exemple des 10 meilleurs albums. Peut-être voulons-nous en fait décompter les 20 meilleurs albums, mais par groupes de 10. Entre les deux groupes, il y a un autre contenu de page.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/2-groups.avif\" width=\"800\" height=\"776\" alt=\"Une liste partagée en deux, avec un autre contenu entrte les deux.\"/\u003e\u003c/figure\u003e\n\nNous devrons créer deux listes distinctes dans notre HTML, mais comment nous assurer que les compteurs seront corrects\u0026nbsp;? Dans l'état actuel de notre balisage, les deux listes compteront de 10 à 1, ce qui n'est pas ce que nous voulons. Cependant, dans notre HTML, nous pouvons spécifier une valeur d'attribut de début (`start`). Si nous ajoutons une valeur de départ de 20 à notre première liste, les marqueurs seront à nouveau mis à jour automatiquement\u0026nbsp;!\n\n```css\n\u003col reversed start=\"20\"\u003e\n  \u003cli\u003e...\u003c/li\u003e\n  \u003cli\u003e...\u003c/li\u003e\n  \u003cli\u003e...\u003c/li\u003e\n\u003c/ol\u003e\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_JjLBvbw\" src=\"//codepen.io/web-dot-dev/embed/JjLBvbw?height=700\u0026amp;theme-id=light\u0026amp;slug-hash=JjLBvbw\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"700\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/JjLBvbw\"\u003e\n  Reversed and split list\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YzajLpm\" src=\"//codepen.io/web-dot-dev/embed/YzajLpm?height=700\u0026amp;theme-id=light\u0026amp;slug-hash=YzajLpm\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"700\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/YzajLpm\"\u003e\n  Reversed and split list with ::before\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Affichage de la liste sur plusieurs colonnes\n\nLa disposition en plusieurs colonnes se prête parfois bien à nos listes, comme vous pouvez le constater dans les démos précédentes. En définissant une largeur de colonne, nous pouvons faire en sorte que notre liste soit automatiquement réactive et ne s'étende sur deux colonnes ou plus que lorsque l'espace est suffisant. Nous pouvons également définir un espace entre les colonnes et, pour une touche supplémentaire, ajouter une règle de colonne stylisée (en utilisant une abréviation similaire à la propriété `border`)\u0026nbsp;:\n\n```css\nol {\n  columns: 25rem;\n  column-gap: 7rem;\n  column-rule: 4px dotted turquoise;\n}\n```\n\nEn utilisant des colonnes, nous pouvons parfois nous retrouver avec des ruptures disgracieuses dans nos éléments de liste —\u0026nbsp;pas toujours l'effet recherché.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/column-list.avif\" width=\"800\" height=\"325\" alt=\"Une liste répartie sur plusieurs colonnes.\"/\u003e\u003c/figure\u003e\n\nNous pouvons empêcher ces ruptures forcées en utilisant `break-inside : avoid` sur nos éléments de liste\u0026nbsp;:\n\n```css\nli {\n  break-inside: avoid;\n}\n```\n\n## Propriétés personnalisées\n\nLes propriétés personnalisées CSS offrent un large éventail de possibilités pour le style des listes. Si nous connaissons l'index de l'élément de la liste, nous pouvons l'utiliser pour calculer les valeurs des propriétés. À l'heure actuelle malheureusement, il n'existe aucun moyen de déterminer l'index de l'élément (de manière utilisable en CSS uniquement, en tout cas). Les compteurs nous permettent uniquement d'utiliser leur valeur dans la propriété `content`, et ne permettent pas les calculs.\n\nMais nous pouvons définir l'index de l'élément dans l'attribut `style` de notre HTML, ce qui peut rendre les calculs plus réalisables, surtout si nous utilisons un langage de templating. Cet exemple montre comment nous pourrions définir cela en utilisant [Nunjucks](https://mozilla.github.io/nunjucks/) :\n\n```html\n\u003col style=\"--length : items|length\"\u003e\n  {% for item in items %}\n  \u003cli style=\"--i : {{ loop.index }}\"\u003e...\u003c/li\u003e\n  {% endfor %}\n\u003c/ol\u003e\n```\n\n[Splitting.js](https://splitting.js.org/) est une bibliothèque qui exécute une fonction similaire du côté client.\n\nEn utilisant la valeur de la propriété personnalisée, la progression dans une liste peut être affichée de différentes manières. Une façon pourrait être une barre de progression pour une liste d'étapes. Dans cet exemple, nous utilisons un pseudo-élément avec un [dégradé linéaire](/articles/les-degrades-css) afin de créer une barre pour chaque élément qui indique à quel point l'utilisateur est avancé dans la liste.\n\n```css\nli::before {\n  --stop: calc(100% / var(--longueur) * var(--i));\n  --color1: deeppink;\n  --couleur2: rose;\n\n  content: '';\n  background: linear-gradient(\n    to right,\n    var(--color1) var(--stop),\n    var(--color2) 0\n  );\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_BarPxpz\" src=\"//codepen.io/web-dot-dev/embed/BarPxpz?height=800\u0026amp;theme-id=light\u0026amp;slug-hash=BarPxpz\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"800\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/BarPxpz\"\u003e\n  Custom properties step progress indicator\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous pouvons également ajuster la teinte à mesure qu'on progresse dans la liste, en utilisant [la fonction de couleur `hsl()`](/articles/utiliser-hsl-pour-vos-couleurs). Nous pouvons calculer la valeur de la teinte en utilisant notre propriété personnalisée.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_jOzpxyw\" src=\"//codepen.io/web-dot-dev/embed/jOzpxyw?height=800\u0026amp;theme-id=light\u0026amp;slug-hash=jOzpxyw\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"800\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/jOzpxyw\"\u003e\n  Custom properties step progress indicator\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Stylisation de la liste des descriptions\n\nComme nous l'avons mentionné précédemment, nous pouvons choisir d'envelopper les termes et leurs définitions dans une `div` ou dans une `dl`, pour nous donner plus d'options de style. Par exemple, nous pourrions vouloir afficher notre liste sous forme de [grille](/tags/cssgrid). Si vous définissez `display : grid` sur la liste sans placer une `div` autour de chaque groupe, les termes et les descriptions seront placés dans des [cellules de grille](/articles/css-grid-layout-guide-complet#gridcell) différentes. C'est parfois utile, comme dans l'exemple suivant, qui montre un menu de tartes avec leurs descriptions.\n\nNous pouvons définir une grille sur la liste elle-même et nous assurer que les termes et les descriptions seront toujours alignés en colonnes, la largeur de la colonne étant déterminée par le terme le plus long.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vYRajmB\" src=\"//codepen.io/web-dot-dev/embed/vYRajmB?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=vYRajmB\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"550\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/vYRajmB\"\u003e\n  Pie menu\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nD'un autre côté, si nous voulons regrouper distinctement les termes avec leurs descriptions à la manière d'une carte, un wrapper `\u003cdiv\u003e` est très utile.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_OJvwZmN\" src=\"//codepen.io/web-dot-dev/embed/OJvwZmN?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=OJvwZmN\u0026amp;user=web-dot-dev\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"550\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/web-dot-dev/pen/OJvwZmN\"\u003e\n  Pie menu\u003c/a\u003e de Web.dev dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Ressources complémentaires\n\n- [Listes](https://web.dev/learn/css/lists/), Une introduction de web.dev aux listes et à ::marker\n- [Listes, dans les Fondamentaux du texte HTML par MDN](https://developer.mozilla.org/fr/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals#listes)\n- [Marqueurs personnalisés à l'aide de ::marker](https://web.dev/css-marker-pseudo-element/)\n- [::marker, par MDN](https://developer.mozilla.org/fr/docs/Web/CSS/::marker)\n- [Listes CSS avec compteurs](/articles/listes-css-marqueurs-et-compteurs), de Rachel Andrew\n"},{"slug":"grille-css-et-formes-personnalisees-1","title":"Grille CSS et formes personnalisées, 1","author":{"name":"Temani Afif","lastname":"Afif"},"original":{"date":"15 août 2022","site":"CSS Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/css-grid-and-custom-shapes-part-1/","copyright":"2022"},"dateCascade":"28 août 2022","dateMachine":"2O220828","tags":["cssgrid","css"],"about":["CSS Mask","Clip Path","CSS Translate"],"excerpt":"","featured":false,"featuredImage":"/images/hexagons_1.webp","order":null,"content":"\nDans un article précédent, j'ai examiné [la capacité de CSS Grid à créer des mises en page complexes en utilisant ses pouvoirs d'auto-placement](/articles/css-grid-grille-implicite-et-placement-automatique). Je suis allé plus loin dans un autre article qui ajoutait [un effet de zoom au survol des images dans une disposition en grille](/articles/zoomer-les-images-dans-une-grille). À présent, je veux me plonger dans un autre type de grille, celle qui fonctionne avec des formes.\n\nPar exemple, que faire si les images ne sont pas parfaitement carrées mais ont plutôt la forme d'hexagones ou de losanges\u0026nbsp;? spoiler\u0026nbsp;: nous pouvons le faire. En fait, nous allons combiner les techniques de grille CSS que nous avons déjà examinées et ajouter un peu de magie CSS de type [clip-path](/articles/la-propriete-css-clip-path) et [mask](https://developer.mozilla.org/fr/docs/Web/CSS/mask) pour créer des grilles d'images fantaisistes pour pratiquement toutes les formes que vous pouvez imaginer\u0026nbsp;!\n\n## Commençons par un balisage\n\nLa plupart des mises en page que nous allons examiner peuvent sembler faciles à réaliser à première vue, mais _le défi consiste à les réaliser avec le même balisage HTML_. Nous pouvons utiliser beaucoup de wrappers, de divs et autres, mais l'objectif de cet article est d'utiliser la même quantité de code HTML, et la plus petite possible, pour obyenir toutes les différentes grilles. Après tout, qu'est-ce que CSS sinon un moyen de séparer le style et le balisage\u0026nbsp;? Notre style ne doit pas dépendre du balisage, et vice versa.\n\nCeci étant dit, commençons :\n\n```html\n\u003cdiv class=\"gallery\"\u003e\n  \u003cimg src=\"...\" alt=\"...\" /\u003e\n  \u003cimg src=\"...\" alt=\"...\" /\u003e\n  \u003cimg src=\"...\" alt=\"...\" /\u003e\n  \u003cimg src=\"...\" alt=\"...\" /\u003e\n  \u003c!-- autant de fois que l'on veut --\u003e\n\u003c/div\u003e\n```\n\nTout ce dont nous avons besoin ici, c'est d'un conteneur avec des images. Rien de plus\u0026nbsp;!\n\n## Grille CSS d'hexagones\n\nCette grille est aussi parfois appelée \"nid d'abeille\".\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/XWEWoYW\" src=\"//codepen.io/t_afif/embed/XWEWoYW?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=XWEWoYW\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/XWEWoYW\"\u003e\n  Honeycomb image gallery\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl y a déjà beaucoup d'autres articles de blog qui montrent comment faire cela. J'en ai même [écrit un ici](https://css-tricks.com/hexagons-and-beyond-flexible-responsive-grid-patterns-sans-media-queries/) sur CSS-Tricks\u0026nbsp;! Cet article est toujours bon et explique en détail comment créer une mise en page réactive. Mais pour ce cas précis, nous allons nous appuyer sur une approche CSS beaucoup plus simple.\n\nTout d'abord, utilisons le `clip-path` sur les images pour créer la forme hexagonale et plaçons-les toutes dans la même zone de grille pour qu'elles se chevauchent.\n\n```cs\n.gallery {\n  --s : 150px ; /* contrôle la taille */\n  display : grid ;\n}\n\n.gallery \u003e img {\n  grid-area : 1/1 ;\n  width : var(--s) ;\n  aspect-ratio : 1.15 ;\n  object-fit : couverture ;\n  clip-path : polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%) ;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/hexagone_1.webp\" width=\"311\" height=\"277\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003csmall\u003eclip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%)\u003c/small\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\nRien de bien original pour l'instant. Toutes les images sont des hexagones et sont superposées. Il semble que nous n'ayons qu'un seul élément d'image en forme d'hexagone, mais en réalité il y en a sept.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/mdxMqmK/d9c9d84f1e83aea575610acfddd85105\" src=\"//codepen.io/t_afif/embed/mdxMqmK/d9c9d84f1e83aea575610acfddd85105?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=mdxMqmK/d9c9d84f1e83aea575610acfddd85105\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/mdxMqmK/d9c9d84f1e83aea575610acfddd85105\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nL'étape suivante consiste à appliquer une translation aux images pour les placer correctement sur la grille.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/hexagons_1.webp\" width=\"472\" height=\"448\" alt=\"\"/\u003e\u003c/figure\u003e\n\nRemarquez que nous voulons toujours qu'une des images reste au centre. Les autres sont placées autour d'elle en utilisant [CSS translate](https://developer.mozilla.org/fr/docs/Web/CSS/transform-function/translate) et la bonne vieille géométrie. Voici les formules que j'ai créées pour chaque image de la grille\u0026nbsp;:\n\n```css\ntranslate((height + gap)*sin(0deg), (height + gap)*cos(0))\ntranslate((height + gap)*sin(60deg), (height + gap)*cos(60deg))\ntranslate((height + gap)*sin(120deg), (height + gap)*cos(120deg))\ntranslate((height + gap)*sin(180deg), (height + gap)*cos(180deg))\ntranslate((height + gap)*sin(240deg), (height + gap)*cos(240deg))\ntranslate((height + gap)*sin(300deg), (height + gap)*cos(300deg))\n```\n\nQuelques calculs et optimisations plus tard (sautons cette partie ennuyeuse, d'accord\u0026nbsp;?), nous obtenons le CSS suivant\u0026nbsp;:\n\n```css\n.gallery {\n  --s: 150px; /* contrôle de la taille */\n  --g: 10px; /* contrôle de l'espacement */\n  display: grid;\n}\n.gallery \u003e img {\n  grid-area: 1/1;\n  width: var(--s);\n  aspect-ratio: 1.15;\n  object-fit: cover;\n  clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0 50%);\n  transform: translate(var(--_x, 0), var(--_y, 0));\n}\n.gallery \u003e img:nth-child(1) {\n  --_y: calc(-100% - var(--g));\n}\n.gallery \u003e img:nth-child(7) {\n  --_y: calc(100% + var(--g));\n}\n.gallery \u003e img:nth-child(3),\n.gallery \u003e img:nth-child(5) {\n  --_x: calc(-75% - 0.87 * var(--g));\n}\n.gallery \u003e img:nth-child(4),\n.gallery \u003e img:nth-child(6) {\n  --_x: calc(75% + 0.87 * var(--g));\n}\n.gallery \u003e img:nth-child(3),\n.gallery \u003e img:nth-child(4) {\n  --_y: calc(-50% - 0.5 * var(--g));\n}\n.gallery \u003e img:nth-child(5),\n.gallery \u003e img:nth-child(6) {\n  --_y: calc(50% + 0.5 * var(--g));\n}\n```\n\n👉🏾 _Ce sera peut-être plus facile lorsque nous aurons de vraies fonctions de trigonométrie en CSS\u0026nbsp;!_\n\nChaque image est traduite par les variables `--_x` et `--_y` qui sont basées sur ces formules. Seule la deuxième image (`nth-child(2)`) est indéfinie dans tout sélecteur car c'est celle qui se trouve au centre. Il peut s'agir de n'importe quelle image si vous décidez d'utiliser un ordre différent. Voici l'ordre que j'utilise\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/hexagons_2.webp\" width=\"484\" height=\"490\" alt=\"\"/\u003e\u003c/figure\u003e\n\nAvec seulement quelques lignes de code, nous obtenons une super grille d'images. À cela, j'ai ajouté un petit effet de survol aux images pour rendre les choses plus fantaisistes.\n\nEt devinez quoi\u0026nbsp;? Nous pouvons obtenir une autre grille hexagonale en mettant simplement à jour quelques valeurs.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/xxWLJOR\" src=\"//codepen.io/t_afif/embed/xxWLJOR?height=550\u0026amp;theme-id=light\u0026amp;slug-hash=xxWLJOR5\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"550\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/xxWLJOR\"\u003e\n  Another hexagon grid\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi vous vérifiez le code et le comparez avec le précédent, vous remarquerez que j'ai simplement interverti les valeurs à l'intérieur de `clip-path` et que j'ai permuté entre `--x` et `--y`. C'est tout\u0026nbsp;!\n\n## Grille CSS de losanges\n\nCe losange est juste un carré qui a subi une rotation de 45 degrés.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/KKowpYz\" src=\"//codepen.io/t_afif/embed/KKowpYz?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=KKowpYz\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/KKowpYz\"\u003e\n  Rhombus image gallery\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nMême HTML, vous vous souvenez\u0026nbsp;? Nous commençons par définir une grille d'images 2×2 en CSS\u0026nbsp;:\n\n```css\n.gallery {\n  --s: 150px; /* contrôle la taille */\n\n  display: grid;\n  gap: 10px;\n  grid: auto-flow var(--s) / repeat(2, var(--s));\n  place-items: center;\n}\n.gallery \u003e img {\n  width: 100%;\n  aspect-ratio: 1;\n  object-fit: cover;\n}\n```\n\nLa première chose qui pourrait attirer votre attention est la propriété grid. Elle n'est pas souvent utilisée, mais elle est très utile car il s'agit d'un raccourci qui nous permet de définir une grille complète en une seule déclaration. Ce n'est pas la propriété la plus intuitive —\u0026nbsp;sans parler de la lisibilité\u0026nbsp;— mais nous sommes ici pour apprendre et découvrir de nouvelles choses, alors utilisons-la plutôt que d'écrire toutes les propriétés individuelles de la grille.\n\n```css\ngrid: auto-flow var(--s) / repeat(2, var(--s));\n/* est équivalent à ceci : */\ngrid-template-columns: repeat(2, var(--s));\ngrid-auto-rows: var(--s);\n```\n\nCela définit deux colonnes de largeur égale à la variable `--s` et fixe la hauteur de toutes les lignes à `--s` également. Comme nous avons quatre images, nous obtiendrons automatiquement une grille de 2×2.\n\nVoici une autre façon dont nous aurions pu l'écrire\u0026nbsp;:\n\n```css\ngrid-template-columns: repeat(2, var(--s));\ngrid-template-rows: repeat(2, var(--s));\n```\n\n...ce qui peut être réduit avec le raccourci grid\u0026nbsp;:\n\n```css\ngrid: repeat(2, var(--s)) / repeat(2, var(--s));\n```\n\nAprès avoir défini la grille, nous la faisons pivoter ainsi que les images avec des transformations CSS et nous obtenons ceci :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\" src=\"//codepen.io/t_afif/embed/gOexjRd/81e863cc4d71bd6047a7cd9be29062a3?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/gOexjRd/81e863cc4d71bd6047a7cd9be29062a3\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNotez comment je les fais pivoter tous les deux de 45deg, mais dans la direction opposée.\n\n```css\n.gallery {\n  /* etc. */\n  transform: rotate(45deg);\n}\n.gallery \u003e img {\n  /* etc. */\n  transform: rotate(-45deg);\n}\n```\n\nLa rotation des images dans le sens négatif les empêche de subir une rotation avec la grille, elles restent donc droites. Maintenant, nous appliquons un `clip-path` pour découper une forme de losange à partir des images.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/losange.webp\" width=\"319\" height=\"316\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003csmall\u003eclip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%)\u003c/small\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\" src=\"//codepen.io/t_afif/embed/qBoXyVX/36921e398a269bbfb6a143d969e1b1a1?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/qBoXyVX/36921e398a269bbfb6a143d969e1b1a1\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous avons presque terminé ! Nous devons rectifier la taille des images pour qu'elles s'emboîtent. Sinon, elles sont très espacées au point que cela ne ressemble pas à une grille d'images.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/losanges.webp\" width=\"542\" height=\"514\" alt=\"\"/\u003e\u003c/figure\u003e\n\nL'image se trouve à l'intérieur de la limite du cercle vert, qui est le cercle inscrit de la zone de la grille où l'image est placée. Ce que nous voulons, c'est agrandir l'image pour qu'elle rentre dans le cercle rouge, qui est le cercle circonscrit de la zone de la grille.\n\nNe vous inquiétez pas, je ne présenterai pas de géométrie plus ennuyeuse. Tout ce que vous devez savoir, c'est que le rapport entre le rayon de chaque cercle est la racine carrée de 2 (sqrt(2)). C'est la valeur dont nous avons besoin pour augmenter la taille de nos images afin de remplir la zone. Nous utiliserons `100%*sqrt(2) = 141%` et le tour est joué\u0026nbsp;!\n\n```css\n.gallery {\n  --s: 150px; /* contrôle de la taille */\n\n  display: grid;\n  grid: auto-flow var(--s) / repeat(2, var(--s));\n  gap: 10px;\n  place-items: center;\n  transform: rotate(45deg);\n}\n.gallery \u003e img {\n  width: 141%; /* 100%*sqrt(2) = 141% */\n  aspect-ratio: 1;\n  object-fit: cover;\n  transform: rotate(-45deg);\n  clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);\n}\n```\n\nComme pour la grille hexagonale, nous pouvons rendre les choses plus fantaisistes avec ce bel effet de survol de zoom :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/KKowpYz\" src=\"//codepen.io/t_afif/embed/KKowpYz?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=KKowpYz\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/KKowpYz\"\u003e\n  Rhombus image gallery\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Grille CSS de formes triangulaires\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/PoRGPoW\" src=\"//codepen.io/t_afif/embed/PoRGPoW?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=PoRGPoW\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/PoRGPoW\"\u003e\n  Triangular grid of images\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous savez probablement maintenant que la grande astuce consiste à déterminer le `clip-path` pour obtenir les formes que nous voulons. Pour cette grille, chaque élément a sa propre valeur de `clip-path` alors que les deux dernières grilles utilisaient des formes cohérentes. Donc, cette fois-ci, c'est comme si nous travaillions avec plusieurs formes triangulaires différentes qui s'assemblaient pour former une grille rectangulaire d'images.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/triangles_1.webp\" width=\"1030\" height=\"292\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003csmall\u003eLes trois images en haut.\u003c/small\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/triangles_2.webp\" width=\"1013\" height=\"279\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003csmall\u003eLes trois images en bas.\u003c/small\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\nNous les plaçons dans une grille 3×2 avec le CSS suivant\u0026nbsp;:\n\n```css\n.gallery {\n  display : grid ;\n  gap : 10px ;\n  grid-template-columns : auto auto auto ; /* 3 colonnes */\n  place-items : center ;\n}\n.gallery \u003e img {\n  width : 200px ; /* contrôle la taille */\n  aspect-ratio : 1 ;\n  object-fit : cover ;\n}\n/* les valeurs de clip-path */\n.gallery \u003e img:nth-child(1) { clip-path : polygon(0 0, 50% 0, 100% 100% ,0 100%) ; }\n.gallery \u003e img:nth-child(2) { clip-path : polygon(0 0, 100% 0, 50% 100%) ; }\n.gallery \u003e img:nth-child(3) { clip-path : polygon(50% 0, 100% 0, 100% 100%, 0 100%) ; }\n.gallery \u003e img:nth-child(4) { clip-path : polygon(0 0, 100% 0, 50% 100%, 0 100%) ; }\n.gallery \u003e img:nth-child(5) { clip-path : polygon(50% 0, 100% 100%, 0% 100%) ; }\n.gallery \u003e img:nth-child(6) { clip-path : polygon(0 0, 100% 0 ,100% 100%, 50% 100%) ; } } }\n```\n\nVoici ce que nous obtenons\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\" src=\"//codepen.io/t_afif/embed/abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/abYygLB/ec7e8106f450cf7ddb9e3d7796108e0a\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa touche finale consiste à rendre la largeur de la colonne centrale égale à 0 pour se débarrasser des espaces entre les images. C'est le même genre de problème d'espacement que nous avions avec la grille de losanges, mais avec une approche différente pour les formes que nous utilisons maintenant\u0026nbsp;:\n\n```css\ngrid-template-columns: auto 0 auto;\n```\n\nJ'ai dû jouer avec les valeurs de `clip-path` pour m'assurer qu'elles s'emboîtent toutes comme un puzzle. Les images originales se chevauchent lorsque la colonne du milieu a une largeur nulle, mais après avoir découpé les images, l'illusion est parfaite\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/result.webp\" width=\"940\" height=\"459\" alt=\"\"/\u003e\u003c/figure\u003e\n\n## Grille CSS en pizza\n\nDevinez quoi ? Nous pouvons obtenir une autre grille cool en ajoutant simplement `border-radius` et `overflow` à notre grille ou à nos formes triangulaires. 🎉\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/abYygRW\" src=\"//codepen.io/t_afif/embed/abYygRW?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=abYygRW\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/abYygRW\"\u003e\n  Pizza-like grid\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Grille CSS de pièces de puzzle\n\nCette fois, nous allons jouer avec la propriété CSS `mask` pour que les images ressemblent aux pièces d'un puzzle.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/OJvWKPm\" src=\"//codepen.io/t_afif/embed/OJvWKPm?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=OJvWKPm\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/OJvWKPm\"\u003e\n  Puzzle-like grid of images\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNote : si vous n'avez pas encore utilisé `mask` avec [les dégradés CSS](/articles/les-degrades-css), je vous recommande vivement [cet autre article](https://css-tricks.com/css-borders-using-masks/) que j'ai écrit sur le sujet car il vous aidera pour la suite. Pourquoi des dégradés\u0026nbsp;? Parce que c'est ce que nous utilisons pour obtenir les encoches rondes dans les formes des pièces du puzzle.\n\nLa configuration de la grille devrait être un jeu d'enfant maintenant, alors concentrons-nous plutôt sur la partie masque.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\" src=\"//codepen.io/t_afif/embed/mdxBXwP/e13c06c572e0c93d95d92e98995d05e0?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/mdxBXwP/e13c06c572e0c93d95d92e98995d05e0\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nComme illustré dans la démo ci-dessus, nous avons besoin de deux dégradés pour créer la forme finale. Un dégradé crée un cercle (la partie verte) et l'autre crée la bonne courbe tout en remplissant la partie supérieure.\n\n```css\n--g: 6px; /* contrôle le gap */\n--r: 42px; /* contrôle les formes circulaires */\n\nbackground: radial-gradient(\n    var(--r) at left 50% bottom var(--r),\n    green 95%,\n    #0000\n  ),\n  radial-gradient(\n      calc(var(--r) + var(--g)) at calc(100% + var(--g)) 50%,\n      #0000 95%,\n      red\n    ) top/100% calc(100% - var(--r)) no-repeat;\n```\n\nDeux variables contrôlent la forme. La variable --g n'est rien d'autre que [la gouttière de la grille](/articles/css-grid-layout-guide-complet#gcg). Nous devons tenir compte de celle-ci pour placer correctement nos cercles afin qu'ils se chevauchent parfaitement lorsque le puzzle entier est assemblé. La variable --r contrôle la taille des parties circulaires de la forme du puzzle.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/encoche.webp\" width=\"756\" height=\"369\" alt=\"\"/\u003e\u003c/figure\u003e\n\nMaintenant, nous prenons le même CSS et mettons à jour quelques valeurs dans celui-ci pour créer les trois autres formes\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\" src=\"//codepen.io/t_afif/embed/JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/JjLrByR/c51f0db4eb02c1d75ca1709c1dc0a4a1\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous avons les formes, mais pas les bords superposés dont nous avons besoin pour les faire s'emboîter. Chaque image est limitée à la cellule de la grille dans laquelle elle se trouve, il est donc logique que les formes soient en quelque sorte mélangées pour le moment\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/puzzle_2.webp\" width=\"497\" height=\"478\" alt=\"\"/\u003e\u003c/figure\u003e\n\nNous devons créer un débordement en augmentant la hauteur/largeur des images. D'après la figure ci-dessus, nous devons augmenter la hauteur de la première et de la quatrième image tandis que nous augmentons la largeur de la deuxième et de la troisième. Vous avez probablement déjà deviné que nous devons les augmenter en utilisant la variable --r.\n\n```css\n.gallery \u003e img:is(:nth-child(1), :nth-child(4)) {\n  width: 100%;\n  height: calc(100% + var(--r));\n}\n.gallery \u003e img:is(:nth-child(2), :nth-child(3)) {\n  height: 100%;\n  largeur: calc(100% + var(--r));\n}\n```\n\nOn s'approche\u0026nbsp;!\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/dymVjdz/839e965687fb03aff15cf4d11fc21e09\" src=\"//codepen.io/t_afif/embed/dymVjdz/839e965687fb03aff15cf4d11fc21e09?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=dymVjdz/839e965687fb03aff15cf4d11fc21e09\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/dymVjdz/839e965687fb03aff15cf4d11fc21e09\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous avons créé le chevauchement mais, par défaut, nos images se chevauchent soit à droite (si nous augmentons la largeur), soit en bas (si nous augmentons la hauteur). Mais ce n'est pas ce que nous voulons pour les deuxième et quatrième images. La solution est d'utiliser `place-self: end` sur ces deux images et notre code complet devient\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/OJvWKPm\" src=\"//codepen.io/t_afif/embed/OJvWKPm?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=OJvWKPm\u0026amp;user=t_afif\u0026amp;default-tab=css,result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/OJvWKPm\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVoici un autre exemple où j'utilise un dégradé conique au lieu d'un dégradé radial. Cela nous donne des pièces de puzzle triangulaires tout en gardant les mêmes HTML et CSS sous-jacents.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/RwMLmjr\" src=\"//codepen.io/t_afif/embed/RwMLmjr?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=RwMLmjr\u0026amp;user=t_afif\u0026amp;default-tab=css,result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/RwMLmjr\"\u003e\n  Puzzle Grid of images\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nUn petit dernier pour la route ! Cette fois-ci, j'utilise le `clip-path`, et comme il s'agit d'[une propriété que nous pouvons animer](/articles/comprendre-clip-path), nous obtenons un survol cool en mettant simplement à jour la propriété personnalisée qui contrôle la forme.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/gOezMrY\" src=\"//codepen.io/t_afif/embed/gOezMrY?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=gOezMrY\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/gOezMrY\"\u003e\n  Puzzle Grid of images with hover effect\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n"},{"slug":"utiliser-css-has","title":"Utiliser :has() comme sélecteur de parent et bien plus","author":{"name":"Jen Simmons","lastname":"Simmons"},"original":{"date":"18 août 2022","site":"le blog de webkit","siteUrl":"https://webkit.org/blog/","postUrl":"https://webkit.org/blog/13096/css-has-pseudo-class/","copyright":"2022"},"dateCascade":"25 août 2022","dateMachine":"2O220825","tags":["css","pseudo-classes"],"about":["Combinators","Feature Query",":has"],"excerpt":"Comment appliquer un style à un élément en fonction de ce qui se passe à l'intérieur de cet élément : la révolution :has()","featured":false,"featuredImage":"","order":30,"content":"\nDepuis longtemps les développeurs _front_ rêvent d'avoir un moyen d'appliquer le CSS à un élément en fonction de ce qui se passe à l'intérieur de cet élément.\n\nNous pourrions vouloir par exemple disposer un élément d'article d'une certaine façon s'il y a une image \"héros\" en haut, et d'une autre façon s'il n'y a pas d'image \"héros\". Ou peut-être voulons-nous appliquer des styles différents à un formulaire en fonction de l'état de l'un de ses champs de saisie. Que diriez-vous de donner à une barre latérale une couleur d'arrière-plan si un certain composant est présent dans cette barre latérale, et une couleur d'arrière-plan différente si ce composant n'est pas présent\u0026nbsp;? Les cas d'utilisation de ce type existent depuis longtemps et les développeurs Web ont approché à plusieurs reprises le groupe de travail CSS, les suppliant d'inventer un \"sélecteur de parent\".\n\nAu cours des [vingt dernières années](https://lists.w3.org/Archives/Public/www-style/2002May/0037.html), le groupe de travail CSS a discuté de cette possibilité à de très nombreuses reprises. Le besoin était clair et bien compris. Définir la syntaxe était une tâche réalisable. Mais trouver comment un moteur de navigateur pourrait traiter des patterns circulaires potentiellement très complexes et effectuer les calculs assez rapidement semblait impossible. Les premières versions d'un sélecteur de parent ont été ébauchées pour CSS3, mais elles ont été reportées. Finalement, la pseudo-classe `:has()` a été officiellement définie dans les [sélecteurs CSS de niveau 4](https://www.w3.org/TR/selectors-4/#relational). Mais le fait de disposer d'une norme Web ne suffit pas à faire de `:has()` une réalité. Nous avions encore besoin d'une équipe chargée des navigateurs pour relever le défi très réel des performances. Pendant ce temps, les ordinateurs continuaient à devenir plus puissants et plus rapides chaque année.\n\nEn 2021, [Igalia](https://www.igalia.com/) a commencé à plaider en faveur de `:has()` auprès des équipes d'ingénierie des navigateurs, en [prototypant leurs idées](https://bkardell.com/blog/canihas.html) et en [documentant leurs conclusions](https://github.com/Igalia/explainers/tree/main/css/has) concernant les performances. Le regain d'intérêt pour `:has()` a attiré l'attention des ingénieurs qui travaillent sur WebKit chez Apple. Nous avons commencé à implémenter la pseudo-classe, en réfléchissant aux possibilités d'amélioration des performances nécessaires pour que cela fonctionne. Nous avons discuté pour savoir s'il fallait commencer par une version plus rapide avec un champ d'application très limité, puis essayer de supprimer ces limites si possible... ou commencer par quelque chose qui n'avait aucune limite, et n'appliquer de restrictions que si nécessaire. Nous nous sommes lancés et avons implémenté la version la plus puissante. Nous avons développé un certain nombre de nouvelles optimisations de mise en cache et de filtrage spécifiques à `:has`, et nous avons exploité les stratégies d'optimisation avancées existantes de notre moteur CSS. Et notre approche a fonctionné, prouvant qu'après deux décennies d'attente, il est enfin possible d'implémenter un tel sélecteur avec des [performances fantastiques](https://twitter.com/anttikoivisto/status/1473251189181591554), même en présence de grands arbres DOM et d'un grand nombre de sélecteurs `:has()`.\n\nL'équipe WebKit a livré `:has()` dans l'[aperçu technologique 137 de Safari](https://webkit.org/blog/12156/release-notes-for-safari-technology-preview-137/) en décembre 2021, et dans Safari 15.4 le 14 mars 2022. Igalia a effectué le travail d'ingénierie pour implémenter `:has()` dans Chromium, qui sera livré dans [Chrome 105](https://groups.google.com/a/chromium.org/g/blink-dev/c/bRsbl3wLuyk/m/mt3iSKNHBQAJ?pli=1) le 30 août 2022. On peut supposer que les [autres navigateurs](\u003chttps://caniuse.com/?search=%3Ahas()\u003e) construits sur Chromium ne seront pas loin derrière. Mozilla [travaille actuellement](https://bugzilla.mozilla.org/show_bug.cgi?id=418039) sur l'implémentation de Firefox.\n\nVoyons donc, étape par étape, ce que les développeurs Web peuvent faire avec [cet outil tant désiré](https://2020.stateofcss.com/en-US/opinions/#currently_missing_from_css). Il s'avère que la pseudo-classe `:has()` n'est pas seulement un \"sélecteur de parent\". Après des décennies d'impasses, **ce sélecteur peut faire bien plus**.\n\n## Les bases de `:has()` comme sélecteur de parent\n\nCommençons par les bases. Imaginons que nous voulions appliquer un style à un élément `\u003cfigure\u003e` en fonction du type de contenu de l'image. Parfois, notre _figure_ n'englobe qu'une image.\n\n```css\n\u003cfigure\u003e\n  \u003cimg src=\"flowers.jpg\" alt=\"fleurs de printemps\"\u003e\n\u003c/figure\u003e\n```\n\nAlors que d'autres fois, l'image comporte une légende.\n\n```css\n\u003cfigure\u003e\n  \u003cimg src=\"chien.jpg\" alt=\"chien noir souriant au soleil\"\u003e\n  \u003cfigcaption\u003eMaggie adore être dehors sans laisse.\u003c/figcaption\u003e\n\u003c/figure\u003e\n```\n\nAppliquons maintenant quelques styles à la _figure_ qui ne s'appliqueront que s'il y a une _figcaption_ à l'intérieur de la figure.\n\n```css\nfigure:has(figcaption) {\n  background: white;\n  padding: 0.6rem;\n}\n```\n\nCe sélecteur décrit exactement ce qu'il dit —\u0026nbsp;tout élément _figure_ ayant une _figcaption_ sera sélectionné.\n\nVoici la démo, si vous souhaitez modifier le code et voir ce qui se passe. Veillez à utiliser [un navigateur qui prend en charge `:has()`](https://caniuse.com/css-has) —\u0026nbsp;à ce jour, on parle de Safari.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eYGKNYy\" src=\"//codepen.io/jensimmons/embed/eYGKNYy?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=eYGKNYy\u0026amp;user=jensimmons\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/jensimmons/pen/eYGKNYy\"\u003e\n  :has() Demo #1 — Figure variations\u003c/a\u003e de jensimmons dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nDans cette démo, je cible également tout élément `\u003cfigure\u003e` qui contient un élément `\u003cpre\u003e` en utilisant `figure:has(pre)`.\n\n```css\nfigure:has(pre) {\n  background: rgb(252, 232, 255);\n  border: 3px solid white;\n  padding: 1rem;\n}\n```\n\nEt j'utilise une [requête de fonctionnalité](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Conditional_Rules/Using_Feature_Queries) de sélecteur (_Feature Query_) pour masquer un rappel sur la prise en charge par le navigateur lorsque le navigateur actuel prend en charge `:has()`.\n\n```css\n@supports selector(:has(img)) {\n  small {\n    display: none;\n  }\n}\n```\n\nL'at-rule `@supports selector()` est elle-même [très bien prise en charge](https://caniuse.com/mdn-css_at-rules_supports_selector). Elle peut être incroyablement utile chaque fois que vous voulez utiliser une [requête de fonctionnalité](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Conditional_Rules/Using_Feature_Queries) pour tester la prise en charge par le navigateur d'un sélecteur particulier.\n\nEt enfin, dans cette première démo, j'écris également un sélecteur complexe à l'aide de [la pseudo-classe `:not()`](/articles/sur-not-et-la-specifite). Je veux appliquer `display : flex` à la figure, mais seulement si le seul contenu est une image. Flexbox fait alors en sorte que l'image s'étire pour remplir tout l'espace disponible.\n\nJ'utilise un sélecteur pour cibler tout élément `\u003cfigure\u003e` qui n'a pour enfant aucun élément autre que `\u003cimg\u003e`. Si la figure a une `figcaption`, `pre`, `p` ou un `h1` —\u0026nbsp;ou tout autre élément que `img`\u0026nbsp;— le sélecteur ne s'applique pas.\n\n```css\nfigure:not(:has(:not(img))) {\n  affichage: flex;\n}\n```\n\n`:has()` est sacrément puissant\u0026nbsp;!\n\n## Un exemple pratique utilisant :has() avec CSS Grid\n\nRegardons une deuxième démo où j'ai utilisé `:has()` comme sélecteur de parent pour résoudre facilement un besoin très pratique.\n\nJ'ai plusieurs _cards_ (_cartes_ ou _encarts_) pour des article mis en page à l'aide de [CSS Grid](/tags/cssgrid). Certaines cartes ne contiennent que des titres et du texte, tandis que d'autres ont également une image. Je veux que les cartes avec des images prennent plus de place sur la grille que celles sans image.\n\nJe ne veux pas avoir à faire un travail supplémentaire pour que mon système de gestion de contenu applique une classe ou utilise JavaScript pour la mise en page. Je veux juste écrire un simple sélecteur en CSS qui indiquera au navigateur de faire en sorte que toute carte contenant une image occupera deux lignes et deux colonnes dans la grille.\n\nAvec la pseudo-classe `:has()` c'est très simple\u0026nbsp;:\n\n```css\narticle:has(img) {\n  grid-column: span 2;\n  grid-row: span 2;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_bGoMydw\" src=\"//codepen.io/jensimmons/embed/bGoMydw?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=bGoMydw\u0026amp;user=jensimmons\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/jensimmons/pen/bGoMydw\"\u003e\n  :has() Demo #2 — Teaser cards\u003c/a\u003e de jensimmons dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nCes deux premières démos utilisent des [sélecteurs d'éléments](https://developer.mozilla.org/fr/docs/Web/CSS/Type_selectors) simples datant des premiers jours de CSS, mais tous les sélecteurs peuvent être combinés avec `:has()`, y compris le [sélecteur de classe](https://developer.mozilla.org/fr/docs/Web/CSS/Class_selectors), le [sélecteur d'ID](https://developer.mozilla.org/fr/docs/Web/CSS/ID_selectors), le [sélecteur d'attribut](https://developer.mozilla.org/fr/docs/Web/CSS/Attribute_selectors) —\u0026nbsp;et de puissants combinateurs, comme nous allons le voir maintenant.\n\n## Utiliser :has() avec le combinateur enfant\n\nTout d'abord, un bref rappel de la différence entre le [combinateur descendant](https://www.w3.org/TR/selectors-4/#descendant-combinators) et le [combinateur enfant](https://www.w3.org/TR/selectors-4/#child-combinators) (\u003e). (👉🏾 NdT : pour un tour complet de la question, vous pouvez consulter l'article [Combinateurs et pseudo-classes](/articles/combinateurs-et-pseudo-classes-css) ici-même).\n\nLe combinateur descendant existe depuis le tout début de CSS. Il s'écrit en mettant un espace entre deux sélecteurs simples\u0026nbsp;:\n\n```css\na img {\n  ...;\n}\n```\n\nCela cible tous les éléments `img` qui sont contenus dans un élément `a`, quelle que soit la distance entre le `a` et l'`img` dans l'arbre DOM HTML.\n\n```html\n\u003ca\u003e\n  \u003cfigure\u003e\n    \u003cimg\n      src=\"photo.jpg\"\n      alt=\"n'oublie pas le texte alternatif\"\n      width=\"200\"\n      height=\"100\"\n    /\u003e\n  \u003c/figure\u003e\n\u003c/a\u003e\n```\n\nLe combinateur sécrit en mettant un `\u003e` entre deux sélecteurs —\u0026nbsp;ce qui indique au navigateur de cibler tout ce qui correspond au deuxième sélecteur, mais uniquement lorsque le deuxième sélecteur est _un enfant direct du premier_.\n\n```css\na \u003e img {\n  ...;\n}\n```\n\nPar exemple, ce sélecteur cible tous les éléments `img` enveloppés par un élément `a`, mais uniquement lorsque l'`img` se trouve immédiatement après le `a` dans le HTML.\n\n```html\n\u003ca\u003e\n  \u003cimg\n    src=\"photo.jpg\"\n    alt=\"n'oublie pas le texte alternatif\"\n    width=\"200\"\n    height=\"100\"\n  /\u003e\n\u003c/a\u003e\n```\n\nEn gardant cela à l'esprit, examinons la différence entre les deux exemples suivants. Les deux sélectionnent l'élément `a`, plutôt que l'`img`, puisque nous utilisons `:has()`.\n\n```css\na:has(img) {\n  ...;\n}\na:has(\u003e img) {\n  ...;\n}\n```\n\nLa première sélectionne tout élément `a` avec une `img` à l'intérieur —\u0026nbsp;n'importe où dans la structure HTML. Alors que la seconde sélectionne un élément uniquement si l'`img` est un enfant direct de l'élément `a`.\n\nLes deux peuvent être utiles\u0026nbsp;; ils accomplissent des choses différentes.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_BaYoWea\" src=\"//codepen.io/jensimmons/embed/BaYoWea?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=BaYoWea\u0026amp;user=jensimmons\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/jensimmons/pen/BaYoWea\"\u003e\n  :has() Demo #3 — Descendant combinator vs Child combinator\n\u003c/a\u003e de jensimmons dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl existe encore deux autres types de combinateurs —\u0026nbsp;tous deux sont des frères et sœurs. Et c'est grâce à eux que `:has()` devient plus qu'un sélecteur de parent.\n\n## Utiliser :has() avec des combinateurs frères et sœurs\n\nPassons en revue les deux sélecteurs de relations \"fraternelles\". Il y a le combinateur de _[next-siblings](https://www.w3.org/TR/selectors-4/#adjacent-sibling-combinators)_ (`+`) et le combinateur _[subsequent-siblings](https://www.w3.org/TR/selectors-4/#general-sibling-combinators)_ (`~`) de frères et sœurs suivants.\n\nLe combinateur next-sibling (`+`) sélectionne _uniquement_ les paragraphes qui suivent _directement_ un élément h2\u0026nbsp;:\n\n```css\nh2 + p\n```\n\n```html\n\u003ch2\u003eLes titres\u003c/h2\u003e\n\u003cp\u003e\n  Paragraphe qui est sélectionné par \"h2 + p\", car il se trouve directement\n  après \"h2\".\n\u003c/p\u003e\n.\n```\n\nLe combinateur subsequent-siblings (`~`) sélectionne tous les paragraphes qui viennent après un élément h2. Ils doivent être frères et sœurs, mais il peut y avoir un nombre quelconque d'autres éléments HTML entre les deux.\n\n```css\nh2 ~ p\n```\n\n```html\n\u003ch2\u003eLes titres\u003c/h2\u003e\n\u003ch3\u003eAutre chose\u003c/h3\u003e\n\u003cp\u003eParagraphe qui est sélectionné par \"h2 ~ p\".\u003c/p\u003e\n\u003cp\u003eCe paragraphe est également sélectionné.\u003c/p\u003e\n```\n\nNotez que `h2 + p` et `h2 ~ p` sélectionnent tous deux les éléments paragraphes, et non les titres h2. Comme d'autres sélecteurs (pensez à `img`), c'est le dernier élément listé qui est ciblé par le sélecteur. Mais que faire si nous voulons cibler le h2\u0026nbsp;? Eh bien nous pouvons utiliser les combinateurs frères et sœurs avec `:has()`.\n\nCombien de fois avez-vous souhaité pouvoir ajuster les marges d'un titre en fonction de l'élément qui le suit\u0026nbsp;? C'est maintenant facile. Ce code nous permet de sélectionner tout h2 ayant un p immédiatement après lui.\n\n```css\nh2:has(+ p) {\n  margin-bottom: 0;\n}\n```\n\nIncroyable.\n\nEt si nous voulions faire cela pour les six éléments de titre, sans écrire six copies du sélecteur. Nous pouvons utiliser `:is()` pour simplifier notre code.\n\n```css\n:is(h1, h2, h3, h4, h5, h6):has(+ p) {\n  margin-bottom: 0;\n}\n```\n\nMais que faire si nous voulons écrire ce code pour plus d'éléments que de simples paragraphes\u0026nbsp;? Éliminons la marge inférieure de tous les titres lorsqu'ils sont suivis de paragraphes, de légendes, d'exemples de code et de listes\u0026nbsp;:\n\n```css\n:is(h1, h2, h3, h4, h5, h6):has(+ :is(p, figcaption, pre, dl, ul, ol)) {\n  margin-bottom: 0;\n}\n```\n\nLa combinaison de `:has()` avec les combinateurs descendants, les combinateurs enfants (`\u003e`), les combinateurs frères et sœurs suivants (`+`) et les combinateurs frères et sœurs subséquents (`~`) ouvre un monde de possibilités. Mais ce n'est encore que le début.\n\n## Styler les états de formulaire sans JS\n\nIl y a beaucoup de [pseudo-classes](https://developer.mozilla.org/fr/docs/Web/CSS/Pseudo-classes) fantastiques qui peuvent être utilisées à l'intérieur de `has:()`. En fait, cela révolutionne ce que les pseudo-classes peuvent faire. Auparavant, les pseudo-classes n'étaient utilisées que pour styler un élément en fonction d'un état spécial, ou pour styler l'un de ses enfants. Maintenant, **les pseudo-classes peuvent être utilisées pour capturer un état**, sans JavaScript, et styler n'importe quoi dans le DOM en fonction de cet état.\n\nLes champs de saisie des formulaires constituent un moyen puissant de capturer un tel état. Les pseudo-classes spécifiques aux formulaires incluent `:autofill`, `:enabled`, `:disabled`, `:read-only`, `:read-write`, `:placeholder-shown`, `:default`, `:checked`, `:indeterminate`, `:valid`, `:invalid`, `:in-range`, `:out-of-range`, `:required` et `:optional`.\n\nRésolvons l'un des cas d'utilisation que j'ai décrits dans l'introduction —\u0026nbsp;le besoin de longue date de styler une étiquette de formulaire en fonction de l'état du champ de saisie. Commençons par un formulaire de base.\n\n```html\n\u003cform\u003e\n  \u003cdiv\u003e\n    \u003clabel for=\"name\"\u003eNom\u003c/label\u003e\n    \u003cinput type=\"text\" id=\"name\" /\u003e\n  \u003c/div\u003e\n  \u003cdiv\u003e\n    \u003clabel for=\"site\"\u003eSite web\u003c/label\u003e\n    \u003cinput type=\"url\" id=\"site\" /\u003e\n  \u003c/div\u003e\n  \u003cdiv\u003e\n    \u003clabel for=\"email\"\u003eEmail\u003c/label\u003e\n    \u003cinput type=\"email\" id=\"email\" /\u003e\n  \u003c/div\u003e\n\u003c/form\u003e\n```\n\nJ'aimerais appliquer un arrière-plan à l'ensemble du formulaire lorsque l'un des champs est en focus.\n\n```css\nform:has(:focus-visible) {\n  background: antiquewhite;\n}\n```\n\nJ'aurais pu utiliser `form:focus-within` à la place, mais cela se comporterait comme `form:has(:focus)`. [La pseudo-classe `:focus`](https://developer.mozilla.org/fr/docs/Web/CSS/:focus) applique toujours le CSS lorsqu'un champ est en focus. [La pseudo-classe `:focus-visible`](https://developer.mozilla.org/fr/docs/Web/CSS/:focus-visible) fournit un moyen fiable de styler un indicateur de focus uniquement lorsque le navigateur en dessinerait un nativement, en utilisant [la même heuristique complexe que le navigateur](https://webkit.org/blog/12179/the-focus-indicated-pseudo-class-focus-visible/) utilise pour déterminer s'il faut ou non appliquer un anneau de focus.\n\nMaintenant, imaginons que je veuille styler les autres champs, ceux qui ne sont pas en focus —\u0026nbsp;en changeant la couleur du texte de leur étiquette et la couleur de la bordure de l'entrée. Avant `:has()`, cela nécessitait JavaScript. Maintenant, nous pouvons utiliser ce CSS.\n\n```css\nform:has(:focus-visible) div:has(input:not(:focus-visible)) label {\n  color: peru;\n}\nform:has(:focus-visible) div:has(input:not(:focus-visible)) input {\n  border: 2px solid peru;\n}\n```\n\nQue dit ce sélecteur ? Si l'un des contrôles de ce formulaire a le focus, et que l'élément d'entrée de ce contrôle de formulaire particulier n'a pas le focus, alors change la couleur du texte de cette étiquette en `peru`. Et change la bordure du champ de saisie pour qu'elle soit `2px solid peru`.\n\nVous pouvez voir ce code en action dans la démo suivante en cliquant à l'intérieur d'un des champs de texte. L'arrière-plan du formulaire change, comme je l'ai décrit précédemment. Et les couleurs de l'étiquette et de la bordure de saisie des champs qui ne sont pas en focus changent également.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_BarwGpV\" src=\"//codepen.io/jensimmons/embed/BarwGpV?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=BarwGpV\u0026amp;user=jensimmons\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"550\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/jensimmons/pen/BarwGpV\"\u003e\n  :has() Demo #4 — Form fields\n\u003c/a\u003e de jensimmons dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nDans cette même démo, j'aimerais aussi améliorer l'avertissement à l'utilisateur lorsqu'il y a une erreur dans la façon dont il a rempli le formulaire. Depuis longtemps déjà, nous pouvons facilement mettre un encadré rouge autour d'une entrée invalide avec ce CSS.\n\n```css\ninput:invalid {\n  outline: 4px solid red;\n  border: 2px solid red;\n}\n```\n\nMaintenant, avec `:has()`, nous pouvons également rendre le texte de l'étiquette rouge :\n\n```css\ndiv:has(input:invalid) label {\n  color: red;\n}\n```\n\nVous pouvez voir le résultat en tapant quelque chose dans le champ du site Web ou de l'adresse électronique qui n'est pas une URL ou une adresse électronique entièrement formée. Les deux sont invalides et déclenchent donc une bordure rouge et une étiquette rouge, avec un \"X\".\n\n## Basculement en mode sombre sans JS\n\nEt enfin, dans cette même démo, j'utilise une case à cocher pour permettre à l'utilisateur de basculer entre un thème clair et un thème foncé.\n\n```css\nbody:has(input[type='checkbox']:checked) {\n  background: blue;\n  --primary-color: white;\n}\n\nbody:has(input[type='checkbox']:checked) form {\n  border: 4px solid white;\n}\n\nbody:has(input[type='checkbox']:checked) form:has(:focus-visible) {\n  background: navy;\n}\n\nbody:has(input[type='checkbox']:checked) input:focus-visible {\n  outline: 4px solid lightsalmon;\n}\n```\n\nJ'ai stylé la case à cocher du mode sombre à l'aide de styles personnalisés, mais elle ressemble toujours à une case à cocher. Avec des styles plus complexes, je pourrais [créer une bascule (toggle) en CSS](https://codepen.io/jemin/pen/RwaqNoz?editors=1100).\n\nDe la même façon, je pourrais utiliser un menu de sélection pour proposer à un utilisateur [plusieurs thèmes](https://adactio.com/about/site/) pour mon site.\n\n```css\nbody:has(option[value='pony']:checked) {\n  --font-family: cursive;\n  --text-color: #b10267;\n  --body-background: #ee458e;\n  --main-background: #f4b6d2;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vYdKKbL\" src=\"//codepen.io/jensimmons/embed/vYdKKbL?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=vYdKKbL\u0026amp;user=jensimmons\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/jensimmons/pen/vYdKKbL\"\u003e\n  :has() Demo #5 — Theme picker via Select\n\u003c/a\u003e de jensimmons dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nChaque fois qu'il y a une occasion d'utiliser CSS au lieu de JavaScript, je la saisis. Cela permet d'obtenir une expérience plus rapide et un site Web plus robuste. JavaScript peut faire des choses incroyables, et nous devrions l'utiliser quand c'est le bon outil pour le travail. Mais si nous pouvons obtenir le même résultat en utilisant uniquement HTML et CSS, c'est encore mieux.\n\n## Et plus encore\n\nEn regardant [les autres pseudo-classes](https://developer.mozilla.org/fr/docs/Web/CSS/Pseudo-classes), il y en a tellement qui peuvent être combinées avec `:has()`. Imaginez les possibilités avec `:nth-child`, `:nth-last-child`, `:first-child`, `:last-child`, `:only-child`, `:nth-of-type`, `:nth-last-of-type`, `:first-of-type`, `:last-of-type`, `:only-of-type`. [La toute nouvelle pseudo-classe `:modal`](https://developer.mozilla.org/fr/docs/Web/CSS/:modal) est déclenchée lorsqu'un dialogue est dans l'état ouvert. Avec `:has(:modal)`, vous pouvez donner un style à n'importe quoi dans le DOM selon que le dialogue est ouvert ou fermé.\n\nCependant, toutes les pseudo-classes ne sont pas actuellement prises en charge dans `:has()` dans tous les navigateurs, alors testez votre code dans plusieurs navigateurs. Actuellement, les pseudo-classes dynamiques de médias ne fonctionnent pas, comme `:playing`, `:paused`, `:muted`, etc. Elles pourraient très bien fonctionner à l'avenir, alors si vous lisez ceci dans quelques temps, testez-les\u0026nbsp;! De plus, la prise en charge de l'invalidation des formulaires est actuellement absente dans certaines situations spécifiques, donc les changements d'état dynamiques de ces pseudo-classes peuvent ne pas être mis à jour avec `:has()`.\n\nSafari 16 ajoutera la prise en charge de `:has(:target)`, ce qui ouvrira des possibilités intéressantes pour écrire du code qui recherche dans l'URL actuelle un fragment correspondant à l'ID d'un élément spécifique. Par exemple, si un utilisateur clique sur une table des matières en haut d'un document et descend jusqu'à la section de la page correspondant à ce lien, [`:target` permet de styler ce contenu de manière unique](https://developer.mozilla.org/fr/docs/Web/CSS/:target), en se basant sur le fait que l'utilisateur a cliqué sur le lien pour y arriver. Et `:has()` ouvre la voie aux possibilités d'un tel style.\n\n**À noter : le groupe de travail CSS [a décidé](https://github.com/w3c/csswg-drafts/issues/7463) d'interdire tous les pseudo-éléments existants à l'intérieur de :has()**. Par exemple, article:has(p::first-line) et ol:has(li::marker) ne fonctionneront pas. Idem pour ::before et ::after.\n\n## La révolution :has()\n\nC'est une petite révolution dans la façon d'écrire les sélecteurs CSS, qui ouvre un monde de possibilités jusqu'alors impossibles ou souvent sans intérêt. On a l'impression que même si nous reconnaissons immédiatement l'utilité de `:has()`, nous n'avons aucune idée de ce qui est vraiment possible. Au cours des prochaines années, les personnes qui réalisent des démonstrations et se plongent dans ce que CSS peut faire trouveront des idées incroyables, étirant `:has()` jusqu'à ses limites.\n\nMichelle Barker a créé [une démo fantastique](https://codepen.io/michellebarker/pen/vYRVbQX?editors=1100) qui déclenche l'animation des tailles de pistes d'une grille css grâce à l'utilisation de `:has()` et des états de survol. Vous pouvez en savoir plus à ce sujet dans [son article de blog](https://css-irl.info/animated-grid-tracks-with-has/). La prise en charge des pistes de grille animées sera disponible dans [Safari 16](https://webkit.org/blog/12824/news-from-wwdc-webkit-features-in-safari-16-beta/). Vous pouvez essayer cette démo aujourd'hui dans [Safari Technology Preview](https://developer.apple.com/safari/resources/) ou Safari 16 beta.\n\n**La partie la plus difficile de `:has()` sera d'ouvrir nos esprits à ses possibilités. Nous nous sommes tellement habitués aux limites que nous impose l'absence de sélecteur de parent. Nous devons maintenant briser ces habitudes**.\n\nC'est aussi une raison supplémentaire d'utiliser le CSS pur sucre, et de ne pas se limiter aux classes définies dans un framework. En écrivant votre propre CSS, personnalisé pour votre projet, vous pouvez tirer pleinement parti de toutes les puissantes capacités des navigateurs d'aujourd'hui.\n\nÀ quoi allez-vous utiliser `:has()`\u0026nbsp;? En décembre dernier, j'ai [demandé sur Twitter](https://twitter.com/jensimmons/status/1474060698124697606) quels cas d'utilisation les gens pourraient avoir pour `:has()`, et j'ai reçu de nombreuses réponses avec des idées incroyables. J'ai hâte de voir les vôtres.\n"},{"slug":"zoomer-les-images-dans-une-grille","title":"Zoomer les images dans une grille","author":{"name":"Temani Afif","lastname":"Afif"},"original":{"date":"8 août 2022","site":"CSS Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/zooming-images-in-a-grid-layout/","copyright":"2022"},"dateCascade":"9 août 2022","dateMachine":"2O220809","tags":["cssgrid","css"],"about":[],"excerpt":"Temani Afif ajoute un effet de survol aux images dans une grille implicite, pas si simple, mais Temani a le don rare de décortiquer les pbs pour les résoudre simplement.","featured":false,"featuredImage":"/images/grid_cells.webp","order":null,"content":"\nIl est facile de créer une grille d'images, grâce à [CSS Grid](/tags/cssgrid). Mais il n'est pas toujours évident de faire des choses amusantes avec la grille une fois les images placées.\n\nPar exemple, vous voulez ajouter un effet de survol aux images pour qu'elles grandissent et s'agrandissent au-delà des rangées et des colonnes où elles se trouvent\u0026nbsp;? Nous pouvons le faire\u0026nbsp;!\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_MWVyaMe\" src=\"//codepen.io/t_afif/embed/MWVyaMe?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=MWVyaMe\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/MWVyaMe\"\u003e\n  CSS grid with expandable images\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nCool, non\u0026nbsp;? Si vous vérifiez le code, vous ne trouverez pas de JavaScript, ni de sélecteurs complexes, ni même de [chiffres magiques](https://css-tricks.com/magic-numbers-in-css/). Et ce n'est qu'un exemple parmi tant d'autres que nous allons explorer\u0026nbsp;!\n\n## Création de la grille\n\nLe code HTML pour créer la grille est aussi simple qu'une liste d'images dans un conteneur. Nous n'avons pas besoin de plus que cela.\n\n```html\n\u003cdiv class=\"gallery\"\u003e\n  \u003cimg /\u003e\n  \u003cimg /\u003e\n  \u003cimg /\u003e\n  \u003c!-- etc. --\u003e\n\u003c/div\u003e\n```\n\nPour le CSS, nous commençons par définir la grille en utilisant ce qui suit\u0026nbsp;:\n\n```css\n.gallery {\n  --s: 150px; /* contrôle la taille */\n  --g: 10px; /* contrôle les gouttières (gap) */\n\n  display: grid;\n  gap: var(--g);\n  width: calc(\n    3 * var(--s) + 2 * var(--g)\n  ); /* 3 fois la taille plus 2 fois la gouttière */\n  aspect-ratio: 1;\n  grid-template-columns: repeat(3, auto);\n}\n```\n\nEn résumé, nous avons deux variables, l'une qui contrôle la taille des images et l'autre qui définit la taille de l'espace entre les images. L'[aspect-ratio](https://css-tricks.com/almanac/properties/a/aspect-ratio/) permet de garder les choses en proportion.\n\nVous vous demandez peut-être pourquoi nous ne définissons que trois colonnes et aucune rangée. Non, je n'ai pas oublié les rangées, mais nous n'avons pas besoin de les définir explicitement. CSS Grid est capable de [placer automatiquement des éléments sur des rangées et des colonnes implicites](/articles/css-grid-grille-implicite-et-placement-automatique), ce qui signifie qu'il nous fournit autant de rangées que nécessaire, quel que soit le nombre d'images que nous lui envoyons. Nous pouvons définir explicitement les rangées si nous le voulons, mais dans ce cas nous devons ajouter `grid-auto-flow : column` pour nous assurer que le navigateur créera les colonnes nécessaires pour nous.\n\nVoici un exemple pour illustrer les deux cas. La différence est que l'un suit un flux dans le sens des rangées et l'autre dans le sens des colonnes.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_GRxZVyL\" src=\"//codepen.io/t_afif/embed/GRxZVyL?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=GRxZVyL\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/GRxZVyL\"\u003e\n  difference between row/column\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nMaintenant que notre grille est en place, il est temps d'ajouter un peu de style à nos images\u0026nbsp;:\n\n```css\n.gallery \u003e img {\n  width: 0;\n  height: 0;\n  min-height: 100%;\n  min-width: 100%;\n  object-fit: cover;\n}\n```\n\nL'effet de survol que nous réalisons repose sur ce CSS. Il vous semblera probablement étrange que nous créions des images sans largeur ni hauteur, mais avec une largeur et une hauteur minimales de 100 %. Mais vous verrez qu'il s'agit d'une astuce assez pratique pour ce que nous essayons de réaliser.\n\nCe que je fais ici, c'est dire au navigateur que les images doivent avoir une largeur et une hauteur nulles, mais qu'elles doivent aussi avoir une hauteur minimale égale à 100 %... mais 100 % de quoi\u0026nbsp;? Lorsqu'on utilise des pourcentages, la valeur est _[relative à quelque chose d'autre](https://css-tricks.com/its-all-relative/)_. Dans notre cas, l'image est placée à l'intérieur d'une [cellule de la grille](/articles/css-grid-layout-guide-complet/#gridcell) et nous devons connaître sa taille pour savoir à quoi correspond le pourcentage de 100 %.\n\nLe navigateur ignorera d'abord la valeur `min-height : 100%` pour calculer la taille des cellules de la grille, mais il utilisera la valeur `height : 0` dans son calcul. Cela signifie que nos images ne contribueront pas à la taille des cellules de la grille... _car elles n'ont techniquement aucune taille physique_. Il en résultera trois colonnes et rangées égales basées sur la taille de la grille (que nous avons définie sur la largeur et le ratio d'aspect de la galerie). La hauteur de chaque cellule de la grille n'est rien d'autre que la variable `--s` que nous avons définie tout à l'heure (idem pour la largeur).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid_cells.webp\" width=\"683\" height=\"543\" alt=\"\"/\u003e\u003c/figure\u003e\n\nMaintenant que nous avons les dimensions des cellules de notre grille, le navigateur va l'utiliser avec `min-height : 100%` (et `min-width : 100%`) ce qui va forcer les images à remplir complètement l'espace de chaque cellule de la grille. Tout cela peut sembler un peu confus, mais l'idée principale est de s'assurer que la grille définit la taille des images plutôt que l'inverse. Je ne veux pas que l'image définisse la taille de la grille et vous comprendrez pourquoi lorsque nous aurons ajouté l'effet de survol.\n\n## Création de l'effet au survol\n\nCe que nous devons faire, c'est augmenter l'échelle des images lorsqu'elles sont survolées. Pour ce faire, nous pouvons ajuster la largeur et la hauteur de l'image au moment du `:hover`\u0026nbsp;:\n\n```css\n.gallery {\n  --f: 1.5; /* contrôle le facteur d'échelle */\n}\n\n.gallery img:hover {\n  width: calc(var(--s) * var(--f));\n  height: calc(var(--s) * var(--f));\n}\n```\n\nJ'ai ajouté une nouvelle variable personnalisée, `--f`, au mélange comme facteur d'échelle pour contrôler la taille au survol. Remarquez que je multiplie la variable de taille, `--s`, par celle-ci pour calculer la nouvelle taille de l'image.\n\n\u003e _Mais tu avais dit que la taille de l'image doit être de 0. Que se passe-t-il\u0026nbsp;? Je suis perdu..._\n\nCe que j'ai dit reste vrai, mais je fais une exception pour l'image survolée. Je dis au navigateur qu'une seule image aura une taille différente de zéro —\u0026nbsp;elle contribuera donc à la dimension de la grille\u0026nbsp;— tandis que toutes les autres resteront égales à 0.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/two-grids.webp\" width=\"683\" height=\"543\" alt=\"\"/\u003e\u003c/figure\u003e\n\nLa partie gauche montre la grille dans son état naturel, sans aucune image survolée, ce que montre la partie droite. Toutes les cellules de la grille sur le côté gauche sont de taille égale puisque toutes les images n'ont pas de dimensions physiques.\n\nSur le côté droit, la deuxième image de la première rangée est survolée, ce qui lui donne des dimensions qui affectent la taille de la cellule de la grille. Le navigateur agrandit cette cellule de grille spécifique au survol, ce qui contribue à la taille globale. Et comme la taille de l'ensemble de la grille est définie (puisque nous avons défini une largeur fixe pour la `.galerie`), les autres cellules de la grille vont logiquement répondre en devenant plus petites afin de conserver la taille globale de la `.galerie`.\n\nC'est notre effet de zoom en action\u0026nbsp;! En augmentant la taille d'une seule image, nous affectons l'ensemble de la configuration de la grille, et nous avons dit précédemment que la grille définit la taille des images de sorte que chaque image s'étire dans sa cellule de grille pour remplir tout l'espace.\n\nÀ cela, nous ajoutons une touche de transition et utilisons [objet-fit](https://la-cascade.io/articles/utiliser-css-object-fit) pour éviter la distorsion des images et l'illusion est parfaite\u0026nbsp;!\n\nJe sais que la logique de cette astuce n'est pas facile à comprendre. Ne vous inquiétez pas si vous ne la comprenez pas complètement. Le plus important est de comprendre la structure du code utilisé et comment le modifier pour obtenir plus de variations. C'est ce que nous allons faire maintenant\u0026nbsp;!\n\n## Ajout d'images supplémentaires\n\nNous avons créé une grille 3×3 pour expliquer l'astuce principale, mais vous avez deviné que nous n'avions pas besoin de nous arrêter là. Nous pouvons faire varier le nombre de colonnes et de rangées et ajouter autant d'images que nous le souhaitons.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_abYNPaG\" src=\"//codepen.io/t_afif/embed/abYNPaG?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=abYNPaG\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/abYNPaG\"\u003e\n  Variable columns/rows\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n```css\n.gallery {\n  --n: 3; /* nombre de lignes*/\n  --m: 4; /* nombre de colonnes */\n  --s: 150px; /* contrôle de la taille */\n  --g: 10px; /* contrôle des gouttières */\n  --f: 1.5; /* contrôle le facteur d'échelle */\n\n  display: grid;\n  gap: var(--g);\n  width: calc(var(--m) * var(--s) + (var(--m) - 1) * var(--g));\n  height: calc(var(--n) * var(--s) + (var(--n) - 1) * var(--g));\n  grid-template-columns: repeat(var(--m), auto);\n}\n```\n\nNous avons deux nouvelles variables pour le nombre de lignes et de colonnes. Ensuite, nous définissons simplement la largeur et la hauteur de notre grille en les utilisant. Même chose pour `grid-template-columns` qui utilise la variable `--m`. Et comme précédemment, nous n'avons pas besoin de définir explicitement les rangées puisque la fonction de placement automatique de la grille CSS fera le travail pour nous, quel que soit le nombre d'éléments d'image que nous utilisons.\n\nPourquoi pas des valeurs différentes pour la largeur et la hauteur\u0026nbsp;? Nous pouvons le faire\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ExEKGGL\" src=\"//codepen.io/t_afif/embed/ExEKGGL?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=ExEKGGL\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/ExEKGGL\"\u003e\n  Variable width/height\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n```css\n.gallery {\n  --n: 3; /* nombre de rangées*/\n  --m: 4; /* nombre de colonnes */\n  --h: 120px; /* contrôle de la hauteur */\n  --w: 150px; /* contrôle la largeur */\n  --g: 10px; /* contrôle des gouttières */\n  --f: 1.5; /* contrôle le facteur d'échelle */\n\n  display: grid;\n  gap: var(--g);\n  width: calc(var(--m) * var(--w) + (var(--m) - 1) * var(--g));\n  height: calc(var(--n) * var(--h) + (var(--n) - 1) * var(--g));\n  grid-template-columns: repeat(var(--m), auto);\n}\n\n.gallery img:hover {\n  width: calc(var(--w) * var(--f));\n  height: calc(var(--h) * var(--f));\n}\n```\n\nNous remplaçons `--s` par deux variables, une pour la largeur, `--w`, et une autre pour la hauteur, `--h`. Puis nous ajustons tout le reste en conséquence.\n\nNous avons donc commencé par une grille avec une taille et un nombre d'éléments fixes, mais nous avons ensuite créé un nouvel ensemble de variables pour obtenir la configuration que nous voulons. Tout ce que nous avons à faire est d'ajouter autant d'images que nous le souhaitons et d'ajuster les variables CSS en conséquence. Les combinaisons sont illimitées\u0026nbsp;!\n\n## Une galerie d'images en plein écran\n\nEt pourquoi pas une version plein écran\u0026nbsp;? Oui, c'est également possible. Tout ce dont nous avons besoin c'est de savoir quelles valeurs nous devons attribuer à nos variables. Si nous voulons N rangées d'images et que nous voulons que notre grille soit en plein écran, nous devons d'abord résoudre une hauteur de `100vh` :\n\n```css\nvar(--n) * var(--h) + (var(--n) - 1) * var(--g) = 100vh\n```\n\nMême logique pour la largeur, mais en utilisant `vw` au lieu de `vh` :\n\n```\nvar(--m) * var(--w) + (var(--m) - 1) * var(--g) = 100vw\n```\n\nOn fait le calcul pour obtenir :\n\n```css\n--w : (100vw - (var(--m) - 1) * var(--g)) / var(--m)\n--h : (100vh - (var(--n) - 1) * var(--g)) / var(--n)\n```\n\nC'est fait\u0026nbsp;!\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eYMZbwy\" src=\"//codepen.io/t_afif/embed/eYMZbwy?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=eYMZbwy\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/eYMZbwy\"\u003e\n  Full screen grid\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl s'agit exactement du même code HTML, mais avec quelques variables mises à jour qui modifient la taille et le comportement de la grille.\n\nNotez que j'ai omis la formule que nous avions précédemment définie pour la largeur et la hauteur du `.gallery` et que je l'ai remplacée par `100vw` et `100vh`, respectivement. La formule nous donnera le même résultat mais comme nous savons quelle valeur nous voulons, nous pouvons nous débarrasser de toute cette complexité supplémentaire.\n\nNous pouvons également simplifier les formules `--h` et `--w` en supprimant la gouttière de l'équation en faveur de ceci\u0026nbsp;:\n\n```css\n--h: calc(\n  100vh / var(--n)\n); /* Hauteur de la fenêtre divisée par le nombre de rangées */\n--w: calc(\n  100vw / var(--m)\n); /* Largeur de la fenêtre divisée par le nombre de colonnes */\n```\n\nL'image survolée sera donc un peu plus grande que dans l'exemple précédent, mais ce n'est pas grave puisque nous pouvons contrôler l'échelle avec la variable `--f` que nous utilisons comme multiplicateur.\n\nEt puisque les variables sont utilisées à un seul endroit, nous pouvons encore simplifier le code en les supprimant complètement :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eYMZxYV\" src=\"//codepen.io/t_afif/embed/eYMZxYV?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=eYMZxYV\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/eYMZxYV\"\u003e\n  Simplifying the formula #2\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl est important de noter que cette optimisation s'applique uniquement à l'exemple en plein écran et non aux exemples que nous avons couverts. Cet exemple est un cas particulier où nous pouvons alléger le code en supprimant une partie du travail de calcul complexe dont nous avions besoin dans les autres exemples.\n\nNous disposons en fait de tout ce dont nous avons besoin pour créer le modèle populaire de panneaux extensibles\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_WNzxeOO\" src=\"//codepen.io/t_afif/embed/WNzxeOO?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=WNzxeOO\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/WNzxeOO\"\u003e\n  One dimension grid\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Creusons encore plus profond\n\nAvez-vous remarqué que notre facteur d'échelle peut être inférieur à 1\u0026nbsp;? Nous pouvons définir la taille de l'image survolée comme étant inférieure à `--h` ou `--w`, mais l'image s'agrandit au survol.\n\nLa taille initiale de la cellule de la grille est égale à `--w` et `--h`, alors pourquoi une valeur plus petite rend-elle la cellule de la grille plus grande\u0026nbsp;? La cellule ne devrait-elle pas devenir plus petite, ou au moins conserver sa taille initiale\u0026nbsp;? Et quelle est la taille finale de la cellule de la grille\u0026nbsp;?\n\nNous devons approfondir la manière dont l'algorithme CSS Grid calcule la taille des cellules de la grille. Et cela implique de comprendre l'alignement extensible (_stretch alignment_) par défaut de CSS Grid.\n\nVoici un exemple pour comprendre la logique.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\" src=\"//codepen.io/t_afif/embed/YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e?height=330\u0026amp;theme-id=light\u0026amp;slug-hash=YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"330\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/YzaWKYX/e4ecf08477c67eb6406a99b10653ee0e\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nDans la partie gauche de la démo, j'ai défini une double colonne avec une largeur automatique. Nous obtenons le résultat intuitif : deux colonnes égales (et deux cellules de grille égales). Mais la grille que j'ai définie sur le côté droit de la démo, où je mets à jour l'alignement à l'aide de `place-content : start`, semble ne rien avoir.\n\nDevTools nous aide en montrant ce qui se passe réellement dans les deux cas\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/dt-grids1.webp\" width=\"574\" height=\"269\" alt=\"\"/\u003e\u003c/figure\u003e\n\nDans la deuxième grille, nous avons deux colonnes, mais leurs largeurs sont égales à zéro, de sorte que nous obtenons deux cellules de grille qui sont effondrées dans le coin supérieur gauche du conteneur de la grille. Il ne s'agit pas d'un bogue mais du résultat logique de l'alignement de la grille. Lorsque nous dimensionnons une colonne (ou une rangée) avec `auto`, cela signifie que c'est son contenu qui dicte sa taille —\u0026nbsp;mais nous avons une `div` vide sans contenu à placer.\n\nCependant, comme l'alignement par défaut est l'alignement `stretch` et que nous avons suffisamment d'espace à l'intérieur de notre grille, le navigateur va étirer les deux cellules de la grille de manière égale pour couvrir toute cette zone. C'est ainsi que la grille de gauche se retrouve avec deux colonnes égales.\n\nExtrait de la [spécification](https://www.w3.org/TR/css-grid-1/#grid-align) :\n\n\u003e _Notez que certaines valeurs de [justify-content](https://www.w3.org/TR/css-align-3/#propdef-justify-content) et [align-content](https://www.w3.org/TR/css-align-3/#propdef-align-content) peuvent entraîner l'espacement des pistes ([space-around](https://www.w3.org/TR/css-align-3/#valdef-align-content-space-around), [space-between](https://www.w3.org/TR/css-align-3/#valdef-align-content-space-between), [space-evenly](https://www.w3.org/TR/css-align-3/#valdef-align-content-space-evenly)) ou leur redimensionnement ([stretch](https://www.w3.org/TR/css-align-3/#valdef-align-content-stretch))_.\n\nNotez le mot \"redimensionner\" qui est la clé ici. Dans le dernier exemple, j'ai utilisé `place-content`, qui est l'abréviation de `justify-content` et `align-content`.\n\nEt ceci est caché quelque part dans les spécifications de l'[algorithme de redimensionnement de la grille](https://www.w3.org/TR/css-grid-1/#algo-stretch) :\n\n\u003e _Cette étape développe les pistes qui ont une fonction de [dimensionnement de piste max](https://www.w3.org/TR/css-grid-1/#max-track-sizing-function) automatique en divisant tout [espace libre](https://www.w3.org/TR/css-grid-1/#free-space) positif et [défini](https://www.w3.org/TR/css-sizing-3/#definite) restant_ de manière égale entre elles. _Si l'espace libre est [indéfini](https://www.w3.org/TR/css-sizing-3/#indefinite), mais que le [conteneur de la grille](https://www.w3.org/TR/css-grid-1/#grid-container) a une [largeur/hauteur minimale](https://www.w3.org/TR/CSS2/visudet.html#propdef-min-width) définie, utilisez cette taille pour calculer l'espace libre pour cette étape_.\n\nL'expression \"de manière égale\" explique pourquoi nous nous retrouvons avec des cellules de grille égales, mais elle s'applique à \"l'espace libre\", qui est très important.\n\nReprenons l'exemple précédent et ajoutons du contenu à l'une des `div`\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\" src=\"//codepen.io/t_afif/embed/YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a?height=330\u0026amp;theme-id=light\u0026amp;slug-hash=YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"330\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/YzaWKLy/fafb5ed1e0f73bb07f99bbd8feca8c1a\"\u003e\n  Untitled\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous avons ajouté une image carrée de 50px. Voici une illustration de la façon dont chaque grille de notre exemple réagit à cette image :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/dt-grids2.webp\" width=\"599\" height=\"280\" alt=\"\"/\u003e\u003c/figure\u003e\n\nDans le premier cas, nous pouvons voir que la première cellule (en rouge) est plus grande que la seconde (en bleu). Dans le deuxième cas, la taille de la première cellule change pour s'adapter à la taille physique de l'image tandis que la deuxième cellule reste sans dimension. L'espace libre est divisé de manière égale, mais la première cellule a plus de contenu, ce qui la rend plus grande.\n\nVoici le calcul pour déterminer notre espace libre :\n\n```css\n(largeur de la grille) - (espace) - (largeur de l'image) = (espace libre)\n200px - 5px - 50px = 145px\n```\n\nDivisé par deux —\u0026nbsp;le nombre de colonnes\u0026nbsp;— nous obtenons une largeur de 72,5px pour chaque colonne. Mais nous ajoutons la taille de l'image, 50px, à la première colonne, ce qui nous laisse une colonne de 122,5px et la seconde de 72,5px.\n\nLa même logique s'applique à notre grille d'images. Toutes les images ont une taille égale à 0 (aucun contenu), tandis que l'image survolée contribue à la taille —\u0026nbsp;même si ce n'est que de 1px\u0026nbsp;— rendant sa cellule de grille plus grande que les autres. Pour cette raison, le facteur d'échelle peut être n'importe quelle valeur supérieure à 0, même les décimales entre 0 et 1.\n\nPour obtenir la largeur finale des cellules de la grille, nous effectuons le même calcul pour obtenir ce qui suit\u0026nbsp;:\n\n```\n(largeur du conteneur) - (somme de tous les espaces) - (largeur de l'image survolée) = (espace libre)\n```\n\nLa largeur du conteneur est définie par :\n\n```css\nvar(--m)*var(--w) + (var(--m) - 1)*var(--g)\n```\n\n...et tous les espaces libres sont égaux à :\n\n```css\n(var(--m) - 1)*var(--g)\n```\n\n...et pour l'image survolée nous avons :\n\n```css\nvar(--w)*var(--f)\n```\n\nNous pouvons calculer tout cela avec nos variables :\n\n```css\nvar(--m)*var(--w) - var(--w)*var(--f) = var(--w)*(var(--m) - var(--f))\n```\n\nLe nombre de colonnes est défini par `--m` ,donc nous divisons cet espace libre de manière égale pour obtenir\u0026nbsp;:\n\n```css\nvar(--w)*(var(--m) - var(--f))/var(--m)\n```\n\n...ce qui nous donne la taille des images non survolées. Pour les images survolées, nous avons ceci\u0026nbsp;:\n\n```css\nvar(--w)*(var(--m) - var(--f))/var(--m) + var(--w)*var(--f)\nvar(--w)*((var(--m) - var(--f))/var(--m) + var(--f))\n```\n\nSi nous voulons contrôler la taille finale de l'image survolée, nous utilisons la formule ci-dessus pour obtenir la taille exacte que nous voulons. Si, par exemple, nous voulons que l'image soit deux fois plus grande\u0026nbsp;:\n\n```css\n(var(--m) - var(--f))/var(--m) + var(--f) = 2\n```\n\nAinsi, la valeur de notre multiplicateur d'échelle, `--f`, doit être égale à\u0026nbsp;:\n\n```css\nvar(--m)/(var(--m) - 1)\n```\n\nPour trois colonnes, nous aurons 3/2 = 1,5 et c'est le facteur d'échelle que j'ai utilisé dans la première démo de cet article car je voulais que l'image soit deux fois plus grande au survol\u0026nbsp;!\n\nLa même logique s'applique au calcul de la hauteur et dans le cas où nous voulons contrôler les deux indépendamment, nous devrons considérer deux facteurs d'échelle pour nous assurer que nous avons une largeur et une hauteur spécifiques au survol.\n\n```css\n.gallery {\n  /* même chose que précédemment */\n  --fw: 1.5; /* contrôle le facteur d'échelle pour la largeur */\n  --fh: 1.2; /* contrôle le facteur d'échelle pour la hauteur */\n\n  /* même chose qu'avant */\n}\n\n.gallery img:hover {\n  width: calc(var(--w) * var(--fw));\n  height: calc(var(--h) * var(--fh));\n}\n```\n\nVous connaissez maintenant tous les secrets pour créer n'importe quel type de grille d'images avec un effet de survol cool, tout en contrôlant la taille que vous souhaitez à l'aide des calculs que nous venons de voir.\n\n## Conclusion\n\nDans mon [dernier article](/articles/css-grid-grille-implicite-et-placement-automatique), nous avons créé une grille d'aspect complexe avec quelques lignes de CSS qui mettaient à profit les fonctionnalités de grille implicite et de placement automatique de CSS Grid. Dans cet article, nous nous sommes appuyés sur une astuce de dimensionnement de CSS Grid pour créer une grille fantaisiste dans laquelle les images s'agrandissent au survol de l'écran, entraînant l'ajustement de la grille en conséquence. Tout cela avec un code simplifié et facile à ajuster à l'aide de variables CSS\u0026nbsp;!\n\nDans le prochain article, nous allons jouer avec les formes\u0026nbsp;! Nous allons combiner la grille CSS avec `mask` et `clip-path` pour obtenir une grille d'images originale.\n"},{"slug":"css-grid-grille-implicite-et-placement-automatique","title":"CSS Grid : grille implicite et placement automatique","author":{"name":"Temani Afif","lastname":"Afif"},"original":{"date":"1er août 2022","site":"CSS Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/exploring-css-grids-implicit-grid-and-auto-placement-powers/","copyright":"2022"},"dateCascade":"3 août 2022","dateMachine":"2O220803","tags":["cssgrid","css"],"about":[],"excerpt":"L'article le plus clair sur les grilles implicites et le placement automatique dans CSS Grid.","featured":false,"featuredImage":"/images/dog_image.webp","order":null,"content":"\nLorsqu'on travaille avec [CSS Grid](/articles/css-grid-layout-guide-complet), la première chose à faire est de définir `display : grid` sur l'[élément](/articles/css-grid-layout-guide-complet#griditem) (_item_) qui doit devenir un [conteneur](/articles/css-grid-layout-guide-complet#gridcontainer) de grille. Ensuite, on définit explicitement la grille en utilisant une combinaison de [grid-template-columns, grid-template-rows](/articles/css-grid-layout-guide-complet#gtc) et [grid-template-areas](/articles/css-grid-layout-guide-complet#gta). Et à partir de là, l'étape suivante consiste à placer les éléments à l'intérieur de la grille.\n\nC'est l'approche classique à utiliser et je la recommande également. Cependant, il existe une autre approche pour créer des grilles **sans définition explicite**. Nous l'appelons **la grille implicite**.\n\n\u003cdiv class=\"toc\"\u003e\n\u003cp\u003eTable des matières\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#explicit\"\u003eExplicite, implicite ? Mais qu'est-ce qui se passe ici ?\u003c/a\u003e\n\u003cli\u003e\u003ca href=\"#barre\"\u003eBarre latérale dynamique\u003c/a\u003e\n\u003cli\u003e\u003ca href=\"#grille-dimages\"\u003eGrille d'images\u003c/a\u003e\n\u003cli\u003e\u003ca href=\"#dynamique\"\u003eMises en page dynamiques\u003c/a\u003e\n\u003cli\u003e\u003ca href=\"#motifs\"\u003eMotifs de grille\u003c/a\u003e\n\u003cli\u003e\u003ca href=\"#plus\"\u003eVous en voulez encore ?\u003c/a\u003e\n\u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"explicit\"\u003e\"Explicite, implicite ? Mais que se passe-t-il ici ?\"\u003c/h2\u003e\n\nDes termes étranges, non ? Manuel Matuzovic a [déjà donné une bonne explication](/articles/css-grid-difference-entre-grilles-explicite-et-implicite) de ce que nous entendons par \"implicite\" et \"explicite\" dans CSS Grid, mais allons directement à l'essentiel de ce que dit [la spécification](https://www.w3.org/TR/css-grid-1/#implicit-grids) :\n\n\u003e _Les propriétés [grid-template-rows](https://www.w3.org/TR/css-grid-1/#propdef-grid-template-rows), [grid-template-columns](https://www.w3.org/TR/css-grid-1/#propdef-grid-template-columns) et [grid-template-areas](https://www.w3.org/TR/css-grid-1/#propdef-grid-template-areas) définissent un nombre fixe de pistes qui forment **la grille explicite**. Lorsque les éléments de la grille sont positionnés en dehors de ces limites, le conteneur de grille génère des pistes de grille implicites en ajoutant des lignes de grille implicites à la grille. Ces lignes, associées à la grille explicite, forment **la grille implicite**._\n\nEn clair, le navigateur génère automatiquement des rangées et des colonnes supplémentaires si des éléments sont placés en dehors de la grille définie.\n\n\u003e _Qu'en est-il de l'auto-placement ?_\n\nTout comme le concept de grille implicite, l'[auto-placement](https://www.w3.org/TR/css-grid-1/#common-uses-auto-placement) est la capacité du navigateur à placer automatiquement les éléments à l'intérieur de la grille. Nous n'avons pas toujours besoin de donner la position de chaque élément.\n\nA travers différents cas d'utilisation, nous allons voir comment ces fonctionnalités peuvent nous aider à créer des grilles complexes et dynamiques avec quelques lignes de code.\n\n\u003ch2 id=\"barre\"\u003eBarre latérale dynamique\u003c/h2\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_/NWYPpEB/0717adced0f44e076f3936f35cde0650\" src=\"//codepen.io/t_afif/embed//NWYPpEB/0717adced0f44e076f3936f35cde0650?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=/NWYPpEB/0717adced0f44e076f3936f35cde0650\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/NWYPpEB/0717adced0f44e076f3936f35cde0650\"\u003e\n  implicit grid #1\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIci, nous avons trois mises en page différentes, mais nous n'avons qu'une seule configuration de grille qui fonctionne pour toutes.\n\n```css\nmain {\n  display: grid;\n  grid-template-columns: 1fr;\n}\n```\n\nUne seule colonne occupe tout l'espace libre. Il s'agit de notre grille \"explicite\". Elle est configurée pour contenir un élément de la grille dans le conteneur principal de la grille. C'est tout. Une colonne et une rangée\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LYdWGzG\" src=\"//codepen.io/geoffgraham/embed/LYdWGzG?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=LYdWGzG\u0026amp;user=geoffgraham\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/geoffgraham/pen/LYdWGzG\"\u003e\n  untitled\u003c/a\u003e de Geoff Graham dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nMais que se passerait-il si nous décidions d'y déposer un autre élément, disons un `aside` (notre barre latérale dynamique). Telle qu'elle est actuellement (et explicitement) définie, notre grille devra s'ajuster automatiquement pour trouver un emplacement pour cet élément. Et si nous ne faisons rien d'autre avec notre CSS, voici ce que DevTools nous dit qu'il se passe.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/implicit-grid-tracks.webp\" width=\"790\" height=\"192\" alt=\"\"/\u003e\u003cfigcaption\u003e\n\nL'élement 1 prend toute la colonne explicitement définie dans le container et le 2e se place sur une nouvelle rangée entre les lignes de grille implicites étiquetées 2 et 3. Notez que j'utilise un espace de 20px pour aider à séparer les choses visuellement.\u003c/figcaption\u003e\u003c/figure\u003e\n\nNous pouvons déplacer le `\u003caside\u003e` vers une colonne à côté de la `\u003csection\u003e` :\n\n```css\naside {\n  grid-column-start: 2;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_PoRpZbj\" src=\"//codepen.io/geoffgraham/embed/PoRpZbj?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=PoRpZbj\u0026amp;user=geoffgraham\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/geoffgraham/pen/PoRpZbj\"\u003e\n  untitled\u003c/a\u003e de Geoff Graham dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nEt voici ce que nous dit maintenant DevTools\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/implcit-grid-column.webp\" width=\"790\" height=\"192\" alt=\"\"/\u003e\u003cfigcaption\u003eL'élément se trouve entre la première et la deuxième ligne de colonne de la grille. Il commence à la deuxième ligne de colonne de la grille et se termine à une troisième ligne que nous n'avons jamais déclarée.\u003c/figcaption\u003e\u003c/figure\u003e\n\nNous plaçons notre élément dans la deuxième colonne mais... attendez, nous n'avons pas de deuxième colonne\u0026nbsp;! C'est bizarre, non\u0026nbsp;? Nous n'avons jamais déclaré de deuxième colonne sur le conteneur de grille `\u003cmain\u003e`, mais le navigateur en a créé une pour nous\u0026nbsp;! C'est la partie-clé de la spécification que nous avons examinée\u0026nbsp;:\n\n\u003e _Lorsque les éléments de la grille sont positionnés en dehors de ces limites, le conteneur de grille génère des pistes de grille implicites en ajoutant des lignes de grille implicites à la grille._\n\nCette puissante fonctionnalité nous permet d'avoir des mises en page dynamiques. Si nous avons seulement l'élément `\u003csection\u003e`, tout ce que nous obtenons est une colonne. Mais si nous ajoutons un élément `\u003caside\u003e` au mélange, une colonne supplémentaire est créée pour le contenir.\n\nNous pourrions placer l'élément `\u003caside\u003e` avant l'élément `\u003csection\u003e` comme ceci\u0026nbsp;:\n\n```css\naside {\n  grid-column-end: -2;\n}\n```\n\nCela crée la colonne implicite au début de la grille, contrairement au code précédent qui plaçait la colonne implicite à la fin.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/explanation-image.webp\" width=\"751\" height=\"448\" alt=\"\"/\u003e\u003cfigcaption\u003eNous pouvons avoir une sidebar à gauche ou à droite.\u003c/figcaption\u003e\u003c/figure\u003e\n\nNous pouvons faire la même chose plus facilement en utilisant la propriété `grid-auto-flow` pour définir que toutes les pistes implicites s'écoulent (_flow_) dans une direction `column`\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_bGvNxbW\" src=\"//codepen.io/t_afif/embed/bGvNxbW/c53c1762286176b403f5e59fc0493ee0?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=bGvNxbW\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/bGvNxbW/c53c1762286176b403f5e59fc0493ee0\"\u003e\n  implicit grid #2\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nMaintenant, il n'est plus nécessaire de spécifier `grid-column-start` pour placer l'élément `\u003caside\u003e` à droite de la `\u003csection\u003e`\u0026nbsp;! En fait, tout autre élément de la grille que nous décidons d'y jeter à tout moment s'écoulera désormais dans le sens de la colonne, chacun étant placé dans ses propres pistes de grille implicites. Parfait pour les situations où le nombre d'éléments de la grille n'est pas connu à l'avance\u0026nbsp;!\n\nCela dit, nous avons toujours besoin de `grid-column-end` si nous voulons le placer dans une colonne à sa gauche car, sinon, le `\u003caside\u003e` occupera la colonne explicite qui, à son tour, pousse la `\u003csection\u003e` en dehors de la grille explicite et l'oblige à prendre la colonne implicite.\n\nJe sais, je sais. C'est un peu alambiqué. Voici un autre exemple que nous pouvons utiliser pour mieux comprendre cette petite bizarrerie :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_bGvNxNW\" src=\"//codepen.io/t_afif/embed/bGvNxNW/54fd420773f2335f049210994a4f5360?height=380\u0026amp;theme-id=light\u0026amp;slug-hash=bGvNxNW\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"380\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/bGvNxNW/54fd420773f2335f049210994a4f5360\"\u003e\n  with/without grid-column-end\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nDans le premier exemple, nous n'avons pas spécifié de placement. Dans ce cas, le navigateur placera d'abord l'élément `\u003caside\u003e` dans la colonne explicite puisqu'il vient en premier dans le DOM. L'élément `\u003csection\u003e`, quant à lui, est automatiquement placé dans la colonne de grille que le navigateur crée automatiquement (ou implicitement) pour nous.\n\nDans le deuxième exemple, nous plaçons l'élément `\u003caside\u003e` en dehors de la grille explicite\u0026nbsp;:\n\n```css\naside {\n  grid-column-end: -2;\n}\n```\n\nMaintenant, il importe peu que `\u003caside\u003e` vienne en premier dans le HTML. En réaffectant `\u003caside\u003e` ailleurs, nous avons rendu l'élément `\u003csection\u003e` disponible pour prendre la colonne explicite.\n\n\u003ch2 id=\"grille-dimages\"\u003eGrille d'images\u003c/h2\u003e\n\nEssayons quelque chose de différent avec une grille d'images où nous avons une grande image et quelques vignettes à côté (ou en-dessous).\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xxLYLNW\" src=\"//codepen.io/t_afif/embed/xxLYLNW?height=790\u0026amp;theme-id=light\u0026amp;slug-hash=xxLYLNW\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"790\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/xxLYLNW\"\u003e\n  Big Image + thumbnails\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous avons deux configurations de grille. Mais devinez quoi\u0026nbsp;? Je ne définis aucune grille du tout, nada\u0026nbsp;! Tout ce que je fais, c'est ça\u0026nbsp;:\n\n```css\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n```\n\nIl est surprenant que nous n'ayons besoin que d'une seule ligne de code pour réaliser quelque chose comme ça, alors disséquons ce qui se passe et vous verrez que c'est plus facile que vous ne le pensez. Tout d'abord, `grid-area` est une propriété raccourcie qui combine les propriétés suivantes en une seule déclaration\u0026nbsp;:\n\n- `grid-row-start`\n- `grid-row-end`\n- `grid-column-start`\n- `grid-column-end`\n\n\u003e _Attendez ! [grid-area](https://css-tricks.com/simple-named-grid-areas/) n'est-elle pas la propriété que nous utilisons pour définir des [zones nommées](https://css-tricks.com/simple-named-grid-areas/) au lieu de l'endroit où les éléments commencent et finissent sur la grille\u0026nbsp;?_\n\nOui, mais elle fait plus. Nous pourrions écrire beaucoup de choses sur `grid-area`, mais dans ce cas particulier\u0026nbsp;:\n\n```css\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n\n/* ...est équivalent à : */\n.grid img:first-child {\n  grid-row-start: span 3;\n  grid-column-start: span 3;\n  grid-row-end: auto;\n  grid-column-end: auto;\n}\n```\n\nNous pouvons constater la même chose en ouvrant DevTools pour développer la version abrégée\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/devtools_image.webp\" width=\"430\" height=\"218\" alt=\"\"/\u003e\u003c/figure\u003e\n\nCela signifie que le premier élément image de la grille doit couvrir **trois colonnes et trois rangées**. Mais comme nous n'avons pas défini de colonnes ou de rangées, le navigateur le fait pour nous.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/dog_image.webp\" width=\"655\" height=\"354\" alt=\"\"/\u003e\u003c/figure\u003e\n\nPour le dire simplement, nous avons placé la première image dans le HTML pour qu'elle occupe une grille de 3⨉3. Cela signifie que toutes les autres images seront placées automatiquement dans ces mêmes trois colonnes sans qu'il soit nécessaire de spécifier quoi que ce soit de nouveau.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/dogs_image.webp\" width=\"668\" height=\"468\" alt=\"\"/\u003e\u003c/figure\u003e\n\nEn résumé, nous avons indiqué au navigateur que la première image devait occuper l'espace de trois colonnes et de trois rangées que nous n'avons jamais définies explicitement lors de la configuration du conteneur de grille. Le navigateur a défini ces colonnes et ces rangées pour nous. En conséquence, **les autres images du HTML s'insèrent directement dans la grille en utilisant les mêmes trois colonnes et rangées**. Et comme la première image occupe les trois colonnes de la première rangée, les autres images s'insèrent dans des rangées supplémentaires contenant chacune trois colonnes, où chaque image occupe une seule colonne.\n\nTout cela à partir d'une seule ligne de CSS ! C'est la puissance de la grille \"implicite\" et du placement automatique.\n\nPour la deuxième configuration de la grille dans cette démo, tout ce que j'ai fait est de changer la direction du flux automatique en utilisant `grid-auto-flow : column` de la même manière que nous l'avons fait précédemment en plaçant un élément `\u003caside\u003e` à côté d'une `\u003csection\u003e`. Cela oblige le navigateur à créer une quatrième colonne qu'il peut utiliser pour placer les images restantes. Et puisque nous avons trois rangées, les images restantes sont placées à l'intérieur de la même colonne verticale.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/lion_image.webp\" width=\"660\" height=\"289\" alt=\"\"/\u003e\u003c/figure\u003e\n\nNous devons ajouter quelques propriétés aux images pour nous assurer qu'elles s'intègrent bien dans la grille sans débordement\u0026nbsp;:\n\n```css\n.grid {\n  display: grid;\n  grid-gap: 10px;\n}\n\n/* pour la deuxième configuration de la grille */\n.horizontal {\n  grid-auto-flow: column;\n}\n\n/* La grande image 3⨉3 */\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n\n/* Aide à prévenir les images étirées ou déformées */\nimg {\n  width: 100%;\n  hauteur: 100%;\n  object-fit: cover;\n}\n```\n\nEt bien sûr, nous pouvons facilement mettre à jour la grille pour prendre en compte plus d'images en ajustant une valeur. Il s'agit de la valeur 3 dans les styles pour la grande image. Nous avons ceci\u0026nbsp;:\n\n```css\n.grid img:first-child {\n  grid-area: span 3 / span 3;\n}\n```\n\nMais nous pourrions ajouter une quatrième colonne en la remplaçant simplement par 4\u0026nbsp;:\n\n```css\n.grid img:first-child {\n  grid-area: span 4 / span 4;\n}\n```\n\nMieux encore : définissons cette propriété comme une propriété personnalisée pour faciliter encore plus la mise à jour.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YzaPOrW\" src=\"//codepen.io/t_afif/embed/YzaPOrW/4d9af8f949d672715c6762758082b4c6?height=790\u0026amp;theme-id=light\u0026amp;slug-hash=YzaPOrW\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"790\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/YzaPOrW/4d9af8f949d672715c6762758082b4c6\"\u003e\n  Variable grid with thumbnail\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"dynamique\"\u003eMises en page dynamiques\u003c/h2\u003e\n\nLe premier cas d'utilisation avec la barre latérale était notre première mise en page dynamique. Nous allons maintenant nous attaquer à des mises en page plus complexes où le nombre d'éléments dictera la configuration de la grille.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb\" src=\"//codepen.io/t_afif/embed/yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb?height=790\u0026amp;theme-id=light\u0026amp;slug-hash=yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"790\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/yLKyxWr/58d4e3558c4fbd00626b4a5891bf97bb\"\u003e\n  Dynamic layout #1\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nDans cet exemple, nous pouvons avoir de un à quatre éléments et la grille s'ajuste de manière à s'adapter au nombre d'éléments sans laisser de vides ou d'espaces manquants.\n\nLorsque nous n'avons qu'un seul élément, nous ne faisons rien. L'élément s'étire pour remplir la seule rangée et la seule colonne créées automatiquement par la grille.\n\nMais lorsque nous ajoutons le deuxième élément, nous créons une autre colonne (implicite) en utilisant `grid-column-start : 2`.\n\nLorsque nous ajoutons un troisième élément, il doit occuper la largeur de deux colonnes —\u0026nbsp;c'est pourquoi nous avons utilisé `grid-column-start : span 2`, mais seulement s'il s'agit du `:last-child` car si nous ajoutons un quatrième élément, celui-ci ne doit occuper qu'une seule colonne.\n\nEn additionnant tout cela, nous avons **quatre configurations de grille** avec seulement **deux déclarations** et la magie de la grille implicite\u0026nbsp;:\n\n```css\n.grid {\n  display: grid;\n}\n.grid :nth-child(2) {\n  grid-column-start: 2;\n}\n.grid :nth-child(3):last-child {\n  grid-column-start: span 2;\n}\n```\n\nEssayons-en un autre :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YzaPJKQ/9f6e805701fcb0774333a580212d2e19\" src=\"//codepen.io/t_afif/embed/YzaPJKQ/9f6e805701fcb0774333a580212d2e19?height=790\u0026amp;theme-id=light\u0026amp;slug-hash=YzaPJKQ/9f6e805701fcb0774333a580212d2e19\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"790\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/YzaPJKQ/9f6e805701fcb0774333a580212d2e19\"\u003e\n  Dynamic layout #2\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous ne faisons rien pour les premier et deuxième cas où nous n'avons qu'un ou deux éléments. En revanche, lorsque nous ajoutons un troisième élément, nous indiquons au navigateur que, tant qu'il s'agit du `:last-child`, il doit s'étendre sur deux colonnes. Lorsque nous ajoutons un quatrième élément, nous indiquons au navigateur que cet élément doit être placé dans la deuxième colonne.\n\n```css\n.grid {\n  display: grid;\n}\n.grid :nth-child(3):last-child {\n  grid-column-start: span 2;\n}\n.grid :nth-child(4) {\n  grid-column-start: 2;\n}\n```\n\nVous commencez à comprendre le truc ? Nous donnons au navigateur des instructions spécifiques basées sur le nombre d'éléments (en utilisant `:nth-child`) et, parfois, une seule instruction peut changer complètement la mise en page.\n\nIl convient de noter que le dimensionnement ne sera pas le même lorsque nous travaillons avec des contenus différents\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565\" src=\"//codepen.io/t_afif/embed/poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565?height=790\u0026amp;theme-id=light\u0026amp;slug-hash=poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"790\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/poLvBJa/2d4b881ab5de5c6fc75098c6d9dea565\"\u003e\n  Different content\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nComme nous n'avons pas défini de taille pour nos éléments, le navigateur les dimensionne automatiquement pour nous en fonction de leur contenu et nous pouvons nous retrouver avec une taille différente de celle que nous venons de voir. Pour y remédier, nous devons spécifier explicitement que toutes les colonnes et les rangées ont la même taille\u0026nbsp;:\n\n```css\ngrid-auto-rows: 1fr;\ngrid-auto-columns: 1fr;\n```\n\nHé, nous n'avons pas encore joué avec ces propriétés\u0026nbsp;! `grid-auto-rows` et `grid-auto-columns` définissent la taille des rangées et des colonnes implicites, respectivement, dans un conteneur de grille. Ou, comme l'explique la spécification\u0026nbsp;:\n\n\u003e _Les propriétés [grid-auto-columns](https://drafts.csswg.org/css-grid/#propdef-grid-auto-columns) et [grid-auto-rows](https://drafts.csswg.org/css-grid/#propdef-grid-auto-rows) spécifient la taille des pistes auxquelles une taille n'est pas attribuée par [grid-template-rows](https://drafts.csswg.org/css-grid/#propdef-grid-template-rows) ou [grid-template-columns](https://drafts.csswg.org/css-grid/#propdef-grid-template-columns)._\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/wvmBZoe/cad8346d9375fe78d197912ad0dff131\" src=\"//codepen.io/t_afif/embed/wvmBZoe/cad8346d9375fe78d197912ad0dff131?height=790\u0026amp;theme-id=light\u0026amp;slug-hash=wvmBZoe/cad8346d9375fe78d197912ad0dff131\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"790\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/wvmBZoe/cad8346d9375fe78d197912ad0dff131\"\u003e\n  Same size items\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVoici un autre exemple où nous pouvons aller jusqu'à six éléments. Cette fois, je vais vous laisser disséquer le code. Ne vous inquiétez pas, les sélecteurs peuvent sembler complexes mais la logique est assez simple.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/JjLomYR/993766536bfd0b7591edb2ac615a175f\" src=\"//codepen.io/t_afif/embed/JjLomYR/993766536bfd0b7591edb2ac615a175f?height=1100\u0026amp;theme-id=light\u0026amp;slug-hash=JjLomYR/993766536bfd0b7591edb2ac615a175f\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"1100\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/JjLomYR/993766536bfd0b7591edb2ac615a175f\"\u003e\n  Dynamic layout #3\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nMême avec six éléments, nous n'avons eu besoin que de deux déclarations. Imaginez toutes les mises en page complexes et dynamiques que nous pouvons réaliser avec quelques lignes de code\u0026nbsp;!\n\n\u003e _Que se passe-t-il avec ce `grid-auto-rows` et pourquoi prend-il trois valeurs ? Sommes-nous en train de définir trois rangées ?_\n\nNon, nous ne définissons pas trois rangées. Mais nous définissons _de fait_ trois valeurs comme modèle pour nos rangées implicites. La logique est la suivante\u0026nbsp;:\n\n- Si nous avons une rangée, elle sera dimensionnée avec la première valeur.\n- Si nous avons deux rangées, la première reçoit la première valeur et la seconde la seconde.\n- Si nous avons trois rangées, les trois valeurs seront utilisées.\n- Si nous avons quatre rangées (et voici la partie intéressante), nous utilisons les trois valeurs pour les trois premières rangées et nous réutilisons la première valeur pour la quatrième rangée. C'est pourquoi il s'agit d'une sorte de modèle que nous répétons pour dimensionner toutes les rangées implicites.\n- Si nous avons 100 rangées, elles seront dimensionnées trois par trois pour avoir `2fr 2fr 1fr 2fr 2fr 1fr 2fr 2fr 1fr`, etc.\n\nContrairement à `grid-template-rows` qui définit le nombre de rangées et leur taille, `grid-auto-rows` ne dimensionne que les rangées qui peuvent être créées en cours de route.\n\nSi nous revenons à notre exemple, la logique est d'avoir une taille égale lorsque deux rangées sont créées (nous utiliserons le `2fr 2fr`), mais si une troisième rangée est créée, nous la rendons un peu plus petite.\n\n\u003ch2 id=\"motifs\"\u003eMotifs de grille\u003c/h2\u003e\n\nPour ce dernier point, nous allons parler de motifs. Vous avez probablement vu ces mises en page à deux colonnes où une colonne est plus large que l'autre, et où chaque rangée alterne le placement de ces colonnes.\n\nCe type de disposition peut être difficile à réaliser sans connaître exactement la quantité de contenu à traiter, mais les pouvoirs implicites de placement automatique de CSS Grid en font un jeu d'enfant.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/YzaPJVY/c462c7a29acbbb257e5b147c686f2d51\" src=\"//codepen.io/t_afif/embed/YzaPJVY/c462c7a29acbbb257e5b147c686f2d51?height=740\u0026amp;theme-id=light\u0026amp;slug-hash=YzaPJVY/c462c7a29acbbb257e5b147c686f2d51\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"740\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/YzaPJVY/c462c7a29acbbb257e5b147c686f2d51\"\u003e\n  Alternate CSS grid\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nJetez un coup d'œil au code. Il peut sembler complexe, mais décomposons-le car il est finalement assez simple.\n\nLa première chose à faire est d'identifier le modèle. Demandez-vous : \"Après combien d'éléments le modèle doit-il se répéter\u0026nbsp;?\" Dans ce cas, c'est tous les quatre éléments. Donc, pour l'instant, n'utilisons que quatre éléments\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/masonry1.webp\" width=\"608\" height=\"212\" alt=\"\"/\u003e\u003c/figure\u003e\n\nMaintenant, définissons la grille et mettons en place le modèle général en utilisant le sélecteur `:nth-child` pour alterner entre les éléments\u0026nbsp;:\n\n```css\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* toutes les colonnes sont égales */\n  grid-auto-rows: 100px; /* toutes les rangées sont égales à 100px */\n}\n.grid :nth-child(4n + 1) {\n  /* ? ?? */\n}\n.grid :nth-child(4n + 2) {\n  /* ? ?? */\n}\n.grid :nth-child(4n + 3) {\n  /* ? ?? */\n}\n.grid :nth-child(4n + 4) {\n  /* ? ?? */\n}\n```\n\nNous avons dit que notre motif se répète tous les quatre éléments, nous utiliserons donc logiquement 4n\u0026nbsp;+\u0026nbsp;x où x va de 1 à 4. Il est un peu plus facile d'expliquer le motif de cette façon\u0026nbsp;:\n\n```\n4(0) + 1 = 1 = 1er élément /* on commence avec n = 0 */\n4(0) + 2 = 2 = 2ème élément\n4(0) + 3 = 3 = 3ème élément\n4(0) + 4 = 4 = 4e élément\n4(1) + 1 = 5 = 5ème élément /* notre modèle se répète ici à n = 1 */\n4(1) + 2 = 6 = 6ème élément\n4(1) + 3 = 7 = 7ème élément\n4(1) + 4 = 8 = 8e élément\n4(2) + 1 = 9 = 9ème élément /* notre modèle se répète ici à n = 2 */\netc.\n```\n\nC'est parfait, non ? Nous avons quatre éléments, et nous répétons le motif sur le cinquième élément, le neuvième élément et ainsi de suite.\n\nCes sélecteurs `:nth-child` peuvent être délicats ! Chris a expliqué de manière très utile [comment tout cela fonctionne](/articles/nth-child), y compris [des recettes pour créer différents modèles](https://css-tricks.com/useful-nth-child-recipies/).\n\nMaintenant, nous configurons chaque élément de la manière suivante :\n\n1. Le premier élément doit prendre deux colonnes et commencer à la première colonne (grid-column : 1/span 2).\n2. Le deuxième élément est placé dans la troisième colonne (grid-column-start : 3).\n3. Le troisième élément est placé à la première colonne : (grid-column-start : 1).\n4. Le quatrième élément prend deux colonnes et commence à la deuxième colonne : (grid-column : 2/span 2).\n\nVoici ce que cela donne en CSS :\n\n```css\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* toutes les colonnes sont égales */\n  grid-auto-rows: 100px; /* toutes les rangées sont égales à 100px */\n}\n.grid :nth-child(4n + 1) {\n  grid-column: 1 / span 2;\n}\n.grid :nth-child(4n + 2) {\n  grid-column-start: 3;\n}\n.grid :nth-child(4n + 3) {\n  grid-column-start: 1;\n}\n.grid :nth-child(4n + 4) {\n  grid-column: 2 / span 2;\n}\n```\n\nNous pourrions nous arrêter ici et ce serait bon... mais nous pouvons faire mieux\u0026nbsp;! Plus précisément, nous pouvons supprimer certaines déclarations et compter sur les pouvoirs de placement automatique de la grille pour faire le travail à notre place. C'est la partie la plus délicate à appréhender et il faut beaucoup de pratique pour pouvoir identifier ce qui peut être supprimé.\n\nLa première chose que nous pouvons faire est de mettre à jour `grid-column : 1 /span 2` et d'utiliser uniquement `grid-column : span 2` puisque, par défaut, le navigateur placera le premier élément dans la première colonne. Nous pouvons également supprimer cet élément\u0026nbsp;:\n\n```css\n.grid :nth-child(4n + 3) {\n  grid-column-start: 1;\n}\n```\n\nEn plaçant les premier, deuxième et quatrième éléments, la grille place automatiquement le troisième élément au bon endroit. Cela signifie que nous nous retrouvons avec ceci\u0026nbsp;:\n\n```css\n.grid {\n  display: grid;\n  grid-auto-rows: 100px; /* toutes les rangées sont égales à 100px */\n  grid-auto-columns: 1fr; /* toutes les colonnes sont égales */\n}\n.grid :nth-child(4n + 1) {\n  grid-column: span 2;\n}\n.grid :nth-child(4n + 2) {\n  grid-column-start: 3;\n}\n.grid :nth-child(4n + 4) {\n  grid-column: 2 / span 2;\n}\n```\n\nMais allez, on peut faire mieux\u0026nbsp;! Nous pouvons aussi supprimer ceci\u0026nbsp;:\n\n```css\n.grid :nth-child(4n + 2) {\n  grid-column-start: 3;\n}\n```\n\nPourquoi ? Si nous plaçons le quatrième élément dans la deuxième colonne tout en lui permettant d'occuper deux colonnes complètes, nous forçons la grille à créer une troisième colonne implicite, ce qui nous donne un total de trois colonnes sans le lui dire explicitement. Le quatrième élément ne peut pas aller dans la première rangée puisque le premier élément prend également deux colonnes, il passe donc à la rangée suivante. Cette configuration nous laisse avec une colonne vide dans la première rangée et une colonne vide dans la deuxième rangée.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/masonry2.webp\" width=\"609\" height=\"212\" alt=\"\"/\u003e\u003c/figure\u003e\n\nJe pense que vous connaissez la fin de l'histoire. Le navigateur placera automatiquement les deuxième et troisième éléments dans ces emplacements vides. Notre code devient donc encore plus simple\u0026nbsp;:\n\n```css\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr; /* toutes les colonnes sont égales */\n  grid-auto-rows: 100px; /* toutes les rangées sont égales à 100px */\n}\n.grid :nth-child(4n + 1) {\n  grid-column: span 2;\n}\n.grid :nth-child(4n + 4) {\n  grid-column: 2 / span 2;\n}\n```\n\nIl suffit de cinq déclarations pour créer un motif très cool et très souple. La partie optimisation peut être délicate, mais on s'y habitue et on gagne quelques astuces avec la pratique.\n\n\u003e _Pourquoi ne pas utiliser `grid-template-columns` pour définir des colonnes explicites puisque nous connaissons le nombre de colonnes\u0026nbsp;?_\n\nNous pouvons le faire ! Voici le code correspondant\u0026nbsp;:\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); /* toutes les colonnes sont égales */\n  grid-auto-rows: 100px; /* toutes les rangées sont égales à 100px */\n}\n.grid :nth-child(4n + 1),\n.grid :nth-child(4n + 4) {\n  grid-column: span 2;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/ExEazLZ/73bf8a38c32f834321ea9e63510e23c9\" src=\"//codepen.io/t_afif/embed/ExEazLZ/73bf8a38c32f834321ea9e63510e23c9?height=740\u0026amp;theme-id=light\u0026amp;slug-hash=ExEazLZ/73bf8a38c32f834321ea9e63510e23c9\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"740\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/ExEazLZ/73bf8a38c32f834321ea9e63510e23c9\"\u003e\n  Another alternative\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nComme vous pouvez le constater, le code est nettement plus intuitif. Nous définissons trois colonnes de grille explicites et nous indiquons au navigateur que les premier et quatrième éléments doivent prendre deux colonnes. Je recommande vivement cette approche\u0026nbsp;! Mais le but de cet article est d'explorer de nouvelles idées et astuces que nous obtenons grâce aux pouvoirs implicites et d'auto-placement de CSS Grid.\n\nL'approche explicite est plus directe, tandis qu'une grille implicite vous oblige à combler les lacunes là où CSS effectue un travail supplémentaire en coulisse. En fin de compte, je pense qu'une bonne compréhension des grilles implicites vous aidera à mieux comprendre l'algorithme CSS Grid. Après tout, nous ne sommes pas ici pour étudier ce qui est évident —\u0026nbsp;nous sommes ici pour explorer des territoires sauvages\u0026nbsp;!\n\nEssayons un autre modèle, un peu plus rapide cette fois\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/YzxaJom\" src=\"//codepen.io/t_afif/embed/YzxaJom?height=940\u0026amp;theme-id=light\u0026amp;slug-hash=YzxaJom\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"940\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/YzxaJom\"\u003e\n  Alternate CSS grid\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNotre schéma se répète tous les six éléments. Les troisième et quatrième éléments doivent occuper chacun deux rangées complètes. Si nous plaçons le troisième et le quatrième éléments, il semble que nous n'ayons pas besoin de toucher aux autres, alors essayons ce qui suit\u0026nbsp;:\n\n```css\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-rows: 100px;\n}\n.grid :nth-child(6n + 3) {\n  grid-area: span 2/2; /* grid-row-start : span 2 \u0026\u0026 grid-column-start : 2 */\n}\n.grid :nth-child(6n + 4) {\n  grid-area: span 2/1; /* grid-row-start : span 2 \u0026\u0026 grid-column-start : 1 */\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13\" src=\"//codepen.io/t_afif/embed/gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13?height=1050\u0026amp;theme-id=light\u0026amp;slug-hash=gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"1050\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/gOebJNq/bfb026fdd80549f4b5e1d72e6bdf5e13\"\u003e\n  Premier essai\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nHmm, pas terrible. Nous devons placer le deuxième élément dans la première colonne. Sinon, la grille le placera automatiquement dans la deuxième colonne.\n\n```css\n.grid :nth-child(6n + 2) {\n  grid-column: 1; /* grid-column-start : 1 */\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/BaryeXg/658adad08195ed95cd50e53de42494f2\" src=\"//codepen.io/t_afif/embed/BaryeXg/658adad08195ed95cd50e53de42494f2?height=1050\u0026amp;theme-id=light\u0026amp;slug-hash=BaryeXg/658adad08195ed95cd50e53de42494f2\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"1050\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/BaryeXg/658adad08195ed95cd50e53de42494f2\"\u003e\n  Deuxième essai\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nC'est mieux, mais il y a encore du boulot. Nous devons déplacer le troisième élément vers le haut. Il est tentant d'essayer de le placer dans la première rangée de cette façon\u0026nbsp;:\n\n```css\n.grid :nth-child(6n + 3) {\n  grid-area: 1/2 / span 2;\n  /* Équivalent à :\n       grid-row-start : 1 ;\n       grid-row-end : span 2 ;\n       grid-column-start : 2 \n     */\n}\n```\n\nMais cela ne fonctionne pas car cela oblige tous les 6n + 3 éléments à être placés dans la même zone, ce qui donne une disposition désordonnée. La véritable solution consiste à conserver la définition initiale du troisième élément et à ajouter `grid-auto-flow : dense` pour combler les vides. [Extrait du MDN en français](https://developer.mozilla.org/fr/docs/Web/CSS/grid-auto-flow)\u0026nbsp;:\n\n\u003e _L'algorithme de placement automatique utilisera une méthode de « regroupement dense » où il essaie de remplir les trous dans la grille si des éléments plus petits arrivent ensuite. De fait, on peut obtenir une impression de désordre alors qu'il s'agit simplement du comblement des espaces libres._  \n\u003e _Si cette valeur est absente, le moteur utilisera un algorithme simple qui ne fait que se déplacer vers l'avant, sans revenir vers les espaces vides. De cette façon, les éléments apparaitront nécessairement dans l'ordre mais pourront laisser des trous._\n\nJe sais que cette propriété n'est pas très intuitive mais ne l'oubliez jamais lorsque vous êtes confronté à un problème de placement. Avant d'essayer en vain différentes configurations, ajoutez-la, car elle peut réparer votre mise en page sans effort supplémentaire.\n\n\u003e _Pourquoi ne pas toujours ajouter cette propriété par défaut\u0026nbsp;?_\n\nJe ne le recommande pas car, dans certains cas, nous ne voulons pas de ce comportement. Notez que l'explication de MDN mentionne que cela entraîne la circulation d'éléments \"en désordre\" pour remplir les trous laissés par des éléments plus grands. L'ordre visuel est généralement tout aussi important que l'ordre des sources, en particulier lorsqu'il s'agit d'interfaces accessibles, et `grid-auto-flow : dense` peut parfois provoquer un décalage entre l'ordre visuel et l'ordre des sources.\n\nNotre code final est donc\u0026nbsp;:\n\n```css\n.grid {\n  display: grid;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: dense;\n  grid-autorows: 100px;\n}\n.grid :nth-child(6n + 2) {\n  grid-column: 1;\n}\n.grid :nth-child(6n + 3) {\n  grid-area: span 2/2;\n}\n.grid :nth-child(6n + 4) {\n  grid-row: span 2;\n}\n```\n\nEncore un petit ? Allez on y va !\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/t_afif/pen/MWEOMdr\" src=\"//codepen.io/t_afif/embed/MWEOMdr?height=1000\u0026amp;theme-id=light\u0026amp;slug-hash=MWEOMdr\u0026amp;user=t_afif\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"1000\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/t_afif/pen/MWEOMdr\"\u003e\n  Alternating row CSS Grid\u003c/a\u003e de Temani Afif dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nPour celui-ci, je ne vais pas trop parler et plutôt vous montrer une illustration du code que j'ai utilisé. Essayez de voir si vous comprenez comment j'ai obtenu ce code :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grille1.webp\" width=\"674\" height=\"474\" alt=\"\"/\u003e\u003c/figure\u003e\n\nLes éléments en noir sont implicitement placés dans la grille. Il faut noter que l'on peut obtenir la même disposition de plusieurs manières différentes. Pouvez-vous aussi les comprendre ? Qu'en est-il de l'utilisation de `grid-template-columns`\u0026nbsp;?\n\nJe vais vous laisser avec un dernier modèle :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grille2.webp\" width=\"608\" height=\"742\" alt=\"\"/\u003e\u003c/figure\u003e\n\nJ'ai [une solution](https://codepen.io/t_afif/pen/bGoLyXQ/c235fd09a97c0873d31cd9b7d5530dd5) pour celui-ci mais c'est à vous de vous entraîner. Prenez tout ce que nous avons appris et essayez de le coder vous-même, puis comparez-le avec ma solution. Ne vous inquiétez pas si vous terminez par quelque chose de verbeux -\u0026nbsp;le plus important est de trouver une solution qui fonctionne.\n\n\u003ch2 id=\"plus\"\u003eVous en voulez encore ?\u003c/h2\u003e\n\nAvant de terminer, je voudrais partager avec vous quelques questions de Stack Overflow liées à CSS Grid, auxquelles j'ai répondu en utilisant plusieurs des techniques que nous avons abordées ici. C'est une bonne liste qui montre combien de cas d'utilisation réels et de situations concrètes se présentent où ces choses sont utiles\u0026nbsp;:\n\n- [Modifier le nombre de colonnes et de rangées d'une grille à mesure que le nombre d'éléments augmente](https://stackoverflow.com/questions/61196568/change-the-number-of-columns-and-rows-in-a-grid-as-the-number-of-items-increase/61197351#61197351).\n- [Grille CSS - Grille 2×2 occupant toujours toute la largeur lorsque cela est possible](https://stackoverflow.com/questions/58478216/css-grid-2x2-grid-always-taking-up-the-full-width-when-possible/58478256#58478256)\n- [Comment répéter un modèle de grille CSS ?](https://stackoverflow.com/questions/52898785/how-to-repeat-a-css-grid-layout-pattern)\n- [Créer une grille CSS en pur CSS](https://stackoverflow.com/questions/60087680/create-css-grid-layout-with-pure-css/60090576#60090576)\n- [Grille CSS vs. placement automatique dynamique des listes de définition](https://stackoverflow.com/questions/61329229/css-grid-vs-dynamic-definition-list-autoplacement/61330399#61330399)\n- [Grille CSS - ordre alterné des éléments uniquement pour ordi (pas écrans réduits)](https://stackoverflow.com/questions/61141411/css-grid-alternate-order-of-elements-only-on-desktop/61141540#61141540)\n- [Carrelage d'images à l'aide d'une grille CSS](https://stackoverflow.com/questions/51078651/image-tile-using-css-grid/51079015#51079015)\n- [Comment réparer cette grille CSS complexe de photos basée sur 4 colonnes ?](https://stackoverflow.com/questions/69452147/how-to-fix-this-complex-css-grid-of-photos-based-on-4-columns)\n- [Mise en page d'une grille répétitive avec un nombre inconnu d'éléments](https://stackoverflow.com/questions/63807091/repeating-grid-layout-with-unknown-amount-of-items/63807293#63807293)\n- [Création d'une grille CSS répétitive](https://stackoverflow.com/questions/70947162/creating-a-repeating-css-grid-layout/70947263#70947263)\n- [Est-il possible de faire en sorte qu'une rangée sur deux d'une grille CSS ait un nombre différent de colonnes ?](https://stackoverflow.com/questions/56101028/is-it-possible-to-make-every-second-row-in-a-css-grid-to-have-different-number-o/56103169#56103169)\n- [Placer des éléments par paires sur deux rangées à l'aide d'une grille CSS](https://stackoverflow.com/questions/65504567/place-items-in-pairs-in-two-rows-using-css-grid/65504637#65504637)\n- [Comment mettre en place une grille dynamique basée sur Flex ou Grid ?](https://stackoverflow.com/questions/61786083/how-to-set-up-a-dynamic-grid-based-on-flex-or-grid/61786201#61786201)\n- [Mise en page automatique d'une grille CSS complexe](https://stackoverflow.com/questions/62110278/css-complex-grid-auto-layout/62113491#62113491)\n- [Puis-je empiler un ensemble de colonnes à droite avec CSS Grid au lieu de Flex ?](https://stackoverflow.com/questions/73093172/can-i-stack-a-right-hand-set-of-columns-with-css-grid-instead-of-flex)\n- [Modifier la disposition de la grille en fonction du nombre d'éléments](https://stackoverflow.com/questions/73044810/change-grid-layout-depending-on-number-of-elements)\n\n\u003ch2 id=\"conclusion\"\u003ePour conclure\u003c/h2\u003e\n\nCSS Grid existe depuis des années, mais il existe encore de nombreuses astuces peu connues et utilisées qui ne sont pas largement discutées. La grille implicite et les fonctions de placement automatique sont deux d'entre elles !\n\nEt oui, cela peut devenir un défi ! Il m'a fallu beaucoup de temps pour comprendre la logique des grilles implicites et j'ai encore du mal avec le placement automatique. Si vous voulez passer plus de temps à vous faire une idée des grilles explicites et implicites, voici quelques explications et exemples supplémentaires qui valent la peine d'être consultés :\n\n- [Understanding the difference between grid-template and grid-auto](https://css-tricks.com/understanding-the-difference-between-grid-template-and-grid-auto/) de Chris Coyier\n- [A Collection of Interesting Facts about CSS Grid Layout](https://css-tricks.com/collection-interesting-facts-css-grid-layout/) de Manuel Matuzovic\n- [grid-auto-columns](https://css-tricks.com/almanac/properties/g/grid-auto-columns/)\n"},{"slug":"ecrivez-html-comme-du-html","title":"Écrire HTML à la manière HTML (pas XHTML)","author":{"name":"Jens Oliver Meiert","lastname":"Meiert"},"original":{"date":"21 mars 2022","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/write-html-the-html-way-not-the-xhtml-way/","copyright":"2022"},"dateCascade":"26 juillet 2022","dateMachine":"2O220726","tags":["html"],"about":["XHTML","SGML"],"excerpt":"Avec Jens Oliver Meiert, redécouvrez le HTML et participez à l'élaboration d'une nouvelle méthode moderne d'écriture du HTML.","featured":false,"featuredImage":"/images/authors/meiert-20200429.jpeg","order":"","content":"\nVous n'utilisez peut-être pas (ou plus) le XHTML, mais lorsque vous écrivez du HTML, vous êtes peut-être plus influencé par le XHTML que vous ne le pensez. Vous écrivez très probablement du HTML _à la manière de XHTML_.\n\nQu'est-ce que _la façon XHTML_ d'écrire du HTML, et qu'est-ce que _la façon HTML_ d'écrire du HTML ? Voyons cela.\n\n## HTML, XHTML, HTML\n\nDans les années 1990, il y avait le HTML. Dans les années 2000, il y a eu le XHTML. Puis, dans les années 2010, nous sommes revenus au HTML. C'est une histoire simple...\n\nLes dates approximatives des spécifications sont également révélatrices : HTML \"1\" 1992, HTML 2.0 1995, HTML 3.2 1997, HTML 4.01 1999 ; XHTML 1.0 2000, XHTML 1.1 2001 ; \"HTML5\" [2007](https://en.wikipedia.org/wiki/HTML5#Timeline).\n\nLe XHTML est devenu populaire lorsque tout le monde croyait que le XML et ses dérivés étaient l'avenir. \"XML tout court\". Pour le HTML, cela a eu un effet profond et durable\u0026nbsp;: celui de nous apprendre à l'écrire à la façon XHTML.\n\n## La façon XHTML d'écrire le HTML\n\nLa méthode XHTML est bien documentée, car XHTML 1.0 la décrit en détail dans sa section \"[Différences avec HTML 4](https://www.w3.org/TR/xhtml1/#diffs)\"\u0026nbsp;:\n\n- Les documents doivent être bien formés.\n- Les noms des éléments et des attributs doivent être en minuscules.\n- Pour les éléments non vides, les balises de fin sont obligatoires.\n- Les valeurs des attributs doivent toujours être citées.\n- La [minimisation des attributs](https://www.w3.org/TR/xhtml1/#h-4.5) n'est pas prise en charge.\n- Les éléments vides doivent être fermés.\n- Le traitement des espaces blancs dans les valeurs d'attributs est effectué conformément à XML.\n- Les éléments de script et de style doivent comporter des sections CDATA.\n- Les exclusions SGML ne sont pas autorisées.\n- Les éléments ayant des attributs id et name, comme a, applet, form, frame, iframe, img et map, ne doivent utiliser que id.\n- Les attributs ayant des ensembles de valeurs prédéfinies sont sensibles à la casse.\n- Les références aux entités comme les valeurs hexadécimales doivent être en minuscules.\n\nCela vous semble-t-il familier ? À l'exception du balisage du contenu CDATA, ainsi que du traitement des exclusions SGML, vous suivez probablement toutes ces règles. **Toutes ces règles**.\n\nBien que le XHTML soit mort, nombre de ces règles n'ont jamais été remises en question. Certaines ont même été élevées au rang de \"bonnes pratiques\" pour le HTML.\n\nC'est la façon XHTML d'écrire du HTML, et son impact durable sur le domaine.\n\n## La façon d'écrire du HTML\n\nUne façon de nous ramener en arrière est de reformuler négativement les règles imposées par le XHTML. Faisons cela (sans la partie SGML, car [HTML n'est plus basé sur SGML](https://html.spec.whatwg.org/multipage/parsing.html#parsing)) :\n\n- Les documents peuvent ne pas être bien formés.\n- Les noms des éléments et des attributs peuvent ne pas être en minuscules.\n- Pour les éléments non vides, les balises de fin ne sont pas toujours nécessaires.\n- Les valeurs des attributs ne sont pas toujours citées.\n- La minimisation des attributs est prise en charge.\n- Les éléments vides n'ont pas besoin d'être fermés.\n- Le traitement des espaces blancs dans les valeurs d'attributs n'est pas réalisé conforment à XML.\n- Les éléments de script et de style n'ont pas besoin de sections CDATA.\n- Les éléments ayant des attributs `id` et `name` ne peuvent pas utiliser uniquement id.\n- Les attributs dont les valeurs sont prédéfinies ne sont pas sensibles à la casse.\n- Les références aux entités comme les valeurs hexadécimales peuvent ne pas être uniquement en minuscules.\n\nSupprimons les points ésotériques et ceux qui ne semblent pas pertinents. Il s'agit de la gestion des espaces blancs XML, des sections CDATA, du doublement des valeurs des attributs de nom, de la casse des ensembles de valeurs prédéfinis et des références d'entités en hexadécimal :\n\n- Les documents peuvent ne pas être bien formés.\n- Les noms des éléments et des attributs peuvent ne pas être en minuscules.\n- Pour les éléments non vides, les balises de fin ne sont pas toujours requises.\n- Les valeurs des attributs ne sont pas toujours citées.\n- La minimisation des attributs est prise en charge.\n- Les éléments vides n'ont pas besoin d'être fermés.\n\nSi l'on fait abstraction de ces règles, on a beaucoup moins l'impression de travailler avec du XML, mais plutôt avec du HTML. Mais nous n'avons pas encore terminé.\n\n\"Les documents peuvent ne pas être bien formés\" semble suggèrer qu'il serait _acceptable_ que le code HTML soit invalide. Il était tout à fait cohérent que XHTML soit pointilleux sur la conformité de la forme en raison de sa gestion stricte des erreurs (par XML). Mais même si les documents HTML fonctionnent encore lorsqu'ils contiennent de graves problèmes de syntaxe et de conformité, il n'est _pas utile_, ni pour le professionnel ni pour notre domaine d'user et d'abuser de cette résilience. (J'ai déjà plaidé cette cause dans mon article \"[In Critical Defense of Frontend Development](https://meiert.com/en/blog/critical-frontend-development/)\".\n\nLa *façon HTML* ne suggére donc pas que \"les documents peuvent ne pas être bien formés\". Il devrait également être clair que non seulement les balises de fin, mais aussi celles de début ne sont pas toujours nécessaires. Si nous reformulons et réorganisons, voici l'essentiel :\n\n- Les balises de début et de fin ne sont pas toujours nécessaires.\n- Les éléments vides n'ont pas besoin d'être fermés.\n- Les noms des éléments et des attributs peuvent être en minuscules ou en majuscules.\n- Les valeurs des attributs ne sont pas toujours entre guillemets.\n- La minimisation des attributs est prise en charge.\n\n## Exemples\n\nComment cela se présente-t-il en pratique ? Pour les balises de début et de fin, sachez que de nombreuses balises sont facultatives. Un paragraphe et une liste, par exemple, s'écrivent comme ceci en XHTML :\n\n```xhtml\n\u003cp\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003ePraesent augue nisl\u003c/li\u003e\n  \u003cli\u003eLobortis nec bibendum ut\u003c/li\u003e\n  \u003cli\u003eDictum ac quam\u003c/li\u003e\n\u003c/ul\u003e\n```\n\nEn HTML, vous pouvez l'écrire avec ce code (qui est parfaitement valide)\u0026nbsp;:\n\n```html\n\u003cp\u003eLorem ipsum dolor sit amet, consectetur adipiscing elit.\n\u003cul\u003e\n  \u003cli\u003ePraesent augue nisl\n  \u003cli\u003eLobortis nec bibendum ut\n  \u003cli\u003eDictum ac quam\n\u003c/ul\u003e\n```\n\nLes développeurs ont également appris à écrire les éléments vides comme ceci : `\u003cbr /\u003e`. C'est encore une chose que le XHTML a apporté au HTML, mais la barre oblique n'ayant aucun effet sur les éléments vides, vous n'avez besoin que de ceci\u0026nbsp;: `\u003cbr\u003e`.\n\nEn HTML vous pouvez tout écrire en majuscules :\n\n```html\n\u003cA HREF=\"https://css-tricks.com/\"\u003eCSS-Tricks\u003c/A\u003e\n```\n\nBon, évidemment, on dirait que vous criez et vous n'aimerez sans doute pas cela, mais enfin il n'est pas interdit de l'écrire comme ça.\n\nLorsque vous voulez condenser ce lien, le HTML vous offre la possibilité de [laisser de côté certains guillemets](https://meiert.com/en/blog/optional-html/#toc-quotes) :\n\n```html\n\u003cA HREF=https://css-tricks.com/\u003eCSS-Tricks\u003c/A\u003e\n```\n\nNote : _En règle générale, lorsque la valeur de l'attribut ne contient pas d'espace ou de signe égal, il est possible de supprimer les guillemets._\n\nEnfin, le HTML-HTML -\u0026nbsp;et non le XHTML-HTML\u0026nbsp;- permet également de minimiser les attributs. C'est-à-dire qu'au lieu de marquer un élément `input` comme requis et en lecture seule, comme ceci\u0026nbsp;:\n\n```html\n\u003cinput type=\"text\" required=\"required\" readonly=\"readonly\" /\u003e\n```\n\nVous pouvez minimiser les attributs :\n\n```html\n\u003cinput type=\"text\" required readonly /\u003e\n```\n\nSi vous profitez non seulement du fait que les guillemets ne sont pas nécessaires, mais aussi du fait que le texte est la valeur par défaut de l'attribut type ici (il existe d'autres combinaisons attribut-valeur inutiles), vous obtenez un exemple qui montre le HTML dans toute sa beauté minimale\u0026nbsp;:\n\n```html\n\u003cinput required readonly /\u003e\n```\n\n## Écrire du HTML, à la manière du HTML\n\nCe qui précède n'est pas une représentation de ce qu'était le HTML dans les années 90. À l'époque, le HTML était chargé d'éléments `\u003ctable\u003e` pour la mise en page, rempli de code de présentation, largement invalide (comme c'est encore le cas aujourd'hui), et la compatibilité des agents utilisateurs était très variable. Pourtant, c'est l'essence même de ce que nous aurions voulu conserver si XML et XHTML n'étaient pas arrivés.\n\nSi vous êtes ouvert à une suggestion de ce à quoi pourrait ressembler une manière plus complète et contemporaine d'écrire le HTML, j'en ai une\u0026nbsp;! (Le HTML étant mon principal domaine d'intérêt, je complète ce texte par des liens vers certains de mes articles).\n\n1. **Respectez la syntaxe et la sémantique**.\n   - [Validez votre HTML](https://meiert.com/en/blog/the-frontend-developer-test/), et n'envoyez que du HTML valide, utilisez [le validateur du W3C](https://validator.w3.org/nu/)\n2. **Utilisez les options que vous offre le HTML, du moment que vous le faites de manière cohérente**.\n   - N'oubliez pas que les noms des éléments et des attributs peuvent être en minuscules ou en majuscules.\n3. **Limitez l'utilisation du HTML au strict minimum**\n   - Rappelez-vous que le balisage de présentation et de comportement doit être traité par CSS et JavaScript.\n   - Rappelez-vous que les balises de début et de fin ne sont [pas toujours nécessaires](https://meiert.com/en/blog/optional-html/#toc-tags).\n   - Rappelez-vous que les éléments vides n'ont pas besoin d'être fermés.\n   - N'oubliez pas que certains attributs ont des valeurs par défaut qui permettent d'[omettre ces paires attribut-valeur](https://meiert.com/en/blog/optional-html/#toc-attribute-values).\n   - N'oubliez pas que les valeurs des attributs n'ont [pas toujours besoin d'être entre guillemets](https://meiert.com/en/blog/optional-html/#toc-quotes).\n   - N'oubliez pas que la minimisation des attributs est prise en charge.\n\nCe n'est pas une coïncidence si cela ressemble aux [trois règles de base du HTML](https://meiert.com/en/blog/rules-for-html/), si cela fonctionne selon le principe qu'un [poids réduit de fichier conduit également à des sites plus rapides](https://meiert.com/en/blog/html-performance/), et si cela suit l'[école du développement web minimal](https://meiert.com/en/blog/minimal-web-development/). Rien de tout cela n'est nouveau -\u0026nbsp;notre domaine pourrait simplement décider de le redécouvrir. Des outils sont également disponibles\u0026nbsp;: [html-minifier](https://github.com/kangax/html-minifier) est probablement le plus connu et le plus à même de gérer toutes les optimisations HTML.\n\nVous avez appris le HTML à la manière du XHTML. HTML n'est pas XHTML. Redécouvrez le HTML et participez à l'élaboration d'une nouvelle méthode moderne d'écriture du HTML, qui reconnaît le XML sans en faire un dogme intangible.\n"},{"slug":"une-table-des-matieres-parfaite-avec-html-et-css","title":"Une table des matières parfaite avec HTML et CSS","author":{"name":"Nicholas C Zakas","lastname":"Zakas"},"original":{"date":"25 mai 2022","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/a-perfect-table-of-contents-with-html-css/","copyright":"2022"},"dateCascade":"25 juillet 2022","dateMachine":"2O220725","tags":["css","html","accessibilite"],"about":[":After"],"excerpt":"Créer une table des matières pour un document à imprimer s'avère légèrement compliqué, Nicholas C. Zakas propose ici une solution simple en purs HTML et CSS.","featured":false,"featuredImage":"/images/misaligned.webp","order":null,"content":"\nAu début de cette année, j'ai auto-publié un ebook intitulé _Understanding JavaScript Promises_ ([téléchargeable gratuitement](https://ebooks.humanwhocodes.com/promises)). Je n'avais pas l'intention d'en faire un livre imprimé, mais pas mal de personnes m'ayant contacté pour me demander une version imprimée, j'ai décidé de l'auto-publier également. Je me disais qu'il ne serait pas trop compliqué d'utiliser HTML et CSS pour générer un PDF et l'envoyer à l'imprimeur. Ce que je n'avais pas encore réalisé, c'est que je n'avais pas de solution pour gérer une partie importante d'un livre imprimé : la table des matières.\n\n## La composition d'une table des matières\n\nÀ la base, une table des matières est assez simple. Chaque ligne représente une partie d'un livre ou d'une page Web et indique où vous pouvez trouver ce contenu. En général, les lignes contiennent trois parties :\n\n1. Le titre du chapitre ou de la section\n2. Des amorces (c'est-à-dire des points, des tirets ou des lignes) qui relient visuellement le titre au numéro de page.\n3. Le numéro de page\n\nOn peut facilement générer une table des matières à l'aide d'outils de traitement de texte comme Microsoft Word ou Google Docs, mais comme mon contenu était en format Markdown, puis transformé en HTML, ce n'était pas une bonne option pour moi. Je voulais quelque chose d'automatisé qui fonctionne avec HTML pour générer la table des matières dans un format adapté à l'impression. Je voulais également que chaque ligne soit un lien afin de pouvoir l'utiliser dans les pages Web et les PDF pour naviguer dans le document. Je voulais aussi que le titre et le numéro de page soient précédés de points.\n\nJ'ai donc commencé à faire des recherches.\n\nJe suis tombé sur deux excellents articles de blog sur la création d'une table des matières avec HTML et CSS. Le premier, intitulé \"[Build a Table of Contents from your HTML](https://pagedjs.org/posts/build-a-table-of-contents-from-your-html/)\", est signé Julie Blanc. Julie a travaillé sur [PagedJS](https://pagedjs.org/), un polyfill pour les fonctionnalités de médias paginés manquantes dans les navigateurs Web qui formate correctement les documents pour l'impression. J'ai commencé par l'exemple de Julie, mais j'ai trouvé qu'il ne fonctionnait pas vraiment pour moi. J'ai ensuite trouvé le billet de Christoph Grabo intitulé \"[Responsive TOC leader lines with CSS](https://markentier.tech/posts/2021/03/responsive-toc-leader-lines-with-css/)\", qui présentait le concept d'utilisation de CSS Grid (par opposition à l'approche basée sur les `float` de Julie) pour faciliter l'alignement. Une fois de plus, cependant, son approche ne correspondait pas tout à fait à mes besoins.\n\nMais après avoir lu ces deux articles, j'ai eu le sentiment d'avoir une compréhension suffisante des problèmes de mise en page pour me lancer dans mon propre projet. J'ai utilisé des éléments des deux articles du blog et j'ai ajouté quelques nouveaux concepts HTML et CSS à mon approche pour arriver à un résultat qui me convient.\n\n## Choix du balisage\n\nLorsque j'ai décidé du balisage correct d'une table des matières, j'ai surtout pensé à la sémantique correcte. Fondamentalement, une table des matières consiste à associer un titre (chapitre ou sous-section) à un numéro de page, presque comme une paire clé-valeur. Cela m'a conduit à deux options :\n\nLa première option consiste à utiliser un tableau (`\u003ctable\u003e`) avec une colonne pour le titre et une colonne pour la page.\nEnsuite, il y a l'élément liste de définition (`\u003cdl\u003e`), souvent inutilisé et oublié. Il fait également office de carte clé-valeur. Ainsi, une fois encore, la relation entre le titre et le numéro de page serait évidente.\n\nCes deux options semblaient bonnes jusqu'à ce que je me rende compte qu'elles ne fonctionnent vraiment que pour les tables des matières à un seul niveau, c'est-à-dire uniquement si je voulais avoir une table des matières contenant uniquement les noms des chapitres. En revanche, si je voulais afficher les sous-sections dans la table des matières, je n'avais pas de bonnes options. Les éléments de tableau ne sont pas très adaptés aux données hiérarchiques et, bien que les listes de définitions puissent techniquement être imbriquées, la sémantique ne semblait pas correcte. Je suis donc retourné à la planche à dessin.\n\nJ'ai décidé de m'inspirer de l'approche de Julie et d'utiliser une liste ; cependant, j'ai opté pour une liste ordonnée (`\u003col\u003e`) au lieu d'une liste non ordonnée (`\u003cul\u003e`). Je pense qu'une liste ordonnée est plus appropriée dans ce cas. Une table des matières représente une liste de chapitres et de sous-titres dans l'ordre dans lequel ils apparaissent dans le contenu. L'ordre a de l'importance et ne doit pas se perdre dans le balisage.\n\nMalheureusement, l'utilisation d'une liste ordonnée implique la perte de la relation sémantique entre le titre et le numéro de page. L'étape suivante consistait donc à rétablir cette relation dans chaque élément de la liste. Le moyen le plus simple de résoudre ce problème est d'insérer le mot \"page\" avant le numéro de page. De cette façon, la relation entre le numéro et le texte est claire, même sans autre distinction visuelle.\n\nVoici un squelette HTML simple qui a servi de base à mon balisage\u0026nbsp;:\n\n```html\n\u003col class=\"toc-list\"\u003e\n  \u003cli\u003e\n    \u003ca href=\"#link_to_heading\"\u003e\n      \u003cspan class=\"title\"\u003eChapître ou titres de sous-sections\u003c/span\u003e\n      \u003cspan class=\"page\"\u003ePage 1\u003c/span\u003e\n    \u003c/a\u003e\n\n    \u003col\u003e\n      \u003c!-- sous-sections --\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n```\n\n## Application de styles à la table des matières\n\nUne fois que j'ai établi le balisage que je prévoyais d'utiliser, l'étape suivante consistait à appliquer certains styles.\n\nTout d'abord, j'ai supprimé les numéros générés automatiquement. Vous pouvez choisir de conserver les numéros générés automatiquement dans votre propre projet si vous le souhaitez, mais il est fréquent que les livres aient des avant et après-mots non numérotés inclus dans la liste des chapitres, ce qui rend les numéros générés automatiquement incorrects.\n\nPour mon cas, je remplirais les numéros de chapitre manuellement, puis j'ajusterais la mise en page de façon à ce que la liste de premier niveau n'ait pas de remplissage (ce qui l'aligne sur les paragraphes) et que chaque liste intégrée soit indentée de deux espaces. J'ai choisi d'utiliser une valeur de remplissage de 2 ch parce que je n'étais pas encore tout à fait sûr de la police que j'allais utiliser. L'unité de longueur ch permet au remplissage d'être relatif à la largeur d'un caractère - quelle que soit la police utilisée - plutôt qu'à une taille absolue en pixels qui pourrait donner un aspect incohérent.\n\nVoici le CSS que j'ai obtenu :\n\n```css\n.toc-list,\n.toc-list ol {\n  list-style-type: none;\n}\n\n.toc-list {\n  padding: 0;\n}\n\n.toc-list ol {\n  padding-inline-start: 2ch;\n}\n```\n\n[Sara Soueidan](https://www.sarasoueidan.com/) m'a fait remarquer que les navigateurs WebKit suppriment la sémantique des listes lorsque `list-style-type` est `none`. J'ai donc dû ajouter `role=\"list\"` dans le HTML pour la préserver :\n\n```html\n\u003col class=\"toc-list\" role=\"list\"\u003e\n  \u003cli\u003e\n    \u003ca href=\"#link_to_heading\"\u003e\n      \u003cspan class=\"title\"\u003eChapître ou titres de sous-sections\u003c/span\u003e\n      \u003cspan class=\"page\"\u003ePage 1\u003c/span\u003e\n    \u003c/a\u003e\n\n    \u003col role=\"list\"\u003e\n      \u003c!-- sous-sections --\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_GRQWEox\" src=\"//codepen.io/nzakas/embed/GRQWEox?height=450\u0026amp;theme-id=light\u0026amp;slug-hash=GRQWEox\u0026amp;user=nzakas\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/nzakas/pen/GRQWEox\"\u003e\n  Table of Contents - Start\u003c/a\u003e de Nicholas C. Zakas dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Stylisation du titre et du numéro de page\n\nLa liste étant stylisée à mon goût, il était temps de passer au style d'un élément individuel de la liste. Pour chaque élément de la table des matières, le titre et le numéro de page doivent être sur la même ligne, avec le titre à gauche et le numéro de page aligné à droite.\n\nVous vous dites peut-être : \"Pas de problème, c'est à ça que sert le flexbox !\" Vous n'avez pas tort ! Flexbox permet en effet d'obtenir un alignement correct du titre et de la page. Mais il y a quelques problèmes d'alignement délicats lorsque les leaders sont ajoutés, j'ai donc opté pour l'approche de Christoph qui utilise une grille, ce qui est un bonus car cela aide aussi avec les titres multilignes. Voici le CSS pour un article individuel :\n\n```css\n.toc-list li \u003e a {\n  text-decoration: none;\n  display: grid;\n  grid-template-columns: auto max-content;\n  align-items: end;\n}\n\n.toc-list li \u003e a \u003e .page {\n  text-align: right;\n}\n```\n\nLa grille comporte deux colonnes, dont la première est automatiquement dimensionnée pour remplir toute la largeur du conteneur, moins la deuxième colonne, qui est dimensionnée au contenu maximal. Le numéro de page est aligné sur la droite, comme il est de coutume dans une table des matières.\n\nLa seule autre modification que j'ai apportée à ce stade a été de masquer le texte \"Page\". Ce texte est utile pour les lecteurs d'écran, mais inutile sur le plan visuel. J'ai donc utilisé une [classe traditionnelle de type \"visually-hidden\"](https://css-tricks.com/inclusively-hidden/#screen-reader-only) pour le masquer :\n\n```css\n.visually-hidden {\n  clip: rect(0 0 0 0);\n  clip-path: inset(100%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  width: 1px;\n  white-space: nowrap;\n}\n```\n\nEt, bien entendu, le HTML doit être mis à jour pour utiliser cette classe :\n\n```html\n\u003col class=\"toc-list\" role=\"list\"\u003e\n  \u003cli\u003e\n    \u003ca href=\"#link_to_heading\"\u003e\n      \u003cspan class=\"title\"\u003eChapître ou titres de sous-sections\u003c/span\u003e\n      \u003cspan class=\"page\"\u003e\u003cspan class=\"visually-hidden\"\u003ePage\u003c/span\u003e 1\u003c/span\u003e\n    \u003c/a\u003e\n\n    \u003col role=\"list\"\u003e\n      \u003c!-- sous-sections --\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n```\n\nCette base étant posée, je suis passé à la question des lignes pointillées entre le titre et la page.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_mdXWwmL\" src=\"//codepen.io/nzakas/embed/mdXWwmL?height=450\u0026amp;theme-id=light\u0026amp;slug-hash=mdXWwmL\u0026amp;user=nzakas\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/nzakas/pen/mdXWwmL\"\u003e\n  Table of Contents - Étape 2\u003c/a\u003e de Nicholas C. Zakas dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Création de lignes pointillées\n\nLes lignes pointillées sont si courantes dans les médias imprimés que vous vous demandez peut-être pourquoi le CSS ne les prend pas déjà en charge. La réponse est : c'est le cas. Enfin, plus ou moins...\n\nIl existe en fait une fonction `leader()` définie dans la spécification [CSS Generated Content for Paged Media](https://www.w3.org/TR/css-gcpm-3/#leaders). Toutefois, comme c'est le cas pour la plupart des spécifications relatives aux médias paginés, cette fonction n'est implémentée dans aucun navigateur, ce qui l'exclut de toute option (du moins au moment où j'écris ces lignes). Elle n'est même pas répertoriée sur [caniuse.com](https://caniuse.com/), sans doute parce que personne ne l'a implémentée et qu'il n'y a aucun plan ou signe indiquant qu'ils le feront.\n\nHeureusement, Julie et Christoph ont déjà abordé ce problème dans leurs articles respectifs. Pour insérer les lignes pointillées, ils ont tous deux utilisé un pseudo-élément `::after` dont la propriété de contenu est définie comme une très longue chaîne de points, comme ceci :\n\n```css\n.toc-list li \u003e a \u003e .title {\n  position: relative;\n  overflow: hidden;\n}\n\n.toc-list li \u003e a .title::after {\n  position: absolute;\n  padding-left: 0.25ch;\n  content: ' . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . ';\n  text-align: right;\n}\n```\n\nLe pseudo-élément `::after` est placé dans une position absolue pour le sortir du flux de la page et éviter qu'il ne revienne à la ligne. Le texte est aligné sur la droite parce que nous voulons que les derniers points de chaque ligne soient alignés sur le numéro en fin de ligne. (Nous reviendrons plus tard sur les complexités de cette question.) L'élément `.title` est configuré pour avoir une position relative afin que le pseudo-élément `::after` ne sorte pas de sa boîte. Pendant ce temps, le débordement est masqué pour que tous ces points supplémentaires soient invisibles. Le résultat est une jolie table des matières avec des lignes pointillées.\n\nCependant, il y a encore autre chose à prendre en considération.\n\nSara m'a également fait remarquer que tous ces points sont considérés comme du texte par les lecteurs d'écran. Et du coup, qu'est-ce qu'on entend\u0026nbsp;? \"Introduction point point point point...\" jusqu'à ce que tous les points soient annoncés. C'est une expérience terrible pour les utilisateurs de lecteurs d'écran.\n\nLa solution consiste à insérer un élément supplémentaire dont l'`aria-hidden` est réglé sur `true`, puis à utiliser cet élément pour insérer les points. Ainsi, le HTML devient :\n\n```html\n\u003col class=\"toc-list\" role=\"list\"\u003e\n  \u003cli\u003e\n    \u003ca href=\"#link_to_heading\"\u003e\n      \u003cspan class=\"title\"\n        \u003eChapître ou titres de sous-sections\u003cspan\n          class=\"leaders\"\n          aria-hidden=\"true\"\n        \u003e\u003c/span\n      \u003e\u003c/span\u003e\n      \u003cspan class=\"page\"\u003e\u003cspan class=\"visually-hidden\"\u003ePage\u003c/span\u003e 1\u003c/span\u003e\n    \u003c/a\u003e\n\n    \u003col role=\"list\"\u003e\n      \u003c!-- sous-sections --\u003e\n    \u003c/ol\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n```\n\nEt le CSS devient :\n\n```css\n.toc-list li \u003e a \u003e .title {\n  position: relative;\n  overflow: hidden;\n}\n\n.toc-list li \u003e a .leaders::after {\n  position: absolute;\n  padding-left: 0.25ch;\n  content: ' . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . '\n    '. . . . . . . . . . . . . . . . . . . . . . . ';\n  text-align: right;\n}\n```\n\nDésormais, les lecteurs d'écran ignoreront les points et épargneront aux utilisateurs la frustration d'entendre l'annonce de plusieurs points.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ZEreyJb\" src=\"//codepen.io/nzakas/embed/ZEreyJb?height=450\u0026amp;theme-id=light\u0026amp;slug-hash=ZEreyJb\u0026amp;user=nzakas\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/nzakas/pen/ZEreyJb\"\u003e\n  Table of Contents - Étape 3\u003c/a\u003e de Nicholas C. Zakas dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Touches finales\n\nÀ ce stade, le composant table des matières est plutôt bien conçu, mais il pourrait bénéficier de quelques petites retouches. Pour commencer, la plupart des livres décalent visuellement les titres des chapitres de ceux des sous-sections. J'ai donc mis les éléments de premier niveau en gras et introduit une marge pour séparer les sous-sections des chapitres qui suivent :\n\n```css\n.toc-list \u003e li \u003e a {\n  font-weight: bold;\n  margin-block-start: 1em;\n}\n```\n\nEnsuite, je voulais nettoyer l'alignement des numéros de page. Tout se passait bien lorsque j'utilisais une police à largeur fixe, mais pour les polices à largeur variable, les points de repère peuvent finir par former un motif en zigzag lorsqu'ils s'adaptent à la largeur d'un numéro de page. Par exemple, les numéros de page comportant un 1 sont plus étroits que les autres, ce qui entraîne un désalignement des points d'amorce par rapport aux points des lignes précédentes ou suivantes.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/misaligned.webp\" width=\"254\" height=\"243\" alt=\"\"/\u003e\u003c/figure\u003e\n\nPour résoudre ce problème, j'ai réglé [`font-variant-numeric`](https://css-tricks.com/almanac/properties/f/font-variant-numeric/) sur `tabular-nums` afin que tous les chiffres soient traités avec la même largeur. En fixant également la largeur minimale à `2ch`, je me suis assuré que tous les chiffres à un ou deux chiffres étaient parfaitement alignés. (Si votre projet compte plus de 100 pages, il est préférable de fixer cette valeur à `3ch`). Voici le CSS final pour le numéro de page :\n\n```css\n.toc-list li \u003e a \u003e .page {\n  min-width: 2ch;\n  font-variant-numeric: tabular-nums;\n  text-align: right;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/aligned.webp\" width=\"254\" height=\"253\" alt=\"\"/\u003e\u003c/figure\u003e\n\nEt voilà, la table des matières est complète !\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_rNJaeMo\" src=\"//codepen.io/nzakas/embed/rNJaeMo?height=450\u0026amp;theme-id=light\u0026amp;slug-hash=rNJaeMo\u0026amp;user=nzakas\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/nzakas/pen/rNJaeMo\"\u003e\n  Table of Contents - Final\u003c/a\u003e de Nicholas C. Zakas dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Conclusion\n\nLa création d'une table des matières avec rien d'autre que du HTML et du CSS a été un défi plus important que prévu, mais je suis très satisfait du résultat. Non seulement cette approche est suffisamment souple pour s'adapter aux chapitres et aux sous-sections, mais elle permet de gérer les sous-sous-sections sans mettre à jour le CSS. L'approche globale fonctionne sur les pages Web où vous souhaitez créer des liens vers les différents emplacements du contenu, ainsi que sur les PDF où vous souhaitez que la table des matières renvoie à différentes pages. Et bien sûr, elle est également très belle à l'impression si vous souhaitez l'utiliser dans une brochure ou un livre.\n\nJe tiens à remercier Julie Blanc et Christoph Grabo pour leurs excellents articles de blog sur la création d'une table des matières, car ils m'ont été d'une aide précieuse lorsque j'ai commencé. J'aimerais également remercier Sara Soueidan pour ses commentaires sur l'accessibilité pendant que je travaillais sur ce projet.\n"},{"slug":"la-difference-entre-nth-child-et-nth-of-type","title":"La différence entre :nth-child et :nth-of-type","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"12 novembre 2021","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/","copyright":"2021"},"dateCascade":"24 juillet 2022","dateMachine":"2O220724","tags":["css","pseudo-classes"],"about":[":nth-of-type",":nth-child"],"excerpt":"La différence entre nth-child et nth-of-type n'est pas forcément évidente et pourtant elle est fondamentale.","featured":false,"featuredImage":"/images/authors/chris-coyier.jpg","order":null,"content":"\nSupposons que nous ayons ce HTML :\n\n```html\n\u003csection\u003e\n  \u003cp\u003eLittle\u003c/p\u003e\n  \u003cp\u003ePiggy\u003c/p\u003e\n  \u003c!-- nous voulons celui-ci --\u003e\n\u003c/section\u003e\n```\n\nLes deux CSS qui suivent feront exactement la même chose\u0026nbsp;:\n\n```css\np:nth-child(2) {\n  color: red;\n}\n```\n\n```css\np:nth-of-type(2) {\n  color: red;\n}\n```\n\nPourtant, il y aura une différence évidemment.\n\nLa définition de notre sélecteur `:nth-child`, en bon français, signifie _sélectionne un élément si_\u0026nbsp;:\n\n1. c'est un élément paragraphe\n2. c'est le deuxième enfant de son élément parent\n\nLa définition de notre sélecteur `:nth-of-type`, en bon français, signifie\u0026nbsp;:\n\n1. sélectionne le deuxième paragraphe enfant de son élément parent\n\n`:nth-of-type` est donc, comment dire... _moins conditionnel_.\n\nSupposons que notre balisage soit maintenant :\n\n```html\n\u003csection\u003e\n  \u003ch1\u003eWords\u003c/h1\u003e\n  \u003cp\u003eLittle\u003c/p\u003e\n  \u003cp\u003ePiggy\u003c/p\u003e\n  \u003c!-- nous voulons celui-ci --\u003e\n\u003c/section\u003e\n```\n\nCeci ne fonctionne plus :\n\n```css\np:nth-child(2) {\n  color: red;\n} /*  incorrect */\n```\n\nCeci fonctionne :\n\n```css\np:nth-of-type(2) {\n  color: red;\n} /* fonctionne */\n```\n\nPar \"incorrect\", je veux dire que le sélecteur `:nth-child` sélectionne maintenant le mot \"Little\" au lieu de \"Piggy\" parce que cet élément est à la fois 1) le second enfant et 2) un élément paragraphe. Par \"fonctionne\", je veux dire que \"Piggy\" est toujours sélectionné parce qu'il est _le deuxième paragraphe dans cet élément parent_.\n\nSi j'ajoutais un titre `\u003ch2\u003e` après le titre principal `\u003ch1\u003e`, le sélecteur `:nth-child` _ne sélectionnerait rien du tout_ puisque maintenant le deuxième enfant n'est plus un paragraphe, et donc le sélecteur ne trouve rien.  \nLe `:nth-of-type`, lui, fonctionne comme attendu.\n\nMon sentiment est que `:nth-of-type` est moins fragile et plus utile en général, même si `:nth-child` est plus souvent utilisé (semble-t-il). Combien de fois vous êtes-vous demandé \"je veux sélectionner le deuxième enfant d'un élément parent s'il se trouve être un paragraphe\"\u0026nbsp;? Parfois, peut-être, mais il est plus probable que vous vouliez \"sélectionner le deuxième paragraphe\" ou \"sélectionner chaque troisième rangée d'un tableau\", qui sont des cas où `:nth-of-type` est un choix plus solide (là encore, de mon point de vue).\n\nJ'ai l'impresson que mes moments de \"Grrrr... mais pourquoi ce sélecteur `:nth-child` ne marche pas\u0026nbsp;?!\" viennent du fait que j'ai qualifié le sélecteur avec un tag et que le numéro d'ordre de l'enfant ne correspond pas à ce tag. Par conséquent, lorsque j'utilise `:nth-child`, je me rends compte qu'il est préférable de spécifier le parent et de laisser `:nth-child` non qualifié.\n\n```css\ndl :nth-child(2) {\n} /* est mieux que */\ndd:nth-child(2) {\n} /* ceci */\n```\n\nMais bien sûr tout dépend de la situation exacte.\n\nVous pouvez jouer avec [ce super outil de test](https://css-tricks.com/examples/nth-child-tester/) ! Voir également [la page MDN de :last-of-type](https://developer.mozilla.org/fr/docs/Web/CSS/:last-of-type) et [la page MDN de :nth-child](https://developer.mozilla.org/fr/docs/Web/CSS/:nth-child)\n"},{"slug":"last-of-type","title":":last-of-type","author":{"name":"Sara Cope","lastname":"Cope"},"original":{"date":"1er juin 2022","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/almanac/selectors/n/nth-child","copyright":"2022"},"dateCascade":"23 juillet 2022","dateMachine":"2O220723","tags":["css","pseudo-classes"],"about":[":last-of-type"],"excerpt":"La pseudo-classe last-of-type cible un élément qui est le dernier enfant d'un type donné dans la liste des enfants de l'élément parent.","featured":false,"featuredImage":"/images/authors/sara-cope.jpg","order":null,"content":"\nLe sélecteur `:last-of-type` nous permet de cibler la dernière occurrence d'un élément à l'intérieur de son élément parent. Il est défini dans la spécification [Selectors Level 4](https://www.w3.org/TR/selectors/) comme une \"pseudo-classe structurelle\", c'est à dire qu'il est utilisé pour ajouter un style à un contenu en fonction de sa relation avec son élément parent ou ses éléments frères.\n\nAdmettons que nous ayons un article qui comporte un titre, plusieurs paragraphes et une image\u0026nbsp;:\n\n```html\n\u003carticle\u003e\n  \u003ch1\u003eUn Titre\u003c/h1\u003e\n\n  \u003cp\u003eParagraphe 1\u003c/p\u003e\n  \u003cp\u003eParagraphe 2\u003c/p\u003e\n  \u003cp\u003eParagraphe 3\u003c/p\u003e\n  \u003cimg src=\"...\" /\u003e\n\u003c/article\u003e\n```\n\nNous voulons que le dernier paragraphe soit affiché en plus petit, pour apparaître comme une conclusion (comme une note du rédacteur). Plutôt que de l'associer à une classe, nous pouvons utiliser `:last-of-type` pour le sélectionner\u0026nbsp;:\n\n```css\np:last-of-type {\n  font-size: 0.75em;\n}\n```\n\n`:last-of-type` fonctionne à peu près comme `:nth-of-child` mais avec une différence essentielle\u0026nbsp;: il est [moins spécifique](/articles/la-difference-entre-nth-child-et-nth-of-type). Dans l'exemple qui précède, si nous avions utilisé `p:nth-last-child(1)`, il ne se serait rien passé car le paragraphe n'est pas le dernier enfant de son élément parent. C'est là qu'apparaît la puissance de `:last-of-type` : il cible un type particulier d'élément dans un arrangement spécifique, _en relation avec des enfants similaires, plutôt qu'avec tos les enfants_.\n\nL'exemple plus complexe qui suit montre l'utilisation de `:last-of-type` et d'une pseudo-classe qui lui ressemble, `:first-of-type`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_DwGXKv\" src=\"//codepen.io/zakkain/embed/DwGXKv?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=DwGXKv\u0026amp;user=zakkain\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/zakkain/pen/DwGXKv\"\u003e\n  :first-of-type and :last-of-type\u003c/a\u003e de Sara Cope dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVoir également [la page de MDN](https://developer.mozilla.org/fr/docs/Web/CSS/:last-of-type)\n"},{"slug":"comment-apprendre-css","title":"Comment apprendre CSS","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"2 janvier 2019","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2019/01/how-to-learn-css/","copyright":"2019"},"dateCascade":"18 juin 2022","dateMachine":"2O220622","tags":["css","flexbox","cssgrid"],"about":["Box Sizing","Box Model","Box Alignment","Display","Media Queries","CSS Transitions","CSS Transform","Combinators"],"excerpt":"Pas besoin d'apprendre par cœur chaque propriété CSS, l'important est de comprendre les fondamentaux : cet article de Rachel Andrew vous guidera dans votre apprentissage de CSS.","featured":false,"featuredImage":"/images/smashing-css-specificity.webp","order":3,"content":"\nBeaucoup de gens me demandent de leur recommander des tutoriels sur divers aspects de CSS ou me demandent _comment apprendre CSS_. Je vois aussi beaucoup de personnes qui ont du mal à comprendre certaines parties de CSS, en partie à cause d'idées dépassées sur le langage. Le langage CSS a considérablement évolué ces dernières années, c'est donc le moment idéal pour rafraîchir nos connaissances. Même si le CSS ne représente qu'une petite partie de votre travail, c'est grâce au CSS que les choses finissent par ressembler à ce que nous voulons à l'écran, et il vaut donc la peine d'être raisonnablement à jour.\n\nCet article a pour but de présenter les principes fondamentaux de CSS et les ressources à consulter pour approfondir les domaines essentiels du développement CSS moderne. La plupart de ces ressources se trouvent ici même (_sur [Smashing Magazine](https://www.smashingmagazine.com/)_), mais j'ai également sélectionné d'autres ressources et des personnes à suivre dans des domaines clés du CSS. Il ne s'agit pas d'un guide complet pour les débutants, ni d'un guide destiné à couvrir absolument tous les aspects de CSS. Mon objectif est de couvrir l'essentiel du CSS moderne en me concentrant sur quelques domaines qui vous aideront à accéder au reste du langage.\n\n## Notions fondamentales du langage\n\nPour l'essentiel de CSS, vous n'avez pas à vous soucier d'apprendre les propriétés et les valeurs par cœur, vous pourrez les retrouver (NdT : [sur MDN](https://developer.mozilla.org/fr/docs/Web/CSS) par exemple) lorsque vous en aurez besoin. Cependant, il existe certains fondamentaux du langage, sans lesquels vous aurez du mal à vous y retrouver. Il vaut vraiment la peine de consacrer un peu de temps à vous assurer que vous comprenez ces éléments, vous gagnerez du temps et vous éviterez beaucoup de frustration à long terme.\n\n## Les sélecteurs, plus qu'une simple classe\n\nUn sélecteur fait ce qu'il est censé faire : il _sélectionne_ une partie de votre document afin que vous puissiez lui appliquer des règles CSS. La plupart des gens sont familiarisés avec l'utilisation d'une classe ou l'application d'un style à un élément HTML tel que `body`, mais il existe un grand nombre de sélecteurs plus avancés qui peuvent sélectionner des éléments en fonction de leur emplacement dans le document, par exemple parce qu'ils viennent directement après un élément ou qu'ils sont les rangées impaires d'un tableau.\n\nLes sélecteurs faisant partie de la spécification de niveau 3 (vous avez peut-être déjà entendu parler d'eux sous le nom de **sélecteurs de niveau 3**) sont [très bien pris en charge par les navigateurs](https://caniuse.com/css-sel3). Pour un examen détaillé des différents sélecteurs que vous pouvez utiliser, consultez [la référence MDN](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Selectors).\n\nCertains sélecteurs agissent _comme si_ vous aviez appliqué une classe à un élément du document. Par exemple, `p:first-child` se comporte comme si vous aviez ajouté une classe au premier élément `p`. Ces sélecteurs sont connus sous le nom de **sélecteurs de pseudo-classe**.\n\nLes **sélecteurs de pseudo-éléments** quant à eux agissent comme si un élément était inséré dynamiquement, par exemple `::first-line` agit de la même manière que si vous aviez enveloppé la première ligne de texte dans un `span`. Toutefois, il s'applique à nouveau si la longueur de la ligne change, ce qui ne serait pas le cas si vous insériez l'élément. Ces sélecteurs peuvent être assez complexes. Dans le CodePen ci-dessous, vous trouverez un exemple de pseudo-élément enchaîné avec une pseudo-classe. Nous ciblons le premier élément `p` avec une pseudo-classe `:first-child`, puis le sélecteur `::first-line` sélectionne la première ligne de cet élément, agissant comme si un `span` était ajouté autour de cette première ligne afin de la mettre en gras et d'en changer la couleur.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_wRdJdQ\" src=\"//codepen.io/rachelandrew/embed/wRdJdQ?height=440\u0026amp;theme-id=light\u0026amp;slug-hash=wRdJdQ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"440\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/wRdJdQ/\"\u003e\n  first-line\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## L'héritage et la cascade\n\nLa cascade définit _la règle qui l'emporte_ lorsque plusieurs règles peuvent s'appliquer à un élément. Si vous avez déjà été dans une situation où vous ne compreniez pas pourquoi certains CSS ne semblaient pas s'appliquer, il est probable que la cascade en soit responsable. La cascade est étroitement liée à l'héritage, qui définit quelles propriétés sont héritées par les éléments enfants de l'élément auquel elles sont appliquées. Elle est également liée à la spécificité ; les différents sélecteurs ont une spécificité différente qui détermine lequel l'emporte lorsque plusieurs sélecteurs peuvent s'appliquer à un élément.\n\nRemarque : pour bien comprendre toutes ces notions, je vous suggère de lire la section [Cascade et héritage](https://developer.mozilla.org/fr/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance) dans l'intro à CSS de MDN.\n\n👉🏿\u0026nbsp;\u0026nbsp;_La Cascade recommande aussi la lecture de [Cascade et priorité des sélecteurs](https://openweb.eu.org/articles/cascade_css) de Laurent Denis dans openweb_.\n\nSi vous avez du mal à appliquer un CSS à un élément, les DevTools de votre navigateur sont le meilleur endroit pour commencer vos investigations. Regardez l'exemple ci-dessous dans lequel j'ai un élément `h1` ciblé par le sélecteur d'élément `h1` et qui rend le titre orange. J'utilise également une classe, qui donne à l'élément `h1` la couleur `rebeccapurple`. La classe est plus spécifique et le `h1` est donc violet et non orange. Dans DevTools, vous pouvez voir que le sélecteur d'élément est barré car il ne s'applique pas. Une fois que vous avez constaté que le navigateur reçoit votre CSS (mais que quelque chose d'autre a pris le dessus), vous pouvez commencer à chercher à savoir pourquoi.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_yGbMoL\" src=\"//codepen.io/rachelandrew/embed/yGbMoL?height=550\u0026amp;theme-id=light\u0026amp;slug-hash=yGbMoL\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"550\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/yGbMoL/\"\u003e\n  spécificité\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/smashing-css-specificity.webp\" width=\"1000\" height=\"518\" alt=\"Informations de devtools\"/\u003e\u003cfigcaption\u003eDevTools nous permet de voir pourquoi certaines règles CSS ne sont pas appliquées à un élément\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Le modèle de boîte\n\nLes CSS sont des boîtes. Tout ce qui est affiché à l'écran a une boîte, et le [modèle de boîte](/articles/controler-le-modele-de-boite) décrit la façon dont la taille de cette boîte est calculée, en tenant compte des marges, du padding et des bordures. Le modèle de boîte CSS standard prend la largeur que vous avez donnée à un élément, puis ajoute à cette largeur le padding et la bordure, ce qui signifie que l'espace occupé par l'élément est plus grand que la largeur que vous lui avez donnée.\n\nPlus récemment, nous avons pu choisir d'utiliser un autre modèle de boîte qui utilise la largeur donnée à l'élément comme la largeur de l'élément visible à l'écran. Tout padding ou bordure insère le contenu de la boîte à partir des bords. Cela est beaucoup plus logique pour de nombreuses mises en page.\n\nDans la démo ci-dessous, j'ai deux boîtes. Elles ont toutes deux une largeur de 200 pixels, une bordure de 5 pixels et un padding de 20 pixels. La première boîte utilise le modèle de boîte standard et occupe donc une largeur totale de 250 pixels. La seconde utilise le modèle de boîte alternatif et a donc une largeur de 200 pixels.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xmdqjd\" src=\"//codepen.io/rachelandrew/embed/xmdqjd?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=xmdqjd\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/xmdqjd/\"\u003e\n  modèle de boîte\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLà encore, les DevTools du navigateur peuvent nous aider à comprendre le modèle de boîte utilisé. Dans l'image ci-dessous, j'utilise Firefox DevTools pour inspecter une boîte utilisant le modèle de boîte `content-box` par défaut. Les outils m'indiquent qu'il s'agit du modèle de boîte utilisé, et je peux voir le dimensionnement et la façon dont la bordure et le remplissage sont ajoutés à la largeur que j'ai attribuée.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/smashing-css-box-model.webp\" width=\"1000\" height=\"564\" alt=\"Informations de devtools\"/\u003e\u003cfigcaption\u003eDevTools nous permet de voir pourquoi une boîte a une certaine taille, et quel modèle de boîte est utilisé\u003c/figcaption\u003e\u003c/figure\u003e\n\nRemarque : avant IE6, Internet Explorer utilisait [un autre modèle de boîte](https://en.wikipedia.org/wiki/CSS_box_model#History), avec un padding et des bordures insérant le contenu en dehors de la largeur donnée. Pendant un certain temps, les navigateurs ont donc utilisé des modèles de boîtes différents ! Lorsque vous rencontrez des problèmes d'interopérabilité aujourd'hui, réjouissez-vous que les choses se soient améliorées et que les navigateurs ne calculent pas la largeur des objets de manière différente.\n\nVous trouverez une bonne explication du modèle de boîte et du dimensionnement des boîtes [dans CSS Tricks](https://css-tricks.com/box-sizing/), ainsi qu'une explication de la meilleure façon d'[utiliser globalement le modèle de boîte](https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/) alternatif dans votre site.\n\n👉🏿\u0026nbsp;\u0026nbsp;_La Cascade recommande aussi la lecture de [Contrôler le modèle de boîte](/articles/controler-le-modele-de-boite) d'Ire Aderinokun, et de [Box-sizing pour les nuls](/articles/box-sizing-pour-les-nuls) de Paula Borowska, publiés ici même_.\n\n## Flux normal\n\nSi vous avez un document dont le contenu est balisé par du HTML et que vous le visualisez dans un navigateur, il sera, avec un peu de chance, lisible. Les titres et les paragraphes commencent sur une nouvelle ligne, les mots s'affichent comme une phrase avec un seul espace blanc entre eux. Les balises de mise en forme, telles que `em`, n'interrompent pas le flux de la phrase. Ce contenu s'affiche [en mode Normal Flow](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Flow_Layout) ou Block Flow Layout. Chaque partie du contenu est décrite comme étant \"en flux\" ; elle connaît le reste du contenu et ne se chevauche donc pas.\n\nSi vous travaillez avec ce comportement plutôt que contre lui, votre vie sera beaucoup plus facile. C'est l'une des raisons pour lesquelles il est très utile de commencer par [un document HTML correctement balisé](https://brucelawson.co.uk/2018/the-practical-value-of-semantic-html/). En effet, grâce au flux normal et aux feuilles de style intégrées des navigateurs qui le respectent, votre contenu commence à être lisible.\n\n## Contextes de formatage\n\nUne fois que vous avez un document dont le contenu est en flux normal, vous pouvez souhaiter modifier l'apparence d'une partie de ce contenu. Pour ce faire, vous devez modifier le **contexte de mise en forme de l'élément**. Par exemple, si vous souhaitez que tous vos paragraphes soient regroupés et ne commencent pas sur une nouvelle ligne, vous pouvez changer l'élément `p` en `display : inline`, ce qui le fait passer d'un contexte de bloc à un contexte de mise en forme en ligne.\n\nLes contextes de mise en forme définissent essentiellement **un type externe et un type interne**. Le type externe contrôle le comportement de l'élément par rapport aux autres éléments de la page, tandis que le type interne contrôle l'apparence des enfants. Ainsi, par exemple, lorsque vous dites `display : flex`, vous définissez le contexte extérieur comme étant un contexte de formatage de bloc et les enfants comme ayant un contexte de formatage de flex.\n\nRemarque : La dernière version de la spécification d'affichage modifie les valeurs de `display` pour déclarer explicitement la valeur intérieure et extérieure. Par conséquent, à l'avenir, vous pourrez dire `display : block flex` ; (`block` étant la valeur externe et `flex` la valeur interne).\n\nPour en savoir plus sur l'affichage, rendez-vous [sur MDN](https://developer.mozilla.org/fr/docs/Web/CSS/display).\n\n## Être dans ou hors du flux\n\nLes éléments CSS sont décrits comme étant \"dans le flux\" ou \"hors du flux\". Les éléments dans le flux sont dotés d'un espace et cet espace est respecté par les autres éléments dans le flux. Si vous sortez un élément du flux, en le faisant flotter ou en le positionnant, l'espace de cet élément ne sera plus respecté par les autres éléments dans le flux.\n\nCela se remarque surtout avec les éléments positionnés de manière absolue. Si vous donnez à un élément une `position : absolute`, il est sorti du flux, vous devrez alors vous assurer que vous n'avez pas une situation dans laquelle l'élément hors du flux chevauche et rend illisible une autre partie de votre mise en page.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_Ormgzj\" src=\"//codepen.io/rachelandrew/embed/Ormgzj?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=Ormgzj\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/Ormgzj/\"\u003e\n  positionnement absolu hors du flux\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nQuant aux éléments flottants, ils sont également retirés du flux et, même si le contenu qui suit semble s'enrouler autour d'eux, on peut voir en plaçant une couleur de fond sur la boîte des éléments suivants qu'en réalité ils se sont élevés, ont raccourci leurs lignes, et ignorent l'espace utilisé par l'élément flottant.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_BvRZYw\" src=\"//codepen.io/rachelandrew/embed/BvRZYw?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=BvRZYw\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/BvRZYw/\"\u003e\n  élément flottant hors du flux\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous pouvez en savoir plus sur [les éléments en flux et hors flux sur MDN](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Flow_Layout/In_Flow_and_Out_of_Flow). Ce qu'il faut retenir, c'est que si vous retirez un élément du flux, vous devez gérer vous-même le chevauchement, car les règles habituelles de mise en page du flux de blocs ne s'appliquent plus.\n\n## Mise en page\n\nPendant plus de quinze ans, nous avons fait de la mise en page en CSS sans système de mise en page conçu pour ce travail. Cela a changé. Nous disposons désormais d'un système de mise en page parfaitement adapté, qui comprend la grille (Grid) et le Flexbox, mais aussi la mise en page en colonnes multiples et les anciennes méthodes de mise en page utilisées à bon escient. Si la mise en page CSS est un mystère pour vous, rendez-vous sur [le tutoriel MDN Learn Layout](https://developer.mozilla.org/fr/docs/Learn/CSS/CSS_layout), ou lisez mon article [Getting Started With CSS Layout](https://www.smashingmagazine.com/2018/05/guide-css-layout/) dans Smashing Magazine.\n\nN'imaginez pas que des méthodes telles que Grid et Flexbox soient de quelque façon concurrentes. Pour bien utiliser Layout, vous constaterez parfois qu'un composant est meilleur en tant que composant Flexbox et parfois en tant que Grid. À l'occasion, vous voudrez le comportement de flux de colonnes de multicol. Tous ces choix sont valables. Si vous avez l'impression de vous battre contre le comportement d'un élément, c'est en général un très bon signe qu'il vaut sans doute la peine de prendre du recul et d'essayer une approche différente. _Nous avons tellement l'habitude de bidouiller les CSS pour leur faire faire ce que nous voulons que nous risquons d'oublier que nous avons pas mal d'autres options à disposition_.\n\nLa mise en page est mon principal domaine d'expertise et j'ai écrit un certain nombre d'articles dans Smashing Magazine et ailleurs pour essayer d'aider à apprivoiser le nouveau paysage de la mise en page. En plus de l'article sur la mise en page mentionné ci-dessus, j'ai tout une série d'articles sur Flexbox - commencez par [Que se passe-t-il quand on crée un Flexbox Flex Container](/articles/que-se-passe-t-il-quand-on-cree-un-flexbox-flex-container). Dans l'article [Grid By Example](https://gridbyexample.com/), je propose toute une série de petits exemples de CSS Grid, ainsi qu'un tutoriel vidéo.\n\nEn outre, et surtout pour les designers, jetez un coup d'œil à [Jen Simmons](https://twitter.com/jensimmons) et à sa série de vidéos [Layout Land](https://www.youtube.com/channel/UC7TizprGknbDalbHplROtag).\n\n## Alignement\n\nJ'ai séparé l'alignement de la mise en page en général car, bien que la plupart d'entre nous aient été initiés à l'alignement dans le cadre de Flexbox, **ces propriétés s'appliquent à toutes les méthodes de mise en page** et il est utile de les comprendre dans ce contexte plutôt que de penser à \"l'alignement Flexbox\" ou \"l'alignement CSS Grid\". Nous disposons d'un ensemble de propriétés d'alignement qui fonctionnent de manière commune dans la mesure du possible ; elles présentent ensuite quelques différences dues au comportement des différentes méthodes de mise en page.\n\nSur MDN, vous pouvez étudier l'[alignement des boîtes](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Box_Alignment) et la manière dont il est mis en œuvre pour la grille, Flexbox, Multicol et la disposition en blocs. Dans Smashing Magazine, j'ai un article qui traite spécifiquement de l'alignement dans Flexbox : [CSS Flexbox et l'alignement, guide complet](/articles/css-flexbox-et-lalignement-guide-complet).\n\n## Dimensionnement\n\nJ'ai passé une grande partie de 2018 à parler de la spécification de dimensionnement intrinsèque et extrinsèque, et de la façon dont elle se rapporte à Grid et à Flexbox en particulier. Sur le web, nous sommes habitués à définir le dimensionnement en longueurs ou en pourcentages, car c'est ainsi que nous avons pu réaliser des mises en page de type Grid à l'aide de nombres flottants. Toutefois, les méthodes de mise en page modernes peuvent effectuer une grande partie de la répartition de l'espace à notre place, si nous les laissons faire. Il vaut la peine de comprendre comment Flexbox attribue l'espace (ou comment fonctionne l'unité `fr` Grid).\n\nDans Smashing Magazine, j'ai écrit sur [le dimensionnement dans la mise en page en général](https://www.smashingmagazine.com/2018/01/understanding-sizing-css-layout/) et aussi pour Flexbox dans [How Big Is That Flexible Box](https://www.smashingmagazine.com/2018/09/flexbox-sizing-flexible-box/) ?\n\n## Conception réactive\n\nNos nouvelles méthodes de mise en page (Grid et Flexbox) nous permettent souvent d'utiliser moins de media queries qu'avec nos anciennes méthodes, car elles sont flexibles et répondent aux changements de taille des fenêtres ou des composants sans que nous ayons besoin de modifier la largeur des éléments. Cependant, il y aura des endroits où vous voudrez ajouter des _breakpoint_ pour améliorer votre design.\n\nPour les _media queries_, en général, consultez mon article [Utiliser les media queries pour le Responsive Design en 2018](https://www.smashingmagazine.com/2018/02/media-queries-responsive-design-2018/). J'y jette un coup d'œil à ce que les media queries peuvent faire pour nous, et je montre également les nouvelles fonctionnalités à venir pour les media queries dans le niveau 4 de la spécification.\n\n## Polices et typographie\n\nParallèlement à la mise en page, l'utilisation des polices sur le web a subi d'énormes changements l'année dernière. Les polices variables, qui permettent à un seul fichier de police d'avoir des variations illimitées, sont là. Pour avoir un aperçu de ce qu'elles sont et de leur fonctionnement, regardez cet excellent exposé de Mandy Michael : [Variable Fonts and the Future of Web Design](https://www.youtube.com/watch?v=luAqYCd_TC8) . Je vous recommande également [Dynamic Typography With Modern CSS and Variable Fonts](https://noti.st/jpamental/WNNxqQ/dynamic-typography-with-modern-css-variable-fonts) de Jason Pamental.\n\nPour explorer les polices variables et leurs capacités, il existe une démo amusante de Microsoft ainsi qu'un certain nombre de terrains de jeu pour tester les polices variables - [Axis Praxis](https://www.axis-praxis.org/specimens/__DEFAULT__) étant le plus connu (j'aime aussi le [Font Playground](https://play.typedetail.com/)).\n\nUne fois que vous aurez commencé à travailler avec des polices variables, [ce guide sur MDN](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide) vous sera d'une grande utilité. Pour apprendre à mettre en œuvre une solution de repli pour les navigateurs qui ne prennent pas en charge les polices variables, lisez [Implementing a Variable Font With Fallback Web Fonts](https://pimpmytype.com/variable-font-fallback/) d'Oliver Schöndorfer. [L'éditeur de polices de Firefox DevTools](https://firefox-source-docs.mozilla.org/devtools-user/page_inspector/how_to/edit_fonts/index.html) permet également de travailler avec des polices variables.\n\n## Transformations et animations\n\nLes transformations et les animations CSS sont des sujets que je consulte en fonction de mes besoins. Je n'ai pas souvent besoin de les utiliser, et la syntaxe semble me sortir de la tête entre deux utilisations. Heureusement, la référence sur MDN m'aide et je suggère de commencer par les guides sur [l'utilisation des transformations CSS](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms) et [l'utilisation des animations CSS](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Animations/Using_CSS_animations). Zell Liew a également rédigé [un article intéressant](https://zellwk.com/blog/css-transitions/) qui explique en détail les transitions CSS.\n\nPour avoir une idée de tout ce qu'on peut faire, jetez un coup d'œil au site d'[Animista](https://animista.net/).\n\nL'une des choses qui peut prêter à confusion avec les animations, c'est l'approche à adopter. En plus de ce qui est pris en charge par CSS, vous pouvez avoir besoin d'impliquer JavaScript, SVG ou l'API d'animation Web, et tous ces éléments ont tendance à être mis dans le même panier. Dans son exposé intitulé \"[Choose Your Animation Adventure](https://aneventapart.com/news/post/choose-your-animation-adventure-by-val-head-aea-video)\" enregistré à An Event Apart, [Val Head](https://twitter.com/vlh) explique les différentes options.\n\n## Utilisez les antisèches comme un aide-mémoire, pas comme un outil d'apprentissage\u0026nbsp;!\n\nLorsque je mentionne des ressources relatives à Grid ou Flexbox, je reçois souvent des réponses indiquant qu'il est impossible d'utiliser Flexbox sans une antisèche. Je n'ai aucun problème avec les antisèches en tant qu'aide-mémoire pour consulter la syntaxe, et j'en ai publié quelques-unes moi-même. Le problème, si l'on s'en remet entièrement à elles, c'est que l'on risque de ne pas comprendre _pourquoi les choses fonctionnent_ en copiant la syntaxe. Ensuite, lorsque vous rencontrez un cas où cette propriété semble se comporter différemment, cette incohérence apparente semble déconcertante, ou un défaut du langage.\n\nSi vous vous trouvez dans une situation où CSS semble faire quelque chose de très étrange, demandez-vous pourquoi. Créez un scénario de test réduit qui met en évidence le problème, demandez à quelqu'un qui connaît mieux la spécification. La plupart des problèmes CSS sur lesquels on me pose des questions sont dus au fait que la personne concernée pense qu'une propriété fonctionne d'une manière différente de celle qu'elle utilise en réalité. C'est la raison pour laquelle je parle beaucoup de choses comme l'alignement et le dimensionnement, car c'est là que réside souvent cette confusion.\n\nOui, il y a des choses étranges dans CSS. C'est un langage qui a évolué au fil des ans, et il y a des choses que nous ne pouvons pas changer - [jusqu'à ce que nous inventions une machine à remonter le temps](https://wiki.csswg.org/ideas/mistakes). Cependant, une fois que vous aurez acquis quelques notions de base et que vous comprendrez pourquoi les choses se comportent comme elles le font, vous aurez beaucoup plus de facilité avec les notions plus pointues.\n\n---\n\n\u003cbr\u003e\u003cbr\u003e\n\n👉🏿\u0026nbsp;\u0026nbsp;_NdT : La Cascade a traduit de nombreux articles de Rachel Andrew, dont vous trouverez la liste dans [la page de l'auteur](/auteurs/rachel-andrew). Par ailleurs, les pages de tags sont enrichies de nombreuses ressources (autrefois listées dans la page Ressources de La Cascade), voyez par exemple [la page CSS](/tags/css) ou [la page Flexbox](/tags/flexbox)._\n"},{"slug":"controler-affichage-du-texte","title":"Contrôler l'affichage du texte","author":{"name":"Will Boyd","lastname":"Boyd"},"original":{"date":"2 mai 2022","site":"Codersblock","siteUrl":"https://codersblock.com/","postUrl":"https://codersblock.com/blog/deep-dive-into-text-wrapping-and-word-breaking/","copyright":"2022"},"dateCascade":"8 mai 2022","dateMachine":"2O220508","tags":["css","html"],"about":[],"excerpt":"Comment gérer le retour à la ligne ou les césures ? Il y a beaucoup plus de façons qu'on ne le pense, et plein d'astuces possibles.","featured":false,"featuredImage":"/images/authors/will-boyd.webp","order":null,"content":"\nNous allons voir différentes façons de contrôler (ou pas) le flux du texte sur une page Web. CSS nous offre de nombreux outils pour assurer ce flux —\u0026nbsp;retour à la ligne, coupure de mots\u0026nbsp;— mais nous verrons également plusieurs astuces utilisant HTML et les caractères spéciaux.\n\n## Protection de la mise en page\n\nNormalement, le texte retourne à la ligne dès que l'opportunité se présente, c'est-à-dire aux endroits où l'on s'attend à ce que le texte s'interrompe naturellement, entre les mots ou après un trait d'union. Mais on a parfois affaire à de longues portions de texte qui ne présentent pas de possibilités de retour à la ligne, comme des mots très longs ou des URL. Cela peut entraîner toutes sortes de problèmes de mise en page. Par exemple, le texte peut déborder de son conteneur ou forcer le conteneur à devenir trop large et pousser des éléments hors de leur place.\n\nUn bon codage défensif consiste à **anticiper les problèmes liés à l'absence de rupture explicite du texte**, et CSS nous fournit quelques outils à cet effet.\n\n## Faire en sorte que le texte retourne à la ligne\n\nEn plaçant `overflow-wrap : break-word` sur un élément, le texte pourra être interrompu au milieu du mot si nécessaire. L'algorithme essaiera d'abord de garder un mot intact en le déplaçant à la ligne suivante, mais il coupera le mot s'il n'y a toujours pas assez de place.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_dydPWvo\" src=\"//codepen.io/lonekorean/embed/dydPWvo?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=dydPWvo\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/dydPWvo\"\u003e\n  overflow-wrap: break-word\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl y a également `overflow-wrap : anywhere`, qui coupe les mots de la même manière. La différence réside dans la façon dont il affecte le calcul de la taille du contenu minimal de l'élément sur lequel il se trouve. L'effet est assez évident quand on fixe la largeur à `min-content`\u0026nbsp;:\n\n```CSS\n.top {\n  width: min-content;\n  overflow-wrap: break-word;\n}\n\n.bottom {\n  width: min-content;\n  overflow-wrap: anywhere;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vYdEmxG\" src=\"//codepen.io/lonekorean/embed/vYdEmxG?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=vYdEmxG\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/vYdEmxG\"\u003e\n  overflow-wrap + min-content\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLe premier élément avec `overflow-wrap : break-word` calcule le contenu minimal comme si aucun mot n'était coupé, de sorte que sa largeur devient la largeur du mot le plus long. L'élément du bas avec `overflow-wrap : anywhere` calcule le contenu minimal avec toutes les coupures qu'il peut créer. Vu qu'une coupure peut se produire n'importe où, le contenu minimal correspond à la largeur d'un seul caractère.\n\nN'oubliez pas que ce comportement ne se produit que lorsque `min-content` est impliqué. Si nous avions donné une valeur fixe à la largeur, nous verrions le même résultat de coupure de mots dans les deux cas de figure.\n\n## Couper les mots sans pitié\n\nUne autre option pour créer une césure est `word-break: break-all`. Celle-ci n'essaiera même pas de garder les mots entiers —\u0026nbsp;elle les coupera immédiatement. Voici ce que ça donne\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_GRQgmWN\" src=\"//codepen.io/lonekorean/embed/GRQgmWN?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=GRQgmWN\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/GRQgmWN\"\u003e\n  word-break: break-all\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nRemarquez comment le mot long n'est pas déplacé à la ligne suivante, comme il l'aurait été en utilisant `overflow`. Remarquez aussi comment \"words\" est coupé, même s'il aurait pu être placé sur la ligne suivante.\n\n`word-break : break-all` n'a aucun problème à couper les mots, mais il reste toujours prudent avec la ponctuation. Par exemple, il évitera de commencer une ligne avec le point de la fin d'une phrase. Si vous voulez une rupture vraiment impitoyable, même avec la ponctuation, utilisez `line-break : anywhere`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_PoQwmpp\" src=\"//codepen.io/lonekorean/embed/PoQwmpp?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=PoQwmpp\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/PoQwmpp\"\u003e\n  word-break: break-all vs line-break: anywhere\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous avez vu comment `word-break : break-all` déplace le \"k\" vers le bas pour éviter de commencer la deuxième ligne avec \".\"\u0026nbsp;? Mais `line-break : anywhere` , lui, s'en moque.\n\n## Ponctuation excessive\n\nVoyons comment les propriétés CSS que nous avons abordées jusqu'à présent traitent les signes de ponctuation excessivement longs.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_OJQPmpm\" src=\"//codepen.io/lonekorean/embed/OJQPmpm?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=OJQPmpm\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/OJQPmpm\"\u003e\n  Ponctuation excessive\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n`overflow-wrap : break-word` et `line-break : anywhere` sont capables de contenir les choses, mais il y a ensuite `word-break : break-all` qui est de nouveau bizarre avec la ponctuation —\u0026nbsp;cette fois-ci, le résultat est un texte qui déborde.\n\nC'est une chose à garder à l'esprit. Si vous ne voulez absolument pas que le texte déborde, sachez que `word-break : break-all` n'empêchera pas la ponctuation de dépasser.\n\n## Spécifier où les mots peuvent être coupés\n\nPour plus de contrôle, vous pouvez insérer manuellement des possibilités de coupure de mots dans votre texte avec `\u003cwbr\u003e`. Vous pouvez également utiliser un \"espace de largeur nulle\", fourni par l'entité HTML `\u0026ZeroWidthSpace;` (oui, il faut des majuscules comme vous le voyez\u0026nbsp;!).\n\nVoyons ces éléments en action avec une longue URL qui ne serait normalement pas retournée à la ligne, en insérant des césures entre les segments.\n\n```HTML\n  \u003c!-- normal --\u003e\n  \u003cp\u003ehttps://subdomain.somewhere.co.uk\u003c/p\u003e\n\n  \u003c!-- \u003cwbr\u003e --\u003e\n  \u003cp\u003ehttps://subdomain\u003cwbr\u003e.somewhere\u003cwbr\u003e.co\u003cwbr\u003e.uk\u003c/p\u003e\n\n  \u003c!-- \u0026ZeroWidthSpace; --\u003e\n  \u003cp\u003ehttps://subdomain\u0026ZeroWidthSpace;.somewhere\u0026ZeroWidthSpace;.co\u0026ZeroWidthSpace;.uk\u003c/p\u003e\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_wvyBdJq\" src=\"//codepen.io/lonekorean/embed/wvyBdJq?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=wvyBdJq\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/wvyBdJq\"\u003e\n  Manual Word Break Opportunities\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Trait d'union automatique\n\nVous pouvez demander au navigateur de couper les mots avec un trait d'union lorsque nécessaire en utilisant l'option `hyphens: auto`. Les règles de césure sont déterminées par la langue. Vous devez donc indiquer au navigateur la langue à utiliser. Pour ce faire, vous devez spécifier l'attribut `lang` dans le HTML, soit directement dans l'élément concerné, soit dans la balise `\u003chtml\u003e`.\n\n```HTML\n\u003cp lang=\"en\"\u003eThis is just a bit of arbitrary text to show hyphenation in action.\u003c/p\u003e\n\n```\n\n```CSS\n  p {\n    -webkit-hyphens: auto; /* pour Safari */\n    hyphens: auto;\n  }\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_NWyPjpw\" src=\"//codepen.io/lonekorean/embed/NWyPjpw?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=NWyPjpw\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/NWyPjpw\"\u003e\n  hyphens: auto\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Trait d'union manuel\n\nVous pouvez également prendre les choses en main et insérer un \"tiret doux\" manuellement avec l'entité HTML `\u0026shy;`. Il ne sera pas visible, à moins que le navigateur ne décide de l'insérer, auquel cas un trait d'union apparaîtra. Remarquez dans la démo suivante que nous utilisons deux fois l'entité `\u0026shy;` mais qu'elle n'apparaît qu'une seule fois, là où le texte doit effectivement retourner à la ligne.\n\n```HTML\n\u003cp lang=\"en\"\u003eMagic? Abraca\u0026shy;dabra? Abraca\u0026shy;dabra!\u003c/p\u003e\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_jOZEmBz\" src=\"//codepen.io/lonekorean/embed/jOZEmBz?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=jOZEmBz\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/jOZEmBz\"\u003e\n  Trait d'union doux\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n`hyphens` doit être réglé sur `auto` ou `manual` pour que `\u0026shy;` s'affiche correctement. Par commodité, la valeur par défaut est `hyphens : manual`, ce qui devrait vous permettre de vous passer de tout CSS supplémentaire (à moins que quelque chose quelque part n'ait déclaré `hyphens : none` pour une raison quelconque).\n\n## Empêcher le texte de revenir à la ligne\n\nChangeons de sujet. Il peut arriver que vous ne souhaitiez pas que le texte retourne librement à la ligne, afin de mieux contrôler la façon dont votre contenu est présenté. Il existe quelques outils pour vous aider.\n\nLe premier est `white-space : nowrap`. Placez-le sur un élément pour empêcher son texte de revenir à la ligne naturellement.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_qBxEmVE\" src=\"//codepen.io/lonekorean/embed/qBxEmVE?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=qBxEmVE\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/qBxEmVE\"\u003e\n  white-space: nowrap\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Préformater le texte\n\nIl existe également la fonction `white-space : pre`, qui permet d'afficher un retour à la ligne du texte tel que vous l'avez saisi dans votre HTML. Prenez garde toutefois, car il conservera également les espaces de votre HTML, donc faites attention à votre formatage. Vous pouvez également utiliser une balise `\u003cpre\u003e` pour obtenir les mêmes résultats (elle comporte un `white-space : pre` par défaut).\n\n```HTML\n\u003c!-- le formatage de ce HTML a pour conséquence un espace blanc supplémentaire --\u003e\n\u003cp\u003e\n  What's worse, ignorance or apathy?\n  I don't know and I don't care.\n\u003c/p\u003e\n\n\u003c!-- un formatage plus serré qui \"embrasse\" le texte --\u003e\n\u003cp\u003eWhat's worse, ignorance or apathy?\nI don't know and I don't care.\u003c/p\u003e\n\n\u003c!-- comme ci-dessus, mais avec \u003cpre\u003e --\u003e\n\u003cpre\u003eWhat's worse, ignorance or apathy?\nI don't know and I don't care.\u003c/pre\u003e\n```\n\n```CSS\np {\n  white-space: pre;\n}\n\npre {\n  /* \u003cpre\u003e sets font-family: monospace, but we can undo that */\n  font-family: inherit;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LYQEyOV\" src=\"//codepen.io/lonekorean/embed/LYQEyOV?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=LYQEyOV\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/LYQEyOV\"\u003e\n  Texte préformaté\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Un retour à la ligne dans un insécable ?\n\nPour les sauts de ligne, vous pouvez utiliser `\u003cbr\u003e` à l'intérieur d'un élément avec `white-space: nowrap` ou `white-space: pre`. Le texte retournera à la ligne.\n\nMais que se passe-t-il si vous utilisez `\u003cwbr\u003e` dans un tel élément\u0026nbsp;? C'est une question piège… parce que les navigateurs ne sont pas d'accord\u0026nbsp;! Chrome/Edge reconnaîtra le `\u003cwbr\u003e` et retournera à la ligne potentiellement, mais pas Firefox/Safari.\n\nEn ce qui concerne l'espace de largeur nulle `\u0026ZeroWidthSpace;`, les navigateurs sont cohérents. Aucun ne renverra à la ligne avec `white-space: nowrap` ou `white-space: pre`.\n\n```HTML\n\u003cp\u003eDarth Vader: Nooooooooooooo\u003cbr\u003eoooo!\u003c/p\u003e\n\n\u003cp\u003eDarth Vader: Nooooooooooooo\u003cwbr\u003eoooo!\u003c/p\u003e\n\n\u003cp\u003eDarth Vader: Nooooooooooooo\u0026ZeroWidthSpace;oooo!\u003c/p\u003e\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_dydPWZG\" src=\"//codepen.io/lonekorean/embed/dydPWZG?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=dydPWZG\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/dydPWZG\"\u003e\n  white-space: nowrap + breaking lines\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Espaces insécables\n\nParfois, vous souhaiterez peut-être que le texte retourne librement à la ligne, sauf à des endroits très spécifiques. Bonne nouvelle\u0026nbsp;! Il existe quelques entités HTML spécialisées qui vous permettent de faire exactement cela.\n\nUn \"espace insécable\" (`\u0026nbsp;`) est souvent utilisé pour conserver un espace entre les mots, mais n'autorise pas de saut de ligne entre eux (ils forment alors un tout insécable).\n\n```HTML\n\u003cp\u003eSomething I've noticed is designers don't seem to like orphans.\u003c/p\u003e\n\n\u003cp\u003eSomething I've noticed is designers don't seem to like\u0026nbsp;orphans.\u003c/p\u003e\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YzePVEW\" src=\"//codepen.io/lonekorean/embed/YzePVEW?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=YzePVEW\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/YzePVEW\"\u003e\n  Espaces insécables\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n👉🏽 _NdT : un exemple courant (et recommandé) d'utilisation de l'espace insécable est l'espace précédant un signe de ponctuation, par exemple un point d'exclamation\u0026nbsp;! ou le suivant, par exemple\u0026nbsp;: —\u0026nbsp;un tiret cadratin. Nous ne contrôlons pas la largeur des écrans de nos utilisateurs, l'espace insécable évite les signes de ponctuation orphelins en début ou en fin de ligne_.\n\n## Jointures de mots et traits d'union insécables\n\nUn texte peut retourner naturellement à la ligne même sans espaces, par exemple après un trait d'union à l'intérieur d'un mot. Pour empêcher le retour à la ligne, vous pouvez utiliser `\u0026NoBreak;` (sensible à la casse !) qui agit comme un \"agrégateur de mots\". Pour les traits d'union en particulier, vous pouvez obtenir un \"trait d'union insécable\" avec `\u0026#8209;` (il n'a pas de joli nom d'entité HTML).\n\n```HTML\n  \u003cp\u003eTurn right here to get on I-85.\u003c/p\u003e\n\n  \u003cp\u003eTurn right here to get on I-\u0026NoBreak;85.\u003c/p\u003e\n\n  \u003cp\u003eTurn right here to get on I\u0026#8209;85.\u003c/p\u003e\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vYdEmWX\" src=\"//codepen.io/lonekorean/embed/vYdEmWX?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=vYdEmWX\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/vYdEmWX\"\u003e\n  Word Joiners and Non-Breaking Hyphens\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Texte CJC et mots de rupture\n\nLe texte CJC (chinois/japonais/coréen) se comporte à certains égards différemment du texte non CJC. Certaines propriétés et valeurs CSS peuvent être utilisées pour un contrôle supplémentaire du retour à la ligne du texte CJC spécifiquement.\n\nLe comportement par défaut du navigateur permet de couper des mots dans le texte CJC. Cela signifie que `word-break: normal` (par défaut) et `word-break: break-all` vous donneront les mêmes résultats. Cependant, vous pouvez utiliser `word-break: keep-all` pour empêcher le texte CJC de revenir à la ligne au milieu des mots (le texte non CJC ne sera pas affecté).\n\nVoici un exemple en coréen. Notez comment le mot \"자랑스럽게\" se coupe ou ne se coupe pas.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_MWQYmVZ\" src=\"//codepen.io/lonekorean/embed/MWQYmVZ?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=MWQYmVZ\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/MWQYmVZ\"\u003e\n  CJK Text + word-break\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nAttention toutefois, le chinois et le japonais n'utilisent pas d'espaces entre les mots comme le fait le coréen, donc `word-break: keep-all` peut facilement provoquer un long débordement de texte s'il n'est pas géré autrement.\n\n## Texte CJC et règles de saut de ligne\n\nNous avons parlé de `line-break: anywhere` tout à l'heure avec du texte non CJC et du fait qu'il n'a aucun problème à couper à la ponctuation. Il en va de même avec le texte CJC.\n\nVoici un exemple en japonais. Notez comment \"。\" est ou n'est pas autorisé à commencer une ligne.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ZErYKxw\" src=\"//codepen.io/lonekorean/embed/ZErYKxw?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=ZErYKxw\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/ZErYKxw\"\u003e\n  CJK Text + line-break\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl existe d'autres valeurs pour `line-break` qui affectent la façon dont le texte CJC retourne à la ligne\u0026nbsp;: `loose`, `normal` et `strict`. Ces valeurs indiquent au navigateur les règles à utiliser pour décider où insérer des sauts de ligne. Le W3C [décrit plusieurs règles](https://drafts.csswg.org/css-text-3/#line-break-property) et il est également possible pour les navigateurs d'ajouter leurs propres règles.\n\n## À mentionner : Débordement d'élément\n\nLa propriété CSS `overflow` n'est pas spécifique au texte, mais est souvent utilisée pour s'assurer que le texte ne s'affiche pas en dehors d'un élément dont la largeur ou la hauteur est délimitée.\n\n```CSS\n.top {\n  white-space: nowrap;\n  overflow: auto;\n}\n\n.bottom {\n  white-space: nowrap;\n  overflow: hidden;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_rNJamdb\" src=\"//codepen.io/lonekorean/embed/rNJamdb?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=rNJamdb\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/rNJamdb\"\u003e\n  Element Overflow\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nComme vous pouvez le voir, une valeur `auto` permet de faire défiler le contenu (`auto` n'affiche les barres de défilement qu'en cas de besoin, `scroll` les affiche toujours). Une valeur de `hidden` coupe simplement le contenu et en reste là.\n\n`overflow` est en fait un raccourci pour définir à la fois `overflow-x` et `overflow-y`, respectivement pour le débordement horizontal et vertical. N'hésitez pas à utiliser ce qui vous convient le mieux.\n\nNous pouvons compléter `overflow: hidden` en ajoutant `text-overflow: ellipsis`. Le texte sera toujours coupé, mais nous aurons de jolis points de suspension à titre indicatif.\n\n```CSS\np {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_XWZJREw\" src=\"//codepen.io/lonekorean/embed/XWZJREw?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=XWZJREw\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/XWZJREw\"\u003e\n  text-overflow: ellipsis\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Astuce bonus : saut de ligne en pseudo-élément\n\nVous pouvez forcer un saut de ligne avant et/ou après un élément ìnline`, tout en le gardant comme élément `inline`, avec une astuce de pseudo-élément.\n\nTout d'abord, définissez le `content` d'un pseudo-élément `::before` ou `::after` sur `'\\A'`, ce qui vous donnera le caractère de _nouvelle ligne_. Ensuite, définissez `white-space: pre` pour vous assurer que le caractère de nouvelle ligne est respecté.\n\n```HTML\n\u003cp\u003eThings that go \u003cspan\u003ebump\u003c/span\u003e in the night.\u003c/p\u003e\n```\n\n```CSS\nspan {\n  background-color: #000;\n}\n\nspan::before, span::after {\n  content: '\\A';\n  white-space: pre;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eYVmWMX\" src=\"//codepen.io/lonekorean/embed/eYVmWMX?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=eYVmWMX\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/eYVmWMX\"\u003e\n  Pseudo-Element Line Breaks\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous aurions pu simplement mettre `display: block` sur le `\u003cspan\u003e` pour obtenir les mêmes retours à la ligne, mais il ne serait plus `inline`. Le `background-color` permet de voir facilement qu'avec cette méthode, nous avons toujours un élément `inline`.\n\n## Notes bonus\n\n- Il existe une ancienne propriété CSS nommée `word-wrap`. Elle n'est pas standard et les navigateurs la traitent désormais comme un alias pour `overflow-wrap`.\n- La propriété CSS `white-space` a [d'autres valeurs](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space#values) que nous n'avons pas couvertes : `pre-wrap`, `pre-line` et `break-spaces`. Contrairement à celles que nous avons couvertes, celles-ci n'empêchent pas le retour à la ligne du texte.\n- La spécification CSS Text Module Level 4 [décrit](https://www.w3.org/TR/css-text-4/#text-wrap) une propriété CSS `text-wrap` qui semble intéressante, mais au moment de la rédaction, aucun navigateur ne l'implémente.\n\n## Il est temps de conclure\n\nIl y a [tellement de choses à dire à propos du texte fluide](https://raphlinus.github.io/text/2020/10/26/text-layout.html#line-breaking) sur une page Web. La plupart du temps, vous n'avez pas vraiment besoin d'y penser, car les navigateurs le gèrent pour vous. Si vous avez besoin de plus de contrôle, il est bon de savoir que vous avez beaucoup d'options.\n\nÉcrire cet article a définitivement été un puits sans fond pour moi car je trouvais à chaque fois plus de choses à raconter. J'espère que je vous en ai montré assez pour que votre texte se coupe et s'écoule comme vous le souhaitez.\n\nMerci d'avoir lu !\n"},{"slug":"ameliorer-un-texte-a-faible-contraste","title":"Améliorer un texte à faible contraste","author":{"name":"Ben Myers","lastname":"Myers"},"original":{"date":"10 avril 2022","site":"le site de Ben Myers","siteUrl":"https://benmyers.dev/","postUrl":"https://benmyers.dev/blog/fix-low-contrast-text/","copyright":"2022"},"dateCascade":"29 avril 2022","dateMachine":"2O220429","tags":["css","accessibilite","couleur"],"about":["Teinte","Contraste Couleur","Luminance"],"excerpt":"Le contraste insuffisant d'un texte est un obstacle grave pour les utilisateurs malvoyants ou simplement à la vue déclinante. Et pourtant, ce problème d'accessibilité lié au contraste est encore très (trop) répandu !","featured":false,"featuredImage":false,"order":null,"content":"\nLe premier principe d'accessibilité du contenu dans les _[Web Content Accessible Guidelines](https://www.w3.org/TR/WCAG22/)_ est que le contenu doit être **perceptible**. Après tout, vous ne pourrez pas accéder à l'information ou à la fonctionnalité si vous ne savez pas qu'elle est là\u0026nbsp;! Et apparemment, le moyen le plus efficace de s'assurer que les utilisateurs ne pourront pas distinguer votre contenu est de le définir dans une couleur qui ne se démarque pas de son arrière-plan —\u0026nbsp;en d'autres termes, d'avoir un faible contraste de couleur.\n\nNous pouvons tous rencontrer un problème lié à un contraste insuffisant, pour diverses raisons —\u0026nbsp;par exemple à cause du reflet du soleil sur notre écran\u0026nbsp;— mais le contraste insuffisant d'un texte a un impact _démesuré_ sur les utilisateurs malvoyants tels que ceux qui ont des problèmes de vision ou qui sont daltoniens. Et pourtant, le texte à faible contraste est partout. Le rapport [WebAIM Million pour 2022](https://webaim.org/projects/million/) a révélé que près de 84 % des 1 million de pages d'accueil les plus populaires avaient au moins une violation de contraste insuffisant, avec une moyenne de 31,6 instances distinctes de texte faiblement contrasté par page d'accueil. [Un rapport de 2021 de Deque Systems (PDF)](https://accessibility.deque.com/hubfs/Accessibility-Coverage-Report.pdf#page=6) a révélé que le texte à faible contraste représentait 30 % des défauts d'accessibilité automatiquement détectables, ce qui en fait de loin le défaut d'accessibilité le plus courant.\n\nCorriger l'insuffisance de contraste pourrait grandement contribuer à **rendre le Web plus utilisable**. Nous allons voir comment mesurer le contraste, corriger facilement un faible contraste et assurer un contraste suffisant dans nos sites à l'avenir.\n\n## Obtenez un ratio\n\nLe plus simple pour commencer est d'utiliser un contrôleur de contraste de couleur. Des outils tels que [WebAIM Contrast Checker](https://webaim.org/resources/contrastchecker/) prennent une paire de couleurs que vous leur donnez et vous retournent un rapport de contraste. En attendant, si vous avez déjà déployé votre site et vos couleurs en direct pour le monde, vous pouvez utiliser des outils d'analyse d'accessibilité pleine page tels que l'extension [ax DevTools](https://www.deque.com/axe/devtools/), et ils effectueront des opérations de contraste des couleurs pour chaque bit de texte et d'arrière-plan sur votre page et identifieront les éléments spécifiques de votre page dont le contraste est insuffisant. Dans tous les cas, vous obtiendrez un rapport de contraste des couleurs.\n\nCes ratios prennent le format `\u003cun certain nombre\u003e:1`, allant de `1:1` (pas de contraste — vous avez comparé une couleur à elle-même) à `21:1` (contraste maximum, uniquement obtenu en comparant le noir et blanc). Plus le premier chiffre est élevé, plus il y a de contraste entre les deux couleurs.\n\nCe rapport n'est pas vraiment un score de la différence entre les deux couleurs, mais plutôt un score de la façon dont une couleur serait perceptible par dessus l'autre. Par exemple, en tant que personne non daltonienne, les couleurs CSS tomato `#ff6347` et cornflowerblue `#6495ed` me semblent très différentes\u0026nbsp;:\n\n\u003csection class=\"demo\" aria-label=\"Démo : deux cercles, un rouge tomate et l'autre bleu clair\"\u003e\u003cdiv class=\"swatch tomato\"\u003e\u003c/div\u003e\u003cdiv class=\"swatch cornflowerblue\"\u003e\u003c/div\u003e\u003c/section\u003e\n\nEt pourtant, la tomate et le bleuet ont ensemble un très mauvais rapport de contraste des couleurs\u0026nbsp;: seulement environ 1,009:1. C'est à peine mieux que la comparaison de n'importe quelle couleur avec elle-même\u0026nbsp;! Si nous empilons ces couleurs l'une sur l'autre (avec nos excuses anticipées\u0026nbsp;!), nous pouvons voir qu'ensemble elles sont difficiles, voire carrément douloureuses, à lire\u0026nbsp;:\n\n\u003csection class=\"legibility demo\" aria-label=\"Exemple: Tomato red text on a cornflower blue background\"\u003e\n\u003cstrong\u003eQui a envie de lire ça ?\u003c/strong\u003e\n\u003c/section\u003e\n\nLes algorithmes de contraste de couleurs actuelllement disponibles pour obtenir ces rapports n'essaient pas de nous donner la différence mathématique pure entre deux couleurs, mais décrivent plutôt une différence plus subjective entre les deux couleurs, basée sur la perception humaine. Plus précisément, ils comparent la [luminance](https://fr.wikipedia.org/wiki/Luminance) relative des deux couleurs, ce qui revient essentiellement à savoir si une couleur est plus claire ou plus lumineuse que l'autre. Ici, la tomate et le bleuet sont à peu près aussi brillants, c'est pourquoi ils sont difficiles à lire ensemble.\n\n### Utilisation des ratios\n\nMaintenant que nous avons une idée de la façon dont on mesure le contraste entre deux couleurs, comment savons-nous quand le contraste est suffisant\u0026nbsp;?\n\nDans le [critère de réussite 1.4.3](https://www.w3.org/WAI/WCAG22/Understanding/contrast-minimum.html) des directives pour l'accessibilité des contenus Web, le World Wide Web Consortium définit deux points de repère clés dont nous devons nous souvenir\u0026nbsp;:\n\n- La plupart des textes ont besoin d'un rapport d'au moins 4,5:1 par rapport à leur arrière-plan.\n- Les règles pour les textes plus volumineux sont un peu plus souples —\u0026nbsp;un texte volumineux n'a besoin que de respecter un rapport de 3:1 par rapport à son arrière-plan.\n\n## Comment améliorer votre score\n\nVous avez donc mesuré votre texte et déterminé qu'il ne répond pas aux exigences de contraste des couleurs. Que pouvez-vous faire pour régler la situation sans chambouler votre design\u0026nbsp;?\n\nEn règle générale, j'aborde la correction du contraste des couleurs de deux manières différentes, au cas par cas :\n\n- Choisir des couleurs plus claires et plus foncées\n- Agrandir le texte\n\n### Passez du côté Clair/Obscur\n\nVotre approche principale pour résoudre les problèmes de contraste des couleurs consistera à modifier les couleurs sous-jacentes elles-mêmes.\n\nEn général cependant, vous vous retrouverez limité dans ce que vous pouvez faire si vous abordez le problème en modifiant les _teintes_ des couleurs. D'une part, les guides de style des marques ou des sites ont généralement des palettes de couleurs assez strictes, et le changement de teintes créera souvent des couleurs qui s'en écartent. D'autre part, comme l'a montré l'exemple précédent de tomate et bleuet, les teintes des couleurs ont souvent un impact très minime sur le rapport entre ces deux couleurs, surtout si ces couleurs ont des luminosités très similaires.\n\nAu lieu de cela, il me semble que rendre une couleur plus claire et/ou l'autre couleur plus foncée a un impact plus profond sur le contraste, tout en restant plus cohérent avec le reste des composantes du design et plus proche de la sensibilité générale du site.\n\n### L'agrandissement est parfaitement acceptable\n\nUn texte plus grand et plus épais a tendance à être beaucoup plus facile à lire, même sur des arrière-plans à faible contraste, qu'un texte plus petit et plus fin. Par exemple, dans l'exemple suivant, les deux lignes de texte sont de la même couleur, mais si vous arrivez à discerner le texte, il sera plus facile d'en distinguer la première ligne, dont les caractères sont plus grands et plus gras :\n\n\u003csection class=\"gris\" aria-label=\"Example: Light gray text on a lighter gray background\"\u003e\n\u003cp\u003e\u003cstrong\u003eJe suis plutôt plus facile à lire !\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003csmall\u003eJe suis bien plus difficile à lire !\u003c/small\u003e\u003c/p\u003e\n\u003c/section\u003e\n\nC'est à cause de cette différence que le WCAG est un peu plus indulgent pour le texte volumineux, qu'il définit comme un texte d'au moins `18 pt` ou, alternativement, comme un texte en gras et d'au moins `14 pt`. N'oubliez pas que `pt` est une unité de taille de police définie par le navigateur de l'utilisateur (un peu comme `rem`) —\u0026nbsp;ce qui signifie, dans les paramètres par défaut de la plupart des navigateurs, que le seuil est d'environ 24 pixels, ou à la fois en gras et d'environ 19 pixels. Le texte qui répond à ce critère de dimensionnement n'a besoin que d'un rapport de `3:1` par rapport à son arrière-plan, selon le WCAG.\n\nVous pourrez parfois utiliser ce seuil plus indulgent à votre avantage, car au lieu de devoir choisir différentes couleurs, vous pourrez peut-être augmenter la taille ou le poids de votre police. Si vous utilisez uniquement cette approche pour atteindre vos seuils minimaux, ce correctif ayant tendance à être très contextuel ne s'appliquera probablement qu'à des éléments tels que les titres. Cependant, l'accessibilité ne consiste pas seulement à atteindre des seuils. Le WCAG est la barre minimale à franchir, mais une fois que vous avez franchi ces seuils minimaux, vous pouvez utiliser des tactiques telles que l'augmentation de la taille de la police, l'augmentation du poids de la police ou le choix d'une police de caractères plus épaisse pour offrir une expérience plus lisible, même s'ils n'améliorent pas votre score de contraste.\n\n## Construire des approches systémiques pour assurer le contraste des couleurs\n\nCes approches fonctionnent bien pour ajouter des couleurs uniques à une page ou pour corriger un texte à faible contraste mis en évidence par un audit, mais ce n'est pas très durable pour les grands sites ou organisations.\n\nDe nombreuses organisations se tournent vers les systèmes de design pour communiquer leurs pratiques UI et UX, y compris leurs palettes de couleurs, ainsi que leurs connaissances institutionnelles sur le moment et la manière dont chaque couleur desdites palettes doit être utilisée. Ces systèmes de design sont un excellent endroit pour coder les connaissances sur les appariements de couleurs acceptables. Par exemple, un système de design peut déterminer des couleurs d'arrière-plan et des couleurs de texte acceptables pour les boutons, et ces couleurs auront certainement été choisies en fonction de rapports de contraste acceptables. Les designers et les développeurs peuvent tirer parti de ces décisions sans même avoir _vraiment besoin_ du contexte d'arrière-plan complet de la façon dont ces couleurs ont été choisies —\u0026nbsp;il y a un [puits de succès](https://blog.codinghorror.com/falling-into-the-pit-of-success/) large et facile.\n\n👉🏽 _NdT : comme rappelé dans l'article en lien ci-dessus, notre objectif n'est pas que l'utilisateur remporte une brillante victoire au terme de multiples épreuves et surprises, mais qu'il_ tombe simplement dans des pratiques gagnantes _en utilisant notre plateforme et nos frameworks. Faciliter les ennuis, c'est courir à l'échec_.\n\nJ'ai également entendu parler de systèmes de design qui deviennent encore plus explicites dans la façon dont ils communiquent des associations de couleurs accessibles. Une astuce que j'ai apprise de [Mike Aparicio](https://www.mikeaparicio.com/) réside dans la façon dont il nomme les nuances du coloris d'un système de design. Dans ses systèmes de design, chaque nuance d'une couleur reçoit un nombre de 100 à 900, où 100 est la nuance la plus claire, 600 est la nuance \"de base\", 900 est la nuance la plus foncée et les autres couleurs sont remplies entre les deux comme de besoin. Ses échelles de couleurs sont calculées de manière à ce que les couleurs \"200\" et plus claires soient toujours suffisamment claires pour contraster avec la teinte de base \"600\". Cette règle est assez facile à retenir pour les designers et les développeurs, ce qui garantit qu'ils sont beaucoup plus susceptibles de choisir des appariements acceptables. Vous pouvez l'entendre parler de cette approche sur [Frontend Horse](https://frontend.horse/episode/lets-make-a-design-system) et dans [ma propre émission Some Antics](https://www.youtube.com/watch?v=wX3z42LbfbI).\n\n## Encore quelques éléments à garder en tête à propos du contraste\n\nLes systèmes de rapport de contraste actuels sont assez soigneusement vérifiés, mais il y a quelques limitations, dont les suivantes\u0026nbsp;:\n\n- Les algorithmes actuels ne prennent pas en compte la question de savoir quelle couleur est au premier plan et laquelle est en arrière-plan, même si dans certaines paires de couleurs telles que le marron et le rose, une couleur est définitivement plus appropriée comme premier plan et non comme arrière-plan.\n- Le gras de certaines polices de caractères n'est pas toujours très gras, ce qui signifie que vous pouvez répondre à la _lettre_ de l'exigence de texte en gras sans en respecter l'_esprit_.\n\nUne future version des Directives pour l'accessibilité du contenu Web peut utiliser [un algorithme de contraste de couleur différent](https://github.com/Myndex/SAPC-APCA) qui utilise plus de facteurs tels que ceux-ci, mais [cela nécessite encore plus de vérification](https://yatil.net/blog/wcag-3-is-not-ready-yet). Si vous rencontrez certaines de ces limitations dans votre design et si vous pensez que votre design est techniquement conforme, je vous encourage à faire des tests utilisateur si possible, de préférence avec des utilisateurs malvoyants, pour vérifier si votre contenu est ou non lisible pour de vrais gens.\n\nDe plus, la couleur peut être une chose difficile à équilibrer\u0026nbsp;! Si vous avez du mal à distinguer différents contenus avec des couleurs, envisagez de vous appuyer sur d'autres leviers et d'utiliser des outils tels que des icônes ou différentes tailles de police pour faire passer votre message\u0026nbsp;! Cela garantit que vous [ne comptez pas uniquement sur la couleur](https://www.w3.org/WAI/WCAG22/Understanding/use-of-color.html) pour transmettre du sens, et la création de moyens redondants pour intégrer des informations dans votre design conduira presque toujours à une expérience plus accessible.\n\n## Points à retenir en conclusion\n\nLes problèmes de contraste des couleurs sont partout, et les éliminer réduirait considérablement les barrières d'accès sur le Web. Au cas par cas, je trouve plus simple de corriger un faible insuffisant en ajustant la luminosité ou l'obscurité des couleurs, plutôt que leur teinte ou leur saturation. Dans _certains_ cas (notamment les textes proéminents tels que les titres), vous pourrez peut-être tirer parti de la taille et de l'épaisseur de la police. À l'avenir, le contraste devrait être traité de manière systémique, typiquement par le biais de systèmes de design codifiés et, idéalement, contrôlé par des tests utilisateurs.\n"},{"slug":"une-taille-de-police-enfantine","title":"Une taille de police enfantine","author":{"name":"Tyler Sticka","lastname":"Sticka"},"original":{"date":"11 avril 2022","site":"le blog de Cloudfour","siteUrl":"https://cloudfour.com","postUrl":"https://cloudfour.com/thinks/childish-font-sizes/","copyright":"2022"},"dateCascade":"27 avril 2022","dateMachine":"2O220427","tags":["css","typographie","accessibilite"],"about":["Baseline","Hauteur X","Readability","Polices de Caractères"],"excerpt":"Défense et illustration des tailles de police plus grandes pour nos utilisateurs, par Tyler Sticka. La Cascade ne peut que plussoyer.","featured":false,"featuredImage":"/images/mrs-peter-rabbit.jpeg","order":null,"content":"\nEn matière de `font-size`, on peut dire qu'on a fait du chemin. Je me rappelle une époque où il était encore courant d'utiliser une taille d'affichage de 10 pixels (ou moins), afin d'entasser autant de texte que possible dans un espace disponible de 640x480. De nos jours, les arguments en faveur d'une ligne de base de 16 pixels (\u003cspan id=\"a1\"\u003e[1](#f1)\u003c/span\u003e) sont assez largement acceptés. [De nombreuses données confirment sa lisibilité](https://www.smashingmagazine.com/2011/10/16-pixels-body-copy-anything-less-costly-mistake/), elle peut [empêcher le zoom accidentel dans les navigateurs de portables](https://css-tricks.com/16px-or-larger-text-prevents-ios-form-zoom/), et c'est [la valeur par défaut dans la plupart des navigateurs](https://imalov.dev/articles/golden-document-root-size/) depuis maintenant plusieurs années.\n\nPourtant, de nombreux arguments militent en faveur de tailles de polices encore plus grandes\u0026nbsp;:\n\n- Des études ont montré que les polices plus grandes amélioraient la compréhension. Dans [une étude de 2012](https://pielot.org/pubs/Rello2016-Fontsize.pdf), la taille idéale était estimée entre 18 et 22 pixels. (\u003cspan id=\"a2\"\u003e[2](#f2)\u003c/span\u003e)\n- Des polices plus grandes sont plus accessibles. Le Ministère de la Santé américain recommande une taille de police d'[au moins 19 pixels](https://health.gov/healthliteracyonline/display/section-3-3/) si votre lectorat comprend des personnes ayant des difficultés de lecture ou ayant un certain âge.\n- La tendance actuelle va déjà dans ce sens : les sites offrant beaucoup de contenu, comme [Medium](https://medium.com/), [Vox](https://www.vox.com/) et le [Washington Post](https://www.washingtonpost.com/) (pour n'en citer que quelques-uns) vont bien au-delà de 16 pixels pour le corps de texte, même sur les écrans réduits.\n- [Certaines polices semblent plus petites](https://www.imarc.com/blog/best-font-size-for-any-device) que d'autres à 16 pixels. Si votre police est fine, condensée ou si elle a une faible [hauteur d'x](https://fr.wikipedia.org/wiki/Hauteur_d%27x), 16 pixels ne suffiront pas.\n- Grâce à des fonctionnalités comme [CSS clamp](https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/), nos tailles de polices peuvent être aussi fluides que nos mises en page, et s'agrandir depuis un minimum lisible jusqu'à un maximum que nous choisissons selon les paliers responsifs voulus.\n\nMalgré ces arguments, j'ai constaté une certaine résistance à l'utilisation d'une taille de police supérieure. Ce n'est pas du tout surprenant, on voit de même certaines fonctionnalités de navigateurs ou de bonnes pratiques d'usabilité prendre du temps pour être adoptées, et tout ce qui n'est pas familier est difficile à vendre.\n\nSur quelques projets bien différents, avec des publics, des identités visuelles et des polices de caractères très divers, la réaction que j'entends le plus souvent concernant les polices plus grandes est qu'elles semblent assez _enfantines_, \"on dirait un livre pour enfants\".\n\nTirés de leur contexte, ces termes pourraient avoir l'air péjoratifs, mais je veux le dire clairement\u0026nbsp;: nos clients sont polis, aimables, et nous leur demandons un retour franc et sans filtre. C'est pour moi un succès d'obtenir un avis honnête, qui est une marque de confiance, plutôt que des formulations indirectes. Et ça rend les patterns de feedbacks comme celui-ci bien plus faciles à repérer\u0026nbsp;!\n\nAlors, pourquoi \"enfantin\" ? Je pense que si cette réponse revient fréquemment c'est qu'elle renvoie à une expérience partagée. Nous avons tous été enfants, nous avons tous vu des livres pour enfants, et les astuces qui rendent la typographie accessible aux enfants sont les mêmes que celles qui aident les adultes ayant des niveaux variables d'alphabétisation, d'acuité visuelle et d'attention\u0026nbsp;: des polices ayant une hauteur d'x généreuse, un espacement équilibré des mots et des lignes, des longueurs de ligne raisonnables, un alignement cohérent et un contraste adéquat. (\u003cspan id=\"a3\"\u003e[3](#f3)\u003c/span\u003e)\n\n\u003cfigure\u003e\u003cimg src=\"/images/mrs-peter-rabbit.jpeg\" width=\"1920\" height=\"800\" alt=\"\"/\u003e\u003cfigcaption\u003eDouble-page d'une édition de 1919 de \"The Tale of Peter Rabbit\" \u003csmall\u003e(\u003ca href=\"https://read.gov/books/peter_rabbit.html\"\u003eLibrary of Congress\u003c/a\u003e)\u003c/small\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\nMais si ces caractéristiques aident aussi bien les enfants que les adultes, pourquoi le texte de nos magazines imprimés, de nos romans, journaux et modes d'emploi est-il plus petit\u0026nbsp;?\n\nEn partie sans doute à cause du contenu\u0026nbsp;: plus le lecteur est expérimenté, plus l'information peut être complexe. Les passages de texte plus longs bénéficient de sections et de titres, avec des tailles (plus grandes et plus petites) et des styles (graisse, casse, etc.) contrastés pour établir la hiérarchie. Des tableaux, des graphiques et des figures peuvent être utilisés pour faire comprendre des relations complexes, nécessitant une certaine densité d'informations pour être utiles. Ces considérations sont toujours pertinentes dans nos expériences numériques.\n\nMais je soupçonne malgré tout que la principale explication du rétrécissement typographique des longs formulaires se résume aux limites physiques de la page imprimée. Un texte plus gros signifie plus de pages, ce qui signifie plus de papier, d'encre et de matériaux de reliure… plus de travail et de carburant pour concevoir, imprimer, assembler et expédier… plus d'espace occupé sur nos étagères et dans nos bagages. Il n'est tout simplement pas pratique pour votre roman préféré d'augmenter considérablement sa taille de police sans augmenter son coût, ou devenir physiquement difficile à lire lorsqu'on est allongé sur le canapé.\n\nLe design Web quant à lui a aussi ses limites, mais le nombre de pages n'en est pas une\u0026nbsp;: nos navigateurs sont des fenêtres sur un [canevas infini](https://scottmccloud.com/4-inventions/canvas/) de contenu. Nous nous fichons bien que [Wikipedia remplisse plus de 3 000 volumes imprimés](https://en.wikipedia.org/wiki/Wikipedia:Size_in_volumes), car il n'a jamais à le faire\u0026nbsp;: nos appareils ne grossiront pas ou ne s'alourdiront pas en le lisant sur notre navigateur, quelle que soit la taille de la police.\n\n\u003cfigure\u003e\u003cimg src=\"/images/infinite-canvas.jpeg\" width=\"1920\" height=\"500\" alt=\"\"/\u003e\u003cfigcaption\u003eScott McCloud discute des opportunités de la \"toile infinie\" dans ces panneaux de son roman graphique de 2000 \u003csmall\u003e(\u003ca href=\"https://scottmccloud.com/2-print/2-rc/index.html\"\u003eReinventing comics\u003c/a\u003e)\u003c/small\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\nDonc, à moins d'entendre un argument plus convaincant, je vais continuer à préconiser des tailles de police plus grandes pour des passages de contenu plus longs, en prenant soin de préserver la hiérarchie et la densité de l'information, le cas échéant. 18 ou 20 pixels peuvent sembler assez grands à première vue pour nous qui sommes tellement habitués à plisser les yeux à 16 ou moins, mais les données sont claires et les avantages de lisibilité sont immédiats. (\u003cspan id=\"a4\"\u003e[4](#f4)\u003c/span\u003e)\n\n\u003chr/\u003e\n\n\u003csmall\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cb id=\"f1\"\u003e1\u003c/b\u003e - J'utilise les pixels tout au long de cet article pour la clarté, mais \u003ca href=\"https://www.w3.org/TR/WCAG20-TECHS/C14.html\"\u003evous devriez probablement utiliser les unités proportionnelles\u003c/a\u003e (`em`, `rem`, etc.) quand c'est possible.\u003c/small\u003e [↩](#a1)\n\n\u003csmall\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cb id=\"f2\"\u003e2\u003c/b\u003e - L'étude utilise des points, mais ce sont des points CSS, ils correspondent donc à des pixels. Les points sont d'une taille différente à l'impression (environ un tiers plus grand 🥲), j'ai donc utilisé le terme \"pixels\" ici pour plus de cohérence dans l'article\u003c/small\u003e [↩](#a2)\n\n\u003csmall\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cb id=\"f3\"\u003e3\u003c/b\u003e - Une de mes premières hypothèses était que les polices plus grandes exposaient plus de similitudes entre les polices de caractères d'entreprise et celles des livres ou des produits pour enfants, mais cette idée s'est effondrée lorsque je me suis familiarisé à nouveau avec la variété stupéfiante des traitements typographiques dans les œuvres pour enfants.\u003c/small\u003e [↩](#a3)\n\n\u003csmall\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003cb id=\"f4\"\u003e4\u003c/b\u003e - Certains pourraient dire que c'est un point discutable… nos utilisateurs les plus avertis peuvent redimensionner le texte comme ils le souhaitent. Pour moi, c'est comme demander à nos utilisateurs de tenir l'écran plus près de leur visage\u0026nbsp;: c'est toujours une option, mais une défense fragile pour une décision de design.\u003c/small\u003e [↩](#a4)\n"},{"slug":"comprendre-cssgrid-grid-template-areas","title":"Comprendre CSS Grid : Grid template areas","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"20 février 2020","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/understanding-css-grid-template-areas/","copyright":"2020"},"dateCascade":"18 avril 2022","dateMachine":"2O220418","tags":["css","cssgrid"],"about":["grid-template-areas"],"excerpt":"Dans cette nouvelle série, Rachel Andrew analyse la spécification CSS Grid Layout. Elle poursuit ici avec les zones de grille.","featured":false,"featuredImage":"/images/smashing-grid-area1.webp","order":22,"content":"\nAvec Grid, on peut toujours placer les items entre une ligne de grille et une autre. Mais il existe une autre façon de décrire notre mise en page, une façon plus _visuelle_. Dans ce troisième volet de notre série nous allons voir comment utiliser la propriété [grid-template-areas](/articles/css-grid-layout-guide-complet#gta)\npour définir un placement sur la grille et nous découvrirons comme elle fonctionne réellement.\n\n## Décrire une mise en page avec grid-template-areas\n\nLa propriété `grid-template-areas` accepte pour valeur une ou plusieurs chaînes de caractères. Chacune, entourée de guillemets, représente une rangée de notre grille. Nous pouvons utiliser la propriété sur une grille définie avec `grid-template-rows` et `grid-template-columns`, ou nous pouvons créer notre mise en page, auquel cas toutes les rangées seront automatiquement dimensionnées.\n\nLa propriété et les valeurs qui suivent décrivent une grille comportant quatre zones —\u0026nbsp;chacune s'étend sur deux pistes de colonnes et deux pistes de rangées. Une zone (_area_) peut s'étendre sur plusieurs pistes lorsqu'on en répète le nom dans toutes les cellules qu'on veut couvrir\u0026nbsp;:\n\n```\ngrid-template-areas: \"one one two two\"\n                     \"one one two two\"\n                     \"three three four four\"\n                     \"three three four four\";\n\n```\n\nLes items sont placés dans la mise en page en étant nommés dans la propriété `grid-area`. Si nous voulons placer un élément ayant une classe `test` dans la zone de la grille qui s'appelle `one`, il suffit d'écrire\u0026nbsp;:\n\n```\n.test {\n  grid-area: one;\n}\n```\n\nRegardons cela en action dans le codepen qui suit. J'ai quatre items, avec des classes nommées un à quatre (one to four), qui sont assignées aux zones de grille correspondantes via la propriété `grid-area` et qui s'affichent donc dans les boîtes correctes de la grille.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_VwLLRKE\" src=\"//codepen.io/rachelandrew/embed/VwLLRKE?height=640\u0026amp;theme-id=light\u0026amp;slug-hash=VwLLRKE\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"640\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/VwLLRKE/\"\u003e\n  Grid template areas : exemple simple\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi vous utilisez l'inspecteur Grid de Firefox, vous pouvez voir les noms des zones et les lignes de grille, montrant que chaque item s'étend en effet sur deux rangées et deux colonnes —\u0026nbsp;le tout sans faire aucun positionnement basé sur les lignes pour l'item lui-même.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/smashing-grid-area1.webp\" width=\"667\" height=\"594\" alt=\"chaque item s'étend sur deux rangées et deux colonnes\"/\u003e\u003c/figure\u003e\n\n## Règles d'utilisation de grid-template-areas\n\nIl ya des règles à suivre lorsqu'on crée une mise en page de cette façon. Ne pas les respecter rendra les valeurs invalides et notre mise en page ne fonctionnera pas. La première règle est que **nous devons décrire une grille complète**, chaque cellule de la grille doit être remplie.\n\nSi l'on veut laisser une ou plusieurs cellules vides, on exprime ce choix en insérant un point `.` ou une série de points `...` sans espace entre eux.\n\nSi je change les valeurs de notre grille ainsi\u0026nbsp;:\n\n```\ngrid-template-areas: \"one one two two\"\n                     \"one one two two\"\n                     \". . four four\"\n                     \"three three four four\";\n\n```\n\nj'ai maintenant deux cellules sans contenu à l'intérieur. L'item `three` n'est affiché que dans la dernière rangée de la grille.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/smashing-grid-area2.webp\" width=\"667\" height=\"594\" alt=\"il y a maintenant un espace vide dans notre grille\"/\u003e\u003c/figure\u003e\n\n**Nous ne pouvons définir chaque zone qu'une seule fois**, c'est à dire que nous ne pouvons utiliser cette propriété pour copier du contenu à deux endroits sur la grille\u0026nbsp;! Les valeurs qui suivent seraient invalides et la propriété dans son ensemble serait ignorée, car nous avons dupliqué la zone `three`\u0026nbsp;:\n\n```\ngrid-template-areas: \"one one three three\"\n                     \"one one two two\"\n                     \"three three four four\"\n                     \"three three four four\";\n```\n\nOn ne peut pas non plus créer une zone non-rectangulaire, la propriété ne peut pas être utilisée pour créer une zone en forme de T ou de L, et les valeurs ci-dessous sont également invalides\u0026nbsp;:\n\n```\ngrid-template-areas: \"one one two two\"\n                     \"one one one one\"\n                     \"three three four four\"\n                     \"three three four four\";\n```\n\n## Formater les chaînes de caractères\n\nDans mon CSS, j'aime bien afficher les valeurs de `grid-template-area` comme je le fais ci-dessus, avec chaque chaîne de caractères qui représente une rangée et chacune disposée en-dessous de la rangée précédente, car cela me donne une représentation visuelle de ma mise en page.\n\nPour améliorer encore la visualisation, on peut ajouter des espaces entre chaque cellule, mais aussi des points multiples pour les cellules vides, ainsi tout est bien aligné\u0026nbsp;:\n\n```\ngrid-template-areas: \"one   one   two  two\"\n                     \"one   one   two  two\"\n                     \"..... ..... four four\"\n                     \"three three four four\";\n```\n\nCeci étant, on peut, de manière tout à fait valide, aligner toutes les chaînes de caractères sur une seule ligne, on pourrait donc écrire\u0026nbsp;:\n\n```\ngrid-template-areas: \"one one two two\" \"one one two two\" \"three three four four\" \"three three four four\";\n```\n\n## Expliquer grid-template-areas et grid-area\n\nLa raison pour laquelle chaque zone doit être un rectangle complet est qu'elle doit avoir la même forme que si elle avait été créée par un placement basé sur les lignes. Si nous poursuivons avec notre exemple précédent, nous pourrions réaliser cette mise en page avec des lignes de grille comme dans le codepen ci-dessous. Ici, j'ai créé ma grille comme avant. Cette fois par contre, j'ai utilisé les lignes de grille pour positionner via les propriétés (raccourcies) `grid-column-start`, `grid-column-end`, `grid-row-start` et `grid-row-end`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LYEdOdB\" src=\"//codepen.io/rachelandrew/embed/LYEdOdB?height=460\u0026amp;theme-id=light\u0026amp;slug-hash=LYEdOdB\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"460\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/LYEdOdB/\"\u003e\n  Grid template areas : placement basé sur les lignes\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNote : si vous avez lu mon précédent article [Comprendre CSS Grid : les lignes Grid](/articles/comprendre-cssgrid-lines) vous savez déjà qu'il est possible d'utiliser `grid-area` comme un raccourci pour déclarer les quatre lignes en une fois.\n\nCela signifie que nous pourrions aussi créer notre mise en page avec l'ordre de lignes suivant\u0026nbsp;:\n\n- `grid-row-start`\n- `grid-column-start`\n- `grid-row-end`\n- `grid-column-end`\n\n```\n.one {\n  grid-area: 1 / 1 / 3 / 3;\n}\n\n.two {\n  grid-area: 1 / 3 / 3 / 5;\n}\n\n.three {\n  grid-area: 3 / 1 / 5 / 3;\n}\n\n.four {\n  grid-area: 3 / 3 / 5 / 5;\n}\n```\n\nla propriété `grid-area` est intéressante en ce qu'elle peut prendre des numéros de ligne ou des noms de ligne. Mais il est important de comprendre comment elle fonctionne dans chaque mode.\n\n### Utiliser grid-area avec des numéros de ligne\n\nSi vous utilisez la propriété `grid-area` avec des numéros de ligne, alors les lignes seront assignées dans l'ordre décrit ci-dessus.\n\nSi vous omettez des valeurs —\u0026nbsp;en ne fournissant qu'un, deux, ou trois numéros de ligne\u0026nbsp;— les valeurs manquantes sont réglées sur `auto` ce qui signifie que la zone s'étendra sur une piste (ce qui est la valeur par défaut). Donc le CSS suivant placerait un item `grid-row-start: 3` avec toutes les autres valeurs réglées sur `auto`, et donc, l'item serait auto-placé dans la première piste de colonne disponible, et s'étendrait sur une piste de rangée et une piste de colonne.\n\n```\ngrid-area: 3;\n```\n\n### Utiliser grid-area avec des idents\n\nSi nous utilisons **ident** (qui est la façon pour Grid Layout d'appeller une zone nommée), alors la propriété `grid-area` prend aussi quatre lignes. Si vous avez des lignes nommées dans votre grille, comme décrit dans [Comprendre CSS Grid : créer un container Grid](/articles/comprendre-cssgrid-creer-un-container-grid), alors vous pouvez utiliser ces lignes nommées tout comme les lignes numérotées.\n\nAttention cependant car, selon que vous utilisez ident avec des lignes nommées ou numérotées, le comportement sera différent dans le cas où vous omettez quelques lignes.\n\nCi-dessous, j'ai créé une grille avec des lignes nommées et utilisé `grid-area` pour placer un item (en omettant la valeur finale)\u0026nbsp;:\n\n```\n.grid {\n  display: grid;\n  grid-template-columns:\n      [one-start three-start] 1fr 1fr\n      [one-end three-end two-start four-start] 1fr 1fr [two-end four-end];\n  grid-template-rows:\n    [one-start two-start] 100px 100px\n    [one-end two-end three-start four-start] 100px 100px [three-end four-end];;\n}\n\n.two {\n  grid-area: two-start / two-start / two-end;\n}\n```\n\nIl nous manque donc le nom de ligne pour `grid-column-end`. La spécification dit que dans cette situation, `grid-column-end` doit utiliser une copie de `grid-column-start`. Si `grid-column-end` et `grid-column-start` sont identiques, alors la ligne finale est oubliée, et la valeur est réglée sur `auto`, donc l'item s'étend sur une piste, comme dans la version numérotée.\n\nLa même chose se produit si nous omettons la troisième valeur `grid-row-end`\u0026nbsp;; elle devient la même que `grid-row-start` et donc devient `auto`.\n\nJetez un œil à cet exemple codepen de la façon dont `grid-area` est utilisé et comment il change ensuite la mise en page de l'item\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_oNXXOvR\" src=\"//codepen.io/rachelandrew/embed/oNXXOvR?height=640\u0026amp;theme-id=light\u0026amp;slug-hash=oNXXOvR\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"640\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/oNXXOvR/\"\u003e\n  Grid template areas : idents manquants dans grid-area\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nCeci explique pourquoi `grid-area` fonctionne avec une seule valeur ident représentant une zone nommée.\n\nQuand nous créons une zone nommée avec la propriété `grid-template-areas`, le bord de chaque zone peut être référencé par un nom de ligne qui est le même que le nom de la zone utilisée. Dans notre cas, nous avons pu prendre notre zone nommée `one` et placer notre item en utilisant des lignes nommées comme suit\u0026nbsp;:\n\n```\n.one {\n  grid-row-start: one;\n  grid-row-end: one;\n  grid-column-start: one;\n  grid-row-end: one;\n}\n```\n\nQuand nous disons `grid-area: one`, nous omettons les trois dernières valeurs du raccourci `grid-area`\u0026nbsp;; elles finissent comme des copies de notre première valeur —\u0026nbsp;toutes, dans notre cas deviennent `one` et l'item est placé exactement comme dans la version longue de notre css.\n\nLe fonctionnement du nommage dans Grid layout est très intelligent et permet des choses bien intéressantes que j'ai décrites dans mes articles précédents [Naming Things In CSS Grid Layout](https://www.smashingmagazine.com/2017/10/naming-things-css-grid-layout/) et [Editorial Design Patterns With CSS Grid And Named Columns](https://www.smashingmagazine.com/2019/10/editorial-design-patterns-css-grid-subgrid-naming/) (en anglais).\n\n## Mettre en page des items avec grid-template-areas\n\nAvec `grid-template-areas`, une cellule ne peut être occupée que par un seul nom, cependant nous pouvons toujours ajouter des items à la grille après avoir réalisé notre mise en page principale de cette manière. Pour cela, nous avons les lignes numérotées, comme d'habitude.\n\nDans l'exemple codepen suivant, j'ai ajouté un item supplémentaire et je l'ai placé par-dessus les items déjà présents en utilisant le positionnement basé sur les numéros de lignes.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_bGddJRr\" src=\"//codepen.io/rachelandrew/embed/bGddJRr?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=bGddJRr\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/bGddJRr/\"\u003e\n  Grid template areas : placer un item avec des numéros de lignes\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNous pouvons également utiliser les noms de lignes définis lorsque nous avons créé nos colonnes ou rangées. Mieux encore, nous aurons des noms de lignes créés par la formation des zones. Nous avons déjà vu comment nous pouvons obtenir quatre noms de lignes à partir du nom de la zone. Nous obtenons aussi une ligne de début au bord de chaque zone avec un `-start` ajouté au nom de la zone, et une ligne pour l'autre bord avec un `-end` ajouté.\n\nPar conséquent, la zone nommée `one` a des lignes de début appelées `one-start` et de fin appelées `one-end`.\n\nNous pouvons ensuite utiliser ces noms implicites de lignes pour placer une item sur la grille. Cela peut être utile si on redéfinit la grille à plusieurs points de rupture (_breakpoints_), si nous voulons toujours que l'tem placé se trouve après un certain nom de ligne.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_QWbbPMQ\" src=\"//codepen.io/rachelandrew/embed/QWbbPMQ?height=640\u0026amp;theme-id=light\u0026amp;slug-hash=QWbbPMQ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"640\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/QWbbPMQ/\"\u003e\n  Grid template areas : placer un item avec des noms implicites de lignes\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Utiliser grid template areas dans un design responsif\n\nJe construis souvent des composants et je me rends compte que `grid-template-areas` peut être bien utile pour voir exactement, déjà dans le CSS, à quoi mon composant va ressembler. De plus, la redéfinition du composant pour plusieurs points de rupture est très simple, il suffit de redéfinir les valeurs de `grid-template-areas`, avec parfois en plus un changement du nombre de pistes de colonnes.\n\nDans le CSS qui suit, j'ai défini une mise en page à une seule colonne pour mon composant. Ensuite, à une largeur minimum de 600px, je redéfinis le nombre de colonnes ainsi que la valeur de `grid-template-areas` afin de créer une mise en page sur deux colonnes. Ce qui est bien avec cette approche, c'est qu'il suffit de regarder le CSS pour voir à quoi ressemble ma mise en page\u0026nbsp;!\n\n```\n.wrapper {\n  background-color: #fff;\n  padding: 1em;\n  display: grid;\n  gap: 20px;\n  grid-template-areas:\n    \"hd\"\n    \"bd\"\n    \"sd\"\n    \"ft\";\n\n}\n\n@media (min-width: 600px) {\n  .wrapper {\n    grid-template-columns: 3fr 1fr;\n    grid-template-areas:\n      \"hd hd\"\n      \"bd sd\"\n      \"ft ft\";\n  }\n}\n\nheader { grid-area: hd; }\narticle {grid-area: bd; }\naside { grid-area: sd; }\nfooter { grid-area: ft; }\n```\n\n## Accessibilité\n\nIl faut être prudent lorsqu'on utilise cette méthode et se rappeler qu'elle peut amener à une réorganisation du contenu qui peut se trouver déconnecté de l'ordre de la source. Un utilisateur naviguant avec la tabulation regarde l'écran tout en écoutant un texte dit par l'ordinateur, et ce dernier lit le contenu dans l'ordre où il figure dans la source HTML. Cela peut entraîner beaucoup de confusion pour l'utilisateur.\n\n## Résumé\n\nVoilà tous les tuyaux à connaître sur les propriétés `grid-template-area` et `grid-area` pour créer des mises en page. Si vous ne l'avez pas déjà utilisée, essayez là. Je la trouve très utile notamment pour expérimenter et je m'en sers beaucoup pour mes prototypes —\u0026nbsp;même si, pour une raison ou une autre, je suis amenée plus tard à utiliser une autre méthode pour la production.\n"},{"slug":"comprendre-cssgrid-lines","title":"Comprendre CSS Grid : les lignes Grid","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"10 janvier 2020","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2020/01/understanding-css-grid-lines/","copyright":"2020"},"dateCascade":"17 avril 2022","dateMachine":"2O220417","tags":["css","cssgrid"],"about":["Élément block","Élément inline","grid-row","grid-column"],"excerpt":"Dans cette nouvelle série, Rachel Andrew analyse la spécification CSS Grid Layout. Elle poursuit ici avec les lignes de grille.","featured":false,"featuredImage":"/images/grid-lines.webp","order":22,"content":"\nDans le premier article de cette série, nous avons vu comment créer un container grid, et les diverses propriétés utilisables sur l'élément parent qui constitue notre grille. Une fois que nous avons une grille, nous avons un ensemble de lignes. Dans cet article, nous allons voir comment placer des items par rapport à ces lignes, en ajoutant des propriétés aux enfants directs de notre conteneur.\n\nCe que nous allons voir :\n\n- Les propriétés de placement grid-column-start, grid-column-end, grid-row-start, grid-row-end et leur raccourci grid-column and grid-row.\n- Comment utiliser grid-area pour un placement par numéro de ligne\n- Comment placer des items avec un nom de ligne\n- La différence entre les grilles implicite et explicite quand on place les items\n- L'utilisation du mot-clé span (et une sous-grille en bonus)\n- La vigilance nécessaire lorsqu'on mélange des items placés et auto-placés\n\n## Concepts de base du positionnement par ligne\n\nPour placer un item sur la grille, nous définissons [la ligne](/articles/css-grid-layout-guide-complet#gridline) depuis laquelle il part et celle où il s'arrête. Du coup, pour une grille de cinq colonnes et de cinq rangées, si je veux que mon item s'étende de la deuxième à à troisième [piste](https://la-cascade.io/articles/css-grid-layout-guide-complet#gridtrack) de colonne, et couvre les première, deuxième et troisième rangées, j'utiliserai le CSS ci-dessous. Gardez à l'esprit que nous visons la ligne, non la piste elle-même.\n\n```\n.item {\n  grid-column-start: 2;\n  grid-column-end: 4;\n  grid-row-start: 1;\n  grid-row-end: 4;\n}\n```\n\nOn peut utiliser les raccourcis :\n\n```\n.item {\n  grid-column: 2 / 4;\n  grid-row: 1 / 4;\n}\n```\n\nDans Codepen, nous pouvons voir l'exemple et modifier les lignes\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LYEdOdB\" src=\"//codepen.io/rachelandrew/embed/LYEdOdB?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=LYEdOdB\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/LYEdOdB/\"\u003e\n  Grid lines : raccourcis de placement\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNotez que la raison pour laquelle notre arrière-plan de boîte s'étend sur toute la surface est que les valeurs initiales des propriétés d'alignement `align-self` et `justify-self` sont `stretch`.\n\nSi nous avons seulement besoin de couvrir une piste, nous pouvons omettre la ligne de fin, car le comportement par défaut est que les items s'étendent sur une piste. C'est ce que nous constatons lorsque nous plaçons automatiquement les items comme dans l'article précédent, chaque item va dans une cellule, à la croisée d'une colonne et d'une rangée. Pour indiquer que notre item doit s'étendre de la ligne 2 à la ligne 3, on pourrait écrire\u0026nbsp;:\n\n```\n.item {\n  grid-column: 2 / 3;\n}\n```\n\nIl serait tout à fait correct d'omettre la ligne de fin\u0026nbsp;:\n\n```\n.item {\n  grid-column: 2;\n}\n```\n\n## Le raccourci grid-area\n\nNous pouvons aussi placer un item avec [grid-area](/articles/css-grid-layout-guide-complet#gridarea) (zone de grille). Nous retrouverons cette propriété dans un prochain article, mais disons dès maintenant que lorsqu'on l'utilise avec les numéros de ligne il permet de régler les quatre lignes.\n\n```\n.item {\n  grid-area: 1 / 2 / 4 / 4;\n}\n```\n\nL'ordre de ces quatre lignes est [grid-row-start](/articles/css-grid-layout-guide-complet#gcs), `grid-column-start`, `grid-row-end`, `grid-column-end`. Quand on travaille avec un langage écrit horizontalement, de gauche à droite (comme le français), c'est haut, gauche, bas, droite. Vous avez sans doute remarqué que c'est l'inverse de la façon dont on spécifie les raccourcis (pour les marges par exemple) en CSS, qui est haut, droite, bas, gauche.\n\nLa raison en est que Grid fonctionne de la même manière, quel que soit le mode ou la direction d'écriture —\u0026nbsp;nous verrons cela tout à l'heure. Il est donc plus logique de définir d'abord les deux départs, puis les deux fins, plutôt que de se référer aux dimensions physiques de l'écran. Personnellement j'utilise peu ces propriétés pour le placement basé sur les lignes, car je trouve que les deux raccourcis `grid-column` et `grid-row` sont plus lisibles quand on lit rapidement une feuille de styles.\n\n## Les lignes sur la grille explicite\n\nJ'ai parlé des grilles explicites et implicites dans mon article précédent. Quand on crée une grille avec les propriétés `grid-template-columns` et `grid-template-rows`, on crée une grille explicite. En définissant les pistes de colonne et de rangée, on définit aussi les lignes entre ces pistes et les lignes au début et la fin de la grille.\n\nCes lignes sont numérotées. La numérotation commence à 1, au bord de la grille, dans la direction block comme inline. Si l'on est dans un mode d'écriture horizontal de gauche à droite, cela signifie que la ligne 1 dans la direction block est au sommet de la grille et la ligne 1 dans la direction inline est à gauche.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-lines.webp\" width=\"767\" height=\"462\" alt=\"visualisation des lignes dans firefox grid layout, et de la position de l'item\"/\u003e\u003c/figure\u003e\n\nSi vous travaillez dans un langage horizontal de droite à gauche —\u0026nbsp;par exemple dans une langue arabe\u0026nbsp;— alors la ligne 1 dans la direction block est toujours au sommet, mais la ligne 1 dans la direction inline est à droite.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-lines-rtl.webp\" width=\"929\" height=\"562\" alt=\"visualisation des lignes dans firefox grid layout, et de la position de l'item dans un langage de droite à gauche\"/\u003e\u003c/figure\u003e\n\nSi vous travaillez en mode d'écriture vertical (et dans l'exemple ci-dessous j'ai réglé sur `writing-mode: vertical-rl`), alors la ligne 1 sera au sommet dans la direction block _de ce mode d'écriture_, et donc dans ce cas à droite. La ligne 1 dans la direction inline est au sommet.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-lines-vertical-rl.webp\" width=\"465\" height=\"765\" alt=\"visualisation des lignes dans firefox grid layout, et de la position de l'item dans un langage de haut en bas et de droite à gauche\"/\u003e\u003c/figure\u003e\n\nLes ligne de grille sont donc liées au mode et au sens d'écriture.\n\nLa ligne finale notre grille explicite a poour numéro -1 et les lignes sont numérotées à l'envers à partir de là, la deuxième ligne a donc pour numéro -2. Par conséquent, si vous voulez que votre item s'étende sur toutes les pistes de la grille explicite, vous pouvez écrire\u0026nbsp;:\n\n```\n.item {\n  grid-column: 1 / -1;\n}\n```\n\n## Les lignes sur la grille implicite\n\nSi nous créons une grille implicite, les pistes sont aussi comptées à partir de 1. Dans l'exemple ci-dessous, j'ai créé une grille explicite pour les colonnes, mais les pistes de rangées ont été créées dans la grille implicite, où j'utilise [grid-auto-rows](/articles/css-grid-layout-guide-complet#gac) pour les dimensionner à 5em.\n\nL'item ayant une classe de `placed` a été placé pour s'étendre de la ligne de rangée 1 à la ligne de ragée -1. Si nous travaillions avec une grille explicite pour nos deux rangées, l'item s'étendrait sur deux rangées. Mais du fait que les pistes de rangées ont été créées dans la grille implicite, la ligne -1 est devenue la ligne 2 et non la ligne 3.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xxbWPJj\" src=\"//codepen.io/rachelandrew/embed/xxbWPJj?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=xxbWPJj\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/xxbWPJj/\"\u003e\n  Grid lines : grille explicite vs implicite\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nActuellement il n'est pas possible de cibler la dernière ligne de la grille implicite si l'on ne sait pas combien de lignes on a.\n\n## Placer les items sur des lignes nommées\n\nDans le dernier article j'ai expliqué qu'en plus des lignes numérotées on a l'option de nommer les lignes sur la grille. On nomme les lignes en ajoutant un ou plusieurs noms entre crochets avant la taille de la piste.\n\n```\n.grid {\n  display: grid;\n  grid-template-columns: [full-start] 1fr [main-start] 2fr 2fr [main-end full-end];\n}\n```\n\nUne fois qu'on a nommé les lignes, on peut remplacer le numéro de ligne par un nom quand on place les items\u0026nbsp;:\n\n```\n.item {\n  grid-column: main-start / main-end;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_povLpWa\" src=\"//codepen.io/rachelandrew/embed/povLpWa?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=povLpWa\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/povLpWa/\"\u003e\n  Grid lines : nommer les lignes\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi votre ligne a plusieurs noms, vous pouvez prendre celui que vous voulez pour placer votte item, tous les noms se rapporteront à la même ligne.\n\nNote: il se passe des choses intéressantes quand on nomme les choses, voyez mon article [Naming Things in CSS Grid Layout](https://www.smashingmagazine.com/2017/10/naming-things-css-grid-layout/) (en anglais).\n\n## Que se passe-t-il si nous avons plusieurs lignes avec le même nom\u0026nbsp;?\n\nOn observe un comportement intéressant quand on a plusieurs lignes qui ont le même nom. Cette situation pourrait se produire si nous nommons nos lignes dans une notation `repeat()`. Dans l'exemple qui suit, j'ai défini une grille de 8 colonnes, créée en répétant quatre fois un pattern de `1fr` `2fr`. J'ai nommé `sm` la ligne avant la petite piste et `lg` la piste après. J'ai donc quatre lignes avec le même nom.\n\nDans cette situation, nous pouvons utiliser le nom comme un index. Donc pour placer un item qui commence à la deuxième ligne (appelée `sm`) et s'étend jusqu'à la troisième ligne (appelée `lg`), j'utilise `grid-colum: sm 2 / lg 3`. Si on utilise le nom sans un numéro, on ciblera toujours la première occurrence de cette ligne avec ce nom.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xxbWppe\" src=\"//codepen.io/rachelandrew/embed/xxbWppe?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=xxbWppe\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/xxbWppe/\"\u003e\n  Grid lines : nommer les lignes\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Utiliser le mot-clé span\n\nDans certains cas, vous savez que vous voulez avoir un item qui s'étend sur un certain nombre de pistes, mais vous ne savez pas exactement où dans la grille. Un exemple d'une telle situation serait un cas où vous placez des items avec auto-placement, mais vous voulez qu'ils s'étendent sur plusieurs pistes, plutôt que sur 1fr (qui est le défaut). Dans ce cas, vous pouvez utiliser le mot-clé `span`. L'exemple ci-dessous montre un item qui commence à la ligne `auto`, c'est la ligne où l'auto-placement le mettrait, et il couvre ensuite trois pistes.\n\n```\n.item {\n  grid-column: auto / span 3;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_MWYVrBB\" src=\"//codepen.io/rachelandrew/embed/MWYVrBB?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=MWYVrBB\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/MWYVrBB/\"\u003e\n  Grid lines : le mot-clé span\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nCette technique deviendra très utile quand la valeur `subgrid` sera largement supportée pour `grid-template-columns` et `grid-template-rows`. par exemple, dans une mise en page d'encarts, où chaque encart comporte un header et un contenu principal, que vous voulez alignés, vous pouvez avoir chaque encart qui s'étend sur 2 rangées, tout en permettant le comportement habituel d'auto-placement. Les encarts individuels utiliseront `subgrid` pour leurs rangées (deux rangées pour chacun). On peut le voir dans l'exemple suivant\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_yLyKvJZ\" src=\"//codepen.io/rachelandrew/embed/yLyKvJZ?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=yLyKvJZ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/yLyKvJZ/\"\u003e\n  Grid lines : le mot-clé span et les subgrids\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLe même exemple vu avec Firefox Grid Inspector :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-lines-subgrid.webp\" width=\"924\" height=\"342\" alt=\"vue de l'exemple précédent avec Firefox Grid inspector\"/\u003e\u003c/figure\u003e\n\n## Placement d'items basé sur les lignes\n\nGrid place automatiquement les items dans des cellules vides de la grille, il ne va pas les empiler dans la même cellule. Cependant, en utilisant le placement basé sur les lignes, nous pouvons mettre les items dans la même cellule. Dans l'exemple ci-dessous, j'ai une image qui s'étend sur deux pistes et une légende placée après la deuxième piste et à laquelle j'ai donné un fond semi-transparent.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_QWwmQMz\" src=\"//codepen.io/rachelandrew/embed/QWwmQMz?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=QWwmQMz\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/QWwmQMz/\"\u003e\n  Grid lines : encarts et éléments empilés\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLes items s'empilent dans l'ordre dans lequel ils apparaissent dans la source. par conséquent, la légende vient après l'image et s'affiche par-dessus. Si la légende venait en premier, elle serait cachée par l'image. nous pouvons contrôler cet empilement avec [la propriété z-index](/articles/comment-fonctionne-z-index). S'il était important d'avoir la légende avant l'image dans la source, on utiliserait `z-index` avec une valeur supérieure à celle de l'image, ce qui forcerait la légende à s'afficher par-dessus l'image.\n\n## Mélanger placement automatique et basé sur les lignes\n\nSi l'on souhaite mélanger le placement d'items basé sur les lignes et le placement automatique, il nous faut être bien attentif. Quand les items sont tous auto-placés dans une grille, ils se placeront de manière séquentielle, chacun trouvant l'espace disponible suivant pour se positionner.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_povLaBz\" src=\"//codepen.io/rachelandrew/embed/povLaBz?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=povLaBz\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/povLaBz/\"\u003e\n  Grid lines : auto-placement\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLe comportement par défaut est toujours d'avancer, et de laisser un gap si un item ne rentre pas dans la grille. Nous pouvons contrôler ce comportement avec la propriété [grid auto flow](/articles/css-grid-layout-guide-complet#gaf) et une valeur de `dense`. Dans ce cas, si un item entre dans un espace déjà laissé vide dans la grille, il sera placé en dehors de l'ordre de la source afin de remplir cet espace. Dans l'exemple suivant, qui utilise `dense`, l'item 3 est maintenant placé avant l'item 2.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_OJPvQKr\" src=\"//codepen.io/rachelandrew/embed/OJPvQKr?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=OJPvQKr\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/OJPvQKr/\"\u003e\n  Grid lines : auto-placement et dense\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNotez que ce comportement peut poser des problèmes aux lecteurs qui utilisent la touche tabulation car le contenu visuel sera décalé par rapport à la source.\n\nAuto-placement fonctionne un peu différemment si vous avez déjà placé quelques items. Les items placés seront positionnés en premier, puis auto-placement cherchera les espaces disponibles pour placer les items. Si vous avez laissé de l'espace blanc en haut de votre mise en page avec une rangée vide, introduisez quelques items qui seront auto-placés, ils se retrouveront dans cette piste.\n\nPour le montrer, dans cet exemple final j'ai placé les items 1 et 2, avec la propriété basée sur les lignes, en laissant la première rangée vide. Les derniers items sont maintenant les premiers.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_RwNMMwJ\" src=\"//codepen.io/rachelandrew/embed/RwNMMwJ?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=RwNMMwJ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/RwNMMwJ/\"\u003e\n  Grid lines : auto-placement et items placés\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl est important de comprendre ce comportement, car on peut se retrouver avec des items placés de manière étrange si on introduit dans la mise en page de nouveaux éléments auxquels on n'aurait pas donné un placement dans la grille.\n\n## Conclusion\n\nC'est à peu près tout ce que vous devez savoir sur les lignes de grille. Rappelez-vous que vous avez toujours les lignes numérotées, et vous pouvez toujours placer un item d'un numéro de ligne à un autre. Les autres méthodes que nous verrons bientôt sont des méthodes alternatives, mais sont basées sur les lignes numérotées.\n"},{"slug":"comprendre-cssgrid-creer-un-container-grid","title":"Comprendre CSS Grid : créer un container Grid","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"3 janvier 2020","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2020/01/understanding-css-grid-container/","copyright":"2020"},"dateCascade":"16 avril 2022","dateMachine":"2O220416","tags":["css","cssgrid"],"about":["Élément block","Élément inline","minmax"],"excerpt":"Dans cette nouvelle série, Rachel Andrew analyse la spécification CSS Grid Layout. Elle commence par ce qui se passe quand on crée un conteneur grid.","featured":false,"featuredImage":"/images/grid-container1.png","order":22,"content":"\nNous commençons ici une nouvelle série d'articles consacrés à CSS Grid Layout, publiés dans [Smashing Magazine](https://www.smashingmagazine.com/). Grid est disponible depuis 2017, mais de nombreux développeurs n'ont pas encore eu l'occasion de l'utiliser dans le cadre d'un projet. A première vue, Grid vient avec toute une foule de propriétés et de valeurs, ce qui peut sembler rebutant. Mais en réalité, de nombreux détails de la spécification sont des variantes, ce qui signifie que vous n'avez pas besoin d'apprendre la spécification entière pour commencer. Cette série vise à vous faire passer de débutant à expert de Grid —\u0026nbsp;et vous donnera de nombreux conseils pratiques en cours de route.\n\nDans ce premier article nous allons voir ce qui se passe lorsqu'on crée un [grid container](/articles/css-grid-layout-guide-complet#gridcontainer) (conteneur de grille) et les diverses propriétés que vous pourrez utiliser sur l'élément parent pour contrôler cette grille. Vous découvrirez qu'il existe plusieurs cas d'utilisation qui ne sont réalisables qu'avec les propriétés de grid container. Dans cet article, nous couvrirons:\n\n- Création d'un grid container avec display: grid ou display: inline-grid,\n- Configuration des colonnes et des lignes avec grid-template-columns et grid-template-rows,\n- Contrôle de la taille des pistes (_tracks_) implicites avec grid-auto-columns et grid-auto-rows.\n\n_NdT : les termes utilisés ici (pistes,...) sont des termes techniques qu'il faut connaître, nous renverrons à chaque fois que nécessaire vers le_ [Guide Complet de CSS Grid Layout](/articles/css-grid-layout-guide-complet) _traduit ici_.\n\n## Créer un container grid\n\nGrid, comme Flexbox, est une valeur de la propriété `display`. Par conséquent, pour indiquer au navigateur qu'on utilise la mise en page grid, on écrit `display:grid` dans le css de l'élément. Le navigateur nous donne une boîte de niveau [block](/articles/la-difference-entre-block-et-inline) sur l'élément en question et tout enfant direct sera inclus dans le contexte de formatage grid. Ils se comporteront comme des [items grid](/articles/css-grid-layout-guide-complet#griditem) et non comme des éléments block ou inline normaux.\n\nVous ne verrez sans doute aucune différence immédiate dans votre page à ce stade. Comme vous n'avez encore créé ni ligne ni colonne, vous avez une grille à une colonne. Suffisamment de rangées sont générées pour contenir tous les enfants directs et ils s'affichent l'un après l'autre dans cette colonne unique. Visuellement, ils ont l'air d'éléments block.\n\nOn verrait une différence si l'on avait à la fois une chaîne de caractères, non enveloppée dans un élément, et un enfant direct du container grid, du fait que cette chaîne de caractères serait enveloppée dans un élément anonyme et deviendrait un item grid. Tout élément normalement _inline_, comme un `span` par exemple, devient un item grid dès lors que son parent est un container grid.\n\nL'exemple qui suit montre deux éléments de niveau block et un texte contenant une span au milieu de la chaîne de caractères. On se retrouve avec cinq items grid\u0026nbsp;:\n\n- les deux éléments `div`\n- la chaîne de caractères qui précède le `span`\n- le `span` lui-même\n- la chaîne de caractères qui suit le `span`\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_VwYrwBe\" src=\"//codepen.io/rachelandrew/embed/VwYrwBe?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=VwYrwBe\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/VwYrwBe/\"\u003e\n  Grid container : enfants directs et chaîne deviennent des items grid\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi l'on inspecte la grille avec [Firefox Grid Inspector](https://firefox-source-docs.mozilla.org/devtools-user/page_inspector/how_to/examine_grid_layouts/index.html), on voit les cinq rangées qui ont été crées pour nos items.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-container1.png\" width=\"661\" height=\"303\" alt=\"\"/\u003e\u003c/figure\u003e\n\nIl est possible de créer une [grille inline](/articles/css-grid-layout-guide-complet#display) avec `display: inline-grid` ; dans ce cas, notre container devient une boîte de niveau inline. Les enfants directs sont toujours des items grid et se comportent comme les items grid à l'intérieur d'une boîte de niveau block (c'est seulement le type d'affichage extérieur). C'est pourquoi le container grid se comporte de la même façon que précédemment quand il est avec avec d'autres boîtes dans une page.\n\nL'exemple suivant montre une grille suivie d'une chaîne de caractères. Comme c'est une grille de niveau inline, le texte peut s'afficher à côté (les éléments de niveau inline ne s'étirent pas pour prendre toute la place dans la dimension inline, contrairement aux éléments de niveau block).\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_Exabxpz\" src=\"//codepen.io/rachelandrew/embed/Exabxpz?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=Exabxpz\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/Exabxpz/\"\u003e\n  Grid container : inline-grid\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nNote : à l'avenir, on pourra mieux décrire notre layout en utilisant `display: block grid` pour créer un container de niveau block et `display inline grid` pour créer un container de niveau inline.\n\n## Colonnes et rangées\n\nPour obtenir quelque chose qui ressemble à une grille, nous aurons besoin d'ajouter des colonnes et des rangées. Pour cela on utilise les propriétés [grid-template-columns](/articles/css-grid-layout-guide-complet#gtc) et [grid-template-rows](/articles/css-grid-layout-guide-complet#gtc). Dans la [spécification](https://www.w3.org/TR/css-grid-1/) il est dit que ces propriétés acceptent une valeur appelée `track-list` (une liste de [pistes](/articles/css-grid-layout-guide-complet#gridtrack)).\n\n\u003e Ces propriétés spécifient, sous forme d'une liste de pistes séparées par un espace, les noms des lignes et les fonctions de dimensionnement des pistes de la grille. La propriété `grid-template-columns` spécifie la liste de pistes pour les colonnes de la grille, tandis que `grid-template-rows` le fait pour les rangées.\n\nA titre d'illustration, voici **quelques valeurs de listes de pistes possibles** :\n\n- `grid-template-columns: 100px 100px 200px;` crée une grille à trois colonnes: la première fait 100px de large, la deuxième aussi, la troisième fait 200px.\n\n- `grid-template-columns: min-content max-content fit-content(10em);` crée une grille à trois colonnes, la première à la taille `min-content`, la deuxième à la taille `max-content`. La troisième est à la taille `max-content` _sauf si_ le contenu est plus grand que 10em, auquel cas il est limité à 10em.\n\n- `grid-template-columns: 1fr 1fr 1fr;` crée une grille à trois colonnes à l'aide de l'unité `fr`. L'espace disponible dans le container grid est divisé en trois et partagé entre les trois colonnes.\n\n- `grid-template-columns: repeat(2, 10em 1fr);` crée une grille de quatre colonnes selon un motif répété `10em 1 fr 10em 1fr`, la liste de pistes étant répétée deux fois.\n\n- `grid-template-columns: repeat(autofill 200px);` remplit le container d'autant de colonnes de 200px que possible, et laisse un espace à la fin s'il reste de la place.\n\n- `grid-template-columns: repeat(autofill minmax(200px, 1fr));` remplit le container d'autant de colonnes de 200px que possible, puis distribue l'espace restant de manière égale entre les colonnes.\n\n- `grid-template-columns: [full-start] 1fr [content-start] 3fr [content-end] 1fr [full-end];` crée une grille de trois colonnes, la première et la troisième occupant une fraction de l'espace disponible et la troisième occupant trois fractions de l'espace disponible. Les lignes sont nommées en mettant leur nom entre crochets.\n\nComme vous pouvez le constater, il y a de nombreuses façons de créer une liste de pistes. Voyons maintenant comment tout cela fonctionne, en donnant quelques conseils d'utilisation.\n\n## Utilisation des unités de longueur\n\nOn peut utiliser n'importe quelle unité de longueur, ou un pourcentage, pour créer les pistes. Si la dimension des pistes est inférieure à l'espace disponible dans le container, alors par défaut les pistes s'aligneront au début du container et l'espace sera à la fin. Ceci, parce que la valeur par défaut de `align-content` et de `justify-content` est `start`. On peut espacer les pistes, ou les déplacer vers la fin, en utilisant les propriétés d'alignement, comme je l'ai expliqué en détail dans [Alignement en CSS, un guide complet](/articles/alignement-en-css-guide-complet)\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eYmeYbX\" src=\"//codepen.io/rachelandrew/embed/eYmeYbX?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=eYmeYbX\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/eYmeYbX/\"\u003e\n  Grid container : unités de longueur\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nOn peut aussi utiliser les mots-clés `min-content`, `max-content` et `fit-content()`. Avec `min-content`, on a une piste qui est aussi étroite que possible sans dépassement. Par conséquent, lorsqu'on l'utilise pour la largeur de la colonne, le contenu reviendra à la ligne à chaque fois que possible. La piste prend donc la dimension du mot le plus long de la colonne, ou du plus large élément de taille fixe.\n\nAvec `max-content`, c'est l'inverse, le contenu ne reviendra pas à la ligne du tout. Dans une colonne, cela peut donc avoir pour conséquence un texte qui déborde.\n\nLe mot-clé `fit-content()` quant à lui doit prendre une valeur, celle-ci devenant le maximum possible pour cette piste. La piste se comportera donc de la même façon que `max-content` jusqu'à rencontrer la valeur spécifiée. Arrivé à ce point, le contenu pourra revenir à la ligne sans déborder. Autrement dit, votre piste peut être plus petite que la valeur spécifiée, mais jamais plus grande.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_rNaYNob\" src=\"//codepen.io/rachelandrew/embed/rNaYNob?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=rNaYNob\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/rNaYNob/\"\u003e\n  Grid container : min-content, max-content, fit-content()\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous trouverez plus d'information sur le dimensionnement dans Grid et d'autres méthodes de mise en page dans mon article [CSS Flexbox et la dimension des boîtes](/articles/css-flexbox-et-la-dimension-des-boites).\n\nSi vous avez des pistes qui prennent plus d'espace que disponible dans votre container, elles dépasseront. Si vous utilisez des pourcentages, vous devrez veiller à ce que le total ne soit pas supérieur à 100% pour éviter le dépassement.\n\n## L'unité fr\n\nGrid Layout offre une méthode qui vous permettra d'éviter les calculs de pourcentages —\u0026nbsp;le dimensionnement des pistes avec l'unité `fr`. Cette unité n'est pas une longueur et par conséquent ne peut pas être utilisée en combinaison avec `calc()`; c'est une unité flex qui représente l'espace disponible dans le container grid.\n\nAutrement dit, avec une liste de pistes de `1fr 1fr 1fr` l'espace disponible est divisé en trois et partagé de façon égale entre les pistes. Avec une liste de pistes de `2fr 1fr 1fr`, l'espace disponible est divisé en quatre, deux parties sont données à la première piste et une partie à chacune des pistes deux et trois.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_QWwOWYx\" src=\"//codepen.io/rachelandrew/embed/QWwOWYx?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=QWwOWYx\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/QWwOWYx/\"\u003e\n  Grid container : fr \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nUn point auquel il faut être attentif est que ce qui est partagé par défaut, c'est _l'espace disponible_, qui n'est pas nécessairement l'espace total de notre container. Si une piste contient un élément de taille fixe ou un mot très long sans retour à la ligne, celle-ci sera mise en place avant le partage de l'espace restant.\n\nDans l'exemple qui suit, j'ai supprimé les espaces entre les mots de `ItemThree`, ce qui crée une chaîne de caractères sans retour à la ligne possible. La distribution de l'espace se fait après que les conditions d'affichage de cet item aient été calculées.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_JjoOjzo\" src=\"//codepen.io/rachelandrew/embed/JjoOjzo?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=JjoOjzo\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/JjoOjzo/\"\u003e\n  Grid container : fr quand il y a un contenu trop grand \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nOn peut mélanger l'unité `fr` avec des pistes de taille fixe et c'est d'ailleurs là qu'elle devient très utile. Par exemple on peut avoir un composant à deux colonnes fixes et une colonne centrale extensible\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_JjoOjqd\" src=\"//codepen.io/rachelandrew/embed/JjoOjqd?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=JjoOjqd\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/JjoOjqd/\"\u003e\n  Grid container : mélanger fr et dimensions fixes \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nOn peut aussi avoir un composant avec une piste réglée sur `fit-content(300px)` et l'autre sur `1fr`. On a ainsi un composant qui accepte quelque chose d'inférieur à 300px dans la première piste, auquel cas il prend seulement l'espace nécessaire, et l'unité `fr` s'étend pour prendre le reste de l'espace disponible.\n\nSi on ajoute quelque chose de plus grand (comme une image ayant une `max-width: 100%`), la première piste sera limitée à 300px et l'unité `fr` prendra le reste de l'espace. On crée des composant très flexibles en mélangeant l'unité `fr` et `fit-content()`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_abzVbgb\" src=\"//codepen.io/rachelandrew/embed/abzVbgb?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=abzVbgb\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/abzVbgb/\"\u003e\n  Grid container : mélanger fr et fit-content \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## La fonction repeat()\n\nLa function repeat() peut vous épargner la saisie de valeurs identiques. Les deux lignes ci-dessous sont équivalentes\u0026nbsp;:\n\n```\ngrid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\ngrid-template-columns: repeat(12, 1fr);\n```\n\nLa valeur avant la virgule représente le nombre de répétitions, la valeur après la virgule représente la liste de pistes qui doit être répété. On peut avoir un seul pattern (comme ci-dessus) ou des valeurs multiples. Enfin, on peut utiliser `repeat()` pour une partie d'une liste de pistes. Dans l'exemple ci-dessous, on aurait une piste `1fr`, trois pistes `200px` et une piste `1fr` pour finir.\n\n```\ngrid-template-columns: 1fr repeat(3, 200px) 1fr;\n```\n\nA la place d'un nombre avant la virgule, indiquant un nombre fixe de répétitions d'un pattern, on peut utiliser les mots-clés `auto-fill` ou `auto-fit`. Le container grid sera rempli par autant de pistes qu'il peut en contenir.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_oNgoggL\" src=\"//codepen.io/rachelandrew/embed/oNgoggL?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=oNgoggL\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/oNgoggL/\"\u003e\n  Grid container : auto-fill \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nL'utilisation d'une unité de mesure fixe a pour effet que si le container ne peut être divisé exactement par cette taille, il restera de l'espace disponible. Dans l'exemple ci-dessus, mon container fait 500px de large, et j'ai deux pistes de 200px et un espace vide à la fin.\n\nNous pouvons utiliser une autre fonction Grid pour transformer cette valeur fixe en minimum. La fonction `minmax()` prend une taille minimum et une taille maximum. Avec un minimum de 200px et un maximum de 1fr, nous avons autant des pistes de 200px que le container peut accepter et comme le maximum est 1fr, ce qui, nous le savons, va répartir l'espace de façon égale, l'espace en trop sera distribué entre les pistes.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eYmemNw\" src=\"//codepen.io/rachelandrew/embed/eYmemNw?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=eYmemNw\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/eYmemNw/\"\u003e\n  Grid container : auto-fill et minmax() \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nJ'ai indiqué qu'il y avait deux mots-clés possibles : `auto-fill` et `auto-fit`. Si vous avez assez de contenu pour remplir la première rangée de cellules, celles-ci se comporteront exactement de la même manière. Si par contre vous n'avez pas assez de contenu (p.ex. si nous supprimons toutes les cellules sauf une dans le container précédent), alors elles se comporteront différemment.\n\n`auto-fill` maintiendra le dimensionnement de la piste, même s'il n'y a pas de contenu pour la remplir.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_XWJzJXr\" src=\"//codepen.io/rachelandrew/embed/XWJzJXr?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=XWJzJXr\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/XWJzJXr/\"\u003e\n  Grid container : auto-fill et minmax() avec un seul item \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nEn revanche, si on utilise `auto-fit`, les pistes vides seront fondues en une\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_XWJzJdW\" src=\"//codepen.io/rachelandrew/embed/XWJzJdW?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=XWJzJdW\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/XWJzJdW/\"\u003e\n  Grid container : auto-fit et minmax() avec un seul item \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nFirefox Grid inspector nous permet de voir que les pistes sont toujours là, mais qu'elles ont été fondues. La ligne finale de notre grille est toujours la ligne 3.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-container2.webp\" width=\"765\" height=\"200\" alt=\"\"/\u003e\u003c/figure\u003e\n\n## Lignes nommées\n\nMon exemple final ci-dessus utilisait l'approche des lignes nommées. Quand on utilise Grid, on a toujours des numéros de ligne, cependant, on peut aussi nommer les lignes. Leur nom apparaît entre crochets. On peut avoir plusieurs noms pour une ligne\u0026nbsp;; dans ce cas, un espace les sépare. Par exemple, dans la liste de pistes suivante, toutes mes lignes ont deux noms.\n\n```\ngrid-template-columns: [main-start sidebar-start] 1fr [sidebar-end content-start] 4fr [content-end main-end]\n```\n\nOn peut nommer nos lignes comme on veut, sauf avec le mot `span` qui est un mot réservé car il peut être utilisé pour placer des items dans la grille.\n\nNote : dans les prochains articles de cette série, je parlerai plus en détails du placement basé sur les lignes et de la façon dont on peut se servir des lignes nommées. En attendant, vous pouvez lire mon article [Naming Things in CSS Grid Layout](https://www.smashingmagazine.com/2017/10/naming-things-css-grid-layout/) (en anglais) pour en savoir plus sur le sujet.\n\n## Grille explicite vs grille implicite\n\nLorsqu'on crée une grille avec `grid-template-columns` et `grid-template-rows` et une liste de pistes, on crée ce qu'on appelle une **grille explicite**. C'est la grille que vous avez définie, avec le dimensionnement que vous avez choisi pour chaque piste.\n\nSi vous avez plus d'items qu'elle n'en peut contenir, ou si vous placez un item de telle manière qu'il tombe en dehors des limites de la grille, Grid créera des pistes dans ce qu'on appelle la **grille implicite**. Ces pistes implicites seront autodimensionnées par défaut. Nous avons déjà vu cette grille implicite en action lorsque j'ai déclaré `display: grid` dans l'élément parent et que grid a créé des rangées, une pour chaque item. Je n'avais pas défini ces rangées, mais puisqu'il y avait des items grid, les pistes de rangées ont été créées pour leur donner un endroit où aller.\n\nOn peut fixer une dimension pour les rangées ou colonnes implicites en utilisant les propriétés `grid-auto-rows` ou `grid-auto-columns`. Ces propriétés prennent une liste de pistes et si vous voulez que toutes les colonnes implicites aient ne hauteur d'au moins 200px mais qu'elles puissent s'agrandir s'il y a plus de contenu, vous pouvez écrire\u0026nbsp;:\n\n```\ngrid-auto-rows: minmax(200px, auto)\n```\n\nSi vous souhaitez que la première rangée implicite soit auto-dimensionnée et que la deuxième soit dimensionnée avec `min-content` etc. (jusqu'à ce que tous les items grid soient en place), vous pouvez passer des valeurs multiples\u0026nbsp;:\n\n```\ngrid-auto-rows: auto 100px\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xxbPxyK\" src=\"//codepen.io/rachelandrew/embed/xxbPxyK?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=xxbPxyK\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/xxbPxyK/\"\u003e\n  Grid container : grid-auto-rows \u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Utiliser une grille avec placement automatique\n\nCréer une grille (et permettre au navigateur de placer automatiquement les items) nous emmène loin en termes de patterns utiles. Nous n'avons pas encore abordé la question du placement des items dans la grille, mais de nombreuses mises en page réalisées avec Grid ne font aucun placement. Elle s'appuient simplement sur le placement d'items dans l'ordre de la source —\u0026nbsp;un dans chaque cellule de la grille.\n\nSi vous débutez avec CSS Grid, une bonne façon de comprendre comment ça marche est de s'amuser avec différentes dimensions de pistes, en regardant comment les items se placent dans les cellules.\n"},{"slug":"css-grid-difference-entre-grilles-explicite-et-implicite","title":"CSS Grid : la différence entre grilles explicite et implicite","author":{"name":"Manuel Matuzovic","lastname":"Matuzovic"},"original":{"date":"10 août 2017","site":"CSS Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/difference-explicit-implicit-grids/","copyright":"2017"},"dateCascade":"5 mars 2021","dateMachine":"2O210305","tags":["cssgrid","css"],"about":[],"excerpt":"","featured":false,"featuredImage":"/images/grid5.webp","order":null,"content":"\n[Grid Layout](https://www.w3.org/TR/css-grid-1/) nous donne enfin la possibilité de définir des grilles en CSS et de placer des éléments dans des cellules de grille. En soi, c'est génial, mais le fait de _ne pas avoir à spécifier chaque [piste](https://www.w3.org/TR/css-grid-1/#grid-track-concept) et de ne pas avoir à placer chaque élément manuellement_ rend le nouveau module encore meilleur. Les grilles sont suffisamment flexibles pour s'adapter à leurs éléments.\n\nTout ceci est géré par _les grilles dites explicites et implicites_.\n\nNote : Tous les exemples de code de cet article sont accompagnés d'images afin d'afficher les lignes et les pistes de la grille. Si vous voulez bricoler le code vous-même, je vous recommande d'utiliser Firefox pour déboguer les grilles.\n\n## Grilles explicites\n\nNous pouvons définir un nombre fixe de [lignes](/articles/css-grid-layout-guide-complet#gridline) et de [pistes](/articles/css-grid-layout-guide-complet#gridtrack) qui forment une grille en utilisant les propriétés `grid-template-rows`, `grid-template-columns` et `grid-template-areas`. Cette grille définie manuellement s'appelle la **grille explicite**.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid1.webp\" width=\"863\" height=\"284\" alt=\"\"/\u003e\u003cfigcaption\u003eUne grille explicite comportant 4 pistes verticales (colonnes) et 2 pistes horizontales (rangées) (\u003ca href=\"https://codepen.io/matuzo/pen/OjMGMY\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-template-rows: 100px 100px;\n  grid-gap: 20px;\n}\n```\n\n### Répétition des pistes\n\nLorsque nous définissons `grid-template-columns : 1fr 1fr 1fr 1fr` nous obtenons quatre pistes verticales, chacune ayant une largeur de `1fr`. Nous pouvons automatiser cela en utilisant la notation `repeat()` comme suit `grid-template-columns : repeat(4, 1fr)`. Le premier argument spécifie le nombre de répétitions, le second une liste de pistes, qui est répétée ce nombre de fois.\n\n_Une liste de pistes_ ? Oui, vous pouvez effectivement répéter plusieurs pistes.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_yoerVa\" src=\"//codepen.io/matuzo/embed/yoerVa?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=/yoerVa\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n### Répétition automatique des pistes\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid6_.webp\" width=\"884\" height=\"103\" alt=\"\"/\u003e\u003cfigcaption\u003eUne grille explicite avec 4 pistes verticales de 100px de large chacune, générée par la notation repeat. (\u003ca href=\"https://codepen.io/matuzo/pen/VzeNpE\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_VzeNpE\" src=\"//codepen.io/matuzo/embed/VzeNpE?height=200\u0026amp;theme-id=light\u0026amp;slug-hash=/VzeNpE\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"200\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\nLa notation `repeat` est très utile, mais elle peut être automatisée encore davantage. Au lieu de définir un nombre fixe de répétitions, nous pouvons utiliser les mots-clés `auto-fill` et `auto-fit`.\n\n### Remplissage automatique des pistes\n\nLe mot-clé `auto-fill` crée autant de pistes que le conteneur de la grille peut en contenir sans que la grille ne déborde.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid7_.webp\" width=\"884\" height=\"105\" alt=\"\"/\u003e\u003cfigcaption\u003eRépétition d'autant de pistes verticales d'une largeur de 100px que possible dans le conteneur de la grille. (\u003ca href=\"https://codepen.io/matuzo/pen/PKZgmr\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_PKZgmr\" src=\"//codepen.io/matuzo/embed/PKZgmr?height=200\u0026amp;theme-id=light\u0026amp;slug-hash=/PKZgmr\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"200\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 100px);\n  grid-gap: 20px;\n}\n```\n\nNotez que `repeat(auto-fill, 1fr)` \u003cdel\u003ene créera qu'une seule piste car une seule piste avec une largeur de 1fr remplit déjà tout le conteneur de la grille, c'\u003c/del\u003e est une déclaration invalide (_peut-être qu'elle a changé ? je ne sais pas_).\n\n### Ajustement automatique des pistes\n\nLe mot-clé `auto-fit` se comporte de la même manière que `auto-fill`, sauf qu'après le placement des éléments de la grille, il ne créera qu'autant de pistes que nécessaire et toute piste vide répétée disparaît.\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 100px);\n  grid-gap: 20px;\n}\n```\n\nDans l'exemple utilisé dans cette section, la grille aura le même aspect avec `repeat(auto-fit, 100px)` et `repeat(4, 100px)`. La différence est visible lorsqu'il y a plus de 4 éléments de grille.\n\nS'il y a plus d'éléments, `auto-fit` crée plus de colonnes.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid8.webp\" width=\"654\" height=\"105\" alt=\"\"/\u003e\u003cfigcaption\u003eLa notation repeat avec le mot-clé auto-fit crée autant de pistes que nécessaire pour tenir dans le conteneur de la grille. (\u003ca href=\"https://codepen.io/matuzo/pen/RZrOXw\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_RZrOXw\" src=\"//codepen.io/matuzo/embed/RZrOXw?height=200\u0026amp;theme-id=light\u0026amp;slug-hash=/RZrOXw\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"200\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\nEn revanche, si un nombre fixe de pistes verticales est utilisé dans la notation `repeat` et que le nombre d'éléments dépasse cette valeur, davantage de lignes sont ajoutées. Vous pouvez en savoir plus à ce sujet dans la section suivante : [les grilles implicites](#implicitgrids).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid9.webp\" width=\"522\" height=\"162\" alt=\"\"/\u003e\u003cfigcaption\u003eS'il y a plus d'éléments que de pistes verticales, plus de rangées sont ajoutées. (\u003ca href=\"https://codepen.io/matuzo/pen/ZJQZgr\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ZJQZgr\" src=\"//codepen.io/matuzo/embed/ZJQZgr?height=200\u0026amp;theme-id=light\u0026amp;slug-hash=/ZJQZgr\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"200\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\nJ'ai utilisé `grid-template-columns` dans les exemples ci-dessus par commodité, mais toutes les règles s'appliquent également à `grid-template-rows`.\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 100px);\n  grid-template-rows: repeat(auto-fill, 100px);\n  grid-gap: 20px;\n  height: 100%;\n}\n\nhtml,\nbody {\n  hauteur: 100%;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid10.webp\" width=\"813\" height=\"441\" alt=\"\"/\u003e\u003cfigcaption\u003eLa notation de répétition avec le mot-clé auto-fill sur les deux axes. (\u003ca href=\"https://codepen.io/matuzo/pen/prgVmW\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_prgVmW\" src=\"//codepen.io/matuzo/embed/prgVmW?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=/prgVmW\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003ch2 id=\"implicitgrids\"\u003eGrilles implicites\u003c/h2\u003e\n\nS'il y a plus d'éléments de grille que de cellules dans la grille ou lorsqu'un élément de grille est placé en dehors de la grille explicite, le conteneur de grille génère automatiquement des pistes de grille en ajoutant des lignes de grille à la grille. La grille explicite ainsi que ces pistes et lignes implicites supplémentaires forment ensemble ce qu'on appelle la grille implicite.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid2.webp\" width=\"867\" height=\"363\" alt=\"\"/\u003e\u003cfigcaption\u003eDeux éléments placés en dehors de la grille explicite entraînant la création de lignes et de pistes implicites. (\u003ca href=\"https://codepen.io/matuzo/pen/vJLwNY\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vJLwNY\" src=\"//codepen.io/matuzo/embed/vJLwNY?height=430\u0026amp;theme-id=light\u0026amp;slug-hash=/vJLwNY\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"430\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n```css\n.item:first-child {\n  grid-column-start: -1;\n}\n\n.item:nth-child(2) {\n  grid-row-start: 4;\n}\n```\n\nLes largeurs et hauteurs des pistes implicites sont définies automatiquement. Elles sont juste assez grandes pour s'adapter aux [éléments de grille](/articles/css-grid-layout-guide-complet#griditem) (_items_) placés, mais il est possible de modifier ce comportement par défaut.\n\n### Dimensionnement des pistes implicites\n\nLes propriétés `grid-auto-rows` et `grid-auto-columns` nous permettent de contrôler la taille des pistes implicites.\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: 100px 100px;\n  grid-gap: 20px;\n  grid-auto-columns: 200px;\n  grid-autorows: 60px;\n}\n```\n\nLes pistes implicites auront désormais toujours une largeur de 200px et une hauteur de 60px, peu importe si l'élément de la grille s'adapte ou non.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid3.webp\" width=\"864\" height=\"448\" alt=\"\"/\u003e\u003cfigcaption\u003eLargeurs et hauteurs fixes pour les pistes implicites. (\u003ca href=\"https://codepen.io/matuzo/pen/vJLwNY\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vJLwNY\" src=\"//codepen.io/matuzo/embed/vJLwNY?height=430\u0026amp;theme-id=light\u0026amp;slug-hash=/vJLwNY\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"430\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\nVous pouvez rendre les pistes implicites de taille plus flexible en spécifiant une plage à l'aide de la notation minmax().\n\n```css\n.grid {\n  grid-auto-columns: minmax(200px, auto);\n  grid-auto-rows: minmax(60px, auto);\n}\n```\n\nLes pistes implicites font maintenant au moins 200px de large et 60px de haut, mais s'étendront si le contenu l'exige.\n\n## Extension de la grille au début\n\nIl ne faut pas croire que les pistes implicites ne peuvent être ajoutées qu'à la fin de la grille explicite. Il peut également arriver que la grille explicite doive être étendue au début.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid4_.webp\" width=\"868\" height=\"363\" alt=\"\"/\u003e\u003cfigcaption\u003eUne grille implicite étendue d'une ligne et d'une colonne au début. (\u003ca href=\"https://codepen.io/matuzo/pen/BdyJWR\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_BdyJWR\" src=\"//codepen.io/matuzo/embed/BdyJWR?height=430\u0026amp;theme-id=light\u0026amp;slug-hash=/BdyJWR\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"430\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n```css\n.item:first-child {\n  grid-row-end: 2;\n  grid-row-start: span 2;\n}\n\n.item:nth-child(2) {\n  grid-column-end: 2;\n  grid-column-start: span 2;\n}\n```\n\nChaque élément se termine sur la deuxième ligne et s'étend sur 2 cellules (une verticalement, l'autre horizontalement). Comme il n'y a qu'une seule cellule avant la deuxième ligne, une autre piste implicite est ajoutée à la grille au début de chaque côté.\n\n## Placement automatique\n\nComme déjà mentionné, des pistes implicites sont également ajoutées si le nombre d'éléments dépasse le nombre de cellules. Par défaut, l'algorithme de placement automatique place les éléments en remplissant chaque ligne consécutivement, en ajoutant de nouvelles rangées si nécessaire. Nous pouvons spécifier comment les éléments placés automatiquement s'écoulent dans la grille en utilisant la propriété `grid-auto-flow`.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid11.webp\" width=\"1126\" height=\"281\" alt=\"\"/\u003e\u003cfigcaption\u003eAu lieu de rangées, de nouvelles colonnes sont ajoutées si le nombre d'éléments dépasse le nombre de cellules. (\u003ca href=\"https://codepen.io/matuzo/pen/JyGqBP\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_JyGqBP\" src=\"//codepen.io/matuzo/embed/JyGqBP?height=840\u0026amp;theme-id=light\u0026amp;slug-hash=/JyGqBP\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"840\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n```css\n.grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-template-rows: 100px 100px;\n  grid-gap: 20px;\n  grid-auto-flow: column;\n}\n```\n\nAu lieu de rangées, les colonnes sont remplies d'éléments et des colonnes implicites supplémentaires sont créées.\n\n## Ne pas définir une grille explicite\n\nÉtant donné qu'il est possible de dimensionner automatiquement les cellules à l'aide de `grid-auto-rows` et `grid-auto-columns`, il n'est pas obligatoire de définir une grille explicite.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid5.webp\" width=\"705\" height=\"366\" alt=\"\"/\u003e\u003cfigcaption\u003eUne grille implicite sans lignes et pistes explicites. (\u003ca href=\"https://codepen.io/matuzo/pen/gxPzeY\"\u003eVoir Codepen\u003c/a\u003e).\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_gxPzeY\" src=\"//codepen.io/matuzo/embed/gxPzeY?height=440\u0026amp;theme-id=light\u0026amp;slug-hash=/gxPzeY\u0026amp;user=matuzo\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"440\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n```css\n.grid {\n  display: grid;\n  grid-auto-columns: minmax(60px, 200px);\n  grid-autorows: 60px;\n  grid-gap: 20px;\n}\n\n.item:first-child {\n  grid-row: span 2;\n}\n\n.item:nth-child(2) {\n  grid-column: 1 / span 2;\n}\n\n.item:nth-child(5) {\n  grid-column: 3;\n}\n```\n\nS'appuyer uniquement sur la grille implicite peut être source de confusion et difficile à comprendre en combinaison avec le placement explicite. Dans cet exemple, le premier élément est placé automatiquement et s'étend sur 2 rangées, le deuxième élément est placé explicitement dans la première colonne et s'étend sur 2 colonnes, créant ainsi une deuxième piste verticale. Les troisième et quatrième éléments seraient en fait tous deux placés automatiquement dans la quatrième rangée, mais le cinquième élément est placé explicitement dans la troisième colonne, qui n'existait pas auparavant. Cela crée une troisième piste verticale et, grâce au placement automatique de Grids, le troisième élément remonte d'une rangée pour remplir l'espace.\n\n## Conclusion\n\nCet article ne couvre pas tout ce qu'il y a à savoir sur la grille explicite et implicite, mais il devrait vous donner plus qu'une solide compréhension du concept. Savoir pourquoi et comment les lignes et les pistes implicites ont été créées est essentiel pour travailler avec la mise en page de la grille.\n\nVous pouvez trouver tous les exemples utilisés dans cet article dans une [collection sur CodePen](https://codepen.io/collection/XkLzYO/).\n\nSi vous souhaitez en savoir plus sur les grilles, consultez [Grid Layout, guide complet](/articles/css-grid-layout-guide-complet), [Getting Started with CSS Grid](https://css-tricks.com/getting-started-css-grid/), [Grid By Example](https://gridbyexample.com/) et [A Collection of Interesting Facts about CSS Grid Layout](https://css-tricks.com/collection-interesting-facts-css-grid-layout/).\n"},{"slug":"la-propriete-css-clip-path","title":"La propriété CSS Clip Path","author":{"name":"Sara Cope","lastname":"Cope"},"original":{"date":"27 novembre 2020","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/almanac/properties/c/clip-path/","copyright":"2020"},"dateCascade":"27 décembre 2020","dateMachine":"2O201227","tags":["css"],"about":["Clip Path"],"excerpt":"","featured":false,"featuredImage":"/images/clip-visual.webp","order":10,"content":"\nLa propriété `clip-path` en CSS nous permet de détourer une région spécifique d'un élément à afficher, le reste étant masqué (ou \"clippé\").\n\n```css\n.clip-me {\n  /* Exemple : détourer l'élément suivant les bords supérieur, droit, inférieur et gauche */\n  clip-path: inset(10px 20px 30px 40px); /* ou \"none\" */\n\n  /* Exemple : clipper l'élément dans un Heptagone */\n  clip-path: polygone(\n    50% 0%,\n    90% 20%,\n    100% 60%,\n    75% 100%,\n    25% 100%,\n    0% 60%,\n    10% 20%\n  );\n\n  /* Version obsolète */\n  position: absolute; /* Positionnement absolu ou fixe requis */\n  clip: rect(110px, 160px, 170px, 60px); /* ou \"auto\" */\n  /* les valeurs décrivent un point haut/gauche et un point bas/droit */\n}\n```\n\n👉🏾 _Il existait auparavant une propriété `clip`, mais notez qu'elle est dépréciée_.\n\nLe cas d'utilisation le plus courant serait une image, mais nous ne sommes pas limités à cela. Nous pourrions tout aussi bien appliquer `clip-path` à une balise de paragraphe et seulement à une partie du texte.\n\n```html\n\u003cimg\n  class=\"clip-me\"\n  src=\"/images/image-a-clipper.png\"\n  alt=\"Description de l'image\"\n/\u003e\n\n\u003cp class=\"clip-me\"\u003eJe vais être clippé.\u003c/p\u003e\n```\n\nCes quatre valeurs dans `inset()` (dans le CSS ci-dessus) représentent le point **haut/gauche** et le point **bas/droit**, ce qui forme le rectangle visible. Tout ce qui se trouve en dehors de ce rectangle est caché.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/clip-visual.webp\" width=\"680\" height=\"300\" alt=\"\"/\u003e\u003cfigcaption\u003eCette image de Louis Lazaris explique très bien les quatre points de l'ancienne syntaxe clip : rect();\u003c/figcaption\u003e\u003c/figure\u003e\n\nAutres valeurs possibles :\n\n```css\n.clip-me {\n  /* référencement du chemin d'accès à partir d'un SVG en ligne */\n  clip-path: url(#c1);\n\n  /* chemin de référence d'un SVG externe */\n  clip-path: url(path.svg#c1);\n\n  /* polygone */\n  clip-path: polygon(\n    5% 5%,\n    100% 0%,\n    100% 75%,\n    75% 75%,\n    75% 100%,\n    50% 75%,\n    0% 75%\n  );\n\n  /* cercle */\n  clip-path: circle(30px at 35px 35px);\n\n  /* ellipse */\n  clip-path: ellipse(65px 30px at 125px 40px);\n\n  /* inset-rectangle() pourrait remplacer inset() ? */\n  /* rectangle() arrive dans SVG 2 */\n\n  /* coins arrondis... pas sûr que ce soit encore une chose */\n  clip-path: inset(10% 10% 10% 10% round 20%, 20%);\n}\n```\n\nExemple de chemin de clip SVG :\n\n```xml\n\u003cclipPath id=\"clipping\"\u003e\n  \u003ccircle cx=\"150\" cy=\"150\" r=\"50\" /\u003e\n  \u003crect x=\"150\" y=\"150\" width=\"100\" height=\"100\" /\u003e\n\u003c/clipPath\u003e\n```\n\nIl est étrange que `clip-path` n'ait pas pris en charge la fonction `path()` dès le départ, puisque `path()` est déjà une chose pour des [propriétés comme `motion-path`](https://css-tricks.com/almanac/properties/o/offset-path/). Firefox la prend maintenant en charge, et nous attendons le reste des navigateurs. Voir [An Initial Implementation of clip-path: path();](https://css-tricks.com/an-initial-implementation-of-clip-path-path/)\n\n## Créer notre propre modèle\n\nEn attendant que nous puissions utiliser `path()` de manière fiable, le clip le plus utile pour les formes personnalisées fantaisistes est `polygon()`. Voici un éditeur très soigné de Mads Stoumann (qui fonctionne aussi pour les cercles et les ellipses)\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_abZxoOM\" src=\"//codepen.io/stoumann/embed/abZxoOM?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=abZxoOM\u0026amp;user=stoumann\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/stoumann/pen/abZxoOM\"\u003e\n  CSS clip-path Editor\u003c/a\u003e de Mads Stoumann dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Plus d'information\n\n- [Clipping and Masking in CSS](https://css-tricks.com/clipping-masking-css/)\n- [clip-path dans MDN](https://developer.mozilla.org/fr/docs/Web/CSS/clip-path)\n- [Clippy: Bennett Feely’s clip-path maker](https://bennettfeely.com/clippy/)\n- [Découpage et Masquage dans MDN](https://developer.mozilla.org/fr/docs/Web/SVG/Tutorial/Clipping_and_masking)\n- [Clipping in CSS and SVG – The clip-path Property and Element by Sara Soueidan](https://www.sarasoueidan.com/blog/css-svg-clipping/)\n- [Pens tagged clip-path on CodePen](https://codepen.io/tag/clip-path/)\n- [Demos and browser support demo Pen by Yoksel](https://codepen.io/yoksel/full/GRodvp)\n- [SVG Masks by Jakob Jenkov](https://jenkov.com/tutorials/svg/mask.html)\n\n[Compatibilité navigateurs](https://caniuse.com/css-clip-path) à ce jour.\n"},{"slug":"sticky-footer-de-5-facons","title":"Sticky footer, de 5 façons","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"16 février 2018","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/couple-takes-sticky-footer/","copyright":"2018"},"dateCascade":"3 janvier 2020","dateMachine":"2O200103","tags":["css","flexbox","cssgrid"],"about":["Sticky Footer","Footer"],"excerpt":"Une brève histoire des sticky footers, par Chris Coyier, depuis les pieds de page collants à l'ancienne jusqu'aux techniques Flexbox et CSS-Grid.","featured":false,"featuredImage":"/images/sticky_footer-compressor.jpeg","order":10,"content":"\nUn sticky footer (\"pied de page collant\" ou \"bas de page adhérant\") est un pied de page qui reste \"collé\" au bas de la fenêtre du navigateur —\u0026nbsp;mais pas toujours\u0026nbsp;: s'il y a assez de contenu pour remplir la fenêtre, le footer suit le contenu et n'apparaît pas, si au contraire il n'y a pas assez de contenu, le footer sera collé en bas de page.\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" loading=\"lazy\" src=\"/images/sticky_footer-compressor.jpeg\" width=\"901\" height=\"602\" alt=\"\"/\u003e\u003c/figure\u003e\n\nVoici 5 façons possibles de créer un sticky footer, des plus anciennes aux plus récentes\u0026nbsp;:\n\n\u003ch2\u003eMarges négatives sur les wrappers\u003c/h2\u003e\n\nAutrefois on utilisait un élément qui enveloppait tout le contenu à l'exception du pied de page. Cet élément \"wrapper\" avait une marge négative égale à la hauteur du pied de page.\n\n```html\n\u003cbody\u003e\n  \u003cdiv class=\"wrapper\"\u003e\n    content\n\n    \u003cdiv class=\"push\"\u003e\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cfooter class=\"footer\"\u003e\u003c/footer\u003e\n\u003c/body\u003e\n```\n\net\n\n```css\nhtml,\nbody {\n  height: 100%;\n  margin: 0;\n}\n.wrapper {\n  min-height: 100%;\n\n  /* Égal à la hauteur du footer */\n  /* Tient compte aussi d'une possible margin-bottom du dernier enfant */\n  margin-bottom: -50px;\n}\n.footer,\n.push {\n  height: 50px;\n}\n```\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir le \u003cem\u003ePen\u003c/em\u003e\u003ca href=\"https://codepen.io/chriscoyier/pen/VjZmGj\"\u003e\n  Sticky Footer with Negative Margin 1\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nPour y parvenir on a utilisé un élément supplémentaire (le `.push`) pour s'assurer que la marge négative ne tire pas le footer vers le haut ce qui aurait recouvert une partie du contenu.\n\n\u003ch2\u003eMarge supérieure négative sur le footer\u003c/h2\u003e\n\n[Cette autre technique](https://www.cssstickyfooter.com/) ne faisait pas appel à un élément _push_ mais à un élément enveloppant supplémentaire dans lequel on appliquait un padding inférieur correspondant. Là encore, pour éviter que la marge négative ne fasse passer le footer par-dessus un contenu.\n\n```html\n\u003cbody\u003e\n  \u003cdiv class=\"content\"\u003e\n    \u003cdiv class=\"content-inside\"\u003econtent\u003c/div\u003e\n  \u003c/div\u003e\n  \u003cfooter class=\"footer\"\u003e\u003c/footer\u003e\n\u003c/body\u003e\n```\n\net\n\n```css\nhtml,\nbody {\n  height: 100%;\n  margin: 0;\n}\n.content {\n  min-height: 100%;\n}\n.content-inside {\n  padding: 20px;\n  padding-bottom: 50px;\n}\n.footer {\n  height: 50px;\n  margin-top: -50px;\n}\n```\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir le \u003cem\u003ePen\u003c/em\u003e\u003ca href=\"https://codepen.io/chriscoyier/pen/aZoBMb\"\u003e\n  Sticky Footer with Negative Margin 2\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLe point commun à ces deux techniques est qu'elles requièrent toutes deux des éléments HTML supplémentaires qui n'ont d'autre utilité que positionnelle.\n\n\u003ch2\u003eHauteur du wrapper calculée\u003c/h2\u003e\n\n[Une façon](https://priteshgupta.com/2016/05/sticky-css-footer/) d'éviter le recours à des éléments HTML inutiles consiste à ajuster la hauteur de l'élément enveloppant à l'aide de CSS `calc()`. Il n'y a plus de tuilage, ce sont simplement deux éléments empilés l'un sur l'autre ayant une hauteur totale de 100%.\n\n```html\n\u003cbody\u003e\n  \u003cdiv class=\"content\"\u003econtent\u003c/div\u003e\n  \u003cfooter class=\"footer\"\u003e\u003c/footer\u003e\n\u003c/body\u003e\n```\n\net\n\n```css\n.content {\n  min-height: calc(100vh - 70px);\n}\n.footer {\n  height: 50px;\n}\n```\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir le \u003cem\u003ePen\u003c/em\u003e\u003ca href=\"https://codepen.io/chriscoyier/pen/jqRXBz\"\u003e\n  Sticky Footer with calc();\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nRemarquez les 70px dans la formule de `calc()`, comparés aux 50px de la taille fixe du footer. On suppose en fait que le dernier item du contenu aura une marge inférieure de 20px. C'est donc la somme de cette marge et de la hauteur du footer qu'il convient de soustraire de la hauteur du viewport. Et remarquez aussi que nous utilisons les unités viewport ici (`vh`) afin d'éviter d'avoir à régler la hauteur de `body` à 100% avant de pouvoir régler celle du wrapper à 100%.\n\n\u003ch2\u003eIl y a Flexbox\u003c/h2\u003e\n\nLe grand problème des trois techniques précédentes est qu'elles requièrent un footer de hauteur fixe. Dans le design web, les hauteurs fixes sont en général un mauvais choix, le contenu peut changer, les choses sont flexibles et donc les hauteurs fixes devraient être évitées. La solution [Flexbox](/tags/flexbox) non seulement ne nécessite pas d'élément supplémentaire mais permet d'avoir une hauteur de footer variable.\n\n```html\n\u003cbody\u003e\n  \u003cdiv class=\"content\"\u003econtent\u003c/div\u003e\n  \u003cfooter class=\"footer\"\u003e\u003c/footer\u003e\n\u003c/body\u003e\n```\n\net\n\n```css\nhtml,\nbody {\n  height: 100%;\n}\nbody {\n  display: flex;\n  flex-direction: column;\n}\n.content {\n  flex: 1 0 auto;\n}\n.footer {\n  flex-shrink: 0;\n}\n```\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir le \u003cem\u003ePen\u003c/em\u003e\u003ca href=\"https://codepen.io/chriscoyier/pen/RRbKrL\"\u003e\n  Sticky Footer with Flexbox\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nOn pourrait même ajouter un header ou d'autres éléments. Le \"truc\" avec Flexbox c'est\u0026nbsp;:\n\n- soit `flex: 1` sur l'élément enfant qu'on veut agrandir pour qu'il remplisse l'espace (ici, le contenu),\n- soit `margin-top: auto` pour pousser l'élément enfant aussi loin que possible de son voisin (ou toute autre marge selon la direction souhaitée).\n\nN'oubliez pas que nous avons un [guide complet sur Flexbox](/articles/flexbox-guide-complet/) ici même pour plus d'infos.\n\n\u003ch2\u003eIl y a CSS Grid\u003c/h2\u003e\n\n[CSS Grid Layout](/tags/cssgrid) est plus récent que Flexbox mais [largement supporté aujourd'hui](https://caniuse.com/#feat=css-grid). On peut l'utiliser facilement pour créer un sticky footer.\n\n```html\n\u003cbody\u003e\n  \u003cdiv class=\"content\"\u003econtent\u003c/div\u003e\n  \u003cfooter class=\"footer\"\u003e\u003c/footer\u003e\n\u003c/body\u003e\n```\n\net\n\n```css\nhtml {\n  height: 100%;\n}\nbody {\n  min-height: 100%;\n  display: grid;\n  grid-template-rows: 1fr auto;\n}\n.footer {\n  grid-row-start: 2;\n  grid-row-end: 3;\n}\n```\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir le \u003cem\u003ePen\u003c/em\u003e\u003ca href=\"https://codepen.io/chriscoyier/pen/YWKNrE\"\u003e\n  Sticky Footer with Grid\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nN'oubliez pas que nous avons un [guide complet sur CSS Grid](/articles/css-grid-layout-guide-complet) ici même pour plus d'infos.\n"},{"slug":"listes-css-marqueurs-et-compteurs","title":"Listes CSS, marqueurs et compteurs","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"9 juillet 2019","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2019/07/css-lists-markers-counters/","copyright":"2019"},"dateCascade":"29 juillet 2019","dateMachine":"2O190729","tags":["css","pseudo-elements"],"about":["Marker","Counter","Counter Set","Counter Reset","Counter Increment","Ordered List","Unordered List"],"excerpt":"","featured":false,"featuredImage":"/images/heading.webp","order":null,"content":"\nLes listes en CSS ont des propriétés propres qui nous donnent le style de liste standard que nous attendons\u0026nbsp;: une liste non ordonnée gagne une puce de liste, de type disque, et les listes ordonnées sont numérotées. Mon intérêt pour l'exploration plus détaillée des listes est né du travail que j'ai effectué pour [documenter le pseudo-élément `::marker`](https://developer.mozilla.org/fr/docs/Web/CSS/::marker) pour [MDN](https://developer.mozilla.org/fr/). Ce pseudo-élément est livré dans Firefox 68 et il est publié aujourd'hui. Avec le pseudo-élément `::marker` à notre disposition, nous pouvons commencer à faire des choses intéressantes avec les listes, et dans cet article, je vais vous en dire plus.\n\n## Déconstruire une liste\n\nVous n'avez peut-être pas beaucoup exploré les listes, bien que nous les utilisions fréquemment dans notre balisage. De nombreuses choses peuvent être balisées de manière assez logique sous forme de liste\u0026nbsp;: les instructions étape par étape ou les éléments classés peuvent être décrits assez naturellement par une liste ordonnée `\u003col\u003e`, de nombreuses choses dans une conception de page peuvent être décrites à l'aide d'une liste non ordonnée `\u003cul\u003e`. Par exemple, ne utilisation très courante de l'élément liste consiste à baliser la navigation, puisqu'il s'agit d'une liste de destinations sur le site. Pour notre exploration, commençons par découvrir ce qu'est exactement une liste en CSS.\n\nComme pour beaucoup de choses en CSS, les listes se voient appliquer certaines _valeurs initiales_. Ces valeurs leur donnent l'apparence d'une liste. Ces valeurs spéciales commencent par l'information selon laquelle un élément de liste possède la propriété `display` avec une valeur de `list-item`. Cela crée [une boîte de niveau bloc](/articles/la-difference-entre-block-et-inline), ainsi qu'une boîte de marqueur supplémentaire. La boîte de marqueur est l'endroit où la puce, ou le numéro de la liste, est ajouté.\n\nLes listes ont été définies très tôt dans CSS, et une grande partie de la définition des listes telles que nous les utilisons aujourd'hui provient de CSS2. [La spécification CSS2 décrit un élément de liste](https://www.w3.org/TR/CSS2/generate.html#lists) comme suit :\n\n\u003e \"_Un élément affiché avec `display : list-item` génère un bloc principal pour le contenu de l'élément et, selon les valeurs de `list-style-type` et `list-style-image`, éventuellement aussi un bloc marqueur comme indication visuelle que l'élément est un élément de liste._\"\n\nLa _boîte de bloc principale_ est la boîte principale de l'élément et contient tous les enfants, car un élément de liste peut contenir d'autres balises. La boîte de marqueur est placée par rapport à cette boîte principale. La spécification détaille ensuite le fait que toute couleur d'arrière-plan s'appliquera uniquement derrière cette boîte principale, et non derrière le marqueur. Elle précise également que le marqueur peut être défini sur l'une des valeurs prédéfinies\u0026nbsp;:\n\n- `disc`\n- `circle`\n- `square`\n- `decimal`\n- `decimal-leading-zero`\n- `lower-roman`\n- `upper-roman`\n- `lower-greek`\n- `lower-latin`\n- `upper-latin`\n- `armenian`\n- `georgian`\n- `lower-alpha`\n- `upper-alpha`\n- `none`\n- `inherit`\n\nLa [spécification d'affichage de niveau 3 définit `display : list-item`](https://drafts.csswg.org/css-display/#list-items) avec les autres valeurs possibles pour la propriété `display`. Elle renvoie à CSS 2.1 —\u0026nbsp;comme de nombreuses propriétés et valeurs CSS qui proviennent de CSS2\u0026nbsp;— mais décrit le mot-clé `list-item` comme \"faisant en sorte que l'élément génère un pseudo-élément `::marker`\".\n\nLa spécification de niveau 3 introduit également la possibilité de créer un élément de liste en ligne (`inline`) avec la syntaxe à deux valeurs utilisée `display : inline list-item`. Ceci n'est pas encore implémenté par les navigateurs.\n\n## Création de boîtes marqueur sur des éléments autres que des listes\n\nComme pour les autres valeurs de `display`, il est parfaitement valable de donner à tout élément HTML un type d'affichage de `list-item` (si vous souhaitez générer un pseudo-élément `::marker` sur l'élément). L'élément ne deviendra pas sémantiquement un élément de liste, mais il ne s'affichera visuellement que comme un élément de liste, et pourra donc avoir un `::marker`. Lorsque nous aborderons le pseudo-élément `::marker` ci-dessous, vous découvrirez certains cas où donner à d'autres éléments `display : list-item` peut être utile.\n\n## La spécification des listes CSS de niveau 3, ::marker et les compteurs\n\nLa spécification d'affichage étend et clarifie la définition des listes que nous trouvons dans CSS2, cependant, il existe également une spécification qui définit le comportement des listes en détail\u0026nbsp;: la [spécification CSS Lists Level 3](https://www.w3.org/TR/css-lists-3/). Comme le comportement de base des éléments de liste est défini dans `display`, cette spécification détaille la boîte de marqueurs générée lorsque quelque chose a `display : list-item` ainsi que les compteurs qui sont utilisés par défaut lorsque vous créez une liste ordonnée. Ces caractéristiques permettent d'accéder à certaines fonctionnalités potentiellement utiles.\n\n## Le pseudo-élément ::marker\n\nLe pseudo-élément `::marker` vous permet de cibler le marqueur de liste —\u0026nbsp;séparément du contenu de l'élément de liste. Cela n'était pas possible dans les versions précédentes de CSS. Par conséquent, si vous modifiez la couleur ou la taille de la police du `ul` ou du `li`, cela modifie également la couleur et la taille de la police des marqueurs. Pour faire quelque chose d'apparemment simple comme avoir des puces de liste de couleur différente de celle du texte, il faudrait soit envelopper le contenu de l'élément de liste dans un `span` (ou utiliser une image pour le marqueur).\n\n```css\nul {\n  color: #00b7a8;\n}\n\nul span {\n  color #333;\n}\n```\n\nAvec le pseudo-élément `::marker`, la chose la plus simple que vous pourriez vouloir essayer est d'avoir une couleur de puce à texte différente, ce qui signifie qu'au lieu du code dans l'exemple ci-dessus, vous pouvez utiliser\u0026nbsp;:\n\n```css\nul {\n  color: #333;\n}\n\nul ::marker {\n  color: #00b7a8;\n}\n```\n\nVous pouvez également utiliser une taille et une police de caractères différentes pour la numérotation d'une liste ordonnée.\n\n```css\nol ::marker {\n  font-size: 200%;\n  color: #00b7a8;\n  font-family: 'Comic Sans MS', cursive, sans-serif;\n}\n```\n\nVous pouvez voir tout cela dans un navigateur compatible en utilisant mon exemple CodePen :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_VJQyoR\" src=\"//codepen.io/rachelandrew/embed/VJQyoR?height=800\u0026amp;theme-id=light\u0026amp;slug-hash=VJQyoR\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"800\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/VJQyoR\"\u003e\n  Smashing: colored bullets with and without ::marker\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous pouvez utiliser le pseudo-élément `::marker` sur les éléments qui ne sont pas des listes. Dans le code ci-dessous, j'ai défini un titre pour `display : list-item`. Cela lui donne une puce et donc une boîte `::marker` à cibler.\n\nJ'ai changé la puce pour utiliser un emoji\u0026nbsp;:\n\n```css\nh1 {\n  display: list-item;\n}\n\nh1::marker {\n  content: '🐱';\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/heading.webp\" width=\"900\" height=\"339\" alt=\"Dans firefox on peut voir l'emoji utilisé comme marqueur\"/\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_wLyyMG\" src=\"//codepen.io/rachelandrew/embed/wLyyMG?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=wLyyMG\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/wLyyMG\"\u003e\n  Smashing heading and ::marker\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nDans l'exemple ci-dessus, j'ai utilisé du contenu généré dans les règles relatives au marqueur. Seul un petit sous-ensemble de propriétés CSS est disponible pour une utilisation sur `::marker`. Il s'agit notamment des propriétés de police et de la couleur, mais aussi de la propriété content, permettant d'inclure du contenu généré.\n\nL'ajout de la propriété `content` comme propriété autorisée pour `::marker` est récent, cependant, elle est incluse dans l'implémentation de Firefox. Cet ajout nous permet de faire des choses comme inclure une chaîne de texte dans un `::marker`. Elle offre également des possibilités supplémentaires pour le formatage des marqueurs lorsque vous combinez l'utilisation de compteurs avec `::marker`.\n\n## Prise en charge par les navigateurs et solutions de repli\n\nPour les navigateurs qui ne prennent pas en charge le pseudo-élément `::marker`, la solution de repli est le marqueur ordinaire qui aurait été affiché de toute façon. Malheureusement, nous ne pouvons pas actuellement utiliser les _Feature Queries_ pour détecter la prise en charge de sélecteurs tels que ce pseudo-élément, bien qu'un [\"ticket\" ait été ouvert](https://github.com/w3c/csswg-drafts/issues/3207) concernant l'ajout de cette fonctionnalité à la spécification. Cela signifie que vous ne pouvez pas avoir une \"fourche\" dans votre code pour faire une chose lorsque vous avez la prise en charge et autre chose si vous ne l'avez pas. Dans la plupart des cas, se rabattre sur le marqueur ordinaire sera une solution raisonnable.\n\n## Compteurs\n\nLes listes ordonnées ont une numérotation de liste —\u0026nbsp;ce qui est réalisé par le biais d'un compteur CSS. La spécification CSS Lists décrit donc également ces compteurs. Nous pouvons accéder aux compteurs et les créer nous-mêmes, ce qui, combiné au pseudo-élément ::marker, peut nous donner des fonctionnalités utiles. Ces compteurs peuvent également être utilisés dans du contenu généré ordinaire (non `::marker`).\n\nSi j'ai une liste d'étapes numérotées (et que je souhaite écrire \"Étape 1\", \"Étape 2\", etc.), je peux le faire en utilisant le contenu généré dans mon marqueur et en ajoutant le compteur list-item, qui représente le compteur intégré :\n\n```css\n::marker {\n  content: 'Etape ' counter(list-item) ': ';\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/counter.webp\" width=\"900\" height=\"459\" alt=\"Dans firefox on peut voir le compteur, préfixé par le mot 'Step'\"/\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_BgRaoz\" src=\"//codepen.io/rachelandrew/embed/BgRaoz?height=380\u0026amp;theme-id=light\u0026amp;slug-hash=BgRaoz\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"380\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/BgRaoz\"\u003e\n  Smashing heading and ::marker\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Compteurs imbriqués\n\nSi vous avez des listes imbriquées, une façon courante de les numéroter est de donner à l'élément de premier niveau un nombre entier, (1), puis aux éléments enfants (1.1, 1.2) et à leurs enfants (1.1.1, 1.1.2), et ainsi de suite. Vous pouvez y parvenir en utilisant d'autres fonctionnalités des compteurs.\n\nLorsque vous imbriquez des listes HTML, vous vous retrouvez avec plusieurs compteurs du même nom —\u0026nbsp;imbriqués les uns dans les autres. Vous pouvez accéder à l'imbrication des compteurs à l'aide de la fonction `counters()`.\n\nDans le code ci-dessous, j'utilise `counters()` pour formater mes marqueurs de liste comme décrit ci-dessus. Le premier argument de `counters()` est le nom du compteur à utiliser. J'utilise le compteur intégré `list-item`. Le deuxième argument est une chaîne —\u0026nbsp;c'est ce qui sera concaténé entre les compteurs de sortie (j'utilise un `.`). Enfin, j'ajoute un `:` à l'extérieur de la fonction compteur mais à l'intérieur de la valeur du contenu afin que la sortie de mon compteur soit séparée du contenu par un deux-points.\n\n```css\n::marker {\n  content: counters(list-item, '.') ':';\n  color: #00b7a8;\n  font-weight: bold;\n}\n```\n\nCela me donne une sortie comme dans l'image. Si vous utilisez un navigateur qui prend en charge `::marker` et les compteurs, vous pouvez le voir fonctionner dans l'exemple CodePen - essayez de changer la chaîne de caractères d'un `.` à autre chose pour voir comment cela change la sortie.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/firefox-nested-counters.webp\" width=\"900\" height=\"466\" alt=\"Dans firefox on peut voir la numérotation des listes et sous-listes séparées par un point\"/\u003e\u003c/figure\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_VJbwxL\" src=\"//codepen.io/rachelandrew/embed/VJbwxL?height=380\u0026amp;theme-id=light\u0026amp;slug-hash=VJbwxL\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"380\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/VJbwxL\"\u003e\n  Nested Counters\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Quelle est la différence entre counter() et counters() ?\n\nLa fonction `counter()` que nous avons utilisée dans le premier exemple pour écrire nos étapes utilise uniquement le compteur le plus intérieur. Par conséquent, dans la situation où vous avez un ensemble de listes imbriquées, vous écrirez le compteur qui correspond au niveau où vous vous trouvez actuellement.\n\nLa fonction `counters()` écrit essentiellement cette branche entière et vous donne la possibilité de concaténer une chaîne entre les compteurs de la branche. Ainsi, si vous avez un élément de liste avec un compteur de 2 (qui fait partie d'une liste imbriquée dans un élément de liste avec un compteur de 4), alors la branche contient\u0026nbsp;:\n\n- 4\n- 2\n\nVous pouvez l'afficher sous la forme 4.2 dans le marqueur en utilisant\u0026nbsp;:\n\n```css\n::marker {\n  content: counters(list-item, '.');\n}\n```\n\n### Compteurs sur d'autres éléments\n\nLes compteurs peuvent être utilisés sur des éléments qui ne sont pas des listes —\u0026nbsp;soit pour afficher un marqueur —\u0026nbsp;auquel cas l'élément devra avoir `display : list-item`\u0026nbsp;- soit pour afficher du contenu généré régulièrement. Les compteurs sont largement utilisés dans la production de livres, afin de permettre la numérotation des chapitres et des figures, entre autres choses. Il n'y a aucune raison de ne pas adopter une approche similaire sur le Web, en particulier pour les articles plus longs.\n\nLes propriétés CSS définies dans la spécification CSS Lists qui traitent de ces compteurs sont :\n\n- `counter-set`\n- `counter-reset`\n- `counter-increment`\n\nPour voir comment elles fonctionnent en dehors des listes, nous pouvons examiner un exemple d'utilisation de compteurs pour numéroter les titres d'un document.\n\nLa première chose à faire est de créer un compteur d'en-têtes sur l'élément `body`, prêt à être utilisé. Pour ce faire, j'utilise la propriété `counter-reset`. Les propriétés `counter-reset` et `counter-set` sont très similaires. La propriété `counter-reset` créera un nouveau compteur si un compteur du nom spécifié n'existe pas déjà, mais créera également des compteurs imbriqués comme décrit ci-dessus si un compteur de ce nom existe. La propriété `counter-set`, quant à elle, créera un nouveau compteur uniquement s'il n'existe pas de compteur de ce nom. Cependant, `counter-set` n'est pas aussi bien supporté par les navigateurs que `counter-reset`. Je choisis donc la voie la plus pratique\u0026nbsp;:\n\n```css\nbody {\n  counter-reset: heading-counter;\n}\n```\n\nMaintenant que j'ai un compteur, je peux utiliser la propriété `counter-increment` sur le sélecteur pour les en-têtes\u0026nbsp;; cela devrait incrémenter le compteur chaque fois que le sélecteur correspond.\n\n```css\nh2 {\n  counter-increment: heading-counter;\n}\n```\n\nPour voir la valeur, je dois la sortir dans le document. Je peux le faire en utilisant le contenu généré et en l'ajoutant avant le titre, comme le montre l'exemple CodePen suivant :\n\n```css\nh2::before {\n  content: counter(heading-counter) ' : ';\n  color: #00b7a8;\n  font-weight: bold;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_gNGjxq\" src=\"//codepen.io/rachelandrew/embed/gNGjxq?height=1130\u0026amp;theme-id=light\u0026amp;slug-hash=gNGjxq\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"1130\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/gNGjxq\"\u003e\n  Smashing: headings and counters\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSinon, je pourrais transformer l'élément `h2` en élément de liste et utiliser ensuite `::marker`, comme illustré ci-dessous. Comme déjà détaillé, l'utilisation de l'élément `::marker` a une prise en charge limitée par les navigateurs. Dans Firefox, vous devriez voir le compteur utilisé comme marqueur pour le titre, tandis que les autres navigateurs afficheront la puce par défaut.\n\n```css\nh2 {\n  display: list-item;\n}\n\nh2::marker {\n  content: counter(heading-counter) ': ';\n  color: #00b7a8;\n  font-weight: bold;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_pXWZay\" src=\"//codepen.io/rachelandrew/embed/pXWZay?height=1130\u0026amp;theme-id=light\u0026amp;slug-hash=pXWZay\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"1130\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/pXWZay\"\u003e\n  Smashing: headings, markers and counters\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Compteurs sur les éléments de formulaire\n\nIl y a aussi un peu d'interactivité que vous pouvez réaliser en utilisant les compteurs CSS —\u0026nbsp;des choses que vous imaginiez peut-être possible uniquement avec JavaScript\u0026nbsp;:\n\nJ'ai un formulaire qui comporte un certain nombre de champs obligatoires. Le statut obligatoire peut être sélectionné en CSS avec une pseudo-classe `:required`, et le fait qu'un champ n'ait pas été rempli peut être détecté au moyen de la pseudo-classe `:invalid`. Cela signifie que nous pouvons vérifier les champs qui sont à la fois requis et invalides, et incrémenter un compteur. Il suffit ensuite de l'afficher sous forme de contenu généré.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vqpJdM\" src=\"//codepen.io/rachelandrew/embed/vqpJdM?height=530\u0026amp;theme-id=light\u0026amp;slug-hash=vqpJdM\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"530\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/vqpJdM\"\u003e\n  Smashing counting required form fields\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\nL'utilité de cette valeur dans la réalité est discutable —\u0026nbsp;étant donné que nous ne pouvons pas vraiment en faire autre chose que de la coller dans le contenu généré. Il existe également des inquiétudes quant à l'inaccessibilité du contenu généré pour certains lecteurs d'écran. Par conséquent, toute utilisation plus que décorative devra prévoir d'autres moyens d'accéder à ces informations. Lisez [\"Accessibility Support For CSS Generated Content\"](https://tink.uk/accessibility-support-for-css-generated-content/) et les informations plus récentes, [\"CSS Content Property Screen Reader Compatibility\"](https://www.powermapper.com/tests/screen-readers/content/css-generated-content/) pour plus de détails concernant l'accessibilité et le contenu généré.\n\nToutefois, cela démontre que les compteurs peuvent réaliser des choses plus utiles que la simple numérotation de listes. Il se peut qu'un jour ces connaissances vous soient utiles pour résoudre un problème sur lequel vous travaillez.\n\n### En savoir plus\n\nCet article s'est avéré assez éloigné de la stylisation des listes, bien que tout ce que j'ai décrit se trouve dans la spécification CSS Lists. Vous pouvez trouver plus d'informations sur les choses décrites dans les liens ci-dessous.\n\n- [::marker](https://developer.mozilla.org/fr/docs/Web/CSS/::marker)\n- [counter-set](https://developer.mozilla.org/fr/docs/Web/CSS/counter-set)\n- [counter-reset](https://developer.mozilla.org/fr/docs/Web/CSS/counter-reset)\n- [counter-increment](https://developer.mozilla.org/fr/docs/Web/CSS/counter-increment)\n- [\"Utiliser les compteurs\", docs web MDN](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Counter_Styles/Using_CSS_counters)\n- [\"Compter avec les compteurs CSS et la grille CSS,\" CSS-Tricks](https://css-tricks.com/counting-css-counters-css-grid/)\n"},{"slug":"alignement-en-css-guide-complet","title":"Alignement en CSS, un guide complet","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"28 mars 2019","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2019/03/css-alignment/","copyright":"2019"},"dateCascade":"18 mai 2019","dateMachine":"2O190518","tags":["css","flexbox","cssgrid"],"about":["Box Alignment","Justify Content","Align Items","Vertical Align","Text Align"],"excerpt":"Tout sur l'alignement en CSS par Rachel Andrew. Les choses ont beaucoup évolué dernièrement avec Flexbox, CSS Grid et la spécification Box Alignment. Dans la continuité de ses articles de référence déjà traduits dans la Cascade.","featured":true,"featuredImage":"/images/sm-align-grid-self-alignment-compressor.png","order":3,"content":"\nIl existe aujourd'hui bien des façons d'aligner les choses en CSS et il n'est pas toujours évident de faire un choix. Connaître les options qui s'offrent à nous est encore la meilleure façon de concevoir les solutions optimales pour résoudre un problème.\n\nDans cet article, je vais passer en revue les différentes méthodes d'alignement qui existent aujourd'hui. Mais plutôt que de donner un mode d'emploi pour chacune, je vais examiner les points d'achoppement que l'on peut rencontrer et je renverrai à des articles de référence plus détaillés si vous souhaitez approfondir le sujet. Comme souvent en CSS, le plus important est de comprendre les _fondamentaux des méthodes_, le reste est affaire de détails.\n\n\u003ch2\u003eAlignement du texte et des éléments inline\u003c/h2\u003e\n\nQuand on a du texte et autres éléments \u003ci\u003einline\u003c/i\u003e dans une page, chaque ligne de contenu est traitée comme une boîte de ligne (\u003ci\u003eline-box\u003c/i\u003e). La propriété `text-align` alignera ce contenu dans la page —\u0026nbsp;par exemple si vous voulez centrer votre texte ou le justifier. Mais parfois vous voudrez aligner les choses à l'intérieur de cette boîte de ligne par rapport à d'autres choses, par exemple si vous avez une icône affichée à côté du texte, ou bien des textes de taille différente (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;_NdT\u0026nbsp;: si vous avez besoin de rafraîchir vos connaissances sur inline et block, l'article [CSS Block, Inline et Inline-Block](/articles/la-difference-entre-block-et-inline/) remettra tout en place\u0026nbsp;!_).\n\nDans l'exemple ci-dessous, j'ai mis un bout de texte à côté d'une image inline. J'utilise `vertical-align: middle` sur l'image pour aligner le texte par rapport au milieu de l'image (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;_NdT\u0026nbsp;: pour modifier les valeurs, cliquez sur \"Edit on CodePen\"_).\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_jJJLBR\" src=\"//codepen.io/rachelandrew/embed/jJJLBR?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=jJJLBR\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/jJJLBR/\"\u003e\n  vertical-align\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eLa propriété line-height et l'alignement\u003c/h3\u003e\n\nLa propriété `line-height` modifie la dimension de la boîte de ligne et peut donc avoir des conséquences sur l'alignement. L'exemple qui suit utilise une valeur élevée de hauteur de ligne (150\u0026nbsp;px) et j'ai aligné l'image sur `top`. L'image est donc alignée sur le haut de la boîte de ligne et non sur le haut du texte. Si vous supprimez cette `line-height`, ou si vous lui donnez une valeur inférieure à la dimension de l'image, alors l'image et le texte s'aligneront sur le haut du texte.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eXXGOB\" src=\"//codepen.io/rachelandrew/embed/eXXGOB?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=eXXGOB\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/eXXGOB/\"\u003e\n  vertical-align\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa propriété `line-height` et la gestion de la taille du texte sont en réalité assez compliquées, je ne vais pas me lancer dans ce sujet ici, mais si vous souhaitez aligner précisément les éléments inline et si vous souhaitez comprendre le détail de ce qui se passe, je vous recommande la lecture de [CSS avancé : métrique des fontes, line height et vertical align](https://iamvdo.me/blog/css-avance-metriques-des-fontes-line-height-et-vertical-align) par Vincent de Oliveira.\n\n\u003ch3\u003eQuand utiliser la propriété vertical-align ?\u003c/h3\u003e\n\nLa propriété `vertical-align` est utile pour aligner les éléments inline. Cela comprend aussi les éléments affichés avec `display: inline-block`. Le contenu des cellules de tableaux peut également être aligné avec cette propriété.\n\nLa propriété `vertical-align` n'a aucun effet sur les items flex ou grid et par conséquent si elle est utilisée dans le cadre d'une stratégie de solution de rechange (\u003ci\u003efallback\u003c/i\u003e), elle cessera d'être effective dès lors que l'élément parent sera transformé en conteneur flex ou grid. Par exemple, dans l'exemple ci-dessous, j'ai un ensemble d'items alignés via `display: inline-block` ce qui signifie que j'ai la possibilité d'aligner les items même si mon navigateur n'est pas compatible avec Flexbox.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_QoPMYR\" src=\"//codepen.io/rachelandrew/embed/QoPMYR?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=QoPMYR\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/QoPMYR/\"\u003e\n  alignment with display: inline-block\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nDans l'exemple suivant, j'ai traité l'`inline-block` comme un _fallback_ de Flexbox. Les propriétés d'alignement ne s'appliquent plus et je peux ajouter `align-items` pour aligner mes items dans Flexbox. Vous pouvez remarquer que c'est bien la méthode Flexbox qui aligne mes items parce que les gouttières qui les séparent dans la vue précédente ont disparu.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xBeLBg\" src=\"//codepen.io/rachelandrew/embed/xBeLBg?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=xBeLBg\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003c/em\u003e\u003ca href=\"https://codepen.io/rachelandrew/pen/xBeLBg/\"\u003e\n  alignment with display: inline-block as flex fallback\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nC'est parce que `vertical-align` marche avec les cellules de tableaux que le \"truc\" permettant de [centrer verticalement un item via `display: table-cell`](https://www.vanseodesign.com/blog/demo/vertical-centering/table-cell.php) fonctionne.\n\nMaintenant que nous avons de meilleures méthodes pour aligner les boîtes en CSS (comme nous allons le voir tout de suite), nous n'avons plus besoin de recourir aux propriétés `vertical-align` et `text-align` ailleurs que là où elles remplissent leur fonction initiale, à savoir avec les éléments inline et textuels. Sur ces formats, elles demeurent parfaitement valides —\u0026nbsp;par conséquent si vous souhaitez aligner des éléments inline ce sont elles, et non l'alignement de boîte, qu'il convient d'utiliser.\n\n\u003ch2\u003eAlignement de boîte\u003c/h2\u003e\n\nLa [spécification Box Alignment](https://www.w3.org/TR/css-align-3/) s'intéresse à tout le reste. La spécification détaille les propriétés d'alignement suivantes\u0026nbsp;:\n\n- justify-content\n- align-content\n- justify-self\n- align-self\n- justify-items\n- align-items\n\nPeut-être pensez-vous que ces propriétés font partie de la spécification Flexbox, voire Grid. À l'origine, c'est là qu'elles sont nées en effet et d'ailleurs elles existent encore dans la spécification de niveau 1 [Flexbox](https://www.w3.org/TR/css-flexbox-1/). Cependant, elles ont été déplacées dans une spécification séparée lorsqu'il est apparu qu'elles avaient une portée plus générale. Nous les utilisons maintenant aussi avec [CSS Grid Layout](https://www.w3.org/TR/css-grid-1/) et elles sont spécifiées pour d'autres méthodes de mise en page, même si les navigateurs actuels ne sont pas encore compatibles.\n\nPar conséquent, la prochaine fois que quelqu'un sur Internet vous dira que l'alignement vertical est la chose la plus difficile qui soit en CSS, vous pourrez lui répondre ceci (ça tient même dans un tweet)\u0026nbsp;:\n\n```\n.container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n```\n\nDans le futur il est même possible qu'on puisse se dispenser de `display: flex`, une fois les propriétés Box Alignment implémentées pour Block Layout. Pour l'instant en tout cas, il est toujours nécessaire de faire du parent un conteneur flex si l'on veut aligner verticalement et horizontalement.\n\n\u003ch2\u003eLes deux sortes d'alignement\u003c/h2\u003e\n\nQuand on aligne des items flex ou grid, on a en fait deux choses à aligner\u0026nbsp;:\n\n1. On a de **l'espace libre** dans notre container flex ou dans notre grille (une fois les éléments ou les pistes affichées).\n2. On a **l'élément lui-même** à l'intérieur de la surface grid, ou sur l'axe transversal dans le conteneur flex.\n\nJe vous ai montré quelques propriétés précédemment, toutes ces propriétés d'alignement peuvent être vues comme appartenant à deux groupes. Celles qui s'occupent de la distribution de l'espace libre et celles qui alignent l'élément lui-même.\n\n\u003ch3\u003eGestion de l'espace libre : align-content et justify-content\u003c/h3\u003e\n\nLes propriétés dont le nom se termine par `-content` ont pour objet la distribution de l'espace. Lorsque vous utilisez `align-content` ou `justify-content`, vous répartissez l'espace disponible entre les pistes de grilles (_[grid tracks](/articles/css-grid-layout-guide-complet/#gridtrack)_) ou entre les items flex. Ces propriétés ne modifient pas les dimensions des items flex ou grid, mais déplacent les items en fonction de l'espace disponible.\n\nCi-dessous nous avons deux exemples, un flex et un grid. Tous deux ont un conteneur plus grand que nécessaire, par conséquent je peux utiliser `align-content` et `justify-content` pour répartir cet espace.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_gEyGaQ\" src=\"//codepen.io/rachelandrew/embed/gEyGaQ?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=gEyGaQ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir le \u003ca href=\"https://codepen.io/rachelandrew/pen/gEyGaQ/\"\u003e\n  justify-content and align-content\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eDéplacement des items : justify-self, align-self, justify-items et align-items\u003c/h3\u003e\n\nEt puis nous avons `align-self` et `justify-self` qui s'appliquent à des items flex ou grid individuels. On peut également utiliser `align-items` et `justify-items` sur le conteneur pour appliquer toutes les propriétés en une fois. Ces propriétés s'appliquent à l'item flex ou grid, en déplaçant le contenu à l'intérieur de la [zone grid](/articles/css-grid-layout-guide-complet/#gridarea) ou de la ligne flex.\n\n- **Grid Layout** : les deux propriétés sont disponibles, vous pouvez déplacer l'item sur les axes block et inline.\n- **Flex Layout** : on peut seulement aligner le long de l'axe perpendiculaire car l'axe principal n'est contrôlé qu'au niveau de la répartition de l'espace. Donc si vos items sont sur une rangée, vous pouvez utiliser `align-self` pour les déplacer verticalement à l'intérieur de la ligne.\n\nDans l'exemple qui suit, j'ai un conteneur flex et un conteneur grid et j'utilise `align-items` et `align-self` dans Flexbox pour déplacer les items vers le haut ou le bas le long de l'axe perpendiculaire (_cross axis_). Si vous utilisez Firefox et que vous inspectez l'élément avec l'Inspecteur de Flexbox, vous verrez la dimension du conteneur flex ainsi que la façon dont les items sont déplacés verticalement à l'intérieur.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/sm-align-flex-self-alignment-compressor.png\" width=\"896\" height=\"403\" alt=\"\"/\u003e\u003c/figure\u003e\n\nDans Grid, je peux utiliser les quatre propriétés pour déplacer les items à l'intérieur de leur zone de grille. Là encore, l'Inspecteur Grid de Firefox vous aidera à jouer avec les alignements. Avec les lignes en filigrane, on voit clairement la zone dans laquelle le contenu est déplacé\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/sm-align-grid-self-alignment-compressor.png\" width=\"900\" height=\"500\" alt=\"\"/\u003e\u003c/figure\u003e\n\nCliquez sur _Edit on Codepen_ pour modifier les valeurs\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xBejYV\" src=\"//codepen.io/rachelandrew/embed/xBejYV?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=xBejYV\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/xBejYV/\"\u003e\n  justify-self, align-self, justify-items, align-items\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2 class=\"softTitleBlue\"\u003ealign et justify vous paraissent encore confus\u0026nbsp;?\u003c/h2\u003e\n\nParmi les problèmes souvent mentionnés concernant les propriétés d'alignement de Grid et Flexbox, il y a la difficulté à se rappeler laquelle utiliser\u0026nbsp;: aligner ou justifier\u0026nbsp;? quelle direction correspond à chacune\u0026nbsp;?\n\nPour Grid Layout, vous devez savoir si vous alignez dans la direction Block ou Inline. Cela dépend de votre mode d'écriture : pour le français, la direction Block correspond à l'empilement des blocs, c'est donc la direction verticale. La direction Inline correspond au sens de l'écriture, c'est donc (en français du moins) de gauche à droite horizontalement.\n\nPour aligner dans la direction Block, vous utiliserez les propriétés commençant par `align-`. Vous utiliserez `align-content` pour répartir l'espace entre les pistes de grille, s'il y a de l'espace libre à l'intérieur de votre conteneur grid, et vous utiliserez `align-items` ou `align-self` pour déplacer un item à l'intérieur de la zone de grille où il se trouve.\n\nDans l'exemple suivant, nous avons deux mises en page grid. L'une a un `writing-mode: horizontal-tb` (le mode par défaut pour le français) et l'autre un `writing-mode: vertical-rl`. C'est la seule différence entre les deux. Vous voyez que les propriétés d'alignement appliquées fonctionnent exactement de la même façon sur l'axe block dans les deux modes.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_rRbYmr\" src=\"//codepen.io/rachelandrew/embed/rRbYmr?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=rRbYmr\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/rRbYmr/\"\u003e\n  Block axis alignment\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nPour aligner dans la direction inline, utilisez les propriétés commençant par `justify-`. Utilisez `justify-content` pour répartir l'espace entre les pistes de grille et `justify-items` ou `justify-self` pour aligner les items à l'intérieur de leur zone de grille dans la direction inline.\n\nLà encore, j'ai deux exemples de mise en page grid pour vous montrer qu'un inline est toujours un inline, quel que soit le mode d'écriture.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eXoeEK\" src=\"//codepen.io/rachelandrew/embed/eXoeEK?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=eXoeEK\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/eXoeEK/\"\u003e\n  Inline axis alignment\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nAvec Flexbox, c'est un peu plus compliqué car nous avons un axe principal (_main axis_) qui peut être changé en `row` ou en `column`. Alors occupons-nous d'abord de cet axe principal. Il est déterminé avec la propriété `flex-direction`. La valeur par défaut est `row`, ce qui disposera les items flex en rangée dans le mode d'écriture que vous utilisez —\u0026nbsp;en français les items sont donc alignés horizontalement quand nous créons un conteneur flex. Nous pouvons changer la direction de l'axe principal avec `flex-direction: column` et les items s'aligneront sur une colonne, ce qui signifie qu'ils seront disposés selon la direction block pour ce mode d'écriture.\n\nC'est parce qu'il est possibe de changer la direction de l'axe que **la question la plus importante à se poser en Flexbox est \"quel axe est mon axe principal?\"**. Une fois que vous le savez, l'alignement (sur votre axe principal) s'effectue via `justify-content`. Peu importe que votre axe principal soit une rangée ou une colonne. Vous contrôlez l'espace _entre_ les items flex avec `justify-content`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_pYBdda\" src=\"//codepen.io/rachelandrew/embed/pYBdda?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=pYBdda\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/pYBdda/\"\u003e\n  justify-content in flexbox\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSur l'axe perpendiculaire, vous pouvez utiliser `align-items` qui alignera les items à l'intérieur du conteneur flex ou de la ligne flex si votre conteneur flex a plusieurs lignes. Si vous avez un conteneur flex comportant plusieurs lignes utilisant `flex-wrap: wrap` _et_ qu'il y a de l'espace libre dans ce conteneur, vous pouvez utiliser `align-content` pour répartir l'espace sur l'axe perpendiculaire.\n\nL'exemple suivant montre un conteneur flex affiché comme rangée puis comme colonne\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_mogqLP\" src=\"//codepen.io/rachelandrew/embed/mogqLP?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=mogqLP\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/mogqLP/\"\u003e\n  Cross axis alignment flexbox\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2\u003eQuand justify-content ou align-content ne marchent pas\u003c/h2\u003e\n\nLes propriétés `justify-content` et `align-content` de Grid et Flexbox servent à **distribuer l'espace libre**. Il convient donc de vérifier que vous avez bien de l'espace disponible.\n\nVoici un exemple flex. J'ai réglé la direction de l'axe principal `flex-direction: row` et j'ai trois items. Ils n'occupent pas tout l'espace dans le conteneur, j'ai encore de la place sur l'axe principal, la valeur initiale de `justify-content` est `flex-start`, par conséquent mes items s'alignent tous à partir du point de départ et il me reste de l'espace disponible à la fin. Sur cette vue, l'espace est mis en valeur par l'Inspecteur de Firefox.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/sm-align-spare-space-end-compressor.png\" width=\"895\" height=\"236\" alt=\"\"/\u003e\u003c/figure\u003e\n\nSi je change la valeur de `flex-direction` pour `space-between`, l'espace disponible est maintenant réparti entre les items\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/sm-align-spare-space-between-compressor.png\" width=\"895\" height=\"268\" alt=\"\"/\u003e\u003c/figure\u003e\n\nSi j'ajoute maintenant du contenu supplémentaire à mes items, de façon à ce qu'ils deviennent plus longs et et que je n'aie plus d'espace disponible, alors `justify-content` ne fait plus rien. Tout simplement parce qu'il n'y a plus d'espace à répartir.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/sm-align-no-space-compressor.png\" width=\"895\" height=\"332\" alt=\"\"/\u003e\u003c/figure\u003e\n\nOn me pose souvent la question de savoir pourquoi `justify-content` ne fonctionne pas lorsque `flex-direction` a pour valeur `column`. Eh bien c'est généralement parce qu'il n'y a pas d'espace à répartir. Si vous reprenez l'exemple qui précède, et que vous le transformez en `flex-direction: column`, les items s'afficheront en colonne mais il n'y aura pas d'espace disponible en-dessous des items comme c'est le cas avec `flex-direction: row`. Pourquoi\u0026nbsp;? Parce que quand vous créez un conteneur flex avec `display: flex`, vous avez un conteneur flex de niveau bloc. Il prendra tout l'espace possible dans la direction inline. En CSS, les objets ne s'étirent pas dans la direction bloc, donc pas d'espace supplémentaire disponible.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/sm-align-column-no-space-compressor.png\" width=\"895\" height=\"550\" alt=\"\"/\u003e\u003c/figure\u003e\n\nAjoutez une hauteur à votre conteneur et —\u0026nbsp;s'il y a plus d'espace que nécessaire pour afficher les items\u0026nbsp;— vous aurez de l'espace disponible et `justify-content` fonctionnera sur votre colonne.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/sm-align-column-space-between-compressor.png\" width=\"895\" height=\"900\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch2\u003ePourquoi n'y a-t-il pas de justify-self dans Flexbox\u0026nbsp;?\u003c/h2\u003e\n\nGrid Layout implémente toutes les propriétés de boîtes pour chacun des axes parce que nous avons toujours affaire à deux axes dans Grid. Nous créons des pistes (qui peuvent laisser de l'espace supplémentaire dans le conteneur grid, pour chacune des directions) et donc nous pouvons répartir cet espace avec `align-content` ou `justify-content`. Nous avons également les zones de grille (_grid-areas_) et il arrive que l'élément n'occupe pas tout l'espace de cette zone, nous pouvons alors utiliser `align-self` ou `justify-self` pour déplacer le contenu dans la zone (ou bien `align-items`, `justify-items` pour changer l'alignement de tous les items).\n\nContrairement à Grid, Flexbox n'a pas de pistes. Sur l'axe principal, tout ce que nous pouvons faire c'est répartir l'espace entre les items. Pas de piste, pas de zone non plus pour répartir les items.C'est pourquoi il n'y a pas de propriété `justify-self` sur l'axe principal dans Flexbox.\n\nParfois cependant, vous voudrez avoir la possibilité d'aligner un item ou une partie d'un groupe d'items d'une autre façon. Un pattern assez courant serait une barre de navigation éclatée, avec un item séparé du reste du groupe. Dans ce type de situation, la spécification conseille l'utilisation de marges automatiques.\n\nUne marge `auto` prendra tout l'espace dans la direction où elle est appliquée, ce qui explique qu'on puisse centrer un bloc (par exemple notre page principale) avec des marges gauche et droite auto. Lorsqu'on a margin auto des deux côtés, chacune des marges essaie de prendre tout l'espace et repousse le bloc vers le centre. Pour notre rangée d'items flex, nous pouvons ajouter `margin-left: auto` à l'item que nous voulons séparer, et tant qu'il reste de l'espace disponible dans le conteneur flex, nous avons une séparation. Et dès qu'il n'y a plus d'espace supplémentaire disponible, les items reprennent leur comportement habituel d'items flex.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_wOZmBG\" src=\"//codepen.io/rachelandrew/embed/wOZmBG?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=wOZmBG\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/wOZmBG/\"\u003e\n  auto margins\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2\u003eFlexbox et les micro-composants\u003c/h2\u003e\n\nUn point qu'on néglige souvent c'est l'utilité de Flexbox pour résoudre de micro-tâches de mise en page, là où parfois on penserait que `vertical-align` est la solution. J'utilise souvent Flexbox pour obtenir de beaux alignements de petits motifs, par exemple aligner une icône sur un texte, aligner deux textes de fontes différentes sur leur ligne de base, ou aligner correctement des champs de formulaires avec les boutons. Si vous vous débattez avec `vertical-align`, essayez Flexbox. Et n'oubliez pas que vous pouvez créer un conteneur flex inline si vous voulez avec `display: inline-flex`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_aMxYWQ\" src=\"//codepen.io/rachelandrew/embed/aMxYWQ?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=aMxYWQ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"200\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/aMxYWQ/\"\u003e\n  inline-flex\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nRien n'interdit d'utiliser Flexbox ou même Grid pour de petites tâches de mise en page.Ils ne sont aucunement réservés aux grands layouts. Faites des essais avec ce qui est disponible et voyez ce qui vous convient le mieux.\n\nOn se demande souvent ce qui est la bonne ou la mauvaise manière de faire quelque chose. En réalité, il n'y a souvent pas ne bon ou de mauvais. Une petite différence dans votre pattern aura pour conséquence que Flexbox est la solution la plus appropriée, là où sinon vous utiliseriez plutôt `vertical-align`.\n\n\u003ch3\u003eEn résumé\u003c/h3\u003e\n\nPour récapituler, voici un résumé rapide des bases de l'alignement. Si vous gardez ces quelques règles en mémoire, vous devriez pouvoir aligner à peu près tout.\n\n1. Alignement de texte ou d'élément inline \u0026nbsp;\u0026nbsp;➜\u0026nbsp;\u0026nbsp; `text-align`, `vertical-align` et `line-height`.\n2. Item à aligner au centre d'une page ou d'un conteneur \u0026nbsp;\u0026nbsp;➜\u0026nbsp;\u0026nbsp; faites du conteneur un conteneur flex et utilisez `align-items: center` et `justify-content: center`.\n3. Pour les mises en page Grid, les propriétés commençant par `align-` fonctionnent dans la direction bloc. Celles qui commencent par `justify-` fonctionnent dans la direction inline.\n4. Pour les mises en page Flex, les propriétés commençant par `align-` fonctionnent sur l'axe perpendiculaire. Celles qui commencent par `justify-` fonctionnent sur l'axe principal.\n5. Les propriétés `justify-content` et `align-content` répartissent l'espace supplémentaire. Si vous n'avez pas d'espace supplémentaire disponibledans votre conteneur flex ou grid, ces propriétés ne feront rien.\n6. Si vous pensez avoir besoin de `justify-self` dans Flexbox, peut-être une marge auto vous donnera-t-elle la solution.\n7. Vous pouvez utiliser Grid et Flexbox et les propriétés d'alignement pour de micro tâches aussi bien que pour vos composants essentiels. Expérimentez\u0026nbsp;!\n\nPour plus d'information sur les alignements, consultez ces ressources\u0026nbsp;:\n\n- [CSS Box Alignment MDN](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Box_Alignment) (en français)\n- [CSS Flexbox et l'alignement, guide complet](/articles/css-flexbox-et-lalignement-guide-complet/)\n- [Box Alignment Cheatsheet](https://rachelandrew.co.uk/css/cheatsheets/box-alignment)\n"},{"slug":"comment-fonctionne-calc","title":"Comment fonctionne calc()","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"31 janvier 2017","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/how-calc-works/","copyright":"2017"},"dateCascade":"12 janvier 2019","dateMachine":"2O190112","tags":["css","sass","typographie"],"about":["calc"],"excerpt":"La fonction calc( ) de CSS nous permet de calculer des valeurs de propriétés. Ire Aderinokun passe en revue son fonctionnement, son utilité et quelques cas pratiques.","featured":true,"featuredImage":"/images/authors/ire-aderinokun.jpg","order":20,"content":"\nLa fonction `calc()` de CSS nous permet de calculer des valeurs de propriétés. Par exemple, au lieu de déclarer des valeurs fixes pour la largeur d'un élément, nous pouvons utiliser `calc()` pour spécifier que la largeur sera le résultat de l'addition de deux valeurs numériques (ou plus).\n\n```\n.foo {\n    width: calc(100px + 50px);\n}\n```\n\n\u003ch2\u003ePourquoi calc( ) ?\u003c/h2\u003e\n\nSi vous avez déjà utilisé des préprocesseurs comme Sass, l'exemple qui précède vous est sans doute familier (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : sinon, voir le [guide de style Sass](https://sass-guidelin.es/fr/)_).\n\n```\n.foo {\n    width: 100px + 50px;\n}\n\n// Ou en utilisant des variables Sass\n$width-one: 100px;\n$width-two: 50px;\n.bar {\n    width: $width-one + $width-two;\n}\n```\n\nToutefois, la fonction `calc()` est une meilleure solution, pour deux raisons.\n\nD'abord parce qu'elle permet de mélanger des unités différentes. En particulier, nous pouvons utiliser des pourcentages et des unités de viewport avec des unités absolues telles que les pixels. Par exemple nous pouvons créer une expression qui va soutraire une valeur en pixels à une valeur en pourcentage.\n\n```\n.foo {\n    width: calc(100% - 50px);\n}\n```\n\nDans cet exemple, l'élément `foo` aura toujours une largeur de 50px inférieure à 100% de son élément parent.\n\nEnsuite parce qu'avec `calc()` la valeur calculée est l'expression elle-même et non la valeur résultant de l'expression. Je m'explique\u0026nbsp;: lorsqu'on construit des expressions mathématiques avec les préprocesseurs, la valeur passée au navigateur est la valeur _résultant de l'expression_\u0026nbsp;:\n\n```\n// Valeur spécifiée en SCSS\n.foo {\n    width: 100px + 50px;\n}\n\n// Le SCSS est compilé en CSS\n// La valeur passée au navigateur :\n.foo {\n    width: 150px;\n}\n```\n\nAvec `calc()` la valeur parsée par le navigateur est _l'expression elle-même_\u0026nbsp;:\n\n```\n// Valeur spécifiée en CSS\n.foo {\n    width: calc(100% - 50px);\n}\n\n// Valeur calculée dans le navigateur\n.foo {\n    width: calc(100% - 50px);\n}\n```\n\nDu coup les valeurs sont dynamiques et s'adaptent aux changements de viewport. Nous pouvons avoir un élément avec une hauteur de viewport moins une valeur absolue, il s'adaptera aux changements du viewport.\n\n\u003ch3\u003eUtiliser calc( )\u003c/h2\u003e\n\nOn peut utiliser la fonction `calc()` pour additionner, soustraire, multiplier ou diviser des valeurs numériques de propriétés\u0026nbsp;: les data types `\u003clength\u003e`, `\u003cfrequency\u003e`, `\u003cangle\u003e`, `\u003ctime\u003e`, `\u003cnumber\u003e`, ou `\u003cinteger\u003e`.\n\nVoici quelques exemples :\n\n```\n.foo {\n    width: calc(50vmax + 3rem);\n    padding: calc(1vw + 1em);\n    transform: rotate( calc(1turn + 28deg) );\n    background: hsl(100, calc(3 * 20%), 40%);\n    font-size: calc(50vw / 3);\n}\n```\n\n\u003ch3\u003eImbriquer les calc( )\u003c/h3\u003e\n\nOn peut même imbriquer les fonctions `calc()`. Les fonctions entre parenthèses seront traitées comme de simples expressions. Si nous prenons par exemple\u0026nbsp;:\n\n```\n.foo {\n    width: calc( 100% / calc(100px * 2) );\n}\n```\n\nla valeur calculée de cette fonction sera :\n\n```\n.foo {\n    width: calc( 100% / (100px * 2) );\n}\n```\n\n\u003ch3\u003eCompatibilité\u003c/h3\u003e\n\nLa fonction `calc()` est largement supportée. Pour voir la compatibilité à la date de lecture de cet article, vous pouvez consulter —\u0026nbsp;comme toujours\u0026nbsp;— [CanIUse](https://caniuse.com/#feat=calc).\n\nSi un navigateur n'est pas compatible, toute l'expression propriété-valeur est ignorée. Par conséquent la solution de rechange (_fallback_) est simple à mettre en oeuvre, il suffit de fournir une valeur statique qui sera utilisée à la place.\n\n```\n.foo {\n    width: 90%; /* Fallback pour les anciens navigateurs */\n    width: calc(100% - 50px);\n}\n```\n\n\u003ch2\u003eQuand utiliser calc( ) ?\u003c/h2\u003e\n\nOn peut utiliser cette fonction dans diverses situations.\n\n\u003ch3\u003eExemple 1 - Centrer des éléments\u003c/h3\u003e\n\n`calc()` nous offre une solution de plus au problème classique du [centrage horizontal et vertical](/articles/centrer-en-css-un-guide-complet/) des éléments à l'intérieur d'un conteneur. Si nous connaissons les dimensions de l'élément enfant, une solution typique est d'utiliser des marges négatives pour déplacer l'élément de la moitié de sa hauteur et de sa largeur\u0026nbsp;:\n\n```\n// Avec un élément .foo ayant pour hauteur et pour largeur 300px\n.foo {\n    position: absolute\n    top: 50%;\n    left: 50%;\n    marging-top: -150px;\n    margin-left: -150px;\n}\n```\n\nAvec la fonction `calc()` nous obtenons le même résultat en n'utilisant que les propriétés `top` et `left`.\n\n```\n.foo {\n    position: absolute\n    top: calc(50% - 150px);\n    left: calc(50% - 150px);\n}\n```\n\nDe telles méthodes sont sans doute moins nécessaires maintenant que nous avons [Flexbox](/tags/flexbox/), cependant dans des cas où Flexbox ne peut être utilisé, par exemple si l'élément doit avoir une position absolue ou fixe, cette méthode reste utile.\n\n\u003ch3\u003eExemple 2 - Créer une dimension de grille à partir de root\u003c/h3\u003e\n\nOn peut utiliser la fonction `calc()` pour créer une grille basée sur le viewport avec l'unité `rem`. Pour cela, on définit dans l'[élément racine](https://developer.mozilla.org/fr/docs/Web/CSS/:root) (_root_) la font-size comme une fraction de la largeur du viewport.\n\n```\nhtml {\n\tfont-size: calc(100vw / 30);\n}\n```\n\nMaintenant `1 rem` correspond à 1/30 de la largeur du viewport. Tous les textes dans notre page seront mis à l'échelle automatiquement en fonction du viewport et la même quantité de texte apparaîtra toujours à l'écran quelle que soit sa taille\u0026nbsp;:\n\n\u003cp\u003e\n\u003cvideo width=\"780\" style=\"width: 100%;\" autoplay=\"\" loop=\"\" muted=\"\" playsinline=\"\" poster=\"https://res.cloudinary.com/ireaderinokun/image/upload/c_scale,q_59,w_780/v1486662717/ezgif.com-optimize_w09wsb.jpg\"\u003e\n    \u003csource type=\"video/webm\" src=\"https://res.cloudinary.com/ireaderinokun/image/upload/f_auto/v1486662717/ezgif.com-optimize_w09wsb.webm\"\u003e\n    \u003cimg src=\"https://res.cloudinary.com/ireaderinokun/image/upload/c_scale,q_59,w_780/v1486662717/ezgif.com-optimize_w09wsb.jpg\" alt=\"image d'un écran redimensionné, montrant comment le texte s'adapte tout en restant aux mêmes proportions\"\u003e\n\u003c/video\u003e\n\u003c/p\u003e\n\nSi nous donnons à d'autres éléments non-textuels des dimensions en unités `rem`, ìls se comporteront de la même manière.\n\n\u003ch3\u003eExemple 3 - Clarté\u003c/h3\u003e\n\nEnfin, `calc()` peut s'avérer utile pour rendre les calculs plus évidents à comprendre. Si vous voulez qu'un groupe d'éléments aient pour dimension 1/6 de la largeur de leur conteneur parent, vous pourriez l'écrire ainsi\u0026nbsp;:\n\n```\n.foo {\n\twidth: 16.666666667%;\n}\n```\n\nMais pour les lecteurs de votre CSS, ce serait bien plus clair ainsi\u0026nbsp;:\n\n```\n.foo {\n\twidth: calc(100% / 6);\n}\n```\n\n**Ressources complémentaires en français**\n\n- [La fonction calc() en CSS](https://www.alsacreations.com/article/lire/1630-la-fonction-calc-en-css.html), par Raphaël Goetter\n- [calc()](https://developer.mozilla.org/fr/docs/Web/CSS/calc) dans MDN\n"},{"slug":"la-propriete-css-visibility-et-laccessibilite","title":"La propriété CSS visibility et l'accessibilité","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"12 décembre 2018","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/the-visibility-property-isnt-just-about-visibility/","copyright":"2018"},"dateCascade":"16 décembre 2018","dateMachine":"2O181216","tags":["css","html","accessibilite"],"about":["Visibilité"],"excerpt":"Le DOM (Document Object Model) est une interface pour vos pages web. C'est une API permettant aux programmes de lire et de manipuler le contenu de la page, sa structure et ses styles. Passons tout cela en revue pour comprendre comment ça marche.","featured":false,"featuredImage":"/images/devtool-with-accessibility-panel-compressor.png","order":null,"content":"\nJ'ai rencontré un problème dernièrement avec le contenu textuel d'un de mes `\u003cbutton\u003e` qui n'apparaissait pas dans l'arbre d'accessibilité ([accessibility tree](https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree), _NdT\u0026nbsp;: un arbre un peu similaire au [DOM](/articles/le-dom-cest-quoi-exactement/) mais comportant uniquement les éléments utiles aux technologies d'assistance_) et par conséquent n'était pas visible pour les lecteurs d'écran. Après débogage, je me suis rendue compte que la raison en était que j'animais un texte visuellement en modifiant son opacité et, surtout, la propriété CSS `visibility`.\n\nC'était clairement un loupé, vu ce que j'ai écrit précédemment sur la façon de [cacher des éléments avec CSS](/articles/cacher-des-elements-avec-css/). Cela m'a amenée à repenser au comportement de la propriété `visibility`, en particulier à sa valeur `hidden`, dans sa relation avec les différentes sortes de \"visibilités\" —\u0026nbsp;visuelle, spatiale, technologies d'assistance, interactions. Quand nous utilisons le terme \"visibilité\", nous pensons à la vision, mais la propriété `visibility` ne concerne pas que la visibilité \"visuelle\".\n\n\u003ch2\u003evisibility: hidden et la visibilité visuelle\u003c/h2\u003e\n\nLorsque nous considérons le domaine de la vision, la règle `visibility: hidden` a l'effet attendu, l'élément devient plus ou moins \"invisible\".\n\n```\nIl a disparu ! ---\u003e \u003cspan style=\"visibility: hidden;\"\u003eJ'ai disparu !\u003c/span\u003e eh oui\n```\n\n\u003cp\u003eLe résultat :\u003c/p\u003e\n\u003cp\u003eIl a disparu ! ---\u0026gt; \u003cspan style=\"visibility: hidden;\"\u003eJ'ai disparu !\u003c/span\u003e eh oui\u003c/p\u003e\n\nPour comprendre exactement ce qui se passe, revenons sur le [chemin critique du rendu](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/?hl=FR). Typiquement, une fois déterminés les styles de la page, trois choses se passent\u0026nbsp;:\n\n- Mise en page - quel espace prend l'élément dans la page ?\n- Peinture - quelle est la valeur de chaque pixel ?\n- Composite - dans quel ordre sont peints les pixels ?\n\nPour un élément auquel s'applique la règle `visibility: hidden`, on pourrait penser que les navigateurs optimiseraient le travail de rendu en ne tenant pas compte des étapes 2 et 3 puisqu'aucun pixel ne sera affiché là où l'élément devrait se trouver. Bien que rien ne soit dit dans la spécification sur une telle optimisation, il est utile d'imaginer un tel mécanisme pour penser au fonctionnement de la règle.\n\n\u003ch2\u003evisibility: hidden et espace\u003c/h2\u003e\n\nIl est techniquement exact de dire qu'un élément est invisible lorsque la règle `visibility: hidden` lui est appliquée, cependant on peut objecter qu'il occupe toujours l'espace sur la page.\n\nComme mentionné précédemment, un élément ne passe peut-être pas par les étapes 2 \u0026 3, peinture et composite, mais il n'échappe pas à l'étape 1 de mise en page. Autrement dit, même si les pixels ne sont pas peints, ils occupent toujours de l'espace dans la page —\u0026nbsp;un peu comme Harry Potter et sa cape d'invisibilité, vous ne le voyez pas mais il est toujours là.\n\nPrenons trois éléments `\u003cdiv\u003e` de 100 px chacun, et appliquons la règle `visibility: hidden` au deuxième.\n\n```\n\u003cstyle\u003e\n    div {\n        width: 100px;\n        display: inline-block;\n        background-color: #ffdb3a;\n    }\n\u003c/style\u003e\n\n\u003cdiv\u003eUn\u003c/div\u003e\n\u003cdiv style=\"visibility: hidden;\"\u003eDeux\u003c/div\u003e\n\u003cdiv\u003eTrois\u003c/div\u003e\n```\n\n\u003cdiv style=\"width: 100px; text-align: center; background: #ffdb3a; display: inline-block;\"\u003eUn\u003c/div\u003e\n\u003cdiv style=\"width: 100px; text-align: center; background: #ffdb3a; display: inline-block; visibility: hidden;\"\u003eDeux\u003c/div\u003e\n\u003cdiv style=\"width: 100px; text-align: center; background: #ffdb3a; display: inline-block;\"\u003eTrois\u003c/div\u003e\n\nBien que \"visuellement caché\", on ne peut pas dire que l'élément du milieu soit réellement invisible puisqu'il occupe toujours l'espace.\n\n\u003ch2\u003evisibility: hidden et interactivité\u003c/h2\u003e\n\nDu fait qu'un élément occupe toujours l'espace, même s'il est techniquement \"caché\", on pourrait penser que la règle `visibility: hidden` a le même effet que `opacity: 0`. En réalité, la règle `visibility: hidden` est beaucoup plus proche de `display: none`.\n\nToute interaction avec des éléments tels que des formulaires ou des liens sera impossible.\n\nConsidérons le `\u003cbutton\u003e` ci-dessous qui devrait envoyer une alerte sur un clic.\n\n```\nIl a disparu ! ---\u003e\n\u003cbutton style=\"visibility: hidden;\"\n        onclick=\"alert('Hello!')\"\u003eJ'ai disparu !\u003c/button\u003e\n\u003c--- On ne peut pas cliquer dessus !\n```\n\n\u003cp\u003eIl a disparu ! ---\u0026gt; \u003cbutton style=\"visibility: hidden;\" onclick=\"alert('Hello!')\"\u003eJ'ai disparu !\u003c/button\u003e \u0026lt;--- On ne peut pas cliquer dessus !\u003c/p\u003e\n\nLe bouton a beau conserver son espace physique, il a perdu son interactivité.\n\n\u003ch2\u003evisibility: hidden et technologies d'assistance\u003c/h2\u003e\n\nLa principale raison pour laquelle la règle `visibility: hidden` ne concerne pas que le domaine de la vision est qu'elle affecte également les technologies d'assistance. Lorsque nous appliquons `visibility: hidden` à un élément, la règle le supprime de l'arbre d'accessibilité, ce qui le rend invisible aux technologies telles que les lecteurs d’écran.\n\nPrenons par exemple le problème que j'ai rencontré. J'ai un `\u003cbutton\u003e` et une `\u003cspan\u003e` imbriquée.\n\n```\n\u003cbutton\u003e\n    \u003cspan style=\"visibility: hidden\"\u003eButton label here\u003c/span\u003e\n\u003c/button\u003e\n```\n\nSi nous jetons un coup d'oeil aux propriétés d'accessibilité de l'élément dans DevTool, nous voyons que le `\u003cbutton\u003e` semble ne pas avoir de label et par conséquent n'a pas de nom accessible.\n\n\u003cbutton\u003e\n    \u003cspan style=\"visibility: hidden\"\u003eButton label here\u003c/span\u003e\n\u003c/button\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/devtool-with-accessibility-panel-compressor.png\" width=\"957\" height=\"310\" alt=\"Copie d'écran de Chrome DevTool lorsqu'on inspecte le bouton ci-dessus dont le nom n'est pas accessible\"/\u003e\u003c/figure\u003e\n\nConclusion : la propriété `visibility` semble n'affecter que l'aspect visuel des éléments, mais nous avons vu qu'elle fait bien plus que cela.\n"},{"slug":"css-flexbox-et-la-dimension-des-boites","title":"CSS Flexbox et la dimension des boîtes","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"17 septembre 2018","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2018/09/flexbox-sizing-flexible-box/","copyright":"2018"},"dateCascade":"9 décembre 2018","dateMachine":"2O181209","tags":["css","flexbox"],"about":["Box Model"],"excerpt":"Nous allons explorer le dimensionnement en Flexbox, qui est souvent un casse-tête : comment Flexbox décide-t-il de la taille de nos items ?","featured":true,"featuredImage":"/images/flexbox-sizing-flex-items-compressor.png","order":22,"content":"\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;_NdT\u0026nbsp;: Les articles précédents ont été traduits dans la Cascade_\u0026nbsp;:\n\n- [Que se passe-t-il quand on crée un flexbox flex-container ?](/articles/que-se-passe-t-il-quand-on-cree-un-flexbox-flex-container/)\n- [CSS Flexbox et l'alignement, guide complet](/articles/css-flexbox-et-lalignement-guide-complet/).\n\n\u003ch2\u003eAffichage initial des items flex\u003c/h2\u003e\n\nSi j’ai un ensemble d’items ayant des contenus de longueur variable et que je règle leur parent sur `display: flex`, ils s’afficheront sous forme de ligne et s’aligneront au début de cet axe. Dans l'exemple ci-dessous, mes trois items ont un contenu réduit et ils peuvent afficher ces contenus sous forme de ligne ininterrompue. Il y a un espace à la fin du conteneur flex que les items n'occupent pas car la valeur initiale de `flex-grow` est `0`, c'est à dire \u003ci\u003epas d'expansion\u003c/i\u003e.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flexbox-sizing-flex-items-compressor.png\" width=\"1148\" height=\"271\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items flex ont suffisamment d'espace pour être alignés sur une seule ligne\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi j'ajoute du texte à ces éléments, ils finissent par remplir le conteneur et des retours à la ligne apparaissent. Les boîtes se voient attribuer un espace correspondant à la longueur de texte qu'elles contiennent —\u0026nbsp;un item avec beaucoup de texte a plus d'espace. Du coup, on ne se retrouve pas avec une colonne maigrichonne contenant beaucoup de texte lorsque l’item suivant ne contient qu’un seul mot.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flexbox-sizing-flex-items-longer-compressor.png\" width=\"1143\" height=\"471\" alt=\"\"\u003e\u003cfigcaption\u003eL'espace est réparti de façon à donner plus de place à un item de contenu plus long\u003c/figcaption\u003e\u003c/figure\u003e\n\nCe comportement vous paraîtra sans doute familier si vous avez déjà utilisé Flexbox, et peut-être vous êtes-vous déjà demandé comment le navigateur effectuait ces redimensionnements, d'autant que si vous comparez les navigateurs modernes, vous pouvez constater qu'ils font tous la même chose. La raison en est que des détails comme celui-ci sont définis _dans la spécification même_, afin de s'assurer que quel que soit le navigateur on sache toujours comment fonctionne ce calcul. Nous pouvons utiliser la spécification pour trouver cette information par nous-mêmes.\n\n\u003ch2\u003eSpécification de dimensionnement CSS intrinsèque et extrinsèque\u003c/h2\u003e\n\nLorsqu'on examine le dimensionnement dans la spécification Flexbox, on découvre assez vite qu'une grande partie des informations dont on a besoin se trouve dans une autre spécification —\u0026nbsp;[CSS Intrinsic et Extrinsic Sizing](https://www.w3.org/TR/css-sizing-3/). En effet, les concepts de dimensionnement que nous utilisons ne sont pas propres à Flexbox, de la même manière que les propriétés d’alignement ne sont pas propres à Flexbox, comme nous l'avons vu dans l'article précédent. Cependant, pour savoir comment ces dimensionnement sont utilisées dans Flexbox, il faut revenir à la spécification Flexbox. Pour vous éviter d'avoir à faire des allers-retours dans les specs, je vais donc vous donner quelques définitions-clés, que je vais utiliser dans la suite de l’article.\n\n\u003ch3\u003eTaille préférée\u003c/h3\u003e\n\nLa [taille préférée](https://www.w3.org/TR/css-sizing-3/#preferred-size-properties) d'une boîte est la taille définie par une `width` ou une `height`, ou par les alias logiques `inline-size` et `block-size` pour ces propriétés. Lorsque vous utilisez\u0026nbsp;:\n\n```\n.box {\n    width: 500px;\n}\n```\n\nou l'alias logique `inline-size`\u0026nbsp;:\n\n```\n.box {\n    inline-size: 500px;\n}\n```\n\n...vous déclarez que vous souhaitez que votre boîte ait une largeur de 500 pixels ou 500 pixels dans la direction `inline`.\n\n\u003ch3\u003emin-content size\u003c/h3\u003e\n\nLa [taille minimale](https://www.w3.org/TR/css-sizing-3/#min-content-inline-size) du contenu, `min-content`, est la plus petite taille possible pour une boîte sans créer d'overflow. Si votre boîte contient du texte, toutes les opportunités possibles de retour à la ligne ([soft](https://en.wikipedia.org/wiki/Line_wrap_and_word_wrap)) seront utilisées.\n\n\u003ch3\u003emax-content size\u003c/h3\u003e\n\nLa [taille maximale](https://www.w3.org/TR/css-sizing-3/#max-content-inline-size) du contenu, `max-content`, est la plus grande taille que la boîte puisse prendre afin de contenir le contenu. Si la boîte contient du texte sans retour à la ligne, elle apparaîtra sous la forme d'une longue chaîne de caractères ininterrompue.\n\n\u003ch3\u003eTaille principale d'un item flex\u003c/h3\u003e\n\nLa [taille principale](https://www.w3.org/TR/css-flexbox-1/#box-model) d'un élément flexible est la taille qu'il a dans la dimension principale (\u003ci\u003emain\u003c/i\u003e). Si vous travaillez dans une rangée —\u0026nbsp;en français\u0026nbsp;— alors la taille principale est sa largeur. Dans une colonne en français, la taille principale est sa hauteur.\n\nLes items ont également une taille principale minimale et maximale définie par leur `min-width` ou leur `min-height` dans la dimension principale.\n\n\u003ch2\u003eComprendre la taille d'un élément flexible\u003c/h2\u003e\n\nMaintenant que certains termes sont définis, nous pouvons examiner la façon dont nos éléments flex sont dimensionnés. La valeur initiale des propriétés `flex` est la suivante:\n\n- `flex-grow: 0`\n- `flex-shrink: 1`\n- `flex-basis: auto`\n\nLe calcul des dimensions part de `flex-basis`. Si nous donnons à `flex-basis` la valeur `0`, et à `flex-grow` la valeur `1`, alors nos boîtes n'ont pas de largeur initiale et par conséquent l'espace à l'intérieur du conteneur flex est partagé de manière égale.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vzaJMW\" src=\"//codepen.io/rachelandrew/embed/vzaJMW?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=vzaJMW\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/vzaJMW/\"\u003e\n  Smashing Flexbox Series 3: flex: 1 1 0;\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi par contre `flex-basis` a pour valeur `auto` et `flex-grow: 1`, alors l'espace disponible est distribué en prenant en compte la taille du contenu.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_XPBejj\" src=\"//codepen.io/rachelandrew/embed/XPBejj?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=XPBejj\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/XPBejj/\"\u003e\n  Smashing Flexbox Series 3: flex: 1 1 auto short text\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLorsqu'il n'y a pas d'espace disponible, par exemple quand notre contenu ne tient pas sur une ligne unique, alors il n'y a pas d'espace à distribuer.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_bxjoeZ\" src=\"//codepen.io/rachelandrew/embed/bxjoeZ?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=bxjoeZ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/bxjoeZ/\"\u003e\n  Smashing Flexbox Series 3: flex: 1 1 auto long text\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl est donc important de bien comprendre `auto` si nous voulons savoir comment Flexbox détermine la taille des boîtes. La valeur d'`auto` sera notre point de départ.\n\n\u003ch2\u003eDéfinir auto\u003c/h2\u003e\n\nLorsque `auto` est la valeur d'une propriété CSS, il a une signification spécifique à ce contexte. Le CSS Working Group a passé beaucoup de temps à clarifier la signification de `auto` selon les contexte, comme l'explique [cette présentation](https://vimeo.com/134597090).\n\nNous pouvons trouver le sens de `auto` utilisé en tant que `flex-basis` dans la spécification. Les termes définis tout à l'heure devraient nous permettre d'analyser cette phrase:\n\n\u003e Lorsque spécifié sur un item flex, le mot-clé `auto` va chercher la valeur de la propriété de taille principale pour l'utiliser comme `flex-basis`. Si cette valeur est elle-même `auto`, alors la valeur utilisée est `content`.\n\nAutrement dit, si notre `flex-basis` est `auto`, Flexbox examine la propriété de taille principale définie. Comme nous l'avons vu, nous aurions une taille principale si nous avions donné par exemple une largeur à l’un au moins de nos articles flexibles. Dans l'exemple ci-dessous, les éléments ont tous une largeur de 110\u0026nbsp;px, cette taille est donc utilisée comme taille principale, car la valeur initiale de `flex-basis` est `auto`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_mGjBxQ\" src=\"//codepen.io/rachelandrew/embed/mGjBxQ?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=mGjBxQ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/mGjBxQ/\"\u003e\n  Smashing Flexbox Series 3: flex items with a width\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nCependant, notre exemple a des items sans `width` ce qui signifie que leur dimension principale est `auto`, et nous passons donc à la suite de la phrase \"si cette valeur est elle-même `auto`, alors la valeur utilisée est `content`\".\n\nNous devons maintenant regarder ce que dit la spec à propos du mot-clé `content`. Voici une autre valeur que nous pouvons utiliser pour notre `flex-basis`(dans les navigateurs compatibles), par exemple\u0026nbsp;:\n\n```\n.item {\n    flex: 1 1 content;\n}\n```\n\nLa specification définit `content`ainsi :\n\n\u003e Il indique un dimensionnement automatique basé sur le contenu du flex item. Typiquement, il est équivalent à la dimension max-content mais avec des ajustements permettant de traiter les ratios d'aspect, les contraintes de dimensionnement intrinsèque et les flux orthogonaux\"\n\nDans notre exemple, avec des items flex contenant du texte, nous pouvons ignorer certains ajustements complexes et considérer `content` comme étant la dimension max-content.\n\nCeci explique pourquoi, lorsque nous avons peu de texte dans chaque item, nous n'avons pas de retour à la ligne. Les items flex sont dimensionnés automatiquement, Flexbox cherche leur dimension max-content, les items s'ajustent à cette taille dans leur conteneur, et le tour est joué.\n\nL'histoire ne s'arrête pas là, lorsque nous ajoutons du contenu les boîtes ne restent pas à la dimension max-content. Sinon, elles sortiraient du conteneur avec un overflow. Une fois qu'il a rempli le container, le contenu retourne à la ligne et les items prennent des tailles différentes en fonction de leur contenu.\n\n\u003ch2\u003eRésolution des tailles flexibles\u003c/h2\u003e\n\nÀ partir d'ici, la spécification devient raisonnablement complexe. Voici les prochaines étapes.\n\nD'abord, ajouter la taille principale de tous les items et voir si elle est supérieure ou inférieure à l'espace disponible dans le container. Si la taille du conteneur est supérieure, nous passons à `flex-grow` puisque nous avons de l'espace pour nous étendre.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flexbox-sizing-flex-items-compressor-1.png\" width=\"1148\" height=\"271\" alt=\"\"/\u003e\u003cfigcaption\u003eDans ce premier cas, nos items ont de la place disponible pour s'étendre\u003c/figcaption\u003e\u003c/figure\u003e\n\nPar contre, si la taille du conteneur est inférieure au total, nous nous tournons vers `flex-shrink` car nous devons nous serrer.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flexbox-sizing-flex-items-overflow-compressor.png\" width=\"1535\" height=\"309\" alt=\"\"/\u003e\u003cfigcaption\u003eDans le second cas, nos items sont trop grands et doivent être réduits pour s'adapter à la taille du conteneur\u003c/figcaption\u003e\u003c/figure\u003e\n\nIl est possible de choisir une taille pour certains items, qui deviennent ainsi \"inflexibles\". Si nous utilisons `flex-grow`, cela inclurait tous les éléments qui ont `flex-grow: 0`. C'est le scénario que nous avons lorsque nos articles flexibles ont de la place dans le conteneur. La valeur initiale de `flex-grow` est `0`, nos items deviennent donc aussi grands que leur largeur maximale et ne grandissent plus à partir de leur taille principale.\n\nSi nous utilisons `flex-shrink`, cela inclura tous les éléments avec `flex-shrink: 0`. Nous pouvons voir ce qui se passe dans cette étape si nous donnons à notre ensemble d’items flex un facteur de `flex-shrink` de `0`. Les éléments sont figés dans leur état max-content et ainsi ne peuvent pas s'organiser eux-mêmes de manière flexible pour tenir dans le conteneur.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LJBeWp\" src=\"//codepen.io/rachelandrew/embed/LJBeWp?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=LJBeWp\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/LJBeWp/\"\u003e\n  Smashing Flexbox Series 3: flex:  0 0 auto\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nDans notre cas, avec leur valeurs initiales d'items flex, nos items peuvent se réduire. Nous continuons donc, et l'algorithme entre dans une boucle lui permettant de calculer l'espace à attribuer ou à réduire. Nous utilisons `flex-shrink`puisque la taille totale de nos items est supérieure à la taille du conteneur —\u0026nbsp;nous devons donc réduire l'espace.\n\nLe facteur `flex-shrink` est multiplié par la \u003ci\u003etaille de base interne\u003c/i\u003e, ici c'est la taille `max-content`. Cela donne une valeur avec laquelle réduire l'espace. Si les éléments retirent de l'espace uniquement en fonction du facteur de `flex-shrink`, les éléments de petite taille risquent en principe de disparaître car tout leur espace a été supprimé, tandis que l'élément le plus volumineux peut encore être réduit.\n\n\u003e Dans cette boucle, il existe une étape supplémentaire pour rechercher les éléments qui deviendraient plus petits ou plus grands que leur taille principale cible. Dans ce cas, l'élément cesse de croître ou de se réduire. Encore une fois, ceci permet d'éviter que certains objets ne deviennent minuscules ou énormes par rapport au reste des objets.\n\nTout cela a été simplifié du point de vue des spécifications, car je n'ai pas examiné certains des scénarios les plus limites. Vous pouvez vous en passer si vous souhaitez laisser Flexbox agir à votre place ou si vous ne recherchez pas la perfection au pixel près. Garder à l'esprit les deux mécanismes suivants vous aidera dans la plupart des cas\u0026nbsp;:\n\n- Si vous êtes en mode `grow` depuis `auto`, alors `flex-basis` sera traitée comme n'importe quelle largeur ou hauteur de l'item ou comme son max-content. L'espace sera ensuite attribué en fonction du facteur `flex-grow` en utilisant cette dimension comme point de départ.\n- Si vous êtes en mode `shrink` depuis `auto`, alors `flex-basis` sera traitée comme n'importe quelle largeur ou hauteur de l'item ou comme son max-content. L'espace sera alors rétréci ou supprimé en fonction de la taille de `flex-basis` multipliée par le facteur `flex-shrink` et donc proportionnellement à la taille max-content des items.\n\n\u003ch3\u003eContrôler grow et shrink\u003c/h3\u003e\n\nJ'ai passé la plus grande partie de cet article à décrire ce que fait Flexbox lorsqu'il se débrouille tout seul. Vous pouvez bien sûr exercer un meilleur contrôle sur vos items flexibles en utilisant les propriétés `flex`. J'espère qu'elles vous paraîtront maintenant plus prévisibles grâce à une bonne compréhension de ce qui se passe en coulisses.\n\nSi vous définissez votre propre `flex-basis` ou si vous attribuez à l'élément lui-même une taille ensuite utilisée comme `flex-basis`, vous reprenez le contrôle de l'algorithme, en indiquant à Flexbox que vous souhaitez augmenter ou réduire cette taille. Vous pouvez désactiver complètement la croissance ou la réduction en réglant `flex-grow` ou `flex-shrink` sur `0`.\n\nUn dernier point sur cette question du contrôle\u0026nbsp;: lorsque vous sentez monter le désir de mieux contrôler les éléments flexibles, prenez un moment pour vérifier que vous utilisez la bonne méthode de layout\u0026nbsp;: si vous essayez d’aligner des éléments flexibles en deux dimensions, vous feriez sans doute mieux de choisir [Grid Layout](/tags/cssgrid/).\n\n\u003ch3\u003eDébogage des problèmes liés à la taille\u003c/h3\u003e\n\nSi vos items flex atteignent une dimension inattendue, c'est généralement dû au fait que votre `flex-basis` est `auto` et que quelque chose donne à votre item une largeur, qui est ensuite utilisée comme `flex-basis`. L'inspection de l'élément dans DevTools peut aider à identifier la provenance de la dimension. Vous pouvez également essayer de définir une `flex-basis` de `0`, ce qui obligera Flexbox à traiter l'élément comme s'il avait une largeur nulle. Même si vous n'obtenez pas un résultat souhaité, cela vous aidera à identifier la valeur de `flex-basis` utilisée, laquelle est peut-être la cause de vos problèmes de dimensionnement.\n\n\u003ch3\u003eEspaces ou gouttières flex\u003c/h3\u003e\n\nUne fonctionnalité très demandée de Flexbox serait la possibilité de spécifier des espaces ou des gouttières entre les éléments flex comme on peut le faire avec CSS Grid Layout. Cette fonctionnalité est spécifiée pour Flexbox dans le cadre de Box Alignment et la première mise en œuvre du navigateur est en route. Pour Firefox ça devrait sortir avec Firefox 63. L'exemple suivant peut être visualisé dans Firefox Nightly.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_NLBEKG\" src=\"//codepen.io/rachelandrew/embed/NLBEKG?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=NLBEKG\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/NLBEKG/\"\u003e\n  Smashing Flexbox Series 3: flex-gaps\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/flexbox-sizing-flex-gaps-compressor.png\" width=\"1110\" height=\"400\" alt=\"\"/\u003e\u003cfigcaption\u003eL'image vue dans Firefox 63\u003c/figcaption\u003e\u003c/figure\u003e\n\nComme pour Grid Layout, la taille de la gouttière est prise en compte avant que l'espace ne soit distribué aux items flex.\n\n\u003ch3\u003eOn récapitule\u003c/h3\u003e\n\nDans cet article, j’ai essayé d’expliquer en détail comment Flexbox définit la taille des éléments flexibles. Cela peut sembler un peu théorique, cependant, prendre un peu de temps pour comprendre le fonctionnement de cette solution peut vous faire gagner un temps considérable lors de l’utilisation de Flexbox dans vos layouts. Je trouve très utile de revenir au fait que, par défaut, Flexbox essaie de vous donner la présentation la plus judicieuse d’un ensemble d'items de tailles variables. Si un élément a plus de contenu, il dispose de plus d'espace. Si votre design et vous n'êtes pas d'accord avec ce que Flexbox estime préférable, vous pouvez reprendre le contrôle en définissant votre propre `flex-basis`.\n"},{"slug":"css-flexbox-et-lalignement-guide-complet","title":"CSS Flexbox et l'alignement, guide complet","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"13 août 2018","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2018/08/flexbox-alignment/","copyright":"2018"},"dateCascade":"9 décembre 2018","dateMachine":"2O181209","tags":["css","flexbox"],"about":["Box Alignment"],"excerpt":"Dans cet article, nous examinons les propriétés d'alignement de Flexbox tout en découvrant quelques règles de base qui nous aideront à nous rappeler comment elles fonctionnent sur les axes principal et transversal","featured":true,"featuredImage":"/images/justify-content-flex-start-compressor.png","order":23,"content":"\nDans [le premier article de cette série](/articles/que-se-passe-t-il-quand-on-cree-un-flexbox-flex-container/), j'ai expliqué ce qui se passait lorsqu'on déclare `display: flex` sur un élément. Ici, nous allons examiner les propriétés d'alignement et la façon dont elles fonctionnent dans Flexbox. Si `align` et `justify` vous ont donné des migraines par le passé, j'espère que cet article rendra les choses plus claires\u0026nbsp;!\n\n\u003ch2\u003eUne histoire de l'alignement Flexbox\u003c/h2\u003e\n\nDepuis le début de CSS Layout, l'alignement correct des éléments sur les deux axes a toujours semblé le problème le plus ardu en matière de conception de sites Web. La capacité d'aligner correctement des éléments et des groupes d'éléments a donc été, pour beaucoup d'entre nous, l'apport le plus excitant de Flexbox. L'alignement est devenu aussi simple que deux lignes de CSS\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_WKLYEX\" src=\"//codepen.io/rachelandrew/embed/WKLYEX?height=450\u0026amp;theme-id=light\u0026amp;slug-hash=WKLYEX\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/WKLYEX/\"\u003e\n  Smashing Flexbox Series 2: center an item\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLes propriétés d'alignement que vous considérez peut-être comme des propriétés Flexbox sont maintenant entièrement définies dans [la spécification d'alignement de boîte](https://www.w3.org/TR/css-align-3/) (\u003ci\u003eBox Alignment\u003c/i\u003e). Cette spécification détaille le fonctionnement de l'alignement dans les divers contextes de layout. Cela signifie que nous pouvons utiliser les mêmes propriétés d'alignement dans CSS Grid que celles utilisées dans Flexbox –\u0026nbsp;et à l'avenir dans d'autres contextes de layout. Par conséquent, toute nouvelle capacité d'alignement pour Flexbox sera décrite en détail dans la spécification Box Alignment et non dans un futur niveau de Flexbox.\n\n\u003ch2\u003eLes Propriétés\u003c/h2\u003e\n\nBeaucoup de gens me disent qu’ils ont du mal à se rappeler s’ils doivent utiliser des propriétés qui commencent par `align-` ou celles qui commencent par `justify-` dans Flexbox. Ce qu'il faut retenir\u0026nbsp;:\n\n- `justify-` effectue l'alignement de l'axe principal. Alignement dans la même direction que votre `flex-direction`\n- `align-` effectue un alignement transversal. Alignement dans la direction perpendiculaire à votre `flex-direction`.\n\nIl est vraiment utile ici de penser en termes d’axe principal et d’axe transversal plutôt que d’horizontale et de verticale.\n\n\u003ch3\u003eAlignement sur l'axe principal avec justify-content\u003c/h3\u003e\n\nCommençons par l'alignement de l'axe principal. Sur cet axe, nous alignons à l'aide de la propriété `justify-content`. Cette propriété considère l'ensemble de nos éléments flexibles comme un groupe et contrôle la répartition de l'espace entre les éléments.\n\nLa valeur initiale de `justify-content` est `flex-start`. C’est pourquoi, lorsque vous déclarez `display: flex`, tous les items flexibles sont alignés à partir du début de la ligne flex. Si vous avez une `flex-direction` de `row` et que vous parlez une langue écrite de gauche à droite comme l'anglais, les éléments commenceront à gauche.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/justify-content-flex-start-compressor.png\" width=\"1406\" height=\"200\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items s'alignent depuis le point de départ\u003c/figcaption\u003e\u003c/figure\u003e\n\nRemarquez que la propriété `justify-content` ne peut faire quelque chose \u003cstrong\u003eque s'il y a un espace disponible à distribuer\u003c/strong\u003e. Par conséquent, si vos items flexibles occupent toute la place sur l'axe principal, l'utilisation de `justify-content` ne changera rien.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/justify-content-no-space-compressor.png\" width=\"1408\" height=\"200\" alt=\"\"/\u003e\u003cfigcaption\u003eIl n'y a pas d'espace à partager\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi nous donnons à `justify-content` la valeur `flex-end`, alors tous les items sont déplacés vers la fin de la ligne. L'espace disponible, s'il y en a, est maintenant placé en début de ligne.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/justify-content-flex-end-compressor.png\" width=\"1406\" height=\"200\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items s'alignent sur le point d'arrivée\u003c/figcaption\u003e\u003c/figure\u003e\n\nNous pouvons faire d'autres choses avec cet espace. Nous pourrions souhaiter qu’il soit distribué entre nos items flexibles, en utilisant `justify-content: space-between`. Dans ce cas, le premier et le dernier élément seront alignés avec les extrémités du conteneur et tout l’espace sera partagé de manière égale entre les éléments.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/justify-content-space-between-compressor.png\" width=\"1402\" height=\"200\" alt=\"\"/\u003e\u003cfigcaption\u003eL'espace libre est réparti entre les items\u003c/figcaption\u003e\u003c/figure\u003e\n\nNous pouvons demander que l’espace soit réparti autour de nos éléments flexibles, en utilisant `justify-content: space-around`. Dans ce cas, l'espace disponible est partagé et placé de chaque côté de l'élément.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/justify-content-space-around-compressor.png\" width=\"1404\" height=\"200\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items ont de l'espace de chaque côté\u003c/figcaption\u003e\u003c/figure\u003e\n\nUne valeur plus récente de `justify-content` peut être trouvée dans la spécification Box Alignment. Elle n'apparaît pas dans la spécification Flexbox. Cette valeur est `space-evenly`. Dans ce cas, les éléments seront répartis de manière uniforme dans le conteneur et l'espace supplémentaire sera partagé entre les éléments et de chaque côté.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/justify-content-space-evenly-compressor.png\" width=\"1404\" height=\"200\" alt=\"\"/\u003e\u003cfigcaption\u003eLes éléments sont uniformément répartis\u003c/figcaption\u003e\u003c/figure\u003e\n\nVous pouvez jouer avec toutes ces valeurs dans la démo\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_Owraaj\" src=\"//codepen.io/rachelandrew/embed/Owraaj?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=Owraaj\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/Owraaj/\"\u003e\n  justify-content with flex-direction: row\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nCes valeurs fonctionnent de la même manière si votre `flex-direction` est `column`. Il est possible toutefois que la colonne n'offre pas autant d'espace disponible, à moins d'ajouter une hauteur ou une dimension de bloc au conteneur flex comme dans la démo suivante\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_zLyMyV\" src=\"//codepen.io/rachelandrew/embed/zLyMyV?height=460\u0026amp;theme-id=light\u0026amp;slug-hash=zLyMyV\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"460\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/zLyMyV/\"\u003e\n  justify-content with flex-direction: column\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eAlignement sur l'axe transversal avec align-content\u003c/h3\u003e\n\nSi vous avez ajouté `flex-wrap: wrap` à votre conteneur flex et que vous avez plusieurs lignes flex, vous pouvez utiliser `align-content` pour aligner vos lignes flex sur l'axe transversal. Toutefois, il vous faudra disposer d'un espace supplémentaire sur l'axe transversal. Dans la démonstration ci-dessous, mon axe transversal fonctionne dans la direction bloc comme une colonne et j'ai défini la hauteur du conteneur flex à 60vh. C'est plus que l'espace nécessaire pour afficher mes items flex, j'ai donc de la place verticalement dans le conteneur.\n\nJe peux ensuite utiliser `align-content` avec les valeurs ci-dessous\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_pZqqMJ\" src=\"//codepen.io/rachelandrew/embed/pZqqMJ?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=pZqqMJ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/pZqqMJ/\"\u003e\n  Smashing Flexbox Series 2: align-content with flex-direction: row\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi ma `flex-direction` était `column` alors `align-content` fonctionnerait comme dans l'exemple suivant\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_MBZZNy\" src=\"//codepen.io/rachelandrew/embed/MBZZNy?height=380\u0026amp;theme-id=light\u0026amp;slug-hash=MBZZNy\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"380\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/MBZZNy/\"\u003e\n  Smashing Flexbox Series 2: align-content with flex-direction: column\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nTout comme précédemment avec `justify-content`, nous traitons les lignes comme un groupe et nous distribuons l'espace disponible.\n\n\u003ch3\u003eLe raccourci place-content\u003c/h3\u003e\n\nDans la spécification Box Alignment, on trouve le raccourci `place-content`. Avec cette propriété, vous pouvez définir en même temps `justify-content` et `align-content`. La première valeur est pour `align-content`, la seconde pour `justify-content`\u0026nbsp;:\n\n```\n.container {\n    place-content: space-between stretch;\n}\n```\n\néquivaut à :\n\n```\n.container {\n    align-content: space-between;\n    justify-content: stretch;\n}\n```\n\nSi par contre vous ne définissez qu'une seule valeur, `align-content` et `justify-content` prennent cette valeur\u0026nbsp;:\n\n```\n.container {\n    place-content: space-between;\n}\n```\n\néquivaut à :\n\n```\n.container {\n    align-content: space-between;\n    justify-content: space-between;\n}\n```\n\n\u003ch3\u003eAlignement sur l'axe transversal avec align-items\u003c/h3\u003e\n\nNous savons maintenant que nous pouvons aligner notre ensemble d'items flex ou nos lignes flex comme un groupe. Cependant, nous pourrions souhaiter aligner nos éléments d’une autre manière\u0026nbsp;: **aligner les éléments les uns par rapport aux autres** sur l’axe transversal. Votre conteneur flex a une hauteur. Cette hauteur peut être définie par la hauteur de l'élément le plus grand, comme dans cette image.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/container-height-of-item-compressor.png\" width=\"1402\" height=\"250\" alt=\"\"/\u003e\u003cfigcaption\u003eLa hauteur du conteneur est définie par celle du 3e élément\u003c/figcaption\u003e\u003c/figure\u003e\n\nMais on pourrait aussi la définir en ajoutant une hauteur au conteneur flex\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/container-added-height-compressor.png\" width=\"1402\" height=\"250\" alt=\"\"/\u003e\u003cfigcaption\u003eLa hauteur du conteneur est définie comme une dimension du conteneur\u003c/figcaption\u003e\u003c/figure\u003e\n\nLa raison pour laquelle les éléments flexibles semblent s’étirer jusqu’à atteindre la taille de l’élément le plus grand est que la valeur initiale d’`align-items` est `stretch`. Les items s'étirent sur l'axe transversal pour prendre la taille du conteneur flexible dans cette direction.\n\nNotez qu'en ce qui concerne `align-items`, si vous avez un conteneur flex multi-lignes, chaque ligne se comporte comme un nouveau conteneur Flex. L'item le plus grand de cette ligne définirait la taille de tous les items de cette ligne.\n\nEn plus de la valeur initiale de stretch, vous pouvez attribuer à `align-items` la valeur de `flex-start`. Dans ce cas, les items s'alignent au début du conteneur et ne s'étirent plus en hauteur.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/align-items-flex-start-compressor.png\" width=\"1408\" height=\"250\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items sont alignés au départ de l'axe transversal\u003c/figcaption\u003e\u003c/figure\u003e\n\nLa valeur `flex-end` les déplace à la fin de l'axe transversal\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/align-items-flex-end-compressor.png\" width=\"1406\" height=\"250\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items sont alignés à la fin de l'axe transversal\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi vous utilisez la valeur `center`, les items sont centrés les uns par rapport aux autres\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/align-items-center-compressor.png\" width=\"1406\" height=\"250\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items sont centrés sur l'axe transversal\u003c/figcaption\u003e\u003c/figure\u003e\n\nEnfin, nous pouvons aligner les items sur la [ligne de base](\u003chttps://fr.wikipedia.org/wiki/Ligne_de_base_(typographie)\u003e), permettant ainsi de s'assurer que le _texte_ est aligné, ce qui ne serait pas nécessairement le cas si l'alignement se faisait sur le contenu.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/align-items-baseline-compressor.png\" width=\"1402\" height=\"250\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items sont centrés sur la ligne de base\u003c/figcaption\u003e\u003c/figure\u003e\n\nVous pouvez jouer avec toutes ces valeurs dans la démo\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_WKLBpv\" src=\"//codepen.io/rachelandrew/embed/WKLBpv?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=WKLBpv\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/WKLBpv/\"\u003e\n  Smashing Flexbox Series 2: align-items with flex direction: row\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eAlignement individuel avec align-self\u003c/h3\u003e\n\nLa propriété `align-items` vous permet de définir l'alignement de tous les éléments en même temps. En réalité, cela permet de définir toutes les valeurs `align-self` sur les éléments flex individuels de manière groupée. Vous pouvez également utiliser la propriété `align-self` sur tout élément flex individuel pour l'aligner à l'intérieur de la ligne flex et par rapport aux autres éléments flex.\n\nDans l'exemple suivant, j'ai utilisé `align-items` sur le conteneur pour définir l'alignement du groupe sur `center`, mais j'ai également utilisé `align-self` sur le premier et le dernier éléments pour modifier leur valeur d'alignement (vérifiez en cliquant sur CSS).\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_KBbLmz\" src=\"//codepen.io/rachelandrew/embed/KBbLmz?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=KBbLmz\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/KBbLmz/\"\u003e\n  Smashing Flexbox Series 2: align-self\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2\u003ePourquoi n'y a-t-il pas de justify-self ?\u003c/h2\u003e\n\nUne question souvent posée est de savoir pourquoi il n'est pas possible d'aligner un élément ou un groupe d'éléments sur l'axe principal. Pourquoi n'y a-t-il pas de propriété `-self` pour l'alignement sur l'axe principal dans Flexbox\u0026nbsp;? Si vous considérez `justify-content` et `align-content` comme étant une façon de distribuer l'espace, la raison pour laquelle ils ne sont pas auto-alignés devient plus évidente. Nous traitons les éléments flexibles en tant que groupe et distribuons l'espace disponible d'une manière ou d'une autre - au début ou à la fin du groupe, ou entre les éléments.\n\nIl pourrait également être utile de réfléchir à la manière dont `justify-content` et `align-content` fonctionnent dans [CSS Grid Layout](/articles/css-grid-layout-guide-complet/). Dans Grid, ces propriétés sont utilisées pour répartir l'espace disponible dans le conteneur de grille _entre_ les pistes (\u003ci\u003etracks\u003c/i\u003e) de la grille. Une fois encore, nous prenons les pistes en tant que groupe et ces propriétés nous permettent de répartir l'éventuel espace supplémentaire entre elles. Comme nous agissons sur un groupe, à la fois dans Grid et dans Flexbox, nous ne pouvons pas cibler un élément seul et faire quelque chose de différent avec celui-ci. Cependant, il existe un moyen de réaliser le type de présentation auquel vous pensez lorsque vous souhaitez une propriété `-self` sur l'axe principal, et ce moyen c'est l'utilisation de marges automatiques.\n\n\u003ch2\u003eUtiliser les marges automatiques sur l'axe principal\u003c/h2\u003e\n\nSi vous avez déjà centré un bloc dans CSS (par exemple le wrapper du contenu de votre page principale, en définissant une marge `auto` à gauche et à droite), vous avez déjà une expérience du comportement des marges automatiques. Une marge réglée sur `auto` essayera de devenir aussi grande que possible dans la direction dans laquelle elle a été définie. Lorsque les marges sont utilisées pour centrer un bloc, nous définissons les positions gauche et droite sur `auto`, chacune essaye de prendre le plus de place possible et pousse notre bloc au centre.\n\nLes marges automatiques fonctionnent très bien dans Flexbox pour aligner des éléments uniques ou des groupes d’éléments sur l’axe principal. Dans l'exemple qui suit, je réalise un \u003ci\u003edesign pattern\u003c/i\u003e très courant. J'ai une barre de navigation utilisant Flexbox, les éléments sont affichés sur une ligne et utilisent la valeur initiale de `justify-content: start`. J'aimerais que le dernier élément soit affiché séparément des autres, à la fin de la ligne flex –\u0026nbsp;en supposant qu'il y ait suffisamment d'espace sur la ligne pour le faire.\n\nJe cible cet item et je lui donne une marge gauche `auto`. Cela a pour effet que la marge essaie d'obtenir le plus d'espace possible à gauche de l'élément, ce qui entraîne le déplacement de l'élément complètement à droite.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_oMJROm\" src=\"//codepen.io/rachelandrew/embed/oMJROm?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=oMJROm\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/oMJROm/\"\u003e\n  Smashing Flexbox Series 2: main axis alignment with auto margins\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi vous utilisez les marges automatiques sur l'axe principal, `justify-content` n'aura plus d'effet puisque les marges automatiques auront pris tout l'espace qui aurait pu être utilisé par `justify-content`.\n\n\u003ch2\u003eAlignement de repli\u003c/h2\u003e\n\nChaque méthode d’alignement détaille un alignement de repli (\u003ci\u003efallback\u003c/i\u003e), c’est à dire ce qui se produira si l’alignement que vous avez demandé ne peut pas être réalisé. Par exemple, si vous n'avez qu'un seul élément dans un conteneur flexible et demandez `justify-content: space-between`, que devrait-il se passer\u0026nbsp;? La réponse est que l'alignement de repli `flex-start` est utilisé et que votre item individuel s'alignera au début du conteneur flex. Dans le cas de `justify-content: space-around`, un alignement de repli `center`est utilisé.\n\nDans la spécification actuelle, vous ne pouvez pas modifier l'alignement de repli. Si vous préférez que le repli de `space-between` soit `center` plutôt que `flex-start`, il n'y a pas moyen de le faire. Cependant, [une note dans la spécification](https://www.w3.org/TR/css-align-3/#distribution-values) indique que les niveaux futurs devraient le permettre.\n\n\u003ch2\u003eAlignement safe et unsafe\u003c/h2\u003e\n\nUn ajout plus récent à la spécification Box Alignment est le concept d'alignement sécurisé / non sécurisé à l'aide des mots clés `safe` et `unsafe`.\n\nDans le code suivant, le dernier élément est trop large pour le conteneur et, avec un alignement non sécurisé et le conteneur flexible sur le côté gauche de la page, l'élément est coupé\u0026nbsp;: le débordement se situe en dehors des limites de la page.\n\n```\n.container {\n    display: flex;\n    flex-direction: column;\n    width: 100px;\n    align-items: unsafe center;\n}\n\n.item:last-child {\n    width: 200px;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/unsafe-alignment-compressor.png\" width=\"860\" height=\"474\" alt=\"\"/\u003e\u003cfigcaption\u003eUn alignement non sécurisé vous donnera l'alignement que vous souhaitez mais vous pouvez y perdre des données\u003c/figcaption\u003e\u003c/figure\u003e\n\nUn alignement sécurisé évite la perte de données, en déplaçant le débordement vers l'autre côté.\n\n```\n.container {\n    display: flex;\n    flex-direction: column;\n    width: 100px;\n    align-items: safe center;\n}\n\n.item:last-child {\n    width: 200px;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/safe-alignment-compressor.png\" width=\"818\" height=\"502\" alt=\"\"/\u003e\u003cfigcaption\u003eUn alignement sécurisé essaie d'éviter la perte de données\u003c/figcaption\u003e\u003c/figure\u003e\n\nCes mots-clés ont un support navigateur encore limité mais ils sont une bonne illustration du contrôle supplémentaire apporté à Flexbox via la spécification Box Alignment.\n\n\u003ch3\u003eRécapitulation\u003c/h3\u003e\n\nLes propriétés d'alignement ont commencé sous forme de liste dans Flexbox, mais elles ont maintenant leur propre spécification et s'appliquent à d'autres contextes de layout. Quelques points-clés vous aideront à vous rappeler comment les utiliser dans Flexbox:\n\n- `justify-` l'axe principal et `align-` l'axe transversal;\n- Pour utiliser `align-content` et `justify-content`, vous avez besoin d'espace disponible.\n- Les propriétés `align-content` et `justify-content` traitent les éléments en tant que groupe, en partageant de l'espace. Par conséquent, vous ne pouvez pas cibler un élément individuel et il n’existe donc pas d’alignement de type `-self` pour ces propriétés;\n- Si vous souhaitez aligner un élément ou diviser un groupe sur l'axe principal, utilisez les marges automatiques pour le faire.\n- La propriété `align-items` définit toutes les valeurs `align-self` en tant que groupe. Utilisez `align-self` sur le flex enfant pour définir la valeur d'un élément individuel.\n"},{"slug":"le-dom-cest-quoi-exactement","title":"Le DOM, c'est quoi exactement ?","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"26 novembre 2018","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/what-exactly-is-the-dom/","copyright":"2018"},"dateCascade":"1er décembre 2018","dateMachine":"2O181201","tags":["dom","html","javascript"],"about":[],"excerpt":"Le DOM (Document Object Model) est une interface pour vos pages web. C'est une API permettant aux programmes de lire et de manipuler le contenu de la page, sa structure et ses styles. Passons tout cela en revue pour comprendre comment ça marche.","featured":true,"featuredImage":"/images/HTML-to-Render-Tree-to-Final-compressor.png","order":20,"content":"\n\u003ch2\u003eComment une page web est-elle construite ?\u003c/h2\u003e\n\nLe cheminement d'un navigateur partant d'un document source HTML pour finalement afficher une page stylée et interactive s'appelle le chemin critique du rendu (\u003ci\u003ecritical rendering path\u003c/i\u003e). Ce processus peut comporter de nombreuses étapes, comme je le montre dans [mon article sur le sujet](https://bitsofco.de/understanding-the-critical-rendering-path/), mais celles-ci peuvent être regroupées en deux grandes étapes. La première consiste en **l'analyse du document** par le navigateur pour déterminer ce qui sera finalement rendu sur la page, et la seconde est **le rendu** par le navigateur.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/HTML-to-Render-Tree-to-Final-compressor.png\" width=\"828\" height=\"442\" alt=\"la décomposition du processus en deux étapes\"/\u003e\u003c/figure\u003e\n\nLa première étape permet de construire l'arbre de rendu (\u003ci\u003erender tree\u003c/i\u003e), une représentation sous forme d'arbre des **éléments HTML** qui seront rendus sur la page ainsi que leurs styles associés. Pour cela, le navigateur a besoin de deux choses\u0026nbsp;:\n\n1. le CSSOM, une représentation des styles associés aux éléments\n2. le DOM, la représentation des éléments\n\n\u003ch2\u003eComment le DOM est créé, et à quoi il ressemble\u003c/h2\u003e\n\nLe DOM est une représentation du document HTML source. Comme nous le verrons plus loin, il comporte quelques différences, mais il s’agit pour l'essentiel d’une conversion de la structure et du contenu du document HTML en un modèle objet utilisable par divers programmes.\n\nLa structure d'objet du DOM est représentée par ce qu'on appelle une \"arborescence de noeuds\" (\u003ci\u003enode tree\u003c/i\u003e). On l'appelle ainsi parce qu'il peut être considéré comme un arbre qui se ramifie en plusieurs branches enfants, chacune pouvant avoir des feuilles. Le premier parent est l'élément racine `\u003chtml\u003e`, les \"branches\" enfants sont les **éléments** imbriqués et les \"feuilles\" sont le **contenu** des éléments.\n\nPrenons par exemple ce document HTML\u0026nbsp;:\n\n```\n\u003c!doctype html\u003e\n\u003chtml lang=\"en\"\u003e\n \u003chead\u003e\n   \u003ctitle\u003eMy first web page\u003c/title\u003e\n  \u003c/head\u003e\n \u003cbody\u003e\n    \u003ch1\u003eHello, world!\u003c/h1\u003e\n    \u003cp\u003eHow are you?\u003c/p\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\nCe document peut être représenté comme une arborescence de noeuds\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/node-tree-example-compressor.png\" width=\"866\" height=\"539\" alt=\"\"/\u003e\u003c/figure\u003e\n \n\u003ch2\u003eCe que n'est pas le DOM\u003c/h2\u003e\n\nDe l'exemple ci-dessus on pourrait conclure que le DOM est un mapping exact du document source HTML ou de ce que vous voyez dans votre DevTools. Cependant, il y a des différences. Pour bien comprendre ce qu'est le DOM, nous devons d'abord comprendre ce qu'il n'est **pas**.\n\n\u003ch3\u003eLe DOM n'est pas votre HTML source\u003c/h3\u003e\n\nBien que créé à partir du document source HTML, le DOM n'en est pas toujours l'exact reflet. Il peut en différer dans deux cas\u0026nbsp;:\n\n\u003ch4\u003e1. Lorsque le HTML n'est pas valide\u003c/h4\u003e\n    \nLe DOM est une interface pour les documents HTML valides. Pendant le processus de création du DOM, le navigateur peut être amené à corriger des informations invalides.\n    \nPrenons ce document HTML par exemple :\n    \n```\n\u003c!doctype html\u003e\n\u003chtml\u003e\nHello, world!\n\u003c/html\u003e\n```\n\nIl manque les éléments `\u003chead\u003e` et `\u003cbody\u003e` à ce document, alors qu'ils sont requis dans un HTML valide. Si nous inspectons l'arborescence créée, nous pouvons constater que l'erreur a été corrigée\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/corrected-html-compressor.png\" width=\"866\" height=\"285\" alt=\"\"/\u003e\u003c/figure\u003e\n    \n\u003ch4\u003e2. Lorsque le DOM est modifié par JavaScript\u003c/h4\u003e\n\nEn plus d'être une interface permettant de visualiser le contenu d'un document HTML, le DOM peut être modifié, ce qui en fait une ressource vivante.\n\nNous pouvons par exemple créer des noeuds supplémentaires via JavaScript.\n\n```\nvar newParagraph = document.createElement(\"p\");\nvar paragraphContent = document.createTextNode(\"I'm new!\");\nnewParagraph.appendChild(paragraphContent);\ndocument.body.appendChild(newParagraph);\n```\n\nLe DOM sera mis à jour, mais bien entendu notre document source HTML restera inchangé.\n\n\u003ch3\u003eLe DOM n'est pas ce que vous voyez dans le navigateur\u003c/h3\u003e\n\nCe que vous voyez dans le viewport de votre navigateur c'est l'arbre de rendu qui, nous l'avons vu, est un mélange de DOM et de CSSOM. Ce qui distingue le DOM de l'arbre de rendu c'est que ce dernier ne comprend que ce qui sera \"peint\" à l'écran. De ce fait, il exclut les éléments visuellement cachés, par exemple ceux stylés `display: none`.\n\n```\n\u003c!doctype html\u003e\n\u003chtml lang=\"en\"\u003e\n  \u003chead\u003e\u003c/head\u003e\n  \u003cbody\u003e\n    \u003ch1\u003eHello, world!\u003c/h1\u003e\n    \u003cp style=\"display: none;\"\u003eHow are you?\u003c/p\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n```\n\nLe DOM comprendra l'élément`\u003cp\u003e`:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/dom-with-p-compressor.png\" width=\"866\" height=\"418\" alt=\"\"/\u003e\u003c/figure\u003e\n\nCependant l'arbre de rendu —\u0026nbsp;et donc ce qui est visible dans le viewport\u0026nbsp;— ne comprendra pas cet élément.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/rendertree-without-p-compressor.png\" width=\"866\" height=\"244\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3\u003eLe DOM n'est pas ce que vous voyez dans DevTools\u003c/h3\u003e\n\nCette différence ne tient pas à grand chose car l'inspecteur d'éléments DevTools offre la meilleure approximation du DOM disponible dans le navigateur. Toutefois DevTools inclut des informations qui ne sont pas dans le DOM.\n\nLe meilleur exemple en est [les pseudo-éléments CSS](/articles/les-pseudo-elements-css-before-et-after/) créées via les sélecteurs `::before` et `::after`. Ils font partie du CSSOM et de l'arbre de rendu mais techniquement ils n'appartiennent pas au DOM puisque celui-ci est construit à partir du seul document source HTML, qui ne comprend pas les styles appliqués aux éléments.\n\nBien que ne faisant pas partie du DOM, les pseudo-éléments apparaissent dans notre inspecteur DevTools\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Pseudo-element-in-devtools-inspector.png\" width=\"1522\" height=\"580\" alt=\"\"/\u003e\u003c/figure\u003e\n    \nC'est la raison pour laquelle les pseudo-éléments ne peuvent pas être ciblés par JavaScript, parce qu'ils ne font pas partie du DOM\u0026nbsp;!\n    \n\u003ch2\u003eOn récapitule\u003c/h2\u003e\n\nLe DOM est une interface vers un document HTML. Il est utilisé par les navigateurs dans une première étape pour déterminer ce qui peut être rendu à l'écran, et par JavaScript pour modifier le contenu, la structure ou le style de la page.\n\nBien que similaire à d'autres formes de documents source HTML, il en diffère en plusieurs points\u0026nbsp;:\n\n- son HTML est toujours valide\n- c'est un modèle vivant qui peut être modifié par JavaScript\n- il ne comprend pas de pseudo-éléments (p.ex. `::after`)\n- il ne comprend pas d'élémens cachés (p.ex. via `display: none`)\n"},{"slug":"que-se-passe-t-il-quand-on-cree-un-flexbox-flex-container","title":"Que se passe-t-il quand on crée un Flexbox flex container?","author":{"name":"Rachel Andrew","lastname":"Andrew"},"original":{"date":"2 août 2018","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2018/08/flexbox-display-flex-container/","copyright":"2018"},"dateCascade":"28 octobre 2018","dateMachine":"2O181028","tags":["css","flexbox"],"about":[],"excerpt":"Lorsque les gens trouvent Flexbox difficile ou déroutant, c'est souvent parce qu'ils essaient de l'utiliser comme Grid layout.","featured":false,"featuredImage":"/images/row-main-start-compressor.png","order":null,"content":"\n_PETIT RÉSUMÉ: dans un monde idéal, CSS Grid et Flexbox seraient arrivés ensemble, déjà parfaits pour constituer à eux deux un système de layout pour le Web. Mais au lieu de cela, nous avons d’abord eu Flexbox et, comme il était bien meilleur que_ floats _pour créer des dispositions de type grille, nous nous sommes retrouvés avec beaucoup de systèmes de grille basés sur Flexbox. En fait, lorsque les gens trouvent Flexbox difficile ou déroutant, c'est souvent parce qu'ils essaient de l'utiliser comme Grid layout_.\n\nDans cette courte série d’articles, je vais passer un peu de temps à décomposer en détail Flexbox, comme je l’ai fait dans le passé avec Grid. Nous verrons ce pour quoi Flexbox a été conçu, ce qu'il fait vraiment bien et ce pourquoi il ne serait pas le meilleur choix de méthode de layout. Dans cet article, nous examinerons en détail ce qui se passe réellement lorsque vous ajoutez `display: flex` à votre feuille de style.\n\n\u003ch2\u003eUn conteneur Flex, s'il vous plaît!\u003c/h2\u003e\n\nPour utiliser Flexbox, vous avez besoin d’un élément qui sera le conteneur flex. Dans votre CSS, vous utilisez `display: flex`\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_PBRGQO\" src=\"//codepen.io/rachelandrew/embed/PBRGQO?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=PBRGQO\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/PBRGQO/\"\u003e\n  Smashing Flexbox Series 1: display: flex;\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nPrenons un peu de temps pour réfléchir à ce que `display: flex` signifie vraiment. Dans le [module CSS Display niveau 3](https://www.w3.org/TR/css-display-3/), chaque valeur d'affichage est décrite comme une combinaison de deux choses\u0026nbsp;: un modèle d'affichage interne et un modèle d'affichage externe. Lorsque nous ajoutons `display: flex`, nous définissons en réalité `display: block flex`. Le type d'affichage externe de notre conteneur flex est `block`; il agit comme un élément de niveau bloc dans un flux normal. Le type d'affichage interne est `flex`, ce qui aura pour effet que les éléments situés à l'intérieur de notre conteneur participeront au layout flex.\n\nC’est une chose à laquelle vous n’auriez peut-être jamais vraiment pensé mais que vous comprenez probablement de toute façon\u0026nbsp;: Le conteneur flex se comporte lui-même comme n'importe quel autre bloc de votre page. Si vous avez un paragraphe suivi d'un conteneur flex, les deux se comportent comme les éléments de niveau bloc auxquels sommes habitués.\n\nNous pouvons également définir notre conteneur avec une valeur de `inline-flex`, ce qui revient à utiliser `display: inline flex`, c’est-à-dire un conteneur flex qui agit comme un élément de niveau `inline`, avec des enfants participant au layout flex. Les enfants de notre conteneur inline flex se comportent de la même manière que les enfants de notre conteneur block flex. La différence réside dans la manière dont le conteneur lui-même se comporte dans la mise en page générale.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YjaGvZ\" src=\"//codepen.io/rachelandrew/embed/YjaGvZ?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=YjaGvZ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/YjaGvZ/\"\u003e\n  Smashing Flexbox Series 1: display: inline-flex;\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl est très utile de raisonner à partir de ce concept d'éléments ayant d'une part **un type d'affichage externe**, définissant la manière dont ils se comportent en tant que boîte, et d'autre part **un type d'affichage interne** dictant le comportement de leurs enfants. Vous pouvez appliquer cette approche à n’importe quelle boîte CSS. Comment agit cet élément? Comment agissent les enfants de cet élément? Les réponses renvoient aux modèles d'affichage externe et interne.\n\n\u003ch2\u003eRangées ou colonnes ?\u003c/h2\u003e\n\nUne fois défini notre conteneur flex, certaines valeurs initiales doivent être précisées. Sans l'ajout de propriétés supplémentaires, les éléments flex s'affichent sous forme de rangée car la valeur initiale de la propriété `flex-direction` est `row`. Si vous ne le définissez pas, vous obtenez une rangée.\n\nOn utilise la propriété `flex-direction` pour définir la direction de l'axe principal. Les autres valeurs de `flex-direction` sont:\n\n- `column`\n- `row-reverse`\n- `column-reverse`\n\nSi nos items (éléments individuels) sont sur une rangée, ils sont placés avec le premier au départ de la dimension inline et s'affichent dans l'ordre dans lequel ils apparaissent dans la source. Dans la spécification, ce point de départ est décrit comme le `main-start`\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/row-main-start-compressor.png\" width=\"1065\" height=\"144\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cb\u003emain-start\u003c/b\u003e est le départ de la dimension inline\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi nous utilisons la valeur `column`, les items s'affichent à partir du point de départ de la dimension block, et par conséquent forment une colonne.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/column-main-start-compressor.png\" width=\"966\" height=\"371\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cb\u003emain-start\u003c/b\u003e est le départ de la dimension block\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi nous utilisons `row-reverse`, alors `main-start`et `main-end` sont inversés et les items s'affichent l'un après l'autre dans l'ordre inverse.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/row-reverse-main-start-compressor.png\" width=\"1069\" height=\"150\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003cb\u003emain-start\u003c/b\u003e est à la fin de la dimension inline\u003c/figcaption\u003e\u003c/figure\u003e\n\nLa valeur `column-reverse` fait la même chose. Il est important de se rappeler que ces valeurs ne changent pas l’ordre des items, elles modifient simplement le point de départ du flux d’éléments: en basculant `main-start`. Nos items s'affichent donc dans l'ordre inverse, mais c'est parce qu'ils commencent à se placer à l'autre bout du conteneur.\n\nL'effet est purement visuel. Nous demandons aux items de s'afficher eux-mêmes en commençant par l'autre côté mais ils circulent toujours dans le même ordre, celui utilisé par votre lecteur d'écran, qui est aussi celui de tabulation. Par conséquent, il est important de ne jamais utiliser `row-reverse` lorsque vous voulez vraiment changer l'ordre des éléments. Faites ce changement dans votre document.\n\n\u003ch2\u003eLes deux axes de Flexbox\u003c/h2\u003e\n\nNous avons déjà exposé une caractéristique importante de Flexbox: la possibilité de basculer l’axe principal de rangée à colonne, qui peut sembler complexe. Il est souvent plus facile de comprendre l’alignement dans Grid layout. Avec Grid, comme on travaille en deux dimensions, on peut aligner les deux axes à peu près de la même manière. Flexbox est un peu plus compliqué car différentes choses se produisent selon que vous travaillez avec l'axe principal ou avec l'axe transversal.\n\nNous avons déjà rencontré l’axe principal (_main-axis_), c’est-à-dire l’axe que vous définissez comme valeur de `flex-direction`. L'axe transversal (_cross-axis_) est l'autre dimension. Si vous avez défini `flex-direction: row`, votre axe principal est le long de la rangée et votre axe transversal descend le long de la colonne. Avec `flex-direction: column`, l'axe principal suit la colonne et votre axe transversal le long des rangées. C’est ici que nous devons explorer une autre caractéristique importante de Flexbox, à savoir le fait qu’elle n’est pas liée aux dimensions physiques de l’écran. Nous ne parlons pas d’une ligne allant de gauche à droite, ni d’une colonne de haut en bas, car ce n’est pas toujours le cas.\n\n\u003ch3\u003eModes d'écriture\u003c/h3\u003e\n\nLorsque j'ai décrit la rangée et la colonne, j'ai mentionné les dimensions `block` et `inline`. Cet article est écrit à l'origine en anglais, qui est un mode d'écriture horizontal. Cela signifie que lorsque vous demandez à Flexbox de vous donner une ligne, vous obtenez un affichage horizontal de vos éléments flexibles. Dans ce cas, main-start est à gauche - l'endroit où les phrases commencent en anglais.\n\nSi je travaillais dans une langue écrite de droite à gauche telle que l'arabe, le bord de départ serait à droite:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_JBLEdZ\" src=\"//codepen.io/rachelandrew/embed/JBLEdZ?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=JBLEdZ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/JBLEdZ/\"\u003e\n  Smashing Flexbox Series 1: row with rtl text\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLes valeurs initiales de flexbox signifient que si tout ce que je fais est de créer un conteneur flex, mes items partiront de la droite et s'afficheront en se déplaçant vers la gauche. Le point de départ dans la direction inline est l'endroit où les phrases commencent dans le mode d'écriture que vous utilisez.\n\nSi vous vous trouvez en mode d'écriture verticale et demandez une rangée, celle-ci s'exécutera verticalement, car c'est ainsi que les rangées de texte s'affichent dans un langage vertical. Vous pouvez essayer ceci en ajoutant la propriété `writing-mode` à votre conteneur flex et en lui attribuant la valeur `vertical-lr`. Désormais, lorsque vous définissez `flex-direction` sur `row`, vous obtenez une colonne verticale d'éléments.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_oMqBXa\" src=\"//codepen.io/rachelandrew/embed/oMqBXa?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=oMqBXa\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/oMqBXa/\"\u003e\n  Smashing Flexbox Series 1: row with a vertical writing mode\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nAinsi, une rangée peut se dérouler horizontalement, avec un `main-start` à gauche ou à droite, et verticalement avec un `main-start` en haut. C’est toujours une `flex-direction` de `row` même si nos esprits habitués au texte horizontal ont du mal à penser une ligne qui court verticalement\u0026nbsp;!\n\nPour que les éléments s'affichent dans la dimension `block`, définissez la valeur de `flex-direction` sur `column` ou `column-reverse`. En anglais (ou en arabe), nous voyons ensuite les éléments s’afficher de manière superposée jusqu'en bas de la page, en commençant par le sommet du conteneur.\n\nDans un mode d'écriture vertical, la dimension `block` traverse la page, car il s'agit de la direction des blocs dans ces modes d'écriture. Si vous demandez une colonne dans `vertical-lr`, vos blocs iront de gauche à droite verticalement:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_yqKgeb\" src=\"//codepen.io/rachelandrew/embed/yqKgeb?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=yqKgeb\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/yqKgeb/\"\u003e\n  Smashing Flexbox Series 1: column in vertical-lr writing mode\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nToutefois, quelle que soit la direction d'affichage des blocs, si vous travaillez avec une colonne, vous travaillez dans la dimension `block`.\n\nPour comprendre la terminologie de Grid et Flexbox, il est utile de bien saisir qu'une rangée ou une colonne peut être exécutée dans différentes directions physiques. Nous ne faisons pas référence à \"gauche et droite\" ou \"haut et bas\" dans Flexbox et Grid car nous ne faisons aucune hypothèse quant au mode d’écriture de notre document. CSS est de plus en plus conscient des différences de mode écriture. Si vous êtes intéressés par d'autres propriétés et valeurs implémentées de la sorte en CSS, lisez mon article sur les [propriétés et valeurs logiques](https://www.smashingmagazine.com/2018/03/understanding-logical-properties-values/).\n\nEn résumé, rappelez-vous que:\n\n- **flex-direction : row**\n\n  - axe principal = dimension inline\n  - main-start sera l'endroit où les phrases commencent dans ce mode d'écriture\n  - axe transversal = dimension block\n\n- **flex-direction : column**\n\n  - axe principal = dimension block\n  - main-start sera le point de départ des blocs dans ce mode d'écriture\n  - axe transversal = dimension inline\n\n\u003ch2\u003eAlignement initial\u003c/h2\u003e\n\nD'autres choses se produisent lorsque nous utilisons `display: flex`. Un alignement initial se produit. Dans un prochain article de cette série, nous examinerons en détail l’alignement, mais dans notre exploration de `display: flex`, nous devrions déjà examiner _les valeurs initiales appliquées_.\n\nRemarque: il est à noter que, bien que ces propriétés d'alignement trouvent leur origine dans la spécification Flexbox, elles seront à terme [remplacées par la spécification BoxAlignement](https://www.w3.org/TR/css-flexbox-1/#alignment).\n\n\u003ch3\u003eAlignement sur l'axe principal\u003c/h3\u003e\n\nLa valeur initiale de `justify-content` est `flex-start`. Tout se passe comme si notre CSS était:\n\n```\n.container {\n    display: flex;\n    justify-content: flex-start;\n}\n```\n\nC'est la raison pour laquelle nos items flex s'alignent au départ du conteneur flex. C’est aussi la raison pour laquelle, lorsque nous définissons `row-reverse`, ils basculent de l'autre côté, qui devient alors le départ de l’axe principal.\n\nLorsque vous voyez une propriété d’alignement qui commence par `justify-`, elle s’applique à l’axe principal de Flexbox. Donc `justify-content` effectue l'alignement sur l'axe principal et aligne nos éléments au début.\n\nLes autres valeurs possibles pour `justify-content` sont :\n\n- `flex-end`\n- `center`\n- `space-around`\n- `space-between`\n- `space-evenly` (ajouté dans Box Alignment)\n\nCes valeurs gèrent la distribution de l'espace disponible dans le conteneur flex, c'est ainsi que les éléments sont déplacés ou espacés. Par exemple, si vous ajoutez `justify-content: space-between`, tout l'espace disponible est partagé entre les éléments. Cependant, cela ne peut se produire que s'il existe _effectivement_ un espace libre. Si vous aviez un conteneur flex sans espace supplémentaire après que tous les items aient été disposés, alors `justify-content` ne ferait rien du tout.\n\nVous pouvez le constater aisément si vous changez votre `flex-direction` en `column`. Si vous n'indiquez pas de hauteur sur le conteneur flex, il n’y aura pas d’espace libre entre les items, donc utiliser `justify-content: space-between` n'aura aucun effet. Si vous ajoutez une hauteur et faites en sorte que le conteneur soit plus grand que ce qui est nécessaire pour afficher les éléments, alors la propriété aura un effet\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_wxmgrW\" src=\"//codepen.io/rachelandrew/embed/wxmgrW?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=wxmgrW\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/wxmgrW/\"\u003e\n  Smashing Flexbox Series 1: column with a height\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eAlignement croisé\u003c/h3\u003e\n\nLes items sont également alignés sur l'axe transversal avec un conteneur flex à une seule ligne. Cela revient à aligner les boîtes les unes contre les autres sur la ligne. Dans l'exemple suivant, l'une de nos boîtes comporte plus de contenu que toutes les autres. Quelque chose dit aux autres cases de s’étirer à la même hauteur. Ce quelque chose est la propriété `align-items`, qui a pour valeur initiale `stretch`\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_GBxryJ\" src=\"//codepen.io/rachelandrew/embed/GBxryJ?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=GBxryJ\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/GBxryJ/\"\u003e\n  Smashing Flexbox Series 1: align-items\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLorsque vous voyez une propriété d'alignement qui commence par `align-` et que vous êtes dans une flexbox, vous avez alors affaire à un alignement transversal et `align-items` aligne les éléments dans la ligne de flex. Les autres valeurs possibles sont:\n\n- `flex-start`\n- `flex-end`\n- `center`\n- `baseline`\n\nSi vous ne souhaitez pas que les hauteurs des boîtes soient toutes étirées pour correspondre à la plus haute, `align-items: flex-start` les alignera toutes sur le bord supérieur de départ de l'axe transversal.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_RBMKyN\" src=\"//codepen.io/rachelandrew/embed/RBMKyN?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=RBMKyN\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/RBMKyN/\"\u003e\n  Smashing Flexbox Series 1: align-items: flex-start\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2\u003eValeurs initiales pour les éléments flex\u003c/h2\u003e\n\nEnfin, les éléments flex eux-mêmes ont également des valeurs initiales, elles sont définies sur:\n\n- `flex-grow: 0`\n- `flex-shrink: 1`\n- `flex-basis: auto`\n\nCela signifie que nos éléments ne s'agrandiront pas par défaut pour occuper l'espace disponible sur l'axe principal. Si `flex-grow` avait une valeur positive, les éléments grandiraient et occuperaient tout l'espace disponible.\n\nLes items peuvent être réduits, cependant, puisque `flex-shrink` est défini sur la valeur positive de 1. Cela signifie que si nous avons un conteneur flex très étroit, les éléments seront aussi petits que possible avant tout débordement. C'est un comportement qui fait sens: en général, nous voulons que les choses restent à l'intérieur de leurs boîtes et ne débordent pas s'il y a assez d'espace pour les afficher.\n\nAfin d'obtenir la meilleure mise en page possible par défaut, `flex-basis` est réglé sur `auto`. Nous verrons ce que cela signifie dans un futur article de cette série. Cependant, la plupart du temps, on peut voir `auto` comme \"assez grand pour correspondre au contenu\". Lorsque des éléments flexibles remplissent le conteneur et que l’un de ces éléments a un contenu plus volumineux que les autres, l’élément le plus gros dispose de plus d’espace.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_JBLWJo\" src=\"//codepen.io/rachelandrew/embed/JBLWJo?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=JBLWJo\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/JBLWJo/\"\u003e\n  Smashing Flexbox Series 1: initial values of flex items\u003c/a\u003e de rachelandrew dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nC’est la flexibilité de Flexbox en action. Avec une `flex-basis` réglée sur `auto` et aucun dimensionnement appliqué aux éléments, les items flexibles ont une taille de base égale à la taille `max-content`. Ce serait la taille qu'ils auraient s'ils s'étendaient sans retour à la ligne. Ensuite, l’espace est pris à chaque item en proportion, comme indiqué dans la remarque suivante de la spécification flexbox.\n\n\u003e Remarque: le facteur `flex-shrink` est multiplié par la taille de la base de flex lors de la répartition de l’espace négatif. Cela répartit l’espace négatif proportionnellement à la capacité de réduction de l’item, de sorte que, par exemple, un petit item ne sera pas réduit à zéro avant qu'un article plus grand ait été sensiblement réduit.\n\nLe plus gros item a moins de place, nous obtenons donc la mise en page finale. Vous pouvez comparer les deux captures d'écran ci-dessous, toutes deux prises à partir de l'exemple précédent. Dans la première capture d'écran, la troisième zone a un contenu moins volumineux et, par conséquent, nos colonnes ont une distribution d'espace plus égale.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/shrinking-auto-compressor.png\" width=\"426\" height=\"277\" alt=\"\"/\u003e\u003cfigcaption\u003eLes items s'ajustent pour donner plus d'espace à l'item le plus volumineux\u003c/figcaption\u003e\u003c/figure\u003e\n\nFlexbox nous aide ici à obtenir un résultat final raisonnable, sans autre intervention de la part de la personne qui écrit le CSS. Plutôt que de réduire l'espace de manière uniforme et de finir avec un élément très grand affichant péniblement quelques mots sur chaque ligne, il attribue à cet élément davantage d'espace. Ce type de comportement est la clé des cas d'utilisation réels de Flexbox. Flexbox est à son meilleur lorsqu'il est utilisé pour placer des ensembles d'éléments –\u0026nbsp;le long d'un axe\u0026nbsp;– de manière flexible et soucieuse du contenu. J'aborde un peu les détails ici, mais nous examinerons plus en détail ces algorithmes plus tard dans cette série.\n\n\u003ch2\u003eRésumé\u003c/h2\u003e\n\nDans cet article, je me suis intéressée aux valeurs initiales de Flexbox afin d’expliquer ce qui se passe réellement lorsque vous dites `display: flex`. Il y en a un nombre surprenant et ces quelques propriétés contiennent de nombreuses caractéristiques-clés des layouts flex.\n\nLes mises en page flex sont flexibles : elles essaient de faire de bons choix par défaut concernant votre contenu –\u0026nbsp;réduire ou étirer pour obtenir la meilleure lisibilité. Les mises en page flex prennent en compte le mode d'écriture\u0026nbsp;: les directions des rangées et des colonnes se rapportent au mode d'écriture utilisé. Les layout flex permettent l’alignement des éléments en tant que groupe sur l’axe principal, en choisissant la manière dont l’espace est réparti. Ils permettent l'alignement des éléments dans leur rangée flex, en les déplaçant sur l'axe transversal les uns par rapport aux autres. Il est important de noter que les mises en page flexibles comprennent la taille de votre contenu et tentent de prendre les bonnes décisions de base pour l'afficher. Dans les prochains articles, nous explorerons ces domaines plus en profondeur et nous examinerons plus précisément quand et pourquoi nous pourrions choisir d'utiliser Flexbox.\n"},{"slug":"comment-fonctionne-css-display-content","title":"Comment fonctionne CSS display: contents","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"27 mars 2017","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/how-display-contents-works/","copyright":"2017"},"dateCascade":"20 octobre 2018","dateMachine":"2O181020","tags":["css"],"about":["Display","Display Contents","Display None"],"excerpt":"Nous pouvons contrôler la façon dont la boîte et ses enfants sont dessinés sur la page grâce à la propriété CSS display","featured":false,"featuredImage":"/images/draw-compressor.png","order":null,"content":"\nComme je le rappelle souvent, chaque élément de l'[arbre qui représente notre document](http://web.simmons.edu/~grabiner/comm244/weekfour/document-tree.html) (_document tree_) est [une boîte rectangulaire](/articles/controler-le-modele-de-boite/). Grosso modo, cette boîte est faite de deux sections, l'une est la boîte elle-même —\u0026nbsp;comprenant bordures, padding et marges\u0026nbsp;— l'autre est le contenu.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/box-and-content-compressor.png\" width=\"723\" height=\"432\" alt=\"\"/\u003e\u003c/figure\u003e\n\nNous pouvons contrôler la façon dont cette boîte et ses enfants sont dessinés sur la page grâce à la propriété CSS `display`. La boîte peut être placée parmi ses \"soeurs\" comme du texte, via `inline` et nous pouvons même lui donner le comportement d'une table via `table`.\n\nIl n'y a que deux valeurs de la propriété `display` qui permettent à un élément de générer (ou pas) une boîte. La valeur `None` aura pour effet que ni la boîte ni son contenu ne seront affichés sur la page. La valeur `contents`, elle, aura pour effet de bien afficher la boîte _mais d'omettre totalement la boîte qui l'entoure_.\n\n\u003ch2\u003eQue se passe-t-il quand on utilise display: contents\u0026nbsp;?\u003c/h2\u003e\n\nLe plus simple pour le comprendre est d'imaginer qu'on a oublié les balises ouvrante et fermante de l'élément. Comme le dit [la spécification](https://www.w3.org/TR/css-display-3/#box-generation)\u0026nbsp;:\n\n\u003e 👉🏾 Pour ce qui est de la génération d'une boîte et de son affichage, l'élément doit être traité comme s'il avait été remplacé par son contenu dans l'arbre du document.\n\nPrenons le balisage suivant :\n\n```\n\u003cdiv class=\"outer\"\u003e\n  I’m some content\n  \u003cdiv class=\"inner\"\u003eI’m some inner content\u003c/div\u003e\n\u003c/div\u003e\n```\n\net les styles suivants :\n\n```\n.outer {\n  border: 2px solid lightcoral;\n  background-color: lightpink;\n  padding: 20px;\n}\n\n.inner {\n  background-color: #ffdb3a;\n  padding: 20px;\n}\n```\n\nL'affichage attendu est :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/draw-compressor.png\" width=\"561\" height=\"128\" alt=\"la boîte inner est affichée à l'intérieur de la boîte outer\"/\u003e\u003c/figure\u003e\n\nMais si nous ajoutons `display: contents` à l'élément `.outer` , voici ce que nous obtenons\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/display-contents-compressor.png\" width=\"564\" height=\"96\" alt=\"la boîte outer a disparu, il ne reste que son contenu : I'm some content\"/\u003e\u003c/figure\u003e\n\nVisuellement, le résultat est exactement ce que nous obtiendrions en omettant les balises ouvrante et fermante de l'élément `outer`.\n\n```\nI’m some content\n\u003cdiv class=\"inner\"\u003eI’m some inner content\u003c/div\u003e\n```\n\n\u003ch2\u003eQuid de... ?\u003c/h2\u003e\n\nCette règle CSS, bien que simple en apparence, a quelques comportements spécifiques. Le point important à garder à l'esprit est que la règle `display: contents` n'affecte que l'affichage de la boîte, **il ne modifie en rien le balisage lui-même**.\n\n\u003ch3\u003eQuid des attributs de l'élément ?\u003c/h3\u003e\n\n_Si, en pratique, l'élement est remplacé par son contenu, quelle est la conséquence pour ses attributs\u0026nbsp;?_ Puisque son remplacement est pour l'essentiel purement visuel, **nous pouvons toujours sélectionner, cibler et interagir avec l'élément via ses attributs**.\n\nPar exemple nous pouvons cibler l'élément avec son ID pour le référencer avec `aria-labelledby`:\n\n```\n\u003cdiv id=\"label\" style=\"display: contents;\"\u003eLabel here!\u003c/div\u003e\n\u003cbutton aria-labelledby=\"label\"\u003e\u003cbutton\u003e\n```\n\nToutefois j'ai constaté que nous ne pouvons plus naviguer vers l'élément au moyen d'un [identificateur de fragment](https://fr.wikipedia.org/wiki/Identificateur_de_fragment) (_fragment identifier_)\u0026nbsp;:\n\n```\n\u003cdiv id=\"target\" style=\"display: contents;\"\u003eTarget Content\u003c/div\u003e\n\n\u003cscript\u003e\n  window.location.hash = \"target\";\n  // =\u003e Nothing happens\n\u003c/script\u003e\n```\n\n\u003ch3\u003eQuid des events JS ?\u003c/h3\u003e\n\nComme nous venons de le voir, nous pouvons cibler un élément sur lequel a été appliqué `display: contents`. En fait, nous pouvons même cibler un élément ayant un style `display: none` mais l'event ne sera jamais déclenché parce que nous ne pouvons pas interagir avec l'élément. Cependant avec `display: contents` le contenu de l'élément étant toujours visible, nous pouvons interagir avec lui _à travers son contenu_.\n\nSi par exemple nous appliquons un event listener pour un click sur l'élément, et que nous loggons la valeur de `this`, nous obtenons toujours l'élément extérieur (_outer_) parce qu'il existe toujours dans le document.\n\n```\n\u003cdiv class=\"outer\"\u003eI’m some content\u003c/div\u003e\n\n\u003cscript\u003e\n  document.querySelector(\".outer\").addEventListener(\"click\", function(event) {\n    console.log(this);\n    // =\u003e \u003cdiv class=\"outer\"\u003e\u003c/div\u003e\n  });\n\u003c/script\u003e\n```\n\n\u003ch3\u003eQuid des pseudo-éléments ?\u003c/h3\u003e\n\nLes pseudo-éléments d'un élément auquel est appliqué `display: contents` sont considérés comme ses enfants et sont donc affichés normalement. (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;_NdT\u0026nbsp;: pour une intro facile aux pseudo-éléments, voir ici un article sur [les pseudo éléments css before et after](/articles/les-pseudo-elements-css-before-et-after/)_.)\n\n```\n\u003cstyle\u003e\n  .outer { display: contents; }\n  .outer::before { content: \"Before\" }\n  .outer::after { content: \"After\" }\n\u003c/style\u003e\n\n\u003cdiv class=\"outer\"\u003eI’m some content\u003c/div\u003e\n```\n\nLe balisage ci-dessus donnera le résultat suivant :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/pseudo-elements-compressor.png\" width=\"395\" height=\"82\" alt=\"affichage du texte suivant : before i'm some content after\"/\u003e\u003c/figure\u003e\n\n\u003ch3\u003eQuid des formulaires, images et autres éléments remplacés\u0026nbsp;?\u003c/h3\u003e\n\nLes [éléments remplacés](/articles/quest-ce-quun-element-remplace/) et certains formulaires ont un comportement différent lorsqu'on leur applique `content: display`.\n\n\u003ch4\u003eLes éléments remplacés\u003c/h4\u003e\n\nLes éléments remplacés sont des éléments dont l'apparence et les \"boîtes\"sont contrôlées par une ressource externe –\u0026nbsp;c'est le cas par exemple des images. Supprimer la boîte pour de tels éléments n'a pas réellement de sens car la notion de boîte n'est pas claire les concernant. Pour ces éléments, `display: contents` fonctionne exactement comme `display: none`. Ni la boîte ni son contenu ne seront affichés.\n\n\u003ch4\u003eLes formulaires\u003c/h4\u003e\n\nLes éléments de formulaires semblent constitués d'une simple boîte, mais sous le capot ils sont en réalité constitués de nombreux éléments. Tout comme pour les éléments remplacés, supprimer la boîte n'a pas de sens car il n'y a pas _une_ boîte. Du coup, pour les éléments de formulaires tels que `\u003cselect\u003e`, `\u003cinput\u003e` et `\u003ctextarea\u003e`, `display: contents` fonctionne exactement comme `display: none`.\n\n(Voir [la liste des éléments pour lesquels display: contents fonctionne différemment](https://www.w3.org/TR/css-display-3/#unbox-htm))\n\n\u003ch3\u003eQuid des boutons et des liens ?\u003c/h3\u003e\n\nLes éléments `\u003cbutton\u003e` et `\u003ca\u003e` n'ont pas de comportement particulier avec `display: contents`. Cependant il est utile de savoir comment cette règle les affecte car cela peut ne pas sembler évident.\n\n\u003ch4\u003eLes boutons\u003c/h4\u003e\n\nLes boutons ne sont pas constitués de boîtes, par conséquent `display: contents` ne fera que supprimer la boîte enveloppant le bouton, en ne laissant que le contenu du bouton. Si on l'utilise avec un formulaire, un clic sur ce bouton aura toujours pour effet de soumettre le formulaire et, comme nous l'avons vu, n'importe quel event listener sur le bouton fonctionnera normalement.\n\n\u003ch4\u003eLes liens\u003c/h4\u003e\n\nLa même chose s'applique aux liens, la boîte container est visuellement supprimée, ne laissant apparaître que le contenu du lien. Dans la mesure où les attributs ne sont généralement pas affectés par cette règle CSS, le lien fonctionnera toujours correctement et pourra être utilisé pour naviguer comme normalement.\n\n\u003ch3\u003eQuelle est l'utilité de display: contents ?\u003c/h3\u003e\n\nAutrefois nous devions organiser notre HTML d'une façon qui fonctionne à la fois sémantiquement et pour notre style CSS. Cela a conduit parfois à créer trop d'éléments pour la sémantique, parfois trop peu pour le style, en particulier des éléments \"frères\". Ce dernier cas est particulièrement pertinent avec l'arrivée de CSS Grid Layout qui, au moins aujourd'hui, doit pouvoir travailler avec des éléments \"frères\".\n\nPrenons par exemple ce layout :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/two-layouts-compressor.png\" width=\"677\" height=\"476\" alt=\"\"/\u003e\u003c/figure\u003e\n\nNous avons deux cartes placées côte à côte, chacune comprenant un titre, un paragraphe et un footer. Nous voulons que les sections aient la même hauteur pour toutes les cartes, indépendamment du contenu de chacune. Par exemple, la 2e carte a un titre de 3 lignes, la 1re carte a un titre de 1 ligne, mais les hauteurs de titres des deux cartes devraient être identiques.\n\nNous pourrions y arriver avec CSS Grid, mais pour cela il faudrait que tous les éléments dans une carte soient des \"frères\". Il nous faudrait organiser notre HTML comme ceci par exemple\u0026nbsp;:\n\n```\n\u003cdiv class=\"grid\"\u003e\n  \u003ch2\u003eThis is a heading\u003c/h2\u003e\n  \u003cp\u003e...\u003c/p\u003e\n  \u003cp\u003eFooter stuff\u003c/p\u003e\n\n  \u003ch2\u003eThis is a really really really super duper loooong heading\u003c/h2\u003e\n  \u003cp\u003e...\u003c/p\u003e\n  \u003cp\u003eFooter stuff\u003c/p\u003e\n\u003c/div\u003e\n```\n\net nous pourrions appliquer les styles suivants :\n\n```\n.grid {\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-rows: auto 1fr auto;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: 20px;\n}\n```\n\nLa structuration de ce document n'est certes pas incorrecte, mais il y aurait plus de sens à regrouper chaque carte dans un élément `\u003carticle\u003e`. C'est ici que `display: contents` entre en scène, nous donnant le meilleur des deux mondes —\u0026nbsp;en permettant un balisage sémantique tout en permettant d'organiser notre layout .\n\n```\n\u003cdiv class=\"grid\"\u003e\n  \u003carticle style=\"display: contents;\"\u003e\n    \u003ch2\u003eThis is a heading\u003c/h2\u003e\n    \u003cp\u003e...\u003c/p\u003e\n    \u003cp\u003eFooter stuff\u003c/p\u003e\n  \u003c/article\u003e\n  \u003carticle style=\"display: contents;\"\u003e\n    \u003ch2\u003eThis is a really really really super duper loooong heading\u003c/h2\u003e\n    \u003cp\u003e...\u003c/p\u003e\n    \u003cp\u003eFooter stuff\u003c/p\u003e\n  \u003c/article\u003e\n\u003c/div\u003e\n```\n\n\u003ch3\u003eCompatibilité\u003c/h3\u003e\n\nComme toujours, [la compatibilité peut être vérifiée sur CanIUse](https://caniuse.com/#feat=css-display-contents), elle est bonne aujourd'hui, à l'exception de IE et Edge.\n\nSi vous souhaitez assurer une compatibilité maximale, vous pouvez considérer cette feature comme une amélioration progressive (_progressive enhancement_) et utiliser une solution de rechange (_fallback_) appropriée.\n\n```\narticle {\n  display: grid;\n  grid-template-rows: 200px 1fr auto; /* e.g. Use a fixed height for the header */\n}\n\n@supports (display: contents) {\n  article { display: contents; }\n}\n```\n"},{"slug":"limbrication-des-selecteurs-dans-sass","title":"L'imbrication des sélecteurs dans Sass","author":{"name":"Kitty Giraudel","lastname":"Giraudel"},"original":{"date":"25 septembre 2014","site":"CSS-Tricks","siteUrl":"http://www.sitepoint.com/","postUrl":"http://www.sitepoint.com/beware-selector-nesting-sass/","copyright":"2014"},"dateCascade":"3 septembre 2018","dateMachine":"2O180903","tags":["css","sass"],"about":[],"excerpt":"L'imbrication de sélecteurs est une fonctionnalité des préprocesseurs CSS d'utilisation tellement courante qu'elle peut devenir problématique. Par Kitty Giraudel.","featured":false,"featuredImage":"/images/authors/kitty-giraudel.jpeg","order":null,"content":"\nL'imbrication de sélecteurs est une fonctionnalité des préprocesseurs CSS d'utilisation courante. Tellement courante qu'elle peut devenir problématique. Hugo Giraudel, notre grand spécialiste de Sass, défend une position originale et radicale.\n\nIl y a quelques jours, j'ai envoyé un tweet au sujet de l'imbrication des sélecteurs (_selector nesting_) pour dire qu'ils me créaient plus de problèmes qu'ils n'en résolvaient.\n\nCertains étaient d'accord, d'autres non, mais en tout cas cela a permis d'échanger des idées intéressantes et je me suis dit que j'en ferais bien un petit article.\n\n## Qu'est-ce que l'imbrication de sélecteurs?\n\nL'imbrication de sélecteurs est une fonctionnalité des préprocesseurs CSS qui permet d'emboîter des sélecteurs à l'intérieur d'autres sélecteurs pour créer des raccourcis d'écriture. Par exemple\u0026nbsp;:\n\n```scss\n.parent {\n  color: red;\n\n  .child {\n    color: blue;\n  }\n}\n```\n\n...sera compilé en ceci\u0026nbsp;:\n\n```CSS\n.parent {\n  color: red;\n}\n\n.parent .child {\n  color: blue;\n}\n```\n\nDans cet exemple, `.child` est emboîté dans `.parent` afin d'éviter la répétition du sélecteur parent.\n\nÇa peut-être tout à fait utile, mais j'ai le sentiment que cette fonctionnalité est très largement sur-utilisée au point que nous en arrivons aujourd'hui à devoir résoudre des problèmes créés par une imbrication inconsidérée.\n\n## Où est le problème de l'imbrication?\n\nEn soi, il n'y a pas de problème, la fonctionnalité a un sens. Le problème, comme souvent, est dans la façon dont nous utilisons cette fonctionnalité. Permettez-moi de commencer par deux exemples.\n\nLe premier est de [Micah Godbolt](http://www.phase2technology.com/blog/everything-you-need-to-know-about-sass-3-4/)\u0026nbsp;:\n\n```SCSS\n.tabs {\n  .tab {\n    background: red;\n    \u0026:hover {\n      background: white;\n    }\n    .tab-link {\n      color: white;\n      @at-root #{selector-replace(\u0026, '.tab', '.tab:hover')}{color: red;}\n    }\n  }\n}\n```\n\nLe second est de [Zi Qiu](http://sassmeister.com/gist/306744db88c2b6deef78) :\n\n```SCSS\n.root {\n  width: 400px;\n  margin: 0 auto;\n\n  .links {\n    .link {\n      display: inline-block;\n\n      \u0026 ~ .link {\n        margin-left: 10px;\n      }\n\n      a {\n        padding: 10px 40px;\n        cursor: pointer;\n        background: gray;\n\n        \u0026:hover {\n          background: blue;\n          color: white;\n          font-size: 700;\n        }\n\n        .icon {\n          margin-right: 5px;\n          @include selector-modifier(-2 ':hover', 1 suffix '.zh'){\n            color: red;\n            background: green;\n          }\n          @include selector-modifier(-2 ':hover', 1 suffix '.en') {\n            color: yellow;\n            background: green;\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nUne précision pour commencer : Ce code est intelligent. Je ne prétends en aucune façon qu'il s'agisse d'un mauvais code, et je suppose qu'il fonctionne exactement comme il faut.\n\nMaintenant, si je vous demande ce que ces deux exemples sont censés réaliser\u0026nbsp;? En y jetant un coup d'oeil rapide, seriez-vous capable de le dire\u0026nbsp;?\n\nMoi non plus. Parce que c'est compliqué.\n\n### L'imbrication complique le code\n\nLes deux exemples qui précèdent utilisent des fonctions de sélecteurs (de Sass 3.4) pour réécrire partiellement le contexte du sélecteur courant (`\u0026`).\n\nDonc, si je ne me trompe pas, ils utilisent du code supplémentaire afin d'écrire moins de code, et ajoutent une couche de complexité. Pourquoi ne pas écrire un code simple dès l'origine\u0026nbsp;?\n\nJe l'ai déjà dit\u0026nbsp;: les fonctions de sélecteurs ne sont pas faites pour une utilisation standard. Je crois que Chris Eppstein et Natalie Weizenbaum ont dit explicitement qu'ils ajoutaient cette fonctionnalité pour aider les développeurs de frameworks.\n\n_Remarque : si vous trouvez un cas d'utilisation légitime pour les fonctions de sélecteurs, qui résoud vraiment un problème, je vous serais reconnaissant de me le montrer, ça m'intéresserait beaucoup_.\n\n### Le sélecteur de référence est ambigu\n\nDans Sass, le sélecteur de référence (`\u0026`) peut parfois être ambigu. Selon la façon dont on l'utilise, il peut produire un résultat totalement différent. Voici une série d'exemples simples.\n\n```SCSS\n/* SCSS */\n.element {\n  \u0026:hover {\n    color: red;\n  }\n}\n\n/* CSS */\n.element:hover {\n  color: red;\n}\n```\n\n```SCSS\n/* SCSS */\n.element {\n  \u0026hover {\n    color: red;\n  }\n}\n\n/* CSS */\n.element:hover {\n  color: red;\n  }\n```\n\n```SCSS\n/* SCSS */\n.element {\n  \u0026 .hover {\n    color: red;\n  }\n}\n\n/* CSS */\n.element .hover {\n  color: red;\n  }\n```\n\n```SCSS\n/* SCSS */\n.element {\n  \u0026-hover {\n    color: red;\n  }\n}\n\n\n/* CSS */\n.element-hover {\n  color: red;\n}\n```\n\n```SCSS\n/* SCSS */\n.element {\n  \u0026.hover {\n    color: red;\n  }\n}\n\n\n/* CSS */\n.element.hover {\n  color: red:\n}\n```\n\n```SCSS\n/* SCSS */\n.element {\n  .hover\u0026 {\n    color: red;\n  }\n}\n\n/* Syntax Error */\nInvalid CSS after \".hover\": expected \"{\", was \"\u0026\"`\n`\"\u0026\" may only be used at the beginning of a compound selector.\n```\n\n```SCSS\n/* SCSS */\n.element {\n  \u0026:hover \u0026 {\n    color: red;\n  }\n}\n\n/* CSS */\n.element:hover .element {\n  color: red;\n}\n```\n\n```SCSS\n/* SCSS */\n.element {\n  \u0026:hover {\n    \u0026 {\n      color: red;\n    }\n  }\n}\n\n/* CSS */\n.element:hover {color: red;\n}\n```\n\nEt nous restons ici dans la simplicité en n'utilisant qu'un seul sélecteur. Inutile de préciser que lorsque vous multipliez les références à l'intérieur d'une règle, les choses peuvent vite devenir complexes.\n\nEn fait, certaines opérations fonctionnent, d'autres non (remarquez le message d'erreur dans l'un des exemples). Certains génèrent un sélecteur composé, d'autres non. En fonction du projet, en fonction de l'expérience Sass du prochain développeur qui utilisera le code, ces choses peuvent s'avérer difficiles à débugger.\n\n### Des sélecteurs introuvables\n\nLà, je commence à devenir tatillon. Mais il y a quelque chose que je n'aime pas et qui consiste à utiliser l'imbrication pour créer des sélecteurs du type BEM\n\n```SCSS\n.block {\n  /* Some CSS declarations */\n  \u0026--modifier {\n    /* Some CSS declarations for the modifier */\n  }\n  \u0026__element {\n    /* Some CSS for the element */\n    \u0026--modifier {\n      /* Some CSS for the modifier of the element */\n    }\n  }\n}\n```\n\nAvant d'expliquer pourquoi je n'aime pas cela, regardons comment ce code est compilé\u0026nbsp;:\n\n```CSS\n.block {\n  /* Some CSS declarations */\n}\n.block--modifier {\n  /* Some CSS declarations for the modifier */\n}\n.block__element {\n  /* Some CSS for the element */\n}\n.block__element--modifier {\n   /* Some CSS for the modifier of the element */\n}\n```\n\nD'un côté, ça permet d'éviter la répétition de `.block` dans chaque sélecteur, ce qui pourrait être dommage quand vous avez des noms de blocs comme `.profil-utilisateur`.\n\nMais d'un autre côté, ça crée de nouveaux sélecteurs sortis de nulle part et sur lesquels aucune recherche n'est possible\u0026nbsp;: que se passe-t-il si un développeur veut trouver le CSS de `.block__element`\u0026nbsp;? Il y a des chances qu'il le cherche à partir de son environnement de développement et qu'il ne trouve rien parce que ce sélecteur n'a jamais été créé comme tel.\n\nEn fait, j'ai l'impression que je ne suis pas le seul à penser ainsi. [Kaelig](https://twitter.com/kaelig), qui a travaillé un temps au Guardian, a envoyé un tweet allant dans le même sens.\n\nDe plus, je pense qu'il est meilleur de répéter le nom de base. De cette manière, on voit clairement ce qui se passe.\n\nJe devrais ajouter que les source maps peuvent aider dans une certaine mesure, mais ils ne changent rien au fait qu'on ne peut effectuer de recherche sur la base du code.\n\n## Quand peut-on imbriquer?\n\nSi vous-même et votre équipe êtes à l'aise avec la complexité, on peut toujours imbriquer\u0026nbsp;!\n\nSi vous me posez la question, mon sentiment est que l'ajout de pseudo-classes et de pseudo-éléments est à peu près le seul cas où ça vaut la peine. Par exemple\u0026nbsp;\n\n```SCSS\n.element {\n  /* Some CSS declarations */\n  \u0026:hover,\n  \u0026:focus {\n    /* More CSS declarations for hover/focus state */\n  }\n  \u0026::before {\n    /* Some CSS declarations for before pseudo-element */\n  }\n}\n```\n\nC'est le meilleur cas d'utilisation de l'imbrication de sélecteurs. Non seulement il permet d'éviter la répétition du même sélecteur, mais en plus il permet de définir l'étendue de cet élément (états et enfants virtuels) à l'intérieur du même ensemble de règles CSS. Enfin, `\u0026` n'est pas ambigu\u0026nbsp;: il signifie `.element`, ni plus, ni moins.\n\nUn autre cas d'utilisation intéressante de l'imbrication est lorsque vous voulez appliquer quelques styles personnalisés à un sélecteur _simple_ en fonction du contexte. Par exemple lorsqu'on utilise les hooks CSS de Modernizr\u0026nbsp;:\n\n```SCSS\n.element {\n  /* Some CSS declarations */\n  .no-csstransforms \u0026 {\n    /* Some CSS declarations when CSS transforms are not supported */\n  }\n}\n```\n\nDans ce scénario, j'ai l'impression qu'il est clair que `.no-csstransforms \u0026` sert à contextualiser le sélecteur courant à chaque fois que les transformations CSS ne sont pas supportées. Cela dit, c'est quand même à la limité de ce que je considère acceptable.\n\n## Quelles sont les recommandations?\n\nÉcrire un CSS simple. Reprenons l'exemple de Micah, qui est un peu compliqué, mais pas suffisamment pour être difficile à réécrire.\n\nLe code d'origine, dont l'objectif est d'appliquer des styles à une table\u0026nbsp;:\n\n```SCSS\n.tabs {overflow: hidden;\n\n  .tab {\n    background: red;\n\n    \u0026:hover {\n      background: white;\n    }\n\n    .tab-link {\n      color: white;\n\n      @at-root #{\n        selector-replace(\u0026, '.tab', '.tab:hover') {\n        color: red;\n      }\n    }\n  }\n}\n```\n\n...pourrait être écrit ainsi\u0026nbsp;:\n\n```SCSS\n.tabs {\n   overflow: hidden;\n}\n\n.tab {\nbackground: red;\n\n\u0026:hover {\n  background: white;\n  }\n}\n\n.tab-link {\n  color: white;\n\n  .tab:hover \u0026\n  {\n    color: red;\n  }\n}\n```\n\nJe ne peux pas imaginer une seule raison de préférer la première version du code. Elle est non seulement plus longue mais également moins explicite et elle utilise des fonctionnalités Sass qui ne sont pas nécessairement connues de tous les développeurs.\n\nRemarquez que le résultat en CSS n'est pas exactement identique car nous avons aussi simplifié le code. Plutôt que d'avoir des sélecteurs de la taille de `.tabs .tab .tab-link`, nous avons utilisé `.tab-link`, plus simple.\n\nSur ce point, on n'est plus vraiment dans une discussion sur l'imbrication des sélecteurs, mais plutôt sur les conventions de nommage et sur la méthodologie des sélecteurs. Lorsqu'on utilise BEM par exemple, on nomme les choses selon ce qu'elles sont, plutôt que selon l'endroit où elles sont, ce qui aboutit souvent à des sélecteurs simples (c'est à dire non composés), et donc à moins d'imbrication.\n\nSelon les [directives CSS](http://cssguidelin.es/#css-selectors) de Harry Roberts\u0026nbsp;:\n\nIl est important lorsqu'on écrit du CSS de donner la bonne portée à nos sélecteurs, et de sélectionner la bonne chose pour les bonnes raisons (...) Étant donnée la nature toujours changeante de la plupart des projets UI, et la tendance à aller vers des architectures basées sur des composants, il est de notre intérêt d'appliquer un style aux choses en fonction non de l'endroit où elles sont, mais de ce qu'elles sont.\n\nUne bonne règle générale, s'agissant des sélecteurs CSS, est _plus on fait court et mieux c'est_. Non seulement à tout niveau (performance, simplicité, portabilité, intention, etc.) mais il se trouve qu'il est beaucoup plus simple d'éviter les accidents d'imbrication de sélecteurs lorsque les sélecteurs sont courts.\n\n## Pour conclure\n\nÀ chaque fois que je dis que l'imbrication de sélecteurs n'est pas une bonne idée, les gens me disent \u0026ldquo;mais je n'ai jamais rencontré un tel problème\u0026rdquo;, \u0026ldquo;je l'utilise tous les jours sans problème\u0026rdquo;, \u0026ldquo;c'est parce que tu fais des trucs de dingue avec ça\u0026rdquo;. Bien sûr, il n'y a pas de problème avec la fonctionnalité elle-même.\n\nLes préprocesseurs ne produisent pas de mauvais code, ce sont les mauvais développeurs qui le font. Et ici, on ne parle même pas du résultat produit, mais de ce qu'on entre initialement. Le code devient de moins en moins lisible lorsqu'on y ajoute des couches de complexité supplémentaires. L'imbrication des sélecteurs est l'une d'elles.\n\nOn nous a donné l'imbrication et nous en avons abusé. Puis on nous a donné les fonctions de sélecteurs pour réparer la confusion que nous avions créée. Tout ça est erroné.\n\nUtilisez Sass, ou n'importe quel préprocesseur, pour simplifier votre code, pas pour le rendre plus complexe.\n"},{"slug":"sass-mixin-ou-placeholder","title":"Sass mixin ou placeholder","author":{"name":"Kitty Giraudel","lastname":"Giraudel"},"original":{"date":"30 janvier 2014","site":"Sitepoint","siteUrl":"https://www.sitepoint.com/","postUrl":"https://www.sitepoint.com/sass-mixin-placeholder/","copyright":"2014"},"dateCascade":"8 août 2018","dateMachine":"2O180808","tags":["css","sass"],"about":[],"excerpt":"Kitty Giraudel est un spécialiste internationalement reconnu de Sass. Il explique ici clairement et simplement la différence entre mixin et placeholder, comment utiliser l'un ou l'autre ou... combiner les deux.","featured":false,"featuredImage":"/images/authors/kitty-giraudel.jpeg","order":null,"content":"\nQuand j’ai commencé à m’amuser avec Sass il y a un an et demi, j’ai mis un peu de temps à comprendre la différence entre [inclure un mixin](https://sass-lang.com/guide#topic-6) et [étendre un placeholder](https://sass-lang.com/documentation/at-rules/extend#placeholder-selectors). En fait, la notion même de placeholder relevait un peu de la magie noire pour moi.\n\nSi vous êtes dans le même cas, pas d’inquiétude. Aujourd’hui nous allons apprendre exactement à quoi sert un mixin, et quand utiliser un placeholder. Vous verrez qu’ils ont chacun leur utilité et ne doivent pas être confondus.\n\nRemarque : Je parle ici de Sass, mais ce que je décris pourrait s’appliquer à d’autres préprocesseurs CSS, tels Stylus ou LESS, vous pouvez donc adapter le contenu de cet article à l’outil de votre choix.\n\nPour commencer, un petit rappel sur les mixins et les placeholders.\n\n## Un petit mix\n\nUn mixin est une directive qui vous permet de définir des règles multiples dépendant de plusieurs arguments. Un peu comme une fonction qui au lieu de retourner une valeur renverrait du contenu CSS. Voici la définition donnée par [Sass Reference](https://sass-lang.com/documentation/at-rules/mixin)\u0026nbsp;:\n\n\u003e _Les mixins vous permettent de définir des styles qui peuvent être réutilisés dans votre feuille de style sans avoir besoin de recourir à des classes non-sémantiques telles que `.float-left`. Les mixins peuvent aussi contenir des règles CSS et tout ce qui est permis dans un document Sass. Ils peuvent prendre des arguments qui vous permettent de produire de nombreux styles avec très peu de mixins_.\n\nVoilà pour la terminologie. Supposons maintenant que vous ayez repéré quelques déclarations répétées plusieurs fois dans votre feuille de style. Vous connaissez [le principe DRY](http://fr.wikipedia.org/wiki/Ne_vous_répétez_pas) (Don’t Repeat Yourself) et vous décidez de corriger cela en écrivant un mixin\u0026nbsp;:\n\n```scss\n@mixin center() {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.container {\n  @include center();\n  /* Other styles here... */\n}\n\n/* Other styles... */\n\n.image-cover {\n  @include center;\n}\n```\n\n_NB : si vous ne passez pas d’argument dans votre mixin, vous pouvez omettre les parenthèses. Vous pouvez même les omettre dans la définition du mixin._\n\nAvec ce mixin, vous n’avez pas besoin de répéter ces trois lignes à chaque fois que vous voulez centrer un élément, il suffit d’inclure le mixin. Pratique, non\u0026nbsp;?\n\nParfois vous aurez besoin de construire des \"raccourcis\" pour quelques propriétés. Par exemple, `width` et `height`. N’êtes-vous pas fatigué d’écrire toujours ces mêmes lignes, surtout quand elles ont la même valeur\u0026nbsp;? Réglons ça avec un mixin\u0026nbsp;!\n\n```scss\n@mixin size($width, $height: $width) {\n  width: $width;\n  height: $height;\n}\n```\n\nSimple, n’est-ce pas ? Remarquez que j’ai rendu le paramètre `$height` optionnel en lui donnant la même valeur par défaut que `$width`, directement dans la définition du mixin. Maintenant, à chaque fois que vous voudrez définir les dimensions d’un élément, vous pourrez écrire simplement\u0026nbsp;:\n\n```scss\n.icon {\n  @include size(32px);\n}\n\n.cover {\n  @include size(100%, 10em);\n}\n```\n\n_NB: pour un autre exemple de syntaxe \"sucrée\", vous pouvez consulter [celle](http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/) que j’ai réalisée pour éviter d’avoir à écrire `top`, `right`, `bottom`, `left` et `position` à chaque fois que je veux un positionnement différent de `static`._\n\n## \u003cspan id=\"ph\"\u003ePlaceholders\u003c/span\u003e\n\nLes placeholders sont un peu bizarres. Ce sont des classes qui ne sont pas rendues commes telles lorsque votre SCSS est compilé. Et alors\u0026nbsp;? me direz-vous. En fait, tout irait bien s’il n’y avait cette directive `@extend`. Mais commençons par le commencement, voici comment on écrit un placeholder\u0026nbsp;:\n\n```scss\n%center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n```\n\nEn gros, c’est exactement comme écrire une classe, sauf qu’elle est préfixée avec `%` au lieu d’un point. Le placeholder suit les mêmes règles de nommage que les classes.\n\nSi maintenant vous compilez votre SCSS, vous ne verrez pas ce code dans le fichier généré en CSS. Pour l’instant, ce placeholder est totalement inutile. Pour qu’il serve à quelque chose, il faut utiliser `@extend`\u0026nbsp;:\n\n```scss\n.container {\n  @extend %center;\n}\n```\n\nSass va aller chercher le contenu du placeholder `%center` pour l’appliquer à `.container`.\n\nAutre application extrêmement utile d’`@extend`, vous pouvez étendre des sélecteurs CSS existants, de la façon suivante\u0026nbsp;:\n\n```scss\n.table-zebra {\n  @extend .table;\n\n  tr:nth-of-type(even) {\n    background: rgba(0, 0, 0, 0.5);\n  }\n}\n```\n\nC’est un cas d’usage très courant. Dans l’exemple ci-dessus, nous demandons à la classe `.table-zebra` de se comporter exactement comme la classe `.table` (en étendant les règles relatives à cette dernière), puis nous ajoutons des règles spécifiques à zebra.\n\nL’extension de sélecteurs est très pratique quand vous développez votre site/application avec des composants modulaires. Pour en savoir plus sur le sujet, vous pouvez consulter l’article [Sass : tout sur @extend](/articles/sass-tout-sur-extend/).\n\n## Lequel utiliser ?\n\nEh bien, comme toujours dans notre domaine, _ça dépend_. Cela dépend du contexte et de votre objectif.\n\nLe meilleur conseil serait\u0026nbsp;: si vous avez besoin de variables, utilisez un mixin. Sinon, étendez un placeholder. Il y a deux raisons à cela\u0026nbsp;:\n\n- D’abord, on ne peut pas passer de variables dans un placeholder, donc vous ne pourrez pas générer un CSS spécifique au contexte, comme vous le pourriez avec un mixin.\n- Ensuite, la façon dont Sass gère les mixins les rend assez peu pratiques lorsqu’ils ne sont pas utilisés avec des variables contextuelles. Pour le dire simplement\u0026nbsp;: Sass recopie le rendu de votre mixin à chaque fois que vous l’utilisez, ce qui a pour résultat un code dupliqué (contraire au principe DRY) et des feuilles de styles alourdies.\n\nSi nous reprenons notre tout premier exemple\u0026nbsp;:\n\n```scss\n@mixin center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.container {\n  @include center;\n}\n\n.image-cover {\n  @include center;\n}\n```\n\nLe résultat CSS après compilation sera\u0026nbsp;:\n\n```css\n.container {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.image-cover {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n```\n\nVous remarquez la duplication de CSS. Ce n’est pas bien grave s’il n’y a que 3 lignes de code, mais vous imaginez ce que ça peut donner avec des mixins plus complexes et utilisés plus souvent dans un projet. Essayons de réécrire notre petit exemple en utilisant maintenant un placeholder\u0026nbsp;:\n\n```scss\n%center {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.container {\n  @extend %center;\n}\n\n.image-cover {\n  @extend %center;\n}\n```\n\nVoici le résultat CSS après compilation\u0026nbsp;:\n\n```css\n.container,\n.image-cover {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n```\n\nBeaucoup mieux ! La compilation s’effectue par [groupage de sélecteurs](http://reference.sitepoint.com/css/selectorgrouping), sans répétition de styles. Conclusion\u0026nbsp;: lorsque vous voulez éviter d’écrire les mêmes propriétés, si vous savez qu’elles ne varieront pas, il faut utiliser un placeholder.\n\nPar contre, si vous voulez écrire les mêmes propriétés mais avec des valeurs différentes, le mixin est préférable. Et si vous avez un groupe de valeurs fixes et variables, vous pouvez essayer une combinaison des deux.\n\n```scss\n%center {\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n\n@mixin skin($color, $size) {\n  @extend %center;\n  background: $color;\n  height: $size;\n}\n\na {\n  @include skin(pink, 10em);\n}\nb {\n  @include skin(blue, 90px);\n}\n```\n\nDans cet exemple, le mixin étend le placeholder pour les valeurs fixes, ce qui génère un CSS propre\u0026nbsp;:\n\n```css\na,\nb {\n  margin-left: auto;\n  margin-right: auto;\n  display: block;\n}\n\na {\n  background: pink;\n  height: 10em;\n}\n\nb {\n  background: blue;\n  height: 90px;\n}\n```\n\nEt voilà !\n"},{"slug":"creer-des-systemes-de-menu-accessibles","title":"Créer des systèmes de menu accessibles","author":{"name":"Heydon Pickering","lastname":"Pickering"},"original":{"date":"23 novembre 2017","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2017/11/building-accessible-menu-systems/","copyright":"2017"},"dateCascade":"1er mars 2018","dateMachine":"2O180301","tags":["accessibilite","html","javascript"],"about":["Aria","TechnologiesAssistance","AccessibiliteWeb","Accessibility","ScreenReader","ArbreAccessibilite","Menu"],"excerpt":"Il existe de nombreux types de menus différents sur le Web. Créer des expériences inclusives est une question d'utilisation des bons modèles de menu aux bons endroits, avec le balisage et le comportement adéquats.","featured":false,"featuredImage":"","order":null,"content":"\nNote de l'éditeur : Cet article a été initialement publié dans l'ouvrage [Inclusive Components](https://www.smashingmagazine.com/printed-books/inclusive-components/).\n\nLa classification est difficile. Prenez les crabes, par exemple. Les bernard-l'hermite, les crabes en porcelaine et les limules ne sont pas —\u0026nbsp;taxonomiquement parlant\u0026nbsp;— de vrais crabes. Mais cela ne nous empêche pas d'utiliser le suffixe \"crabe\". La situation devient plus confuse lorsque, au fil du temps et grâce à un processus appelé carcinisation, les faux crabes évoluent pour ressembler davantage aux vrais crabes. C'est le cas du crabe royal, qui aurait été autrefois un bernard-l'hermite. Imaginez la taille de leur carapace\u0026nbsp;!\n\nEn design, nous faisons souvent la même erreur de donner le même nom à des choses différentes. Elles semblent similaires, mais les apparences peuvent être trompeuses. Cela peut avoir un effet malheureux sur la clarté de votre bibliothèque de composants. En termes d'inclusion, cela peut également vous conduire à réaffecter un composant inapproprié sur le plan sémantique et comportemental. Les utilisateurs s'attendront à une chose et en obtiendront une autre.\n\nLe terme \"dropdown\" nomme un exemple classique. Beaucoup de choses \"tombent\" (_drop down_) dans les interfaces, notamment l'ensemble des `\u003coptions\u003e` d'un élément `\u003cselect\u003e`, et la liste de liens révélée par JavaScript qui constitue un sous-menu de navigation. Même nom, mais des choses bien différentes. (Certaines personnes les appellent \"pulldowns\", bien sûr, mais n'en parlons pas).\n\nLes dropdowns composés d'un ensemble d'options sont souvent appelés \"menus\", et je veux en parler ici. Nous allons concevoir un vrai menu, mais il y aura beaucoup à dire en cours de route sur les menus pas vraiment vrais.\n\nCommençons par un quiz. La boîte de liens qui pend de la barre de navigation dans l'illustration est-elle un menu\u0026nbsp;?\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/1-menu-buttons-800w-opt.png\" width=\"800\" height=\"262\" alt=\"Une barre de navigation avec un lien vers une boutique, sous lequel se trouve un ensemble de trois autres liens vers des costumes de chiens, des gaufriers et des orbes magiques respectivement.\"/\u003e\u003cfigcaption\u003eUne barre de navigation avec un lien vers une boutique, sous lequel se trouve un ensemble de trois autres liens vers des costumes de chiens, des gaufriers et des orbes magiques respectivement.\u003c/figcaption\u003e\u003c/figure\u003e\n\nLa réponse est non, ce n'est pas un vrai menu.\n\nUne convention de longue date veut que les schémas de navigation soient composés de listes de liens. Une convention presque aussi ancienne veut que la sous-navigation soit fournie sous forme de listes de liens imbriqués. Si je supprimais le CSS du composant illustré ci-dessus, je devrais voir quelque chose comme ci-dessous, mais coloré en bleu et en Times New Roman.\n\n- Home\n- About\n- Shop\n  - Dog costumes\n  - Waffle irons\n  - Magical orbs\n- Contact\n\nSémantiquement parlant, les listes de liens imbriqués sont correctes dans ce contexte. Les systèmes de navigation sont en réalité des **tables des matières** et c'est ainsi que les tables des matières sont structurées. La seule chose qui nous fait vraiment penser à un \"menu\" est le style des listes imbriquées et la façon dont elles sont révélées au survol ou au focus.\n\nC'est là que certains font fausse route et commencent à ajouter la sémantique WAI-ARIA : `aria-haspopup=\"true\"`, `role=\"menu\"`, `role=\"menuitem\"` etc. Ces éléments ont leur place, comme nous allons le voir, mais pas ici. En voici les deux raisons\u0026nbsp;:\n\n1. Les menus ARIA ne sont pas destinés à la navigation mais au **comportement de l'application**. Imaginez le système de menu d'une application de bureau.\n2. Le lien de niveau supérieur doit être utilisable _comme un lien_, ce qui signifie qu'il ne se comporte pas comme un bouton de menu.\n\nConcernant le point (2) : Lorsque l'on parcourt une région de navigation comportant des sous-menus, on s'attend à ce que chaque sous-menu apparaisse au survol ou au focus du lien de \"niveau supérieur\" (\"Shop\" dans l'illustration). Cela permet à la fois de révéler le sous-menu et de placer ses propres liens dans l'ordre de focalisation. Avec un peu d'aide de JavaScript capturant les événements de focalisation et de floutage pour maintenir l'apparence des sous-menus pendant qu'ils sont nécessaires, une personne utilisant le clavier devrait être capable de parcourir chaque lien de chaque niveau, tour à tour.\n\nLes boutons de menu qui prennent la propriété `aria-haspopup=\"true\"` ne se comportent pas ainsi. Ils sont activés au clic et n'ont d'autre but que de révéler un menu secret.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/2-menu-buttons-800w-opt.png\" width=\"800\" height=\"367\" alt=\"À gauche : un bouton de menu intitulé 'menu' avec une icône de flèche pointant vers le bas et l'état aria-expanded = false. A droite : Le même bouton de menu mais avec le menu ouvert. Ce bouton est dans l'état aria-expanded = true.\" /\u003e\u003cfigcaption\u003eÀ gauche : un bouton de menu intitulé 'menu' avec une icône de flèche pointant vers le bas et l'état aria-expanded = false. A droite : Le même bouton de menu mais avec le menu ouvert. Ce bouton est dans l'état aria-expanded = true.\u003c/figcaption\u003e\u003c/figure\u003e\n\nComme illustré, le fait que ce menu soit ouvert ou fermé doit être communiqué avec `aria-expanded`. Vous ne devez modifier cet état qu'au moment du clic, et non au moment du focus. Les utilisateurs ne s'attendent généralement pas à un changement d'état explicite lors d'un simple événement de focus. Dans notre système de navigation, l'état ne change pas vraiment\u0026nbsp;; c'est juste une astuce de style. D'un point de vue comportemental, nous pouvons avancer par tabulation dans la navigation comme si cette astuce d'affichage et de masquage ne se produisait pas.\n\n## Le problème des sous-menus de navigation\n\nLes sous-menus de navigation (ou \"dropdowns\" pour certains) fonctionnent bien avec une souris ou un clavier, mais ils ne sont pas très performants au toucher. Lorsque vous appuyez pour la première fois sur le lien supérieur \"Boutique\" dans notre exemple, vous lui demandez à la fois d'ouvrir le sous-menu et de suivre le lien.\n\nIl y a deux résolutions possibles ici :\n\n1. Empêcher le comportement par défaut des liens de haut niveau (`e.preventDefault()`) et écrire dans la sémantique et le comportement complets des menus WAI-ARIA.\n2. S'assurer que chaque page de destination de haut niveau possède une table des matières, comme alternative au sous-menu.\n\n(1) n'est pas satisfaisant car, comme je l'ai noté précédemment, ces types de sémantique et de comportements ne sont pas attendus dans ce contexte, où les liens sont les contrôles du sujet. De plus, les utilisateurs ne pourraient plus naviguer vers une page de niveau supérieur, si elle existe.\n\n## Note : quels appareils sont des appareils tactiles\u0026nbsp;?\n\nIl est tentant de penser \"ce n'est pas une super solution, mais je ne l'ajouterai que pour les interfaces tactiles\". Le problème est le suivant\u0026nbsp;: comment détecter si un appareil a un écran tactile\u0026nbsp;?\n\nVous ne devriez certainement pas assimiler \"petit écran\" à \"activé par le toucher\". Ayant travaillé dans le même bureau que des personnes fabriquant des écrans tactiles pour des musées, je peux vous assurer que certains des plus grands écrans qui existent sont des écrans tactiles. Les ordinateurs portables à double clavier et à entrée tactile sont également de plus en plus nombreux.\n\nDe même, beaucoup de petits appareils, mais pas tous, sont des appareils tactiles. Dans le domaine de la conception inclusive, vous ne pouvez pas vous permettre de faire des suppositions.\n\nLa résolution (2) est plus inclusive et plus robuste dans la mesure où elle fournit un \"repli\" pour les utilisateurs de toutes les entrées. Mais les guillemets autour du terme de repli sont délibérés car je pense que les tables de contenu dans les pages sont un moyen _supérieur_ de fournir la navigation.\n\nL'équipe primée des [Services numériques du gouvernement](https://www.gov.uk/guidance/content-design/organising-and-grouping-content-on-gov-uk) semble être d'accord. Vous les avez peut-être aussi vus sur Wikipédia.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/3-gds-wikipedia-opt.png\" width=\"703\" height=\"242\" alt=\"Les tables de contenu de Gov.uk sont minimales avec des tirets comme styles de liste. Wikipedia propose une boîte grise bordée d'éléments numérotés. Les deux sont étiquetés contenus.\" /\u003e\u003cfigcaption\u003eLes tables de contenu de Gov.uk sont minimales avec des tirets comme styles de liste. Wikipedia propose une boîte grise bordée d'éléments numérotés. Les deux sont des contenus étiquetés.\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Tables des matières\n\nLes tables des matières constituent une navigation pour des pages ou des sections de pages connexes et doivent être sémantiquement similaires aux régions de navigation du site principal, en utilisant un élément `\u003cnav\u003e`, une liste et un mécanisme d'étiquetage de groupe.\n\n```html\n\u003cnav aria-labelledby=\"sections-heading\"\u003e\n  \u003ch2 id=\"sections-heading\"\u003eProduits\u003c/h2\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"/produits/costumes-de-chien\"\u003eCostumes-de-chien\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/produits/fers à gaufrer\"\u003eFers à gaufrer\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/produits/magical-orbs\"\u003eMagical orbs\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\n\u003c!-- chaque section, dans l'ordre, ici --\u003e\n```\n\n## Notes\n\n- Dans cet exemple, nous imaginons que chaque section est sa propre page, comme elle l'aurait été dans le sous-menu déroulant.\n- Il est important que chacune de ces pages \"Boutique\" ait la même structure, avec cette table des matières \"Produits\" présente au même endroit. La cohérence favorise la compréhension.\n- La liste regroupe les articles et les énumère en sortie de technologie d'assistance, par exemple via la voix synthétique d'un lecteur d'écran.\n- Le `\u003cnav\u003e` est étiqueté de manière récursive par le titre à l'aide de `aria-labelledby`. Cela signifie que \"navigation produits\" sera annoncé dans la plupart des lecteurs d'écran lorsqu'on entre dans la région par la tabulation. Cela signifie également que la \"navigation des produits\" sera détaillée dans les interfaces d'éléments des lecteurs d'écran, à partir desquels les utilisateurs peuvent naviguer directement vers les régions.\n\n## Tout sur une seule page\n\nSi vous pouvez faire tenir toutes les sections sur une seule page sans qu'elle devienne trop longue et difficile à faire défiler, c'est encore mieux. Il suffit de créer un lien vers l'identifiant de chaque section. Par exemple, `href=\"#waffle-irons\"` devrait pointer vers `id=\"waffle-irons\"`.\n\n```html\n\u003cnav aria-labelledby=\"sections-heading\"\u003e\n    \u003ch2 id=\"sections-heading\"\u003eProduits\u003c/h2\u003e\n    \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#dog-costumes\"\u003eCostumes pour chiens\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=#waffle-irons\"\u003eFers à gaufres\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#magical-orbs\"\u003eLes orbes magiques\u003c/a\u003e\u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/nav\u003e\n\n\u003c!-- section costumes de chiens ici --\u003e\n\u003csection id=\"#waffle-irons\" tabindex=\"-1\"\u003e\n\u003ch2\u003eFers à gaufres\u003c/h2\u003e\n\u003c/section\u003e\n\u003c!-- section orbes magiques ici --\u003e\n```\n\n(Remarque : certains navigateurs sont peu doués pour envoyer réellement le focus sur les fragments de page liés. Placer `tabindex=\"-1\"` sur le fragment cible résout ce problème).\n\nLorsqu'un site a beaucoup de contenu, une architecture d'information soigneusement construite, exprimée par l'utilisation libérale de \"menus\" de tables des matières est infiniment préférable à un système de liste déroulante précaire et peu maniable. Non seulement il est plus facile de le rendre réactif et nécessite moins de code, mais il rend les choses plus claires\u0026nbsp;: là où les listes déroulantes dissimulent la structure, les tables des matières la mettent à nu.\n\nCertains sites, dont le site [gov.uk](https://www.gov.uk/guidance/content-design/organising-and-grouping-content-on-gov-uk) du Government Digital Service, comprennent des pages d'index (ou de \"sujets\") qui ne sont que des tables des matières. C'est un concept tellement puissant que le populaire générateur de sites statiques Hugo [génère de telles pages par défaut](https://gohugo.io/templates/lists/).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/4-menu-buttons-800w-opt.png\" width=\"800\" height=\"261\" alt=\"Diagramme de style arbre généalogique avec la page d'accueil du sujet en haut et deux ramifications de pages individuelles. Chacune des ramifications de la page individuelle possède plusieurs ramifications de section de page.\" /\u003e\u003cfigcaption\u003eDiagramme de type arbre généalogique avec la page d'accueil du sujet en haut et deux ramifications de pages individuelles. Chacune des ramifications de la page individuelle possède plusieurs ramifications de section de page.\u003c/figcaption\u003e\u003c/figure\u003e\n\nL'architecture de l'information est une partie importante de l'inclusion. Un site mal organisé peut être aussi techniquement conforme que vous le souhaitez, il aliènera quand même de nombreux utilisateurs —\u0026nbsp;en particulier ceux souffrant de troubles cognitifs, ou ceux qui sont pressés par le temps.\n\n## Boutons du menu de navigation\n\nTant que nous sommes sur le sujet des faux menus de navigation, il serait négligent de ma part de ne pas parler des boutons de menu de navigation. Vous les avez presque certainement vus désignés par une icône \"hamburger\" ou \"navicon\" à trois lignes.\n\nMême avec une architecture d'information épurée et un seul niveau de liens de navigation, l'espace sur les petits écrans est précieux. En cachant la navigation derrière un bouton, il reste plus de place pour le contenu principal dans la fenêtre d'affichage.\n\nUn bouton de navigation est ce qui se rapproche le plus d'un véritable bouton de menu que nous avons étudié jusqu'à présent. Puisqu'il a pour but de faire basculer la disponibilité d'un menu en cas de clic, il doit\u0026nbsp;:\n\n1. S'identifier comme un bouton, et non un lien ;\n2. Identifier l'état déployé ou replié de son menu correspondant (qui, en termes stricts, est juste une liste de liens).\n\n## Amélioration progressive\n\nMais ne nous emballons pas. Nous devons tenir compte de l'amélioration progressive et examiner comment cela fonctionnerait sans JavaScript.\n\nDans un document HTML non amélioré, on ne peut pas faire grand-chose à faire avec des boutons (à l'exception des boutons de soumission, mais cela n'a rien à voir avec ce que nous voulons réaliser ici). Au lieu de cela, peut-être devrions-nous commencer par un simple lien qui nous amène à la navigation\u0026nbsp;?\n\n```html\n\u003ca href=\"#navigation\"\u003enavigation\u003c/a\u003e\n\u003c!-- un peu de contenu ici peut-être --\u003e\n\n\u003cnav id=\"navigation\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"/\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/shop\"\u003eShop\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/contact\"\u003eContact\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\n```\n\nIl n'y a pas grand intérêt à avoir le lien à moins qu'il n'y ait beaucoup de contenu entre le lien et la navigation. Puisque la navigation du site devrait presque toujours apparaître près du sommet de l'ordre des sources, ce n'est pas nécessaire. Donc, en réalité, un menu de navigation en l'absence de JavaScript devrait juste être... une navigation.\n\n```html\n\u003cnav id=\"navigation\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"/\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/shop\"\u003eShop\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/contact\"\u003eContact\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\n```\n\nVous améliorez ceci en ajoutant le bouton, dans son état initial, et en masquant la navigation (à l'aide de l'attribut `hidden`)\u0026nbsp;:\n\n```html\n\u003cnav id=\"navigation\"\u003e\n  \u003cbutton aria-expanded=\"false\"\u003eMenu\u003c/button\u003e\n  \u003cul hidden\u003e\n    \u003cli\u003e\u003ca href=\"/\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/shop\"\u003eShop\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/contact\"\u003eContact\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\n```\n\nCertains anciens navigateurs —\u0026nbsp;vous savez lesquels\u0026nbsp;— ne prennent pas en charge le mode caché, alors pensez à mettre ce qui suit dans votre CSS. Cela résout le problème car `display : none` cache le menu aux technologies d'assistance et supprime les liens de l'ordre de focus.\n\n```css\n[hidden] {\n  display: none;\n}\n```\n\nTout faire pour prendre en charge les anciens logiciels est, bien sûr, un acte de conception inclusive quand certains navigateurs ne peuvent ou ne veulent pas faire de mise à niveau.\n\n## Placement\n\nLà où beaucoup de gens se trompent, c'est en plaçant le bouton _en dehors_ de la région. Cela signifie que les utilisateurs de lecteurs d'écran qui se déplacent vers le `\u003cnav\u003e` en utilisant un raccourci le trouveraient vide, ce qui n'est pas très utile. Avec la liste cachée aux lecteurs d'écran, ils rencontreraient simplement ceci\u0026nbsp;:\n\n```html\n\u003cnav id=\"navigation\"\u003e\u003c/nav\u003e\n```\n\nVoici comment nous pourrions faire basculer l'état :\n\n```js\nvar navButton = document.querySelector('nav button')\nnavButton.addEventListener('click', function () {\n  let expanded = this.getAttribute('aria-expanded') === 'true' || false\n  this.setAttribute('aria-expanded', !expanded)\n  let menu = this.nextElementSibling\n  menu.hidden = !menu.hidden\n})\n```\n\n## Aria-controls\n\nComme je l'ai écrit dans [Aria-controls Is Poop](https://heydonworks.com/article/aria-controls-is-poop/), l'attribut `aria-controls`, destiné à aider les utilisateurs de lecteurs d'écran à naviguer d'un élément \"contrôlant\" à un élément contrôlé, n'est pris en charge que par le lecteur d'écran JAWS. Vous ne pouvez donc tout simplement pas vous y fier.\n\nEn l'absence d'une bonne méthode pour diriger les utilisateurs entre les éléments, vous devez plutôt vous assurer que l'un des éléments suivants est vrai\u0026nbsp;:\n\n1. Le premier lien de la liste étendue est le suivant dans l'ordre de focalisation après le bouton (comme dans l'exemple de code précédent).\n2. Le premier lien est mis en évidence de manière programmatique lors de la révélation de la liste.\n\nDans ce cas, je recommande (1). C'est beaucoup plus simple, car vous n'avez pas à vous soucier de ramener le focus sur le bouton et sur quel(s) événement(s) le faire. De plus, il n'y a actuellement rien en place pour avertir les utilisateurs que leur focus va être déplacé vers un autre endroit. Dans les vrais menus dont nous parlerons bientôt, c'est le travail de `aria-haspopup=\"true\"`.\n\nL'utilisation des contrôles aria ne fait pas vraiment de mal, sauf qu'elle rend la lecture dans les lecteurs d'écran plus verbeuse. Cependant, certains utilisateurs de JAWS peuvent s'y attendre. Voici comment il serait appliqué, en utilisant l'id de la liste comme chiffre\u0026nbsp;:\n\n```html\n\u003cnav id=\"navigation\"\u003e\n  \u003cbutton aria-expanded=\"false\" aria-controls=\"menu-list\"\u003eMenu\u003c/button\u003e\n  \u003cul id=\"menu-list\" hidden\u003e\n    \u003cli\u003e\u003ca href=\"/\"\u003eHome\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/about\"\u003eAbout\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/shop\"\u003eShop\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"/contact\"\u003eContact\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e\n```\n\n## Les rôles menu et menuitem\n\nUn _vrai_ menu (au sens WAI-ARIA) doit s'identifier comme tel en utilisant le rôle `menu` (pour le conteneur) et, généralement, les enfants `menuitem` ([d'autres rôles enfants peuvent s'appliquer](https://www.w3.org/WAI/tutorials/menus/application-menus/)). Ces rôles parent et enfant fonctionnent ensemble pour fournir des informations aux technologies d'assistance. Voici comment une liste pourrait être augmentée pour avoir une sémantique de menu\u0026nbsp;:\n\n```html\n\u003cul role=\"menu\"\u003e\n  \u003cli role=\"menuitem\"\u003eItem 1\u003c/li\u003e\n  \u003cli role=\"menuitem\"\u003eItem 2\u003c/li\u003e\n  \u003cli role=\"menuitem\"\u003eItem 3\u003c/li\u003e\n\u003c/ul\u003e\n```\n\nPuisque notre menu de navigation commence à se comporter un peu comme un \"vrai\" menu, ces éléments ne devraient-ils pas être présents\u0026nbsp;?\n\nLa réponse courte est : non. La réponse longue est : non, car nos éléments de liste contiennent des liens et [les éléments `menuitem` ne sont pas destinés à avoir des descendants interactifs](https://w3c.github.io/html-aria/#index-aria-menuitem). C'est-à-dire que _ce sont eux_ les contrôles du menu.\n\nNous pourrions, bien sûr, supprimer la sémantique de liste des `\u003cli\u003e`s en utilisant `role=\"presentation\"` ou `role=\"none\"` (qui sont équivalents) et placer le rôle `menuitem` sur chaque lien. Toutefois, cela supprimerait le rôle de lien implicite. En d'autres termes, l'exemple à suivre serait annoncé comme \"Accueil, élément de menu\", et non \"Accueil, lien\" ou \"Accueil, élément de menu, lien\". Les rôles ARIA remplacent simplement les rôles HTML.\n\n```html\n\u003c!-- sera lu comme \"Home, menu item\" --\u003e\n\u003cli role=\"présentation\"\u003e\n  \u003ca href=\"/\" role=\"menuitem\"\u003eHome\u003c/a\u003e\n\u003c/li\u003e\n```\n\nNous voulons que l'utilisateur sache qu'il utilise un lien et qu'il puisse s'attendre à un comportement de lien, donc ce n'est pas bon. Comme je l'ai dit, les vrais menus sont destinés au comportement des applications (pilotées par JavaScript).\n\nCe qui nous reste est une sorte de composant hybride, qui n'est pas tout à fait un vrai menu mais qui indique au moins aux utilisateurs si la liste de liens est ouverte, grâce à l'état `aria-expanded`. C'est un pattern tout à fait satisfaisant pour les menus de navigation.\n\n## Note : L'élément `\u003cselect\u003e` ?\n\nSi vous êtes impliqué dans le design responsif depuis le début, vous vous souvenez peut-être d'un modèle selon lequel la navigation était condensée dans un élément `\u003cselect\u003e` pour les fenêtres d'affichage étroites.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/5-menu-buttons-800w-opt.png\" width=\"800\" height=\"367\" alt=\"téléphone portable avec élément de sélection montrant 'home' sélectionné en haut de la fenêtre.\" /\u003e\u003cfigcaption\u003etéléphone portable avec élément de sélection montrant \"home\" sélectionné en haut de la fenêtre.\u003c/figcaption\u003e\u003c/figure\u003e\n\nComme pour [les boutons de basculement à base de cases à cocher dont nous avons parlé ailleurs](https://inclusive-components.design/toggle-button/), l'utilisation d'un élément natif qui se comporte à peu près comme prévu sans script supplémentaire est un bon choix pour l'efficacité et —\u0026nbsp;surtout sur mobile\u0026nbsp;— les performances. Et les éléments `\u003cselect\u003e` _sont_ d'une certaine manière des menus, avec une sémantique similaire à celle du menu déclenché par un bouton que nous allons bientôt construire.\n\nToutefois, tout comme pour le bouton de basculement de la case à cocher (_checkbox toggle button_), nous utilisons un élément associé à la saisie d'une entrée, et non pas simplement au fait de faire un choix. Cela risque de créer une certaine confusion chez de nombreux utilisateurs —\u0026nbsp;d'autant plus que ce modèle utilise JavaScript pour que l'`\u003coption\u003e` sélectionnée se comporte comme un lien. Le changement de contexte inattendu qui en découle est considéré comme un échec selon le critère 3.2.2 On Input (Level A) des WCAG.\n\n## Les vrais menus\n\nMaintenant que nous avons parlé des faux menus et des quasi-menus, le moment est venu de créer un _vrai menu_, tel qu'ouvert et fermé par un vrai bouton de menu. À partir de maintenant, je ferai référence au bouton et au menu ensemble comme étant simplement un \"bouton de menu\".\n\nMais à quels égards notre bouton de menu sera-t-il vrai\u0026nbsp;? Eh bien, il s'agira d'un composant de menu destiné à choisir des options dans l'application concernée, qui implémente toute la sémantique attendue et les comportements correspondants à considérer comme conventionnels pour un tel outil.\n\nComme nous l'avons déjà mentionné, ces conventions proviennent de la conception d'applications de bureau. L'attribution ARIA et la gestion du focus régie par JavaScript sont nécessaires pour les imiter pleinement. L'objectif d'ARIA est en partie d'aider les développeurs Web à créer des expériences Web riches sans rompre avec les conventions d'utilisation forgées dans le monde natif.\n\nDans cet exemple, nous allons imaginer que notre application est une sorte de jeu ou de quiz. Notre bouton de menu permettra à l'utilisateur de choisir un niveau de difficulté. Avec toute la sémantique en place, le menu ressemble à ceci\u0026nbsp;:\n\n```html\n\u003cbutton aria-haspopup=\"true\" aria-expanded=\"false\"\u003e\n  Difficulty \u003cspan aria-hidden=\"true\"\u003e\u0026#x25be;\u003c/span\u003e\n\u003c/button\u003e\n\u003cdiv role=\"menu\"\u003e\n  \u003cbutton role=\"menuitem\"\u003eEasy\u003c/button\u003e\n  \u003cbutton role=\"menuitem\"\u003eMedium\u003c/button\u003e\n  \u003cbutton role=\"menuitem\"\u003eIncredibly Hard\u003c/button\u003e\n\u003c/div\u003e\n```\n\n## Notes\n\n- La propriété `aria-haspopup` indique simplement que le bouton sécrète un menu. Elle avertit que, lorsque le bouton est pressé, l'utilisateur sera déplacé vers le menu \"popup\" (nous couvrirons le comportement du focus sous peu). Sa valeur ne change pas —\u0026nbsp;elle reste `true` à tout moment.\n- Le `\u003cspan\u003e` à l'intérieur du bouton contient le point unicode d'un petit triangle noir pointant vers le bas. Cette convention indique visuellement ce que l'`aria-haspopup` fait non visuellement —\u0026nbsp;qu'en appuyant sur le bouton, quelque chose sera révélé en dessous. L'attribut `aria-hidden=\"true\"` empêche les lecteurs d'écran d'annoncer \"triangle pointant vers le bas\" ou autre. Grâce à `aria-haspopup`, elle n'est pas nécessaire dans le contexte non visuel.\n- La propriété `aria-haspopup` est complétée par `aria-expanded`. Celle-ci indique à l'utilisateur l'état actuel du menu, ouvert (développé) ou fermé (replié), en basculant entre les valeurs `true` et `false`.\n- Le menu lui-même prend le rôle (bien nommé) de `menu`. Il prend des descendants avec le rôle `menuitem`. Il n'est pas nécessaire qu'ils soient des enfants _directs_ de l'élément menu, mais ils le sont dans ce cas, pour des raisons de simplicité.\n\n## Comportement du clavier et du focus\n\nLorsqu'il s'agit de rendre les contrôles interactifs accessibles au clavier, la meilleure chose que vous puissiez faire est d'utiliser les bons éléments. Comme nous utilisons ici des éléments `\u003cbutton\u003e`, nous pouvons être sûrs que les événements de clic se déclencheront lors de la frappe des touches _Entrée_ et _Espace_, [comme spécifié dans l'interface `HTMLButtonElement`](https://developer.mozilla.org/fr/docs/Web/API/HTMLButtonElement). Cela signifie également que nous pouvons désactiver les éléments de menu à l'aide de la propriété `disabled` associée au bouton.\n\nMais l'interaction clavier des boutons de menu ne s'arrête pas là. Voici un résumé de tous les comportements de focus et de clavier que nous allons mettre en œuvre, sur la base des [pratiques de création WAI-ARIA 1.1](https://www.w3.org/WAI/ARIA/apg/#menubutton)\u0026nbsp;:\n\n\u003ctable class=\"specificTable\" data-tablesaw-mode=\"swipe\" data-tablesaw-minimap=\"\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd data-label=\"\"\u003e\u003ckbd\u003eEntrée\u003c/kbd\u003e, \u003ckbd\u003eEspace\u003c/kbd\u003e ou \u003ckbd\u003e↓\u003c/kbd\u003e sur le bouton de menu\u003c/td\u003e\u003ctd data-label=\"\"\u003eOuvre le menu\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd data-label=\"\"\u003e\u003ckbd\u003e↓\u003c/kbd\u003e sur un élément de menu\u003c/td\u003e\u003ctd data-label=\"\"\u003eDéplace le focus vers l'élément de menu suivant, ou le premier élément de menu si vous êtes sur le dernier\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd data-label=\"\"\u003e\u003ckbd\u003e↑\u003c/kbd\u003e sur un élément de menu\u003c/td\u003e\u003ctd data-label=\"\"\u003eDéplace le focus sur l'élément de menu précédent, ou le dernier élément de menu si vous êtes sur le premier\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd data-label=\"\"\u003e\u003ckbd\u003e↑\u003c/kbd\u003e sur le bouton de menu\u003c/td\u003e\u003ctd data-label=\"\"\u003eFerme le menu s'il est ouvert\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd data-label=\"\"\u003e\u003ckbd\u003eEsc\u003c/kbd\u003e sur un élément de menu\u003c/td\u003e\u003ctd data-label=\"\"\u003eFerme le menu et met le focus sur le bouton de menu\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n \nL'avantage de déplacer le focus entre les éléments de menu à l'aide des touches fléchées est que la tabulation est préservée pour sortir du menu. Dans la pratique, cela signifie que les utilisateurs ne doivent pas passer par chaque élément de menu pour quitter le menu —\u0026nbsp;une énorme amélioration pour la convivialité, surtout lorsqu'il y a beaucoup d'éléments de menu.\n\nL'application de `tabindex=\"-1\"` rend les éléments de menu non focusables par `Tab` mais préserve la possibilité de focaliser les éléments de manière programmatique, lors de la capture des frappes sur les touches fléchées.\n\n```html\n\u003cbutton aria-haspopup=\"true\" aria-expanded=\"false\"\u003e\n  Difficulty \u003cspan aria-hidden=\"true\"\u003e\u0026#x25be;\u003c/span\u003e\n\u003c/button\u003e\n\u003cdiv role=\"menu\"\u003e\n  \u003cbutton role=\"menuitem\" tabindex=\"-1\"\u003eEasy\u003c/button\u003e\n  \u003cbutton role=\"menuitem\" tabindex=\"-1\"\u003eMedium\u003c/button\u003e\n  \u003cbutton role=\"menuitem\" tabindex=\"-1\"\u003eIncredibly Hard\u003c/button\u003e\n\u003c/div\u003e\n```\n\n## La méthode \"open\"\n\nDans le cadre d'une bonne conception d'API, nous pouvons construire des méthodes pour gérer les différents événements.\n\nPar exemple, la méthode `open` doit faire passer la valeur `aria-expanded` à `true`, changer la propriété `hidden` du menu à `false`, et focaliser le premier `menuitem` du menu qui n'est pas désactivé\u0026nbsp;:\n\n```js\nMenuButton.prototype.open = function () {\n    this.button.setAttribute('aria-expanded', true) ;\n    this.menu.hidden = false ;\n    this.menu.querySelector(':not(\\[disabled]))').focus() ;\n    retourner ceci ;\n}\n```\n\nNous pouvons exécuter cette méthode lorsque l'utilisateur appuie sur la touche flèche vers le bas sur une instance de bouton de menu focalisée\u0026nbsp;:\n\n```js\nthis.button.addEventListener(\n  'keydown',\n  function (e) {\n    if (e.keyCode === 40) {\n      this.open()\n    }\n  }.bind(this)\n)\n```\n\nEn outre, un développeur utilisant ce script pourra désormais ouvrir le menu de manière programmatique\u0026nbsp;:\n\n```js\nexampleMenuButton = new MenuButton(document.querySelector('\\[aria-haspopup]])) ;\nexampleMenuButton.open() ;\n```\n\n## Note : Le hack des cases à cocher\n\nDans la mesure du possible, il est préférable de ne pas utiliser JavaScript, sauf si vous en avez besoin. L'implication d'une troisième technologie au-dessus de HTML et CSS est nécessairement une augmentation de la complexité et de la fragilité du système. Cependant, les composants ne peuvent pas tous être construits de manière satisfaisante sans JavaScript dans le mix.\n\nDans le cas des boutons de menu, l'enthousiasme pour les faire \"fonctionner sans JavaScript\" a conduit à ce que l'on appelle le \"checkbox hack\". Il s'agit d'utiliser l'état coché (ou non coché) d'une case à cocher cachée pour basculer la visibilité d'un élément de menu à l'aide de CSS.\n\n```css\n/* menu fermé */\n[type='checkbox'] + [role='menu'] {\n  display: none;\n}\n\n/* menu ouvert */\n[type='checkbox']:checked + [role='menu'] {\n  display: block;\n}\n```\n\nPour les utilisateurs de lecteurs d'écran, le rôle de la case à cocher et l'état coché n'ont aucun sens dans ce contexte. Ce problème peut être partiellement résolu en ajoutant `role=\"bouton\"` à la case à cocher.\n\n```html\n\u003cinput type=\"checkbox\" role=\"button\" aria-haspopup=\"true\" id=\"toggle\" /\u003e\n```\n\nMalheureusement, cela supprime la communication implicite de l'état coché, nous privant ainsi d'un retour d'état sans JavaScript (même s'il aurait été pauvre en tant que \"coché\" dans ce contexte).\n\nMais il est possible de parodier l'`aria-expanded`. Il suffit de fournir à notre étiquette deux `\u003cspan\u003e` comme ci-dessous.\n\n```html\n\u003cinput type=\"checkbox\" role=\"button\" aria-haspopup=\"true\" id=\"toggle\" class=\"vh\"\u003e\n\u003clabel for=\"toggle\" data-opens-menu\u003e Difficulty \u003cspan class=\"vh expanded-text\"\u003eexpanded\u0026lt;/span\u003e\n    \u003cspan class=\"vh collapsed-text\"\u003ecollapsed\u003c/span\u003e\n    \u003cspan aria-hidden=\"true\"\u003e\u0026#x25be;\u003c/span\u003e\n\u003c/label\u003e\n```\n\nCes deux éléments sont masqués visuellement à l'aide de [la classe `visually-hidden`](https://www.a11yproject.com/posts/how-to-hide-content/), mais —\u0026nbsp;selon l'état dans lequel nous nous trouvons\u0026nbsp;— un seul est également masqué aux lecteurs d'écran. C'est-à-dire qu'un seul a `display : none`, et ceci est déterminé par l'état coché existant (mais non communiqué)\u0026nbsp;:\n\n```css\n/* classe pour masquer visuellement les spans */\n.vh {\n  position: absolute !important ;\n  clip: rect(1px, 1px, 1px, 1px);\n  padding: 0 !important ;\n  border: 0 !important ;\n  height: 1px !important ;\n  width: 1px !important ;\n  overflow: hidden;\n}\n\n/* révéler le libellé d'état correct aux lecteurs d'écran en fonction de l'état */\n\n[type='checkbox']:checked + label .expanded-text {\n  display: inline;\n}\n\n[type='checkbox']:checked + label .collapsed-text {\n  display: none;\n}\n\n[type='checkbox']:not(:checked) + label .expanded-text {\n  display: none;\n}\n\n[type='checkbox']:not(:checked) + label .collapsed-text {\n  display: inline;\n}\n```\n\nC'est très astucieux, mais notre bouton de menu est toujours incomplet, car les comportements de focus attendus dont nous avons parlé ne peuvent pas être mis en œuvre sans JavaScript.\n\nCes comportements sont conventionnels et attendus, ce qui rend le bouton plus utilisable. Cependant, si vous avez vraiment besoin d'implémenter un bouton de menu sans JavaScript, c'est à peu près ce que vous pouvez faire de mieux. Étant donné que le bouton de menu de navigation réduit dont j'ai parlé précédemment offre un contenu de menu qui ne dépend pas lui-même de JavaScript (c'est-à-dire des liens), cette approche peut être une option appropriée.\n\nPour le plaisir, voici un codePen implémentant un bouton de menu de navigation sans JavaScript.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vmKVJK\" src=\"//codepen.io/heydon/embed/vmKVJK?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=vmKVJK\u0026amp;user=heydon\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir le \u003ca href=\"https://codepen.io/heydon/pen/vmKVJK\"\u003e\n  Navigation menu button example no JS\u003c/a\u003e de heydon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n(Note : Seule la barre d'espace ouvre le menu).\n\n## L'événement \"choisir\"\n\nL'exécution de certaines méthodes doit émettre des événements afin que nous puissions mettre en place des écouteurs (_listeners_). Par exemple, nous pouvons émettre un événement `choose` lorsqu'un utilisateur clique sur un élément de menu. Nous pouvons le configurer en utilisant `CustomEvent`, qui nous permet de passer un argument à la propriété `detail` de l'événement. Dans ce cas, l'argument (`choice`) serait le nœud DOM de l'élément de menu choisi.\n\n```js\nMenuButton.prototype.choose = function (choice) {\n  // Define the 'choose' event\n  var chooseEvent = new CustomEvent('choose', {\n    detail: {\n      choice: choice,\n    },\n  })\n  // Dispatch the event\n  this.button.dispatchEvent(chooseEvent)\n  return this\n}\n```\n\nIl y a toutes sortes de choses que nous pouvons faire avec ce mécanisme. Peut-être avons-nous une région active configurée avec un id de `menuFeedback`\u0026nbsp;:\n\n```html\n\u003cdiv role=\"alert\" id=\"menuFeedback\"\u003e\u003c/div\u003e\n```\n\nMaintenant, nous pouvons configurer un écouteur et remplir la région en direct avec les informations sécrétées dans l'événement\u0026nbsp;:\n\n```js\nexampleMenuButton.addEventListener('choose', function (e) {\n  // Get the node's text content (label)\n  var choiceLabel = e.details.choice.textContent\n\n  // Get the live region node\n  var liveRegion = document.getElementById('menuFeedback')\n\n  // Populate the live region\n  liveRegion.textContent = 'Your difficulty level is ${choiceLabel}'\n})\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/6-menu-buttons-800w-opt.png\" width=\"800\" height=\"257\" alt=\"Lorsqu'un utilisateur choisit une option, le menu se ferme et le focus est renvoyé sur le bouton de menu. Il est important que les utilisateurs soient ramenés à l'élément déclencheur après la fermeture du menu.\"/\u003e\u003cfigcaption\u003eLorsqu'un utilisateur choisit une option, le menu se ferme et le focus est renvoyé sur le bouton de menu. Il est important que les utilisateurs soient ramenés à l'élément déclencheur après la fermeture du menu.\u003c/figcaption\u003e\u003c/figure\u003e\n\nLorsqu'un élément de menu est sélectionné, l'utilisateur du lecteur d'écran entend \"Vous avez choisi [étiquette de l'élément de menu]\". Une région en direct (définie ici avec l'attribution `role=\"alert\"`) annonce son contenu dans les lecteurs d'écran chaque fois que ce contenu change. La région en direct n'est pas obligatoire, mais c'est un exemple de ce qui pourrait se passer dans l'interface en réponse au choix de l'utilisateur dans le menu.\n\n## Choix persistants\n\nTous les éléments de menu ne servent pas à choisir des paramètres persistants. Beaucoup d'entre eux agissent comme des boutons standard qui déclenchent quelque chose dans l'interface lorsqu'on appuie. Cependant, dans le cas de notre bouton de menu de difficulté, nous aimerions indiquer quel est le paramètre de difficulté actuel —\u0026nbsp;celui choisi en dernier.\n\nL'attribut `aria-checked=\"true\"` fonctionne pour les éléments qui, au lieu de `menuitem`, prennent le rôle de `menuitemradio`. Le balisage amélioré, avec le deuxième élément coché (défini) ressemble à ceci\u0026nbsp;:\n\n```html\n\u003cbutton aria-haspopup=\"true\" aria-expanded=\"false\"\u003e\n  Difficulty\n  \u003cspan aria-hidden=\"true\"\u003e\u0026#x25be;\u003c/span\u003e\n\u003c/button\u003e\n\u003cdiv role=\"menu\"\u003e\n  \u003cbutton role=\"menuitemradio\" tabindex=\"-1\"\u003eEasy\u003c/button\u003e\n  \u003cbutton role=\"menuitemradio\" aria-checked=\"true\" tabindex=\"-1\"\u003eMedium\u003c/button\u003e\n  \u003cbutton role=\"menuitemradio\" tabindex=\"-1\"\u003eIncredibly Hard\u003c/button\u003e\n\u003c/div\u003e\n```\n\nLes menus natifs de nombreuses plateformes indiquent les éléments choisis à l'aide de coches. Nous pouvons le faire sans problème en utilisant un peu de CSS supplémentaire\u0026nbsp;:\n\n```css\n[role='menuitem'] [aria-checked='true']::before {\n  content: '\\2713\\0020';\n}\n```\n\nLorsque vous parcourez le menu avec un lecteur d'écran en cours d'exécution, le fait de mettre le focus sur cet élément coché entraînera une annonce du type \"case à cocher, élément de menu moyen, coché\".\n\nLe comportement à l'ouverture d'un menu avec un `menuitemradio` coché diffère légèrement. Au lieu de focaliser le premier élément (activé) du menu, c'est l'élément _coché_ qui est focalisé.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/7-menu-buttons-large-opt.png\" width=\"707\" height=\"220\" alt=\"Le bouton de menu démarre avec le menu non ouvert. À l'ouverture, le deuxième paramètre de difficulté (moyen) est mis en évidence. Il est préfixé d'une coche en fonction de la présence de l'attribut aria-checked.\"/\u003e\u003cfigcaption\u003eLe bouton de menu démarre avec le menu non ouvert. À l'ouverture, le deuxième paramètre de difficulté (moyen) est mis en évidence. Il est préfixé d'une coche en fonction de la présence de l'attribut aria-checked.\u003c/figcaption\u003e\u003c/figure\u003e\n\nQuel est l'avantage de ce comportement ? L'utilisateur (tout utilisateur) se voit rappeler l'option qu'il a précédemment sélectionnée. Dans les menus comportant de nombreuses options incrémentielles (par exemple, un ensemble de niveaux de zoom), les personnes opérant par clavier sont placées dans la position optimale pour effectuer leur réglage.\n\n## Utilisation du bouton de menu avec un lecteur d'écran\n\nDans cette vidéo, je vais vous montrer comment utiliser le bouton de menu avec le lecteur d'écran Voiceover et Chrome. L'exemple utilise des éléments avec `menuitemradio`, `aria-checked` et le comportement focus discuté. On peut s'attendre à des expériences similaires dans toute la gamme des logiciels de lecture d'écran populaires.\n\n\u003ciframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Aw_HMHdId88\" frameborder=\"0\" allowfullscreen=\"\"\u003e\u003c/iframe\u003e\n\n## Bouton de menu inclusif sur Github\n\n[Kitty Giraudel](/auteurs/kitty-giraudel) et moi avons travaillé ensemble sur la création d'un composant de bouton de menu avec les fonctionnalités API que j'ai décrites, et plus encore. Vous devez remercier Hugo pour bon nombre de ces fonctionnalités, car elles sont basées sur le travail qu'il a effectué sur [a11y-dialog](https://github.com/KittyGiraudel/a11y-dialog) —\u0026nbsp;un dialogue modal accessible. Il est disponible sur [Github](https://github.com/Heydon/inclusive-menu-button) et NPM\u0026nbsp;:\n\n```js\nnpm i inclusive-menu-button --save\n```\n\nEn outre, Kitty a créé [une version React](https://github.com/KittyGiraudel/react-menu-button) pour votre délectation.\n\n## Liste de contrôle\n\n- N'utilisez pas la sémantique de menu ARIA dans les systèmes de menu de navigation.\n- Sur les sites à riche contenu, ne cachez pas la structure dans des menus de navigation imbriqués et alimentés par des menus déroulants.\n- Utilisez `aria-expanded` pour indiquer l'état ouvert/fermé d'un menu de navigation activé par un bouton.\n- Assurez-vous que ledit menu de navigation est le prochain dans l'ordre de focus après le bouton qui l'ouvre/le ferme.\n- Ne sacrifiez jamais la convivialité à la recherche de solutions sans JavaScript. C'est de la vanité.\n"},{"slug":"sass-et-interpolation","title":"Sass et interpolation","author":{"name":"Kitty Giraudel","lastname":"Giraudel"},"original":{"date":"24 juin 2014","site":"Webdesign Tuts+","siteUrl":"https://webdesign.tutsplus.com/","postUrl":"https://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375","copyright":"2014"},"dateCascade":"4 novembre 2017","dateMachine":"2O171104","tags":["css","sass"],"about":[],"excerpt":"Tout ce que vous avez toujours voulu savoir sur l'interpolation dans Sass, expliqué par Kitty Giraudel. Une bonne introduction toute simple et les cas d'utilisation principaux, pour interpoler avec plaisir.","featured":false,"featuredImage":"/images/authors/kitty-giraudel.jpeg","order":null,"content":"\nDepuis quelque temps vous jouez avec Sass, ça vous plaît bien et ça répond à la plupart de vos besoins, mais il y a ce truc que vous ne comprenez toujours pas très bien\u0026nbsp;: _l'interpolation_ -\u0026nbsp;insérer des valeurs à l'intérieur d'autres valeurs. Eh bien nous allons y mettre un peu de clarté/\n\n## Interpo... quoi ?\n\nL'interpolation, qu'on appelle aussi _interpolation de variable_ ou _substitution de variable_ n'est pas une originalité de Sass, en fait on la trouve dans de nombreux langages (PHP, Perl, Ruby, Tcl, Groovy, Unix shells...). On parle souvent d'_interpoler une variable_ ou d'_interpoler une expression_. Pour le dire vite, interpoler consiste à évaluer une expression ou une chaîne de caractères contenant une ou plusieurs variables, et à remplacer lesdites variables par leurs valeurs correspondantes stockées en mémoire.\n\nHmmm...\n\nBon, prenons un exemple. Si vous avez des notions de PHP, ce sera facile à comprendre. Admettons que vous vouliez afficher une chaîne de caractères contenant une variable. La façon habituelle de le faire est\u0026nbsp;:\n\n```php\n$description = \"awesome\";\necho \"Tuts+ is \" . $description . \"!\";\n```\n\nCeci n'est pas une interpolation. C'est une _\u003econcaténation_ de caractères. En gros, on accroche ensemble trois chaînes de caractères\u0026nbsp;: `\"Tuts+ is \"` , `\"awesome\"` et `\"!\"`. Mais nous pourrions tout aussi bien utiliser l'interpolation\u0026nbsp;:\n\n```php\n$description = \"awesome\";\necho \"Tuts+ is ${description}!\";\n```\n\nLes accolades qui entourent la variable indiquent à PHP d'afficher la valeur de la variable à l'intérieur de la chaîne de caractères. Remarquez au passage qu'il faut des guillemets pour que ça marche en PHP (comme dans la plupart des langages).\n\nVoilà pour l'interpolation de variable ou d'expression. Vous pouvez utiliser la concaténation ou l'interpolation, comme vous voulez, mais disons que l'interpolation apporte un surcroît de douceur syntactique.\n\n## Et Sass là-dedans ?\n\nRegardons maintenant comment fonctionne la substitution de variable dans Sass.\n\nLes noms de variables, dans Sass comme dans PHP, portent le préfixe `$`. La comparaison s'arrête là, car pour l'interpolation Sass et PHP se comportent différemment. La raison est que Sass est construit en Ruby, qui utilise `#{}` pour la substitution d'expression.\n\nEn Sass vous feriez\u0026nbsp;:\n\n```scss\n$description: 'awesome';\n@warn \"Tuts+ is #{$description}!\";\n```\n\nRemarquez qu'avec Sass le signe `$` n'est pas supprimé dans le nom de la variable, contrairement à PHP. Celle-ci est simplement encapsulée, avec `$`, à l'intérieur de `#{}`. À remarquer également le fait que vous pouvez interpoler n'importe quel type de variable, pas uniquement des chaînes de caractères. Par exemple\u0026nbsp;:\n\n```scss\n$answer: 42;\n@warn \"The Answer to the Ultimate Question of Life, the Universe, and Everything is #{$answer}.\";\n```\n\n## Quand utiliser l'interpolation ?\n\nMaintenant que nous avons compris ce qu'est l'interpolation et comment elle fonctionne dans Sass, il est temps de passer à des cas d'utilisation. Pour le premier, nous allons reprendre ce que nous venons de faire avec la directive `@warn`, qui affiche un contenu dans la console.\n\n### Chaînes de caractères\n\nSupposons que vous ayez une _map_ de couleurs que vous avez appelée `$colors` (une _map_ est une variable qui emmagasine des paires de clés/valeurs, comme une table ou un [array](http://en.wikipedia.org/wiki/Array)), mais que vous en ayez assez de taper `map-get($colors, ...)`\u0026nbsp;: vous construisez une petite fonction `color()` qui va chercher la couleur correspondant à la clé passée en argument. C'est très simple\u0026nbsp;:\n\n```scss\n// _config.scss\n$colors: (\n  'primary': tomato,\n  'secondary': hotpink,\n);\n// _function.scss\n@function color($key) {\n  @return map-get($colors, $key);\n}\n\n// _component.scss\n.el {\n  background-color: color(primary);\n}\n```\n\nPas mal, mais il faudrait y ajouter un message d'alerte au cas où la clé n'existerait pas, ou si vous faites une faute de frappe (au passage, cette [introduction au traitement des erreurs](http://webdesign.tutsplus.com/tutorials/an-introduction-to-error-handling-in-sass--cms-19996) peut vous intéresser). Pour ce faire, on utilise la directive `@warn` à l'intérieur de la fonction `color()`.\n\n```scss\n@function color($key) {\n  @if not map-has-key($colors, $key) {\n    @warn \"Key not found.\";\n  }\n  @return map-get($colors, $key);\n}\n```\n\nOK, et maintenant si vous avez envie d'identifier la clé qui n'a pas été trouvée\u0026nbsp;:\n\n```scss\n@function color($key) {\n  @if not map-has-key($colors, $key) {\n    @warn \"Key `#{$key}` not found.\";\n  }\n  @return map-get($colors, $key);\n}\n```\n\nEt boum, voilà notre interpolation de variable. Appeler `color(awesomeness)` enverra le message suivant dans la console\u0026nbsp;: `Key 'awesomeness' not found`.\n\nC'est bien, mais nous ne connaissons pas réellement le contexte. Pour nous aider à l'avenir, nous pourrions ajouter le nom de la table (map) à l'intérieur du message d'erreur.\n\n```scss\n@function color($key) {\n  @if not map-has-key($colors, $key) {\n    @warn \"Key `#{$key}` not found in $colors map.\";\n  }\n  @return map-get($colors, $key);\n}\n```\n\nDans ce cas, puisque la variable `$colors` n'a pas été interpolée, son nom sera affiché dans le message d'erreur. `Key 'awesomeness' not found in $colors map.`\n\n### Fonctions CSS\n\nJusqu'à présent, nous avons vu le cas d'utilisation le plus banal de substitution de variable\u0026nbsp;: afficher le contenu d'une variable à l'intérieur d'une chaîne de caractères. C'est un bon exemple, mais il y en a un encore meilleur\u0026nbsp;: les variables dans les fonctions CSS, par exemple dans [`calc()`](http://www.alsacreations.com/article/lire/1630-la-fonction-calc-en-css.html).\n\nAdmettons que vous vouliez dimensionner votre container principal en fonction de la largeur du sidebar. Comme vous êtes un développeur consciencieux, vous avez enregistré cette largeur dans une variable, vous pouvez donc écrire ceci\u0026nbsp;:\n\n```scss\n$sidebar-width: 250px;\n.main {\n  width: calc(100% - $sidebar-width);\n}\n```\n\nEt là, surprise ! Ça ne marche pas. Il n'y a pas d'erreur Sass, mais votre container n'est pas dimensionné comme il faut. Si vous inspectez ses styles avec DevTools, vous verrez ceci -\u0026nbsp;rayé parce que c'est invalide\u0026nbsp;: `t.main {width: calc(100% - $sidebar-width);}`\n\nPenchons-nous là-dessus une minute. `calc()`est une fonction CSS, pas une fonction Sass. Cela signifie que Sass interprète l'expression tout entière comme une chaîne de caractères. Pour le vérifier, vous pouvez faire\u0026nbsp;:\n\n```scss\n$type-of-expression: type-of(calc(100% - $sidebar-width));\n// string\n```\n\nPuisque c'est une chaîne de caractères, Sass se comporte comme précédemment avec `$colors` dans notre chaîne de caractères `@warn`\u0026nbsp;, donc `$sidebar-width` est considéré comme une chaîne de caractères et elle est affichée comme telle. Mais ce n'est pas ce que nous voulons, n'est-ce pas\u0026nbsp;? Alors interpolons\u0026nbsp;!\n\n```scss\nt.main {\n  width: calc(100% - #{$sidebar-width});\n}\n```\n\nMaintenant, lorsque Sass compile la feuille de style, il remplace `#{$sidebar-width}` par la valeur associée à `$sidebar-width`, dans ce cas `250px`, ce qui donne l'expression CSS valide suivante\u0026nbsp;: `t.main {width: calc(100% - 250px);}`\n\nMission accomplie ! Nous avons parlé de `calc()`, mais nous aurions pu utiliser `url()`, `linear-gradient()`, `radial-gradient()`, `cubic-bezier()` et toute autre fonction CSS native, y compris toutes les [pseudo-classes](http://la-cascade.io/articles/combinateurs-et-pseudo-classes-css/).\n\nPar exemple :\n\n```scss\nt@for $i from 1 through $max {\n  .el:nth-of-type(#{$i}) {\n    // ...\n  }\n}\n```\n\nC'est un cas que vous avez sans doute déjà rencontré\u0026nbsp;: l'utilisation d'une boucle `for` en conjonction avec les sélecteurs `:nth-*()`. Là encore, vous devez interpoler la variable pour qu'elle apparaisse correctement dans le CSS final.\n\nEn résumé : Sass traite les fonctions CSS comme des chaînes de caractères, ce qui vous impose d'échapper toute variable utilisée dans la fonction si vous voulez que le CSS soit correct.\n\n### Directives CSS\n\nPassons maintenant à un autre cas intéressant d'utilisation de l'interpolation, les directives CSS comme `@support`, `@page` et surtout `@media`.\n\nIl s'agit ici de la façon dont Sass analyse les directives CSS `@`, en particulier la directive media. J'ai mis mon nez dans le code Sass et, bien que mon niveau de Ruby ne soit pas top, j'ai trouvé des choses intéressantes\u0026nbsp;:\n\n```ruby\ndef query_expr\n  interp = interpolation\n  return interp if interp\n  return unless tok(/\\(/)\n  res = ['(']\n  ss\n  res \u003c\u003c sass_script(:parse)\n\n  if tok(/:/)\n    res \u003c\u003c ': '\n    ss\n    res \u003c\u003c sass_script(:parse)\n  end\n  res \u003c\u003c tok!(/\\)/)\n  ss\n  res\nend\n```\n\nEn gros, les premières lignes disent à Sass de retourner la media query s'il y a une expression interpolée, ou une erreur, sauf s'il trouve une ouverture de parenthèse, auquel cas il doit continuer et analyser le reste. Essayons avec un exemple\u0026nbsp;:\n\n```scss\n$value: screen;\n\n@media $value {\n  // ...\n}\n```\n\nSans surprise, c'est un échec :  \n`Invalid CSS after \"@media\": expected media query (e.g. print, screen, print and screen), was \"$value{\"`\n\nComme l'indique le message d'erreur, Sass attendait une media query. Il faut interpoler votre variable si elle arrive juste après `@media`, par exemple\u0026nbsp;:\n\n```scss\n$value: screen;\n\n@media #{$value} {\n  // ...\n}\n```\n\nComme nous l'avons déduit de notre petite escapade en Ruby, si `@media` est directement suivi de parenthèses `()`, nous n'avons plus besoin d'interpoler la variable parce que Sass évaluera tout ce qui se trouve à l'intérieur des parenthèses. Par exemple\u0026nbsp;:\n\n```scss\n$value: 1336px;\n\n@media (max-width: $value) {\n  // ...\n}\n```\n\nDans ce cas, Sass évalue l'expression `(max-width: $value)`, la transforme en `(max-width: 1337px)` pour aboutir à un résultat CSS valide, il n'y a donc pas besoin d'échapper la variable.\n\nPourquoi les développeurs de Sass l'ont-ils conçu ainsi, j'ai posé la question à Nathan Weizenbaum et voici sa réponse\u0026nbsp;:\n\n\u003e _D'une manière générale, nous ne voulons pas autoriser l'utilisation de variables \"brutes\" là où les expressions SassScript ne peuvent être utilisées. C'est le cas des media queries, car SassScript peut être ambigu dans ce contexte (en particulier les maps)_.\n\n### Sélecteurs\n\nUn dernier exemple de cas d'utilisation où nous aurons besoin d'interpoler les variables Sass\u0026nbsp;: Lorsque nous utilisons une variable comme sélecteur, ou comme partie d'un sélecteur. Ce n'est peut-être pas un cas très courant, mais il n'est pas non plus si rare\u0026nbsp;:\n\n```scss\n$value: custom;\n\nselector-$value {\n  property: value;\n}\n```\n\nMalheureusement, ça ne marche pas :  \n`Invalid CSS after \"selector-\": expected \"{\", was \"$value {\"`\n\nC'est à peu près la même raison que pour les media queries. Sass a sa propre façon d'analyser les sélecteurs CSS. S'il rencontre quelque chose d'inattendu, par exemple un `$` non échappé, il crashe.\n\nHeureusement, ce problème est facile à résoudre, et vous connaissez déjà la solution\u0026nbsp;: l'interpolation\u0026nbsp;!\n\n```scss\n$value: custom;\n\nselector-#{$value} {\n  property: value;\n}\n```\n\n### Conclusion\n\nEn définitive, l'interpolation Sass n'est pas si simple. Il existe des cas où vous devrez échapper votre variable, d'autres où ce ne sera pas nécessaire. À partir de là, il y a deux façons de faire\u0026nbsp;:\n\n- soit vous attendez un message d'erreur, et vous échappez\n- soit vous échappez tout mais avec des valeurs CSS régulières (dont vous savez qu'elles fonctionnent).\n\nJ'espère en tout cas que cet article vous aura permis de mieux comprendre comment fonctionne l'interpolation de variable.\n"},{"slug":"css-grid-comment-fonctionne-minmax","title":"CSS Grid : comment fonctionne minmax()","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"6 juin 2017","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/how-the-minmax-function-works/","copyright":"2017"},"dateCascade":"19 juin 2017","dateMachine":"2O170619","tags":["cssgrid","css"],"about":["minmax"],"excerpt":"La fonction minmax() est l'une des plus utiles parmi les nouveautés introduites par la spécification CSS Grid Layout. Ire Aderinokun la présente à sa façon habituelle: systématique, claire et complète!","featured":false,"featuredImage":"/images/default-minmax.png","order":null,"content":"\nLa fonction **minmax()** introduite par la [spécification](https://www.w3.org/TR/css-grid-1/#valdef-grid-template-columns-minmax) CSS Grid Layout est l'une de ses fonctionnalités les plus utiles. **Cette fonction nous permet d'écrire un CSS extrêmement puissant et succinct** : nous pouvons maintenant donner pour valeur à une [piste de grille](/articles/css-grid-layout-guide-complet/#gridtrack) (_grid track_) une fonction acceptant une valeur minimum et une valeur maximum.\n\n\u003ch2\u003eLa fonction minmax()\u003c/h2\u003e\n\nLa fonction `minmax()` définit un espace supérieur ou égal à une valeur minimum et inférieur ou égal à une valeur maximum. Elle accepte deux paramètres, une valeur minimum et une valeur maximum.\n\n```\nminmax(min, max)\n```\n\nSi la valeur maximum définie est inférieure à la valeur minimum, elle n'est pas prise en compte, et la fonction est traitée comme si elle ne présentait qu'une valeur minimum.\n\nLa fonction `minmax()` accepte six types de valeurs\u0026nbsp;:\n\n- longueur\n- pourcentage\n- longueur flexible\n- `max-content`\n- `min-content`\n- `auto`\n\nPassons-les en revue un par un.\n\n\u003ch3\u003eLongueur\u003c/h3\u003e\n\nLa valeur la plus simple que nous puissions passer à `minmax()` est une longueur. Prenons par exemple cette grille simple, qui a trois colonnes et une rangée unique.\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/default-minmax.png\" width=\"895\" height=\"250\" alt=\"\"/\u003e\u003c/figure\u003e\n\nAvec la fonction `minmax()`, nous pouvons préciser que la cellule jaune doit avoir une largeur minimale de 100px et maximale de 200px. Lorsque l'écran est redimensionné, la valeur absolue change mais toujours entre ces deux limites.\n\n```\n.grid {\n    display: grid;\n    grid-template-columns: minmax(100px, 200px) 1fr 1fr;\n}\n\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/length-1-compressor.gif\" width=\"895\" height=\"166\" alt=\"\"/\u003e\u003c/figure\u003e\n\nLes deuxième et troisième colonnes se rétrécissent ou s'agrandissent pour occuper l'espace disponible de manière égale, mais la première aura toujours une largeur comprise entre 100 et 200px.\n\n\u003ch3\u003ePourcentage\u003c/h3\u003e\n\nNous pouvons également utiliser les pourcentages. Admettons que nous voulions donner à notre cellule jaune une largeur minimale de 200px, pouvant aller jusqu'à 50% de la largeur de la grille.\n\n```\n.grid {\n    display: grid;\n    grid-template-columns: minmax(200px, 50%) 1fr 1fr;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/percentage-compressor.gif\" width=\"885\" height=\"250\" alt=\"\"/\u003e\u003c/figure\u003e\n\nNous pouvons réduire la largeur de l'écran autant que nous voulons, la largeur de la cellule jaune ne sera jamais inférieure à 200px. Par contre, lorsque l'espace le permet, elle s'agrandit jusqu'à atteindre la moitié de la largeur de la grille.\n\n\u003ch3\u003eLongueur flexible\u003c/h3\u003e\n\nLa longueur flexible, qui utilise l'unité `fr`, est une nouvelle unité introduite par la [spécification CSS Grid Layout](https://www.w3.org/TR/css-grid-1/). Cette longueur représente une fraction de l'espace disponible dans la [grille container](/articles/css-grid-layout-guide-complet/#gridcontainer) (_container grid_). Par exemple, si nous avons une grille de 100px de large, avec deux colonnes, l'une ayant une largeur fixe de 20px et l'autre une largeur de 1fr, cette dernière aura du coup une dimension de 80px puisqu'elle prend l'espace disponible dans la grille.\n\n```\n.grid {\n    display: grid;\n    grid-template-columns: minmax(200px, 1fr) 1fr 1fr;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/fr-compressor.gif\" width=\"895\" height=\"166\" alt=\"\"/\u003e\u003c/figure\u003e\n\nLes colonnes ont toutes une dimension de 1fr dans les écrans larges, elles occupent donc le même espace dans la grille.\n\n\u003ch3\u003emax-content\u003c/h3\u003e\n\nLe mot-clé `max-content` est une valeur particulière qui représente la \"taille idéale\" de la cellule. C'est la dimension minimale pour que le contenu de la cellule tienne sans encombre. Par exemple, si le contenu de la cellule est une phrase, la largeur idéale de la cellule sera celle qui permet à la phrase de tenir entièrement, sans retour à la ligne.\nReprenons notre exemple précédent et précisons que la cellule jaune doit être à la fois un minimum et un maximum de `max-content`.\n\n```\n.grid {\n    display: grid;\n    grid-template-columns: minmax(max-content, max-content) 1fr 1fr;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/max-content-compressor.gif\" width=\"895\" height=\"166\" alt=\"\"/\u003e\u003c/figure\u003e\n\nComme on peut le voir, la colonne s'étend jusqu'à ce que la phrase tienne entièrement. Comme la minimale et la maximale ont pour valeur `max-content`, la largeur de la colonne reste toujours identique.\n\n\u003ch3\u003emin-content\u003c/h3\u003e\n\nLe mot-clé `min-content` est elle aussi une valeur particulière. Elle représente la plus petite dimension telle que le contenu ne déborde pas —\u0026nbsp;sauf si ce débordement est inévitable.\nPour illustrer la différence entre `min-content` et `max-content`, nous pouvons utiliser le même contenu que dans l'exemple précédent mais avec les minimale et maximale égales à `min-content`\u0026nbsp;:\n\n```\n.grid {\n    display: grid;\n    grid-template-columns: minmax(min-content, min-content) 1fr 1fr;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/min-content-compressor.gif\" width=\"895\" height=\"308\" alt=\"\"/\u003e\u003c/figure\u003e\n\nOn voit que le contenu de la cellule est disposé de façon à occuper le moins d'espace horizontal possible sans déborder de la cellule.\n\n\u003ch3\u003eauto\u003c/h3\u003e\n\nEnfin, nous avons `auto`. Cette dernière valeur a une signification différente selon qu'on l'utilise comme valeur minimum ou maximum de la fonction `minmax()`.\nSi c'est le maximum, la valeur `auto` est équivalente à la valeur `max-content`. Si on l'utilise comme valeur minimum, `auto` représente la plus grande valeur minimale possible pour la cellule. Cette _plus grande valeur minimale_ est différente de la valeur `min-content` et spécifiée par `min-width/min-height`.\nPour l'illustrer, voici ce qui se passe lorsque la cellule jaune est réglée sur `auto` dans le minimum et le maximum.\n\n```\n.grid {\n    display: grid;\n    grid-template-columns: minmax(auto, auto) 1fr 1fr;\n}\n\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/auto-compressor.gif\" width=\"895\" height=\"222\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch2\u003eDesign responsive sans media queries\u003c/h2\u003e\n\nComme nous l'avons vu, les cas d'utilisation de `minmax()` sont multiples. Mais peut-être le cas d'usage le plus courant et le plus utile est-il la possibilité de créer des designs responsive sans recours aux media queries.\n\nPrenons cette grille par exemple\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/responsive-compressor.gif\" width=\"895\" height=\"352\" alt=\"\"/\u003e\u003c/figure\u003e\n\nChaque colonne de la grille a une largeur minimale de 200px. À mesure que l'écran est redimensionné, le nombre de colonnes change, pour s'adapter à leur largeur idéale. Avec CSS Grid et la fonction `minmax()`, c'est l'affaire de deux ligne de CSS\u0026nbsp;:\n\n```\n.grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n}\n```\n\nÀ côté de la fonction `minmax()`, il y a deux autres ingrédients-clés\u0026nbsp;:\n\n- `repeat()`: cette fonction nous permet de spécifier la même valeur pour plusieurs colonnes de la grille. Elle prend deux valeurs, le nombre de répétitions et la valeur à répéter.\n- `auto-fit`: ce mot-clé peut être utilisé avec la fonction `repeat()`à la place du nombre de répétitions. Le nombre de colonnes est donc modifié de manière flexible, en fonction de la largeur possible pour chaque colonne.\n\nUne limite importante de cette technique toutefois est qu'elle ne fonctionne qu'avec des colonnes de largeur égale. Nous devons utiliser la fonction `repeat()`avec le mot-clé `auto-fit` car c'est ce qui permet la flexibilité du nombre de colonnes. Cela étant, si ce cas de figure correspond à vos besoin, c'est une technique très utile.\n"},{"slug":"json-pour-les-debutants","title":"JSON pour les débutants","author":{"name":"Louis Lazaris","lastname":"Lazaris"},"original":{"date":"1er mars 2017","site":"Impressive Webs","siteUrl":"https://www.impressivewebs.com/","postUrl":"https://www.impressivewebs.com/what-is-json-introduction-guide-for-beginners/","copyright":"2017"},"dateCascade":"23 mars 2017","dateMachine":"2O170323","tags":["json"],"about":[],"excerpt":"JSON est un format de données facilitant le stockage et l'échange de données entre tous langages de programmation. Louis Lazaris propose une introduction simple, mais détaillée, pour comprendre JSON et JSONP.","featured":true,"featuredImage":"/images/authors/louis-lazaris.jpeg","order":2,"content":"\nSi vous êtes nouveau dans le développement web, que vous avez des connaissances de HTML, CSS et même de JavaScript, JSON est important à connaître.\n\nMême si vous connaissez déjà JSON et que vous l'avez utilisé dans un projet, il y a peut-être encore des choses que vous ne soupçonnez pas. Dans ce **guide et tutoriel JSON**, je vais essayer de présenter de manière approfondie JSON, son histoire et son utilité. Je terminerai avec une liste d'outils pratiques JSON qui pourront vous servir dans vos projets à venir.\n\n## Qu'est-ce que JSON ?\n\n**JSON** (prononciation à la française /ʒi.sɔn/ ou /dʒej.sɔn/ , ou à l'anglaise /ˈdʒeɪˌsən/ (comme [Jason Bourne](https://www.youtube.com/watch?v=F4gJsKZvqE4)\u0026nbsp;!) signifie **JavaScript Object Notation** et c'est un format de données. Autrement dit, c'est une façon de stocker des informations, un peu comme une base de données. Bien que créé indépendamment de la spécification [ECMAScript](https://fr.wikipedia.org/wiki/ECMAScript), il est maintenant lié à JavaScript qui inclut un [objet JSON](https://tc39.github.io/ecma262/#sec-json-object), et de nombreux développeurs l'incorporent quasiment comme un sous-ensemble du langage.\n\nVoici un exemple de syntaxe JSON\u0026nbsp;:\n\n```\n{\n  \"espèce\": \"Dog\",\n  \"race\": \"Labrador Retriever\",\n  \"couleur\": \"Yellow\",\n  \"âge\": 6\n}\n```\n\nComme vous le voyez, JSON est un format de données consistant en paires de nom/valeur (ou clé/valeur) ayant la forme de chaînes de caractères. Les nom et valeur sont séparés par deux points `:` et chaque paire est séparée de la suivante par une virgule.\n\nBien que trouvant sa source dans JavaScript, beaucoup de langages de programmation (si ce n'est tous\u0026nbsp;?) peuvent générer et lire le format JSON. Il est donc devenu très populaire pour le stockage, la lecture et le partage d'information dans les applications et services web.\n\n## Une brève histoire de JSON\n\n[Douglas Crockford](https://fr.wikipedia.org/wiki/Douglas_Crockford) est l'inventeur de JSON et il maintient [le site officiel JSON.org](http://json.org/) où il est présenté et discuté en détail. (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;_NdT\u0026nbsp;: vous pouvez écouter Douglas Crockford raconter [l'histoire de JSON](https://www.youtube.com/watch?v=-C-JoyNuQJs) dans cette vidéo YouYube, intéressante aussi pour comprendre certaines caractéristiques du format)_.\n\n[La première spécification officielle](http://www.ecma-international.org/flat/publications/files/ECMA-ST/ECMA-404.pdf) date de 2013, mais JSON remonte à bien plus loin. Le site web a été lancé en [2002](http://web.archive.org/web/20030228034147/http://www.crockford.com/JSON/index.html), Yahoo et Google ont commencé à utiliser JSON dès 2005 et 2006 respectivement, et JSON a décollé à partir de là. L'article de wikipedia contient beaucoup de [détails sur son histoire](https://en.wikipedia.org/wiki/JSON#History) si vous voulez en savoir plus.\n\n## Différences entre JSON et JavaScript Object\n\nComme son nom l'indique, JSON est plus ou moins un object JavaScript, cependant il y a des différences. Tout d'abord, comme expliqué dans la spécification, \"JSON est un format texte facilitant l'échange de données structurées entre tous les langages de programmation\". Il est donc universel et non pas limité à JavaScript. En fait, il ne fait pas du tout partie de JavaScript, il est simplement dérivé de la façon dont les objets JavaScripts sont écrits.\n\nEn termes de syntaxe, il y a **deux différences principales**. Tout d'abord, tous les noms (clés) sont représentés sous forme de chaînes de caractères, autrement dit ils doivent être entre guillemets. Ceci par exemple n'est pas du JSON valide\u0026nbsp;:\n\n```\n// JSON non valide, mais objet JS valide\n{\n  foo: \"bar\"\n}\n```\n\nLa façon correcte d'écrire ce JSON est\u0026nbsp;:\n\n```\n// JSON valide\n{\n  \"foo\": \"bar\"\n}\n```\n\nRemarquez que JSON requiert non seulement que le nom (la clé) soit entre guillemets, mais aussi que les guillemets soient doubles\u0026nbsp;: les guillemets simples sont possibles sur les objets JavaScript, pas dans JSON.\n\nL'autre différence majeure est dans le type de données que JSON peut stocker. JSON accepte les valeurs suivantes\u0026nbsp;:\n\n- Objet\n- Array\n- Nombre\n- Chaîne de caractères\n- `true`\n- `false`\n- `null`\n\nC'est assez similaire à ce qu'on trouve dans les objets JS, mais JSON étant représenté sous forme de texte on ne peut pas lui donner des choses du genre fonctions ou des valeurs dynamiques de dates utilisant `Date()`. Par conséquent, il n'y a pas de méthodes ou autres fonctionnalités dans JSON, **il n'y a que du texte**. Et c'est bien ainsi, car c'est ce qui en fait un format universel d'échange de données.\n\nIl est important de noter qu'un morceau complet de JSON est lui-même techniquement un objet JSON, et le type `Objet` est ce qui permet d'imbriquer des objets JSON comme valeurs, un peu comme les objets dans JavaScript. Ci-dessous, on a un exemple d'objet JSON imbriqué\u0026nbsp;:\n\n```\n// JSON valide\n{\n  \"species\": \"Dog\",\n  \"breed\": \"Labrador Retriever\",\n  \"age\": 6,\n  \"traits\": {\n    \"eyeColor\": \"brown\",\n    \"coatColor\": \"yellow\",\n    \"weight\": \"137lbs\"\n  }\n}\n```\n\nIci, l'objet JSON racine a 4 paires de clés/valeurs (“species”, “breed”, “age”, et “traits”) mais la quatrième valeur est un objet imbriqué comprenant 3 paires de clés/valeurs. Et comme vous l'avez sans doute deviné, on peut imbriquer les objets à l'infini (mais restez raisonnable).\n\nUn objet JavaScript ressemblerait à ceci\u0026nbsp;:\n\n```\n// objet JS; non valide en JSON\nlet myAnimal = {\n  species: \"dog\",\n  breed: \"Labrador Retriever\",\n  age: 6,\n  traits: {\n    eyeColor: \"brown\",\n    coatColor: \"yellow\",\n    weight: \"137lbs\"\n  }\n}\n```\n\nVous voyez les différences avec JSON (les guillemets) et de plus, pour que l'objet soit utile en JavaScript il est créé comme valeur d'une variable (`myAnimal`).\n\n## Comment stocker JSON ?\n\nJSON étant du texte, on peut le stocker où l'on veut. Dans une base de données, dans un fichier texte, un stockage client (cookies ou localStorage) ou via son propre format de fichier qui utilise l'extension `.json` (qui est en gros un fichier texte avec une extension `.json`).\n\nUne fois le contenu JSON stocké, il reste donc à pouvoir le récupérer et le parser de manière appropriée. Selon les langages, il y a diverses façons de récupérer et parser JSON, mais puisque nous nous intéressons au développement front-end, je vais montrer comment le faire en JavaScript.\n\nJavaScript propose deux méthodes, qui font partie de la spécification ECMAScript, pour réaliser deux tâches distinctes.\n\n## Utiliser JSON.stringify()\n\nAdmettons que votre application construise des données d'une manière ou d'une autre. Pour conserver ces données quelque part, elles doivent être converties en une chaîne de caractères (_string_) JSON valide. Vous pouvez le faire avec `JSON.stringify()`\u0026nbsp;:\n\n```\nlet myJSON = {\n  species: \"Dog\",\n  breed: \"Labrador Retriever\",\n  age: 6,\n  traits: {\n    eyeColor: \"brown\",\n    coatColor: \"yellow\",\n    weight: \"137lbs\"\n  }\n};\n\nlet myNewJSON = JSON.stringify(myJSON, null, '\\t');\n\n/* output of myNewJSON:\n{\n  \"species\": \"Dog\",\n  \"breed\": \"Labrador Retriever\",\n  \"age\": 6,\n  \"traits\": {\n    \"eyeColor\": \"brown\",\n    \"coatColor\": \"yellow\",\n    \"weight\": \"137lbs\"\n  }\n}\n*/\n```\n\n[Voir sur JS Bin](https://jsbin.com/qesuwev/edit?html,js,console,output)\n\nLa méthode `JSON.stringify()` prend un paramètre obligatoire (le JSON que vous voulez convertir en _string_) et deux arguments optionnels. Le premier est une fonction de remplacement que vous pouvez utiliser pour filtrer certaines paires clé/valeur que vous ne voulez pas inclure. Je n'ai rien exclu dans mon exemple, donc j'ai indiqué `null` à la place de la fonction de remplacement. D'habitude je n'utilise pas `null`, mais je voulais utiliser le troisième argument et pour cela il est obligatoire de mentionner le second.\n\nLe troisième paramètre est la valeur d'espace, il vous aide à formater le JSON de façon à le rendre plus lisible avec indentation, retour à la ligne, etc. Si vous utilisez un nombre pour le troisième argument, il représentera le nombre d'espaces pour l'indentation.\n\n## Utiliser JSON.parse()\n\nÀ l'inverse, si vous recevez du JSON et que vous voulez l'utiliser dans votre JavaScript, vous pouvez utiliser la méthode `JSON.parse()`\u0026nbsp;:\n\n```\nlet myJSON = '{\n  \"species\":\"Dog\",\n  \"breed\":\"Labrador Retriever\",\n  \"age\":6,\n  \"traits\":{\n    \"eyeColor\":\"brown\",\n    \"coatColor\":\"yellow\",\n    \"weight\":\"137lbs\"\n    }\n  }';\n\nlet myNewJSON = JSON.parse(myJSON);\n\n// logs a JavaScript object, not a string\nconsole.log(myNewJSON);\n```\n\n[Voir sur JS Bin](https://jsbin.com/kujayek/edit?html,js,console,output)\n\nDans l'exemple ci-dessus, je crée manuellement une chaîne de caractères JSON que je stocke dans une variable. C'est juste pour la démonstration, dans un scénario réel le JSON pourrait venir d'une source externe ou d'un fichier JSON séparé.\n\nLa méthode `JSON.parse()` convertit la chaîne de caractères JSON en un objet que je peux manipuler avec JavaScript. La chaîne de caractères est le seul argument obligatoire de la méthode, mais vous pouvez ajouter un second argument optionnel que l'on appelle un _reviver_ de la fonction. En voici un exemple, qui part du JSON précédent\u0026nbsp;:\n\n```\nlet myNewJSON = JSON.parse(myJSON, function (name, value) {\n  if (name === \"species\") {\n    value = \"Cat\";\n  }\n  return value;\n});\n```\n\n[Vous pouvez le voir sur JS Bin](https://jsbin.com/kujayek/edit?html,js,console,output)\n\nSi vous regardez le résultat sur JS Bin, vous verrez que notre Labrador Retriever est devenu un chat. C'est juste un exemple qui nous montre que l'on peut modifier les valeurs d'un des noms. Pour plus d'infos sur ces fonctions, vous pouvez consulter [MDN](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/JSON/parse) ou cet article sur le [codage web dynamique](http://www.dyn-web.com/tutorials/php-js/json/reviver.php).\n\n## Utiliser JavaScript pour manipuler du JSON\n\nComme vous l'avez déjà deviné, une fois nos données JSON converties en objet JavaScript, nous pouvons y accéder comme à n'importe quel objet JS. Admettons que nous ayons parsé notre chaîne de caractères JSON et que la variable `myNewJSON` contienne le résultat, comme nous l'avons vu dans la section précédente. Nous pouvons maintenant utiliser ce qu'on appelle la [notation avec point](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_membres) (_dot notation_) pour accéder aux différentes parties de la donnée JSON\u0026nbsp;:\n\n```\nconsole.log(myNewJSON.species); // \"Dog\"\nconsole.log(myNewJSON.breed); // \"Labrador Retriever\"\nconsole.log(myNewJSON.age); // 6\n```\n\nNous pouvons également accéder à l'objet imbriqué et aux valeurs situées à l'intérieur via la notation avec point\u0026nbsp;:\n\n```\nconsole.log(myNewJSON.traits);\n/*\n[object Object] {\n  coatColor: \"yellow\",\n  eyeColor: \"brown\",\n  weight: \"137lbs\"\n}\n*/\n\nconsole.log(myNewJSON.traits.coatColor); // \"yellow\"\nconsole.log(myNewJSON.traits.eyeColor); // \"brown\"\nconsole.log(myNewJSON.traits.weight); // \"137lbs\"\n```\n\n[Voir sur JS Bin](https://jsbin.com/necure/edit?html,js,console,output)\n\nNous pouvons ensuite faire ce que nous voulons de ces données, par exemple ajouter de nouvelles valeurs, changer les valeurs actuelles, effacer des paires de clés/valeurs...\n\n```\nmyNewJSON.age = 7;\ndelete myNewJSON.traits.weight;\nmyNewJSON.traits.cuddly = true;\n\nconsole.log(myNewJSON);\n\n/*\n[object Object] {\n  age: 7,\n  species: \"Dog\",\n  breed: \"Labrador Retriever\",\n  traits: [object Object] {\n    coatColor: \"yellow\",\n    cuddly: true,\n    eyeColor: \"brown\"\n  }\n}\n*/\n```\n\n[Voir sur JS Bin](https://jsbin.com/fazetib/edit?html,js,console,output)\n\nDans le code ci-dessus, j'ai modifié la valeur de l'`age`, supprimé la propriété `weight` (poids) de l'objet `traits`, et ajouté une nouvelle propriété `cuddly` (câlin) à l'objet `traits`.\n\nNous pouvons ensuite utiliser `JSON.stringify()` pour convertir des nouvelles données dans le format d'origine de façon à pouvoir les stocker où nous voulons comme du JSON valide.\n\n## JSON mieux que XML ?\n\nXML n'est certainement pas un format en voie de disparition, mais JSON le surpasse largement en popularité. Douglas Crockford explique [les avantages de JSON sur XML](http://www.json.org/xml.html) (\"le XML sans gras\") et je cite un extrait ici\u0026nbsp;:\n\n\u003e XML n'est pas idéal pour les échanges de données, de même qu'un tournevis n'est pas fait pour enfoncer des clous. Il porte avec lui un lourd bagage et ne correspond pas au modèle de données de la plupart des langages de programmation. Lorsque les programmeurs ont vu XML pour la première fois, ils ont été choqués par sa laideur et son inefficacité. Cette première réaction était la bonne. Il existe une autre notation textuelle qui posséde tous les avantages de XML et se révèle bien mieux adaptée aux échanges de données —\u0026nbsp;cette notation est JSON.\n\nIl poursuit en détaillant les avantages proclamés de XML et en montrant pourquoi JSON fait mieux.\n\n## Qu'est-ce que JSONP ?\n\nJSONP (\"JSON with Padding\") est une solution visant à surmonter les restrictions et limitations d'[origines croisées](https://developer.mozilla.org/fr/docs/HTTP/Access_control_CORS) (_cross-origin_) liées aux requêtes pour des ressources localisées sur un domaine différent de celui à l'origine de la requête. Bob Ippolito a proposé en [2005](http://bob.ippoli.to/archives/2005/12/05/remote-json-jsonp/) JSONP, peu de temps après la solution similaire de George Jempty [appelée JSON++](https://web.archive.org/web/20060212113746/http://htmatters.net/htm/1/2005/07/evaling-JSON.cfm).\n\nJSON profite du fait que les éléments `\u003cscript\u003e` ne sont pas liés par les limitations d'origines croisées. C'est ainsi que nous sommes pouvons faire un lien vers des scripts situés sur des [CDN distants](https://cdnjs.com/) sans problème.\n\nDans cet exemple, nous accédons à des données JSONP via un simple JavaScript\u0026nbsp;:\n\n```\nfunction doJSONP(result) {\n  console.log(result.data);\n}\n\nlet script = document.createElement('script');\nscript.src = 'https://api.github.com/users/impressivewebs?callback=doJSONP'\n\ndocument.getElementsByTagName('body')[0].appendChild(script);\n```\n\n[Voir sur JS Bin](https://jsbin.com/hejedoq/edit?html,js,console,output)\n\nCe code crée un élément `\u003cscript\u003e`, ajoute une URL dans l'attribut `src`, puis ajoute (_append_) le script au document. Dans cet exemple, j'accède à des données utilisateur spécifiques sur GitHub (mes propres données, en fait) en utilisant l'API de GitHub. Si vous ouvrez [la démo](https://jsbin.com/hejedoq/edit?html,js,console,output), vous verrez les données affichées dans la console.\n\nSi vous utilisez jQuery, vous pouvez faire une requête similaire via la méthode `$.getJSON()`\u0026nbsp;:\n\n```\n$.getJSON('https://api.github.com/users/impressivewebs', function (result) {\n  console.log(result);\n});\n```\n\n[Voir sur JS Bin](https://jsbin.com/celisu/edit?html,js,console,output)\n\nRemarquez que dans ce cas les données que je veux sont exactement celles qui sont retournées. Avec la version JavaScript, il me faut creuser un peu plus loin avec la propriété `data` pour obtenir le JSON voulu.\n\nDans tous les cas, après avoir obtenu le résultat je peux utiliser la notation avec point pour accéder aux paires clé/valeur. Par exemple je peux obtenir le nombre de mes _followers_ sur GitHub, l'URL de mon avatar, ma quantité de _repos_ publics et bien d'autres infos.\n\n## Comment marche JSONP ?\n\nPour comprendre comment fonctionne JSONP, il faut d'abord comprendre qu'un fichier JSON simple ne peut pas être utilisé de cette façon, sauf si le serveur prépare les données de façon à ce que la réponse soit correcte. Comment la technique JSONP résout-elle le problème\u0026nbsp;?\n\nDans l'exemple JavaScript précédent, vous avez sans doute remarqué que l'URL de l'API GitHub avait un paramètre attaché\u0026nbsp;: `callback=doJSON`. Cette fonction de callback agit comme un emballage (ou un _padding_) nous permettant l'accès aux données, car normalement lorsque nous injectons des données JSON via un élément `\u003cscript\u003e` il ne se passera rien, les contenus n'étant pas stockés dans une variable accessible dans notre JavaScript.\n\nAvec JSONP, au lieu de\u0026nbsp;:\n\n```\n{\n  \"one\": \"value_1\",\n  \"two\": \"value_2\"\n}\n```\n\n...nous recevons ceci :\n\n```\ncallback({\n  \"one\": \"value_1\",\n  \"two\": \"value_2\"\n});\n```\n\n...où `callback` est le nom de mon callback. Dans mon exemple, ce serait `doJSON`.  \nDonc, si vous souhaitez qu'on puisse accéder à votre JSON à partir d'un serveur distant, vous devez vous assurer qu'il sera envoyé avec le padding (c'est à dire la fonction d'emballage). Vous pouvez en voir un exemple (négatif) dans [ce codepen](http://codepen.io/impressivewebs/pen/mWeNzN?editors=1111) où j'essaie d'accéder à [ces données de la Ligue de Baseball](http://gd.mlb.com/components/game/mlb/year_2016/month_10/day_04/gid_2016_10_04_balmlb_tormlb_1/plays.json) mais le navigateur me répond par un message d'erreur \"Uncaught SyntaxError: Unexpected token :\" parce que la Ligue de Baseball n'a pas fait en sorte que ses données soient accessibles par JSONP.\n\nUne discussion détaillée de la résolution de ce problème dépasse les limites de cet article, mais vous trouverez une solution simple dans [ce fil de Stack Overflow](http://stackoverflow.com/questions/9519209/how-do-i-set-up-jsonp).\n\nIl faut faire attention aux problèmes de sécurité liés à JSONP, donc faites quelques recherches si vous avez un projet dans ce sens. Pour plus d'infos sur JSONP, vous pouvez consulter les ressources suivantes\u0026nbsp;:\n\n- [JSONP](https://en.wikipedia.org/wiki/JSONP) sur Wikipedia\n- [JSONP en termes simples](http://stackoverflow.com/questions/3839966/can-anyone-explain-what-jsonp-is-in-layman-terms) sur Stack Overflow\n- [Utiliser JSONP en toute sécurité](https://www.metaltoad.com/blog/using-jsonp-safely)\n\n## Outils JSON\n\nIl existe de nombreux outils pour faire beaucoup de choses avec les données JSON. Voici une liste de quelques outils intéressants que j'ai rencontrés\u0026nbsp;:\n\n- [JSONLint](http://jsonlint.com/) — Un validateur de données JSON. C'est un bon outil pour apprendre les bases de la syntaxes et en quoi elle diffère de la syntaxe objet JavaScript.\n- [json.browse](https://jsonbrowse.com/) — Vous permet de naviguer, améliorer (_prettify_), manipuler du JSON à partir d'une source externe ou du JSON copié/collé. Une fonctionnalité intéressante est la possibilité de filtrer les données à partir d'un mot-clé.\n- [JSONedit](http://mb21.github.io/JSONedit/) — Un constructeur visuel de JSON qui facilite la construction de structures JSON complexes avec des types de données différents.\n- [JSON Schema](http://json-schema.org/) — Un vocabulaire vous permettant d'annoter et de valider des documents JSON.\n- [JSON API](http://jsonapi.org/) — Une spécification pour réaliser des API en JSON.\n- [CSVJSON](http://www.csvjson.com/) — Convertisseur de CSV et SQl en JSON\n- [JSON Formatter](http://jsonformatter.org/) — Outil en ligne pour valider, améliorer, minifier et convertir les données JSON.\n- [excelJSON](http://exceljson.com/) — Outil en ligne pour convertir du CSV ou TSV en JSON et JSON en CSV ou TSV.\n- [Myjson](http://myjson.com/) — Un entrepôt JSON simple pour votre appli web ou mobile.\n- [jsonbin.org](https://jsonbin.org/) — Un nouveau projet de Remy Sharp, \"un entrepôt JSON comme service. Protégé par authentification les données sont stockée en JSON et peuvent être liées\".\n- [Kinto](https://www.kinto-storage.org/) — Un entrepôt JSON générique avec possibilité de partage et de synchronisation.\n- JSON Generator — Outil en ligne pour générer des données aléatoires en JSON.\n- Hjson — Une extension de syntaxe pour JSON, afin de faciliter la lectire et la correction par les humains, avant d'envoyer les données à la machine.\n- JSON Selector Generator — Copiez/collez du JSON, puis cliquez sur n'importe quelle donnée et cet outil vous dira quel \"sélecteur\" utiliser en JavaScript pour accéder à cette donnée.\n\nPour recevoir d'autres outils, vous pouvez vous inscrire à [Web Tools Weekly](http://webtoolsweekly.com/). N'hésitez pas à [ajouter des commentaires](https://www.impressivewebs.com/what-is-json-introduction-guide-for-beginners/) ou à suggérer d'autres outils.\n\n### Conclusion\n\nSi JSON était un concept relativement neuf pour vous, j'espère que cet article vous aura donné une bonne idée de ce qu'il peut vous apporter. JSON est une technologie solide, facile à utiliser et puissante parce qu'universelle.\n"},{"slug":"grid-et-flexbox-le-duo-gagnant","title":"Grid et Flexbox, le duo gagnant","author":{"name":"Chen Hui Jing","lastname":"Chen"},"original":{"date":"2 mars 2017","site":"Chen Hui Jing (le blog)","siteUrl":"https://www.chenhuijing.com/#🏀","postUrl":"https://www.chenhuijing.com/blog/css-grid-flexbox-combo/#👟","copyright":"2017"},"dateCascade":"5 mars 2017","dateMachine":"2O170305","tags":["cssgrid","css","flexbox"],"about":[],"excerpt":"CSS Grid et Flexbox sont faits pour fonctionner ensemble. Grid pour l'organisation générale, Flexbox pour les ajustements spécifiques. Chen Hui Jing le démontre avec un exemple magistral (et quelques bonus).","featured":false,"featuredImage":"/images/126-640.jpeg","order":9,"content":"\n## Plongée profonde dans CSS Grid\n\nVous vous rappelez la réponse de \u003ca href=\"/auteurs/rachel-andrew\"\u003eRachel Andrew\u003c/a\u003e à la question \"utiliser CSS Grid ou Flexbox\"\u0026nbsp;? Sinon vous pouvez [regarder la vidéo](https://www.youtube.com/watch?v=MXEzJ-IncX0\u0026feature=youtu.be\u0026t=1274) (en anglais).\n\n\u003e _Flexbox est fait pour les layouts unidimensionnels, CSS Grid est fait pour les layouts en 2 dimensions_. (Rachel\u0026nbsp;Andrew)\n\nJe suis sûre que beaucoup l'ont réalisé avant moi, mais avant ma relation torride d'un mois avec CSS Grid je ne m'étais pas rendue compte à quel point Flexbox et Grid sont faits pour s'entendre. C'était quelque chose du genre oeufs et bacon, pomme et cannelle, beurre de cacahuète et confiture —\u0026nbsp;ah ça y est, j'ai faim tout d'un coup.\n\nVous avez peut-être vu que j'ai apporté une contribution au [CSS Reference de Codrops](https://tympanus.net/codrops/css_reference/). Sérieux, c'est une des meilleures choses qui me soit arrivées en 2016. Une des entrées qui manquaient encore était CSS Grid. Avant de m'y mettre, j'avais juste bricolé un peu avec Grid en construisant un prototype pour [Penang Hokkien](http://penang-hokkien.gitlab.io/) utilisant Grid, histoire de voir si le mode vertical fonctionnerait mieux qu'avec Flexbox.\n\nEt puis je me suis attelée au boulot et j'ai écrit [l'article](https://tympanus.net/codrops/css_reference/grid/).\n\n3 semaines plus tard, j'avais l'impression d'avoir fusionné avec [Metal Cactuar](http://exvius.gamepedia.com/Metal_Cactuar) puissance maximum (désolé, _Final Fantasy_ fait partie de ma vie), autrement dit j'étais passé au niveau supérieur.\n\nJ'ai passé beaucoup de temps à éplucher la spécification, la lecture des [articles](https://blogs.igalia.com/mrego/) de [Manuel Rego Casasnovas](https://twitter.com/regocas) sur CSS Grid m'a beaucoup aidé ainsi que l'[antisèche de Rachel Andrew](https://rachelandrew.co.uk/css/cheatsheets/box-alignment) à un moment de grande confusion.\n\nUn conseil : quand vous essayez d'apprendre une nouvelle propriété CSS, ayez toujours sous la main un template vide avec lequel vous pourrez expérimenter. Ça m'a vraiment été utile avec une propriété aussi nouvelle que Grid. Je sais, il y a aussi [Codepen](https://codepen.io/) et tout, mais rien ne vaut un template vierge pour une expérimentation libre de toute distraction.\n\n## Exemples et démos\n\nPour analyser toutes les propriétés, j'ai commencé à construire des grilles très basiques, juste pour voir le fonctionnement des valeurs de propriétés. Si vous avez regardé la syntaxe de `grid-template-rows` dans la spécification, vous savez que ce n'était pas une tâche triviale. Grid lui-même n'est compliqué à apprendre. Mais comme il a été conçu pour être flexible et puissant, il vous faudra un peu de temps pour rentrer dans son fonctionnement.\n\nQuelques-unes des grilles basiques se sont transformées en démos. Certaines trouvaient leur inspiration dans des conversations avec des membres du [CSS Layout Club](https://www.meetup.com/fr-FR/CSS-Layout-Club/). J'ai aussi glané quelques idées dans le cours de Coursera [Ideas from the History of Graphic Design](https://www.coursera.org/learn/graphic-design-history), il y a plein de belles choses (la semaine dernière était consacrée au [Bauhaus](https://fr.wikipedia.org/wiki/Bauhaus)).\n\nJe suis tombée sur cette page de [Malerei, Fotografie, Film](http://bibliothequekandinsky.centrepompidou.fr/imagesbk/RLPF727/M5050_X0031_LIV_RLPF0727.pdf) par [László Moholy-Nagy](https://fr.wikipedia.org/wiki/L%C3%A1szl%C3%B3_Moholy-Nagy), dont la mise en page utilisait une grille originale et l'idée m'est venue qu'on pouvait peut-être la réaliser en CSS...\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/126-640.jpeg\" width=\"640\" height=\"804\" alt=\"grille texte et images, texte horizontal et vertical, symboles, fortes séparations\"/\u003e\u003cfigcaption\u003ePage 126 de Malerei, Fotografie, Film\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Le Bauhaus dans mon navigateur\n\nVoici comment j'ai procédé. J'ai dessiné les lignes de la grille par-dessus l'image en utilisant Sketch, de façon à me faire une idée du nombre de colonnes nécessaires. Dans cet exemple, c'était 1 large colonne suivie de 5 colonnes plus étroites de largeur égale, et j'ai laissé ensuite le navigateur se débrouiller avec la hauteur des rangées.\n\n```\n.grid {\n  display: grid;\n  grid-template-columns: 30% 9% 9% 9% 9% 9%;\n  justify-content: center; /* pour justifier la grille au centre du container */\n}\n```\n\nEnsuite, il y a eu tout le code de placement avec les propriétés `grid-row` et `grid-column`. Mais si vous regardez à nouveau l'image originale, vous verrez que le contenu de chaque cellule a son propre alignement. Par exemple, celui de la première cellule est à droite, celui de la deuxième est en bas à gauche, etc.\n\n👉🏿\u0026nbsp;_NdT\u0026nbsp;: pour consulter les définitions et utilisation des propriétés, voyez l'article [CSS Grid Layout, guide complet](/articles/css-grid-layout-guide-complet))_.\n\nMon premier réflexe, vu que j'avais cet alignement de boîtes, a été d'appliquer `justify-self` et `align-self` là où c'était nécessaire, pour ajuster les positions de contenu à l'intérieur de chaque cellule. Bien tenté, mais à côté... Le problème est que ces deux propriétés affectent la quantité d'espace occupée par la cellule.\n\nLe design du Bauhaus présente des bordures noires très frappantes autour de chaque cellule. La propriété `border` s'applique à l'item de grille. Toute propriété d'alignement de grille autre que `stretch` adaptera la dimension de l'item grid à son contenu. Toute bordure appliquée à un item grid s'adaptera au contenu de l'item, par conséquent je ne pouvais pas procéder ainsi.\n\n\u003cfigure\u003e\u003cimg width=\"760\" height=\"509\" src=\"/images/fit.svg\" alt=\"les bordures sont sur les items, mais les dimensions de l'item ne sont pas celles de la cellule\"/\u003e\u003cfigcaption\u003eCe ne sont pas les bordures souhaitées !\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Flexbox à la rescousse\n\nPar défaut, tous les items grid se comportent comme si leur alignement avait été réglé sur `stretch` sur chaque axe. J'ai donc laissé tomber, pour permettre à la grille de ressembler à une grille, et à la place, j'ai appliqué `display: flex` à l'item grid, ce qui m'a permis d'utiliser les propriétés d'alignement flex sur le container flex, pour positionner le contenu de mon item grid.\n\n\u003cfigure\u003e\u003cimg width=\"760\" height=\"507\" src=\"/images/flex.svg\" alt=\"les bordures correspondent aux lignes horizontales et verticales de la grille, et ne recouvrent pas les items lorsque ceux-ci s'étendent sur plusieurs cellules\"/\u003e\u003cfigcaption\u003eAh voilà, cette fois-ci c'est bon.\u003c/figcaption\u003e\u003c/figure\u003e\n\n```\n.grid__item:nth-child(5) {\n  grid-row: 3 / 5;\n  border-right: 1em solid;\n  padding: 1em;\n\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-end;\n}\n```\n\nLe code ressemble à ce qui précède, mais ce que je veux souligner avant tout c'est qu'il s'agit d'une formidable technique pour la mise en page. Grid pour l'organisation générale, et Flexbox pour les ajustements spécifiques. Voici ce que ça donne [sur Codepen](http://codepen.io/huijing/pen/PpqomV) si vous voulez voir le résultat final.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_PpqomV\" src=\"//codepen.io/huijing/embed/PpqomV?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=PpqomV\u0026amp;user=huijing\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir le \u003cem\u003ePen\u003c/em\u003e\u003ca href=\"http://codepen.io/huijing/pen/PpqomV/\"\u003e\n  Malerei, Fotografie, Film (pg. 126)\u003c/a\u003e de Chen Hui Jing dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Bonus : réaliser des formes en CSS\n\nÀ part les deux photos, tout ce qui est sur la page est réalisé en CSS, autrement dit la flèche et la roue dentée sont des `div` auxquelles j'ai appliqué des styles. J'aime faire des formes en CSS, avec une `div` unique si possible. Il suffit pour cela de quelques propriétés pratiques, `box-shadow`, `border` et [les pseudo-éléments](/articles/les-pseudo-elements-css-before-et-after/).\n\n### La flèche\n\nLes flèches sont assez simples à réaliser. Il vous faut juste un pseudo-élément pour la pointe. Le corps de la flèche est une simple `div` à laquelle on donne une `position: relative` de façon à positionner la pointe par rapport au corps. La pointe est un triangle, qu'on peut réaliser grâce à [l'astuce de la bordure](http://stackoverflow.com/questions/27492191/how-to-make-a-fancy-arrow-using-css).\n\n```\n.arrow {\n  width: 0.5em;\n  height: 65%;\n  background-color: #000;\n  position: relative;\n\n  \u0026::after {\n    display: block;\n    content: '';\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n    bottom: -1em;\n    border-style: solid;\n    border-width: 1em 1em 0 1em;\n    border-color: #000 transparent transparent transparent;\n  }\n}\n```\n\n### La roue dentée\n\nLà, c'est un peu plus compliqué. Le corps de la roue est un cercle, réalisé via `border-radius: 50%`, mais les dents vont nous demander un peu de travail. Je n'ai pas pu le faire avec une seule `div` cette fois-ci (mais si quelqu'un y arrive, contactez-moi). J'ai ajouté une `div` interne. La bonne nouvelle c'est que toutes les dents ont une forme identique, donc l'astuce `box-shadow` peut être utilisée ici.\n\n```\n.gear {\n  height: 5em;\n  width: 5em;\n  background-color: #000;\n  border-radius: 50%;\n  position: relative;\n\n  \u0026::before,\n  \u0026::after {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    display: block;\n    content: '';\n  }\n\n  \u0026::before {\n    height: 3em;\n    width: 1em;\n    box-shadow: 0em -3em 0em 0em #000, 0em 3em 0 0em #000;\n  }\n\n  \u0026::after {\n    height: 1em;\n    width: 3em;\n    box-shadow: 3em 0 0em 0em #000, -3em 0 0 0em #000;\n  }\n}\n```\n\nLe corps de la roue et les 4 dents directionnées comme les aiguilles d'une boussole ont été réalisées avec une seule `div` et 2 pseudo-éléments. Pour les 4 autres dents, j'ai utilisé la `div` intérieure avec des pseudo-éléments et fait tourner les `box-shadow`. Je dois toujours résoudre le problème de `transform-origin` car je trouve qu'il y a encore une certaine asymétrie.\n\n```\n.inner-gear {\n  height: 2em;\n  width: 2em;\n  border-radius: 50%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #e1e1d5;\n\n  \u0026::before,\n  \u0026::after {\n    position: absolute;\n    display: block;\n    content: '';\n  }\n\n  \u0026::before {\n    height: 3em;\n    width: 1em;\n    box-shadow: 0em -3em 0em 0em #000, 0em 3em 0 0em #000;\n    transform: rotate(45deg);\n    transform-origin: (75% 75%);\n  }\n\n  \u0026::after {\n    height: 1em;\n    width: 3em;\n    box-shadow: 3em 0 0em 0em #000, -3em 0 0 0em #000;\n    transform: rotate(45deg);\n    transform-origin: (25% 75%);\n  }\n}\n```\n\n### Conclusion\n\nCSS Grid est vraiment génial, et nous sommes nombreux à le penser. [Jen Simmons](http://jensimmons.com/) a compilé une liste de bonnes ressources Grid, faites un tour sur [Learn CSS Grid](http://jensimmons.com/post/feb-27-2017/learn-css-grid) et essayez de construire quelque chose avec Grid. Vous ne le regretterez pas\u0026nbsp;!\n"},{"slug":"sass-tout-sur-extend","title":"Sass, tout sur @extend","author":{"name":"Kitty Giraudel","lastname":"Giraudel"},"original":{"date":"5 février 2014","site":"Sitepoint","siteUrl":"https://www.sitepoint.com/","postUrl":"https://www.sitepoint.com/sass-extend-nobody-told-you/","copyright":"2014"},"dateCascade":"28 février 2017","dateMachine":"2O170228","tags":["css","sass"],"about":[],"excerpt":"Kitty Giraudel, notre grand spécialiste de Sass, est de retour. Il fait le point de façon précise et claire sur ce que personne ne vous avait jamais dit sur @extend.","featured":false,"featuredImage":"/images/authors/kitty-giraudel.jpeg","order":null,"content":"\nSass nous offre énormément d’outils pour écrire un CSS cohérent et solide. L’un des plus puissants est `@extend`. La plupart des utilisateurs de Sass connaissent son utilisation, mais il reste quelques parties insuffisamment connues.\n\nCommençons d’abord par les bases.\n\n## Les bases d’@extend\n\nLa directive @extend de Sass permet à un sélecteur d’hériter des styles d’un autre. C’est particulièrement utile dans une architecture basée sur les composants, en nous permettant de faire des variations à partir d’un composant.\n\nVoici un cas très basique d’extension d’un sélecteur\u0026nbsp;:\n\n```scss\n.message {\n  padding: 0.5em;\n}\n\n.message-error {\n  @extend .message;\n}\n```\n\nqui est compilé en :\n\n```css\n.message,\n.message-error {\n  padding: 0.5em;\n}\n```\n\nFacile, non ? Bien sûr l’extension n’est pas limitée aux classes, vous pouvez étendre à peu près tous les sélecteurs (p.ex. `a`), les IDs (p.ex. `#id`) etc. et bien sûr les [placeholders](/articles/sass-mixin-ou-placeholder/#ph) qui fonctionnent explicitement ainsi.\n\n## Extension d’un sélecteur complexe\n\nLa plupart du temps, on étend des sélecteurs simples (le plus souvent des classes), mais rien ne vous empêche d’étendre un sélecteur plus complexe, comme `.class element:pseudo` ou même\u0026nbsp;:\n\n```scss\n.message + .message {\n  margin-bottom: 0.5em;\n}\n\n.message-error {\n  @extend .message;\n}\n```\n\nqui sera rendu ainsi :\n\n```css\n.message + .message,\n.message-error + .message-error,\n.message + .message-error,\n.message-error + .message {\n  margin-bottom: 0.5em;\n}\n```\n\nLe résultat est maintenant un peu plus complexe, mais si vous comprenez `@extend`, il ne devrait pas trop vous surprendre.\n\n## Extensions multiples\n\nVous savez certainement que vous pouvez étendre des sélecteurs multiples dans la même règle, mais saviez-vous que vous pouviez le faire avec une directive `@extend` unique\u0026nbsp;?\n\n```scss\n.message {\n  padding: 0.5em;\n}\n\n.important {\n  font-weight: bold;\n}\n\n.message-error {\n  @extend .message, .important;\n}\n```\n\nLa compilation en CSS donne\u0026nbsp;:\n\n```css\n.message,\n.message-error {\n  padding: 0.5em;\n}\n\n.important,\n.message-error {\n  font-weight: bold;\n}\n```\n\nSi vous me posez la question, je vous dirais que cette méthode n’est pas ma préférée. Le code est certes plus concis, mais je le trouve plus difficile à lire. L’utilisation de directives distinctes pour chaque sélecteur étendu permet de mieux distinguer les sélecteurs et la façon dont ils sont étendus.\n\nVous pourriez certes réécrire la syntaxe ainsi\u0026nbsp;:\n\n```scss\n.message-error {\n  @extend .message, .important;\n}\n```\n\nnmais est-ce vraiment plus lisible\u0026nbsp;?\n\nPour ma part, je continuerai à écrire `@extend` ligne par ligne, le résultat sera identique, mais chacun peut faire comme il veut.\n\n## Enchaîner les extensions\n\nNous venons de voir qu’un sélecteur peut être étendu depuis plusieurs sources. Mais vous pouvez également enchaîner vos directives\u0026nbsp;:\n\n```scss\n.message {\n  padding: 0.5em;\n}\n\n.message-important {\n  @extend .message;\n  font-weight: bold;\n}\n\n.message-error {\n  @extend .message-important;\n}\n```\n\nLa compilation en CSS donne\u0026nbsp;:\n\n```css\n.message,\n.message-important,\n.message-error {\n  padding: 0.5em;\n}\n\n.message-important,\nmessage-error {\n  font-weight: bold;\n}\n```\n\nL’exemple ci-dessus est valide, toutefois je vous conseille de ne pas procéder ainsi pour éviter quelques effets indésirables que nous allons examiner maintenant.\n\n## Extension massive\n\nCertains considèrent que le CSS produit par la compilation est _horrible_, et parfois ils peuvent avoir raison. La directive `@extend` est si puissante qu’elle peut aboutir à des extensions [démesurées](http://pastebin.com/Jy9PqFTy). C’est pourquoi il faut toujours être attentif lorsqu’on étend un sélecteur car il étendra _toutes_ les occurrences du sélecteur - ce qui peut rapidement compliquer les choses.\n\n```scss\n.important {\n  font-weight: bold;\n}\n\n.sidebar .important {\n  color: red;\n}\n\n.message {\n  @extend .important;\n}\n```\n\nLa compilation en CSS donne\u0026nbsp;:\n\n```css\n.important,\n.message {\n  font-weight: bold;\n}\n\n.sidebar .important,\n.sidebar .message {\n  color: red;\n}\n```\n\nComme vous le voyez, non seulement `.message` a hérité de `.important`, mais il a aussi hérité des instances où `.important` est un sélecteur descendant. Si c’est ce que vous aviez souhaité c’est parfait, mais il arrive que ce soit un effet non désiré, il convient donc d’être prudent avec la directive `@extend`, soit en s’assurant que le sélecteur à partir duquel vous faites l’extension n’existe qu’à un endroit dans votre CSS, soit en étendant un placeholder -\u0026nbsp;qui est fait pour cela.\n\nDans tous les cas, rappelez-vous que [Sass ne crée pas de mauvais code](http://thesassway.com/editorial/sass-doesnt-create-bad-code-bad-coders-do), ce sont les mauvais développeurs qui le font.\n\n## Préserver l’ordre des sources\n\nUne caractéristique peu connue de @extend dans Sass est la façon dont elle traite l’ordre des sources. Prenons le code suivant\u0026nbsp;:\n\n```scss\n.half-red {\n  color: rgba(red, 0.5);\n}\n\n.message-error {\n  color: red;\n  @extend .half-red;\n}\n```\n\nMis à part le côté non-sémantique du nommage des classes, le code est correct et vous vous attendez à un résultat du genre\u0026nbsp;:\n\n```css\n/* Ceci ne sera pas le résultat de la compilation ! */\n.message-error {\n  color: red;\n  color: rgba(255, 0, 0, 0.5);\n}\n```\n\nCe serait une façon simple de permettre une [dégradation élégante](http://fr.wikipedia.org/wiki/Amélioration_progressive) pour les navigateurs anciens qui ne supportent pas `rgba()`. Pourtant, ce n’est pas le résultat que nous obtiendrons, au contraire nous aurons\u0026nbsp;:\n\n```css\n.half-red,\n.message-error {\n  color: rgba(255, 0, 0, 0.5);\n}\n\n.message-error {\n  color: red;\n}\n```\n\nMais pourquoi donc ? me direz-vous. Eh bien parce que la directive @extend fonctionne à l’envers. La [documentation Sass](https://sass-lang.com/documentation/at-rules/extend) indique que\u0026nbsp;:\n\n\u003e _@extend fonctionne en insérant le \"sélecteur étendant\" partout où le \"sélecteur étendu\" apparaît dans la feuille de style_.\n\nDans notre exemple, le \"sélecteur étendant\" est `.message-error` et le sélecteur étendu est `.half-red`.\n\n## Extensions optionnelles\n\nSelon les applications sur lesquelles vous travaillez, vous êtes peut-être amenés à utiliser des frameworks tiers ou des widgets. Si certains sont écrits en Sass, rien ne vous empêche d’étendre des sélecteurs de ces fichiers.\n\nMalheureusement, si le sélecteur étendu n’existe pas, Sass renverra un message d’erreur et la compilation échouera\u0026nbsp;:\n\n\u003e _\".message-error\" “ failed to @extend “.important”_.  \n\u003e _The selector “.important” was not found_.  \n\u003e _Use “@extend .important !optional” if the extend should be able to fail_.\n\nComme vous le voyez, vous pouvez passer un flag `!optional` à vos imports pour éviter qu’ils n’échouent si le sélecteur étendu n’est pas trouvé. Ça peut être utile en cas de conflit entre les sélecteurs étendu et étendant\u0026nbsp;:\n\n```scss\na.important {\n  font-weight: bold;\n}\n\np.message-error {\n  @extend .important;\n}\n```\n\nDe fait, cela enverra un message d’erreur car les deux sélecteurs sont spécifiés et il est donc impossible de les unifier\u0026nbsp;:\n\n\u003e _No selectors matching “_  \n\u003e _.important” could be unified with “p.message-error”_.  \n\u003e _Use “@extend .important !optional” if the extend should be able to fail_.\n\nL’ajout de `!optional` à votre `@extend` résoudra ce problème.\n\n## Extensions et media queries\n\nL’un des principaux problèmes avec `@extend` est son incompatibilité avec la directive `@media`\u0026nbsp;: impossible d’étendre à l’intérieur de @media un sélecteur défini à l’extérieur. Malheureusement, Sass ne permet pas les extensions cross-media.\n\n```scss\n.important {\n  font-weight: bold;\n}\n\n@media (max-width: 767px) {\n  .message-error {\n    @extend .important;\n  }\n}\n```\n\nVous obtiendrez le message d’erreur suivant\u0026nbsp;:\n\n\u003e _You may not @extend an outer selector from within @media_.  \n\u003e _You may only @extend selectors within the same directive_.\n\nCela est dû au fait que @extend fonctionne en déplaçant les sélecteurs, pas les règles CSS, comme nous l’avons vu tout à l’heure au sujet de l’ordre des sources. Si Sass le permettait, alors l’extension d’un sélecteur situé dans un autre media query donnerait quelque chose comme cela\u0026nbsp;:\n\n```scss\n.règle, @media(max-width: 767px) { .autre-règle }, .encore-une-autre-règle {\n  /* ... */\n}\n```\n\n...ce qui n’est clairement pas du CSS valide.\n\nCeci étant, les développeurs de Sass sont tout à fait conscients du problème, comme le montre le nombre d’occurrences sur leur repo : [#501](https://github.com/nex3/sass/issues/501), [#640](https://github.com/nex3/sass/issues/640), [#915](https://github.com/nex3/sass/issues/915), [#1050](https://github.com/nex3/sass/issues/1050), [#1083](https://github.com/nex3/sass/issues/1083).\n\nIl est donc très probable qu’une solution soit proposée bientôt. Si l’on en croit [ce commentaire](https://github.com/nex3/sass/issues/640#issuecomment-16537355) de Nex3 (un des principaux développeurs de Sass), ce serait une _mixin interpolation_.\n\n## Bonnes pratiques\n\nEn résumé, voici ce que j’appellerais les bonnes pratiques d’@extend.\n\n- Vérifiez que le sélecteur étendu est présent, une seule fois, dans la feuille de style.\n- Évitez d’étendre depuis des sélecteurs imbriqués.\n- Évitez d’enchaîner les directives @extend.\n- N’essayez pas d’étendre à l’intérieur d’un media query, ça ne marchera pas.\n"},{"slug":"svg-la-syntaxe-path","title":"SVG, la syntaxe Path","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"03 octobre 2016","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/svg-path-syntax-illustrated-guide/","copyright":"2016"},"dateCascade":"29 décembre 2016","dateMachine":"2O161229","tags":["svg"],"about":[],"excerpt":"L'élément path de SVG est l'outil de dessin le plus perfectionné qui soit, mais sa syntaxe ne semble pas aisée. Chris Coyier décortique brillamment ce langage, pas si compliqué finalement.","featured":false,"featuredImage":"/images/two-handles.webp","order":null,"content":"\nL'élément `\u003cpath\u003e` de SVG (_path_ est le chemin) est l\u0026rsquo;outil de dessin le plus perfectionné qui soit. Il peut dessiner absolument n'importe quoi\u0026nbsp;! Sous le capot, d'après mes infos, tous les autres éléments utilisent path. Cet élément prend un argument unique pour décrire tout ce qu'il dessine\u0026nbsp;: l'attribut `d`. Ce dernier a sa syntaxe bien à lui, qui peut paraître indéchiffrable\u0026nbsp;: une kyrielle de chiffres et de lettres qui se suivent. Comme pour tout avec les ordinateurs, il y a une explication et, bien que non expert, j'ai pensé que ça pourrait être amusant de s'y plonger.\n\nVoici un exemple de complexité moyenne\u0026nbsp;:\n\n```\n//SVG\n\u003cpath d=\"M213.1,6.7c-32.4-14.4-73.7,0-88.1,30.6C110.6,4.9,67.5-9.5,36.9,\n6.7C2.8,22.9-13.4,62.4,13.5,110.9,C33.3,145.1,67.5,170.3,125,217c59.3-46.7,\n93.5-71.9,111.5-106.1C263.4,64.2,247.2,22.9,213.1,6.7z\"/\u003e\n```\n\nOn pourrait le reformater ainsi, le code serait toujours valide\u0026nbsp;:\n\n```\n\u003cpath d=\"\n  M 213.1,6.7\n  c -32.4-14.4-73.7,0-88.1,30.6\n  C 110.6,4.9,67.5-9.5,36.9,6.7\n  C 2.8,22.9-13.4,62.4,13.5,110.9\n  C 33.3,145.1,67.5,170.3,125,217\n  c 59.3-46.7,93.5-71.9,111.5-106.1\n  C 263.4,64.2,247.2,22.9,213.1,6.7z\"\n   /\u003e\n```\n\nLes lettres sont des **commandes**. Les nombres sont des **valeurs** passées à ces commandes. Toutes les virgules sont optionnelles, on pourrait aussi bien avoir des espaces.\nPar exemple, la première commande est `M`. Métaphoriquement, `M` dit _prend ton crayon et déplace le exactement vers le point de coordonnées 231.1, 6.7_. On ne dessine rien pour l'instant, on déplace juste le crayon à ces coordonnées. Si d'autres commandes suivent, elles commenceront à cet endroit.\n\n`M` est juste une des multiples commandes disponibles pour path. Si j'ai bien compté, il y en a 18 en tout.\n\nLa plupart viennent par deux, il y a une version en majuscules et une version en minuscules. La version en majuscules est la version **absolue**, celle en minuscules est la version **relative**. Continuons avec notre exemple M\u0026nbsp;:\n\n- `M 100,100` signifie _prend le crayon et déplace le exactement au point de coordonnées 100,100_.\n- `m 100,100` signifie _déplace le crayon de 100 vers le bas et 100 vers la droite, à partir de l'endroit où tu te trouves_.\n\nBeaucoup de commandes fonctionnent ainsi. La version en minuscules intègre la position actuelle du \"crayon\".\n\nRegardons deux commandes absolues :\n\n\u003cp\u003e\u003csvg class=\"svg-diagram\" id=\"30b0a937-781e-4bc2-826b-23b608e63c3c\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.36 176.56\"\u003e\u003ctitle\u003ecommands\u003c/title\u003e\u003crect x=\"248.67\" y=\"-0.56\" width=\"193.69\" height=\"176.56\" fill=\"#dbdbdb\"\u003e\u003c/rect\u003e\u003crect y=\"-0.56\" width=\"248.67\" height=\"176.41\"\u003e\u003c/rect\u003e\u003cellipse cx=\"200.31\" cy=\"67.28\" rx=\"63.08\" ry=\"28.72\" fill=\"#00c8e7\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(16.48 23.49)\" font-size=\"12\" fill=\"#fff\" font-family=\"Monospace\"\u003e\u0026lt;svg viewBox=\"0 0 100 100\"\u0026gt;\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"28.8\"\u003e  \u0026lt;path d=\"      \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan fill=\"#00c8e7\"\u003e\u003ctspan x=\"0\" y=\"57.6\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"57.6\"\u003eM 50,50\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan fill=\"#ed1c24\"\u003e\u003ctspan x=\"0\" y=\"72\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"72\"\u003eL 100,100\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"100.8\"\u003e   \" /\u0026gt;\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"115.2\"\u003e        \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"129.6\"\u003e\u0026lt;/svg\u0026gt; \u003c/tspan\u003e\u003c/text\u003e\u003cline x1=\"274.12\" y1=\"18.9\" x2=\"418.12\" y2=\"18.9\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"297.01\" y1=\"18.47\" x2=\"297.01\" y2=\"15.04\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"318.04\" y1=\"18.66\" x2=\"318.04\" y2=\"11.46\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"337.68\" y1=\"18.47\" x2=\"337.68\" y2=\"15.04\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"358.71\" y1=\"18.66\" x2=\"358.71\" y2=\"11.46\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"377.18\" y1=\"18.47\" x2=\"377.18\" y2=\"15.04\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"398.21\" y1=\"18.66\" x2=\"398.21\" y2=\"11.46\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003crect x=\"274.82\" y=\"19.44\" width=\"142.41\" height=\"143.74\" fill=\"#fff\"\u003e\u003c/rect\u003e\u003cline x1=\"316.97\" y1=\"61.87\" x2=\"356.45\" y2=\"101.35\" fill=\"none\" stroke=\"#ed1c24\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.34\" y1=\"18.85\" x2=\"274.34\" y2=\"162.85\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"41.73\" x2=\"270.48\" y2=\"41.73\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"62.76\" x2=\"266.9\" y2=\"62.76\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"82.4\" x2=\"270.48\" y2=\"82.4\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"103.43\" x2=\"266.9\" y2=\"103.43\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"121.9\" x2=\"270.48\" y2=\"121.9\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"142.93\" x2=\"266.9\" y2=\"142.93\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003ccircle cx=\"316.97\" cy=\"60.87\" r=\"3.85\" fill=\"#00c8e7\"\u003e\u003c/circle\u003e\u003ccircle cx=\"357.64\" cy=\"102.15\" r=\"3.85\" fill=\"#ed1c24\"\u003e\u003c/circle\u003e\u003ctext transform=\"translate(155 63)\" font-size=\"11\" fill=\"#fff\"\u003ePrendre le crayon et \u003ctspan x=\"5\" y=\"15.73\"\u003el'amener à 50,50\u003c/tspan\u003e\u003c/text\u003e\u003cellipse cx=\"209.03\" cy=\"119.08\" rx=\"76.92\" ry=\"31.28\" fill=\"#c1272d\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(152 115)\" font-size=\"11\" fill=\"#fff\"\u003ePoser le crayon et tracer\u003ctspan x=\"5\" y=\"15.73\"\u003eune ligne vers 100,100\u003c/tspan\u003e\u003c/text\u003e\u003c/svg\u003e\u003c/p\u003e\n\nSuivies par une commande relative :\n\n\u003cp\u003e\u003csvg class=\"svg-diagram\" id=\"bde5da9c-373a-4020-a3d3-91019a30e75c\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.36 176.56\"\u003e\u003ctitle\u003ecommands\u003c/title\u003e\u003crect x=\"249.31\" y=\"1.13\" width=\"193.69\" height=\"176.56\" fill=\"#dbdbdb\"\u003e\u003c/rect\u003e\u003crect x=\"0.64\" y=\"1.13\" width=\"248.67\" height=\"176.41\"\u003e\u003c/rect\u003e\u003cellipse cx=\"200.95\" cy=\"68.97\" rx=\"63.08\" ry=\"28.72\" fill=\"#0bb70b\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(17.12 25.18)\" font-size=\"12\" fill=\"#fff\" font-family=\"monospace\"\u003e\u0026lt;svg viewBox=\"0 0 100 100\"\u0026gt;\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"28.8\"\u003e  \u0026lt;path d=\"      \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan fill=\"#00c8e7\"\u003e\u003ctspan x=\"0\" y=\"57.6\" letter-spacing=\"28\"\u003e\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"57.6\" fill=\"#fff\"\u003eM 50,50\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"72\" letter-spacing=\"28\"\u003e\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"72\"\u003eL 100,100\u003c/tspan\u003e\u003ctspan fill=\"lime\"\u003e\u003ctspan x=\"0\" y=\"86.4\" letter-spacing=\"28\"\u003e\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"86.4\"\u003el 25,0\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"115.2\"\u003e   \" /\u0026gt;\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"129.6\"\u003e\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"144\"\u003e\u0026lt;/svg\u0026gt; \u003c/tspan\u003e\u003c/text\u003e\u003cline x1=\"274.76\" y1=\"20.59\" x2=\"418.76\" y2=\"20.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"297.65\" y1=\"20.16\" x2=\"297.65\" y2=\"16.73\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"318.68\" y1=\"20.35\" x2=\"318.68\" y2=\"13.15\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"338.32\" y1=\"20.16\" x2=\"338.32\" y2=\"16.73\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"359.35\" y1=\"20.35\" x2=\"359.35\" y2=\"13.15\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"377.82\" y1=\"20.16\" x2=\"377.82\" y2=\"16.73\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"398.85\" y1=\"20.35\" x2=\"398.85\" y2=\"13.15\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003crect x=\"275.46\" y=\"21.13\" width=\"142.41\" height=\"143.74\" fill=\"#fff\"\u003e\u003c/rect\u003e\u003cline x1=\"318.96\" y1=\"62.26\" x2=\"357.09\" y2=\"103.04\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.98\" y1=\"20.54\" x2=\"274.98\" y2=\"164.54\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.55\" y1=\"43.43\" x2=\"271.12\" y2=\"43.43\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.74\" y1=\"64.46\" x2=\"267.54\" y2=\"64.46\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.55\" y1=\"84.09\" x2=\"271.12\" y2=\"84.09\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.74\" y1=\"105.12\" x2=\"267.54\" y2=\"105.12\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.55\" y1=\"123.59\" x2=\"271.12\" y2=\"123.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.74\" y1=\"144.62\" x2=\"267.54\" y2=\"144.62\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003ccircle cx=\"358.28\" cy=\"103.85\" r=\"3.85\" fill=\"lime\"\u003e\u003c/circle\u003e\u003ctext transform=\"translate(145 66)\" font-size=\"11\" fill=\"#fff\"\u003eDe \u003ctspan x=\"17\" y=\"0\"\u003e la position courante\u003c/tspan\u003e\u003ctspan x=\"12\" y=\"15.73\"\u003ealler à droite de 25\u003c/tspan\u003e\u003c/text\u003e\u003cline x1=\"358.28\" y1=\"103.85\" x2=\"376.85\" y2=\"103.85\" fill=\"none\" stroke=\"lime\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/p\u003e\n\nDe même que les commandes `M` et `m`, `L` et `l` prennent deux nombres représentant des coordonnées absolues ou relatives. Il y a quatre autres commandes qui sont en fait des versions simplifiées des commandes de ligne. Elles dessinent aussi des lignes, mais ne prennent qu'une seule valeur: horizontale ou verticale. Lorsque nous avons utilisé `l 25,0` nous aurions pu utiliser `h 25` à la place, qui signifie _de l'endroit où se trouve le crayon actuellement, dessine vers la droite, de 25_. C'est juste plus succinct. Son grand frère `H`, comme on le devine, signifie dessiner vers la coordonnée horizontale exacte 25. `V` et `v` sont les équivalents pour la direction verticale. Vous vous en doutiez, pas vrai\u0026nbsp;?\n\nJetez un coup d'oeil à cette démo de Chris Nager, dans laquelle il dessine une croix avec un code incroyablement concis grâce aux coordonnées relatives\u0026nbsp;:\n\n\u003cdiv class=\"drag-wrap ui-resizable\"\u003e\u003ciframe id=\"cp_embed_armzk\" src=\"//codepen.io/chrisnager/embed/armzk?height=441\u0026amp;theme-id=1\u0026amp;slug-hash=armzk\u0026amp;default-tab=html%2Cresult\u0026amp;user=chrisnager\u0026amp;embed-version=2\"  height=\"441\" allowfullscreen name=\"CodePen Embed\" title=\"CodePen Embed 2\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003cdiv class=\"ui-resizable-handle ui-resizable-e\" style=\"z-index: 90;\"\u003e\u003c/div\u003e\u003c/div\u003e\n\nVous avez remarqué le dernier caractère utilisé par Chris\u0026nbsp;? `Z`.\n`Z` (ou `z`, ça n'a pas d'importance) \"ferme\" le chemin. Comme toutes les autres commandes, il est optionnel. C'est une manière facile de tracer une ligne droite directement vers le dernier point où le \"crayon\" a été posé (probablement une commande `M` ou `m`), qui vous évite d'avoir à répéter ce premier point et à utiliser une commande pour y parvenir.\n\n\u003cp\u003e\u003csvg class=\"svg-diagram\" id=\"92b91dc8-219b-4ed7-a84f-2a1883b926ae\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.36 198.82\"\u003e\u003ctitle\u003ecommands\u003c/title\u003e\u003crect x=\"248.67\" width=\"193.69\" height=\"199.64\" fill=\"#dbdbdb\"\u003e\u003c/rect\u003e\u003crect width=\"248.67\" height=\"199.47\"\u003e\u003c/rect\u003e\u003ctext transform=\"translate(16.48 24.05)\" font-size=\"12\" fill=\"#fff\" font-family=\"Monospace\"\u003e\u0026lt;svg viewBox=\"0 0 100 100\"\u0026gt;\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"28.8\"\u003e  \u0026lt;path d=\"      \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan fill=\"#00c8e7\"\u003e\u003ctspan x=\"0\" y=\"57.6\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"57.6\" fill=\"#fff\"\u003eM 50,50\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"72\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"72\"\u003eL 100,100\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"86.4\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"86.4\"\u003el 25,0\u003c/tspan\u003e\u003ctspan fill=\"lime\"\u003e\u003ctspan x=\"0\" y=\"100.8\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"100.8\" fill=\"#d846f7\"\u003eZ\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"129.6\"\u003e   \" /\u0026gt;\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"144\"\u003e        \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"158.4\"\u003e\u0026lt;/svg\u0026gt; \u003c/tspan\u003e\u003c/text\u003e\u003cline x1=\"274.12\" y1=\"19.46\" x2=\"418.12\" y2=\"19.46\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"297.01\" y1=\"19.03\" x2=\"297.01\" y2=\"15.6\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"318.04\" y1=\"19.22\" x2=\"318.04\" y2=\"12.02\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"337.68\" y1=\"19.03\" x2=\"337.68\" y2=\"15.6\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"358.71\" y1=\"19.22\" x2=\"358.71\" y2=\"12.02\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"377.18\" y1=\"19.03\" x2=\"377.18\" y2=\"15.6\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"398.21\" y1=\"19.22\" x2=\"398.21\" y2=\"12.02\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003crect x=\"274.82\" y=\"20\" width=\"142.41\" height=\"143.74\" fill=\"#fff\"\u003e\u003c/rect\u003e\u003cline x1=\"318.32\" y1=\"61.14\" x2=\"356.45\" y2=\"101.91\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.34\" y1=\"19.41\" x2=\"274.34\" y2=\"163.41\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"42.3\" x2=\"270.48\" y2=\"42.3\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"63.33\" x2=\"266.9\" y2=\"63.33\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"82.96\" x2=\"270.48\" y2=\"82.96\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"103.99\" x2=\"266.9\" y2=\"103.99\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"122.46\" x2=\"270.48\" y2=\"122.46\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"143.49\" x2=\"266.9\" y2=\"143.49\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"356.64\" y1=\"101.72\" x2=\"375.21\" y2=\"101.72\" fill=\"none\" stroke=\"#42210b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"375.21\" y1=\"101.72\" x2=\"318.32\" y2=\"61.14\" fill=\"none\" stroke=\"#d846f7\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003ccircle cx=\"319.26\" cy=\"61.9\" r=\"3.08\" fill=\"#d846f7\"\u003e\u003c/circle\u003e\u003cellipse cx=\"208.64\" cy=\"89.4\" rx=\"72.37\" ry=\"23.66\" fill=\"#d846f7\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(159 86)\" font-size=\"12\" fill=\"#fff\"\u003eTracer une ligne vers\u003ctspan x=\"5\" y=\"16\"\u003ele point de départ\u003c/tspan\u003e\u003c/text\u003e\u003c/svg\u003e\u003c/p\u003e\n\nRécapitulons les commandes dont nous disposons jusqu'à présent\u0026nbsp;:\n\n\u003ctable class=\"specificTable\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eM\u003c/strong\u003e x,y\u003c/td\u003e\u003ctd\u003eAller vers les coordonnées absolues x,y\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003em\u003c/strong\u003e x,y\u003c/td\u003e\u003ctd\u003eAller de x vers la droite et de y vers le bas (ou gauche et haut si les valeurs sont négatives)\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eL\u003c/strong\u003e x,y\u003c/td\u003e\u003ctd\u003eTracer une ligne droite vers le point de coordonnées absolues x,y\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003el\u003c/strong\u003e x,y\u003c/td\u003e\u003ctd\u003eTracer une ligne droite vers un point situé à x vers la droite et y vers la gauche relativement (ou gauche et droite si les valeurs sont négatives\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eH\u003c/strong\u003e x\u003c/td\u003e\u003ctd\u003eTracer une ligne horizontale vers la coordonnée x exacte\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eh\u003c/strong\u003e x\u003c/td\u003e\u003ctd\u003eTracer une ligne horizontale à droite vers le x relatif (ou vers la gauche si la valeur est négative)\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eV\u003c/strong\u003e y\u003c/td\u003e\u003ctd\u003eTracer une ligne verticale vers la coordonnée y exacte\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003ev\u003c/strong\u003e y\u003c/td\u003e\u003ctd\u003eTracer une ligne verticale en bas vers le y relatif (ou vers le haut si la valeur est négative)\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eZ\u003c/strong\u003e (ou \u003cstrong\u003ez\u003c/strong\u003e)\u003c/td\u003e\u003ctd\u003eTracer une ligne droite pour revenir au début du chemin\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\nPour l'instant, nous n'avons eu affaire qu'à des lignes droites. Path est un élément et une syntaxe parfaitement acceptable pour cela, même si l'on pourrait avancer que des éléments comme `\u003cpolygon\u003e` ont une syntaxe encore plus simple, quoiqu'un peu plus limitée (👉🏾 [plus d'infos sur les polygones SVG](/articles/les-bases-de-svg-polygones/) dans les bases SVG de La Cascade\\_.)\n\nC'est avec les courbes que path montre ses super-pouvoirs\u0026nbsp;! Si vous voulez rappelez, le premier extrait de code que nous avons vu comportait un tas de commandes `C` et `c`. Ce sont les [Courbes de Bézier](https://fr.wikipedia.org/wiki/Courbe_de_B%C3%A9zier) et elles ont besoin de plus d'infos pour faire leur boulot.\n\nLa commande C a besoin de trois points. Les deux premiers définissent la localisation des deux poignées, c'est un concept qui vous est sans doute familier si vous utilisez Adobe Illustrator ou Sketch.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/two-handles.webp\" width=\"1278\" height=\"562\" alt=\"Une courbe de Bezier et ses deux poignées\"/\u003e\u003c/figure\u003e\n\nLe dernier des trois points est l'endroit où la courbe s'achève. Voici une illustration de la commande `C`\u0026nbsp;:\n\n\u003cp\u003e\u003csvg class=\"svg-diagram\" id=\"b543c792-af78-4cd4-b924-483ef7d93cf6\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.36 200.13\"\u003e\u003ctitle\u003ecommands\u003c/title\u003e\u003crect x=\"248.53\" y=\"0.06\" width=\"193.69\" height=\"199.85\" fill=\"#dbdbdb\"\u003e\u003c/rect\u003e\u003crect x=\"-0.64\" y=\"0.56\" width=\"248.67\" height=\"199.68\"\u003e\u003c/rect\u003e\u003ctext transform=\"translate(15.84 24.62)\" font-size=\"12\" fill=\"#fff\" font-family=\"Monospace\"\u003e\u0026lt;svg viewBox=\"0 0 100 100\"\u0026gt;\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"28.8\"\u003e  \u0026lt;path d=\"  \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan fill=\"#00c8e7\"\u003e\u003ctspan x=\"0\" y=\"57.6\" letter-spacing=\"28\"\u003e\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"57.6\"\u003eM 25,50\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"72\" letter-spacing=\"28\"\u003e\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"72\"\u003eC \u003c/tspan\u003e\u003ctspan x=\"50.4\" y=\"72\" fill=\"#e85b62\"\u003e25,100\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"86.4\" letter-spacing=\"28\"\u003e\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"86.4\" style=\"white-space:pre\"\u003e\u003c/tspan\u003e\u003ctspan x=\"50.4\" y=\"86.4\" fill=\"#18d344\"\u003e150,100\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"100.8\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"100.8\" style=\"white-space:pre\"\u003e  \u003c/tspan\u003e\u003ctspan x=\"50.4\" y=\"100.8\" fill=\"#b645ff\"\u003e150,50\u003c/tspan\u003e\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"129.6\"\u003e   \" /\u0026gt;\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"144\"\u003e\u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"158.4\"\u003e\u0026lt;/svg\u0026gt; \u003c/tspan\u003e\u003c/text\u003e\u003cline x1=\"280.48\" y1=\"17.03\" x2=\"424.48\" y2=\"17.03\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"303.37\" y1=\"16.6\" x2=\"303.37\" y2=\"13.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"324.4\" y1=\"16.79\" x2=\"324.4\" y2=\"9.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"344.03\" y1=\"16.6\" x2=\"344.03\" y2=\"13.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"365.06\" y1=\"16.79\" x2=\"365.06\" y2=\"9.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"383.53\" y1=\"16.6\" x2=\"383.53\" y2=\"13.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"404.56\" y1=\"16.79\" x2=\"404.56\" y2=\"9.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003crect x=\"281.18\" y=\"17.56\" width=\"142.41\" height=\"143.74\" fill=\"#fff\"\u003e\u003c/rect\u003e\u003cline x1=\"280.7\" y1=\"16.97\" x2=\"280.7\" y2=\"160.97\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"280.27\" y1=\"39.86\" x2=\"276.84\" y2=\"39.86\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"280.46\" y1=\"60.89\" x2=\"273.26\" y2=\"60.89\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"280.27\" y1=\"80.53\" x2=\"276.84\" y2=\"80.53\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"280.46\" y1=\"101.56\" x2=\"273.26\" y2=\"101.56\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"280.27\" y1=\"120.03\" x2=\"276.84\" y2=\"120.03\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"280.46\" y1=\"141.06\" x2=\"273.26\" y2=\"141.06\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cpath d=\"M303.72,61c-0.49,39.75,99.93,40.07,100,0\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/path\u003e\u003cellipse cx=\"198.87\" cy=\"67.96\" rx=\"62.28\" ry=\"16.54\" fill=\"#e85b62\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(160 72.28)\" font-size=\"12\" fill=\"#fff\"\u003eBezier point #1\u003c/text\u003e\u003cellipse cx=\"211.55\" cy=\"96.68\" rx=\"62.28\" ry=\"16.54\" fill=\"#18d344\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(172 100)\" font-size=\"12\" fill=\"#fff\"\u003eBezier point #2\u003c/text\u003e\u003cellipse cx=\"190.34\" cy=\"124.36\" rx=\"62.28\" ry=\"16.54\" fill=\"#b645ff\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(163 129)\" font-size=\"12\" fill=\"#fff\"\u003ePoint final\u003c/text\u003e\u003ccircle cx=\"303.23\" cy=\"60.62\" r=\"3.33\" fill=\"#00c8e7\"\u003e\u003c/circle\u003e\u003ccircle cx=\"403.79\" cy=\"60.62\" r=\"3.33\" fill=\"#b645ff\"\u003e\u003c/circle\u003e\u003ccircle cx=\"303.23\" cy=\"100.75\" r=\"3.33\" fill=\"#e85b62\"\u003e\u003c/circle\u003e\u003ccircle cx=\"403.48\" cy=\"100.75\" r=\"3.33\" fill=\"#18d344\"\u003e\u003c/circle\u003e\u003cline x1=\"303.23\" y1=\"60.62\" x2=\"303.23\" y2=\"62.12\" fill=\"none\" stroke=\"#e85b62\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"303.23\" y1=\"64.97\" x2=\"303.23\" y2=\"97.82\" fill=\"none\" stroke=\"#e85b62\" stroke-miterlimit=\"10\" stroke-dasharray=\"2.86 2.86\"\u003e\u003c/line\u003e\u003cline x1=\"303.23\" y1=\"99.25\" x2=\"303.23\" y2=\"100.75\" fill=\"none\" stroke=\"#e85b62\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"403.49\" y1=\"60.62\" x2=\"403.49\" y2=\"62.12\" fill=\"none\" stroke=\"#18d344\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"403.49\" y1=\"64.97\" x2=\"403.49\" y2=\"97.82\" fill=\"none\" stroke=\"#18d344\" stroke-miterlimit=\"10\" stroke-dasharray=\"2.86 2.86\"\u003e\u003c/line\u003e\u003cline x1=\"403.49\" y1=\"99.25\" x2=\"403.49\" y2=\"100.75\" fill=\"none\" stroke=\"#18d344\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003c/svg\u003e\u003c/p\u003e\n\nLa commande `c` (minuscule) est exactement la même, sauf que les trois points utilisent des valeurs relatives.\n\nLa commande `S` (ou `s`) est la petite soeur des commandes `C` en ce sens qu'elle ne nécessite que deux points\u0026nbsp;: elle _suppose_ que son premier point de Bézier est le dernier point de Bezier de la commande S ou C qui précède.\n\n\u003cp\u003e\u003csvg class=\"svg-diagram\" id=\"4e6b7521-7005-48bf-b6ab-50f96599a0a9\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.36 191\"\u003e\u003ctitle\u003ecommands\u003c/title\u003e\u003crect x=\"249.31\" y=\"0.56\" width=\"193.69\" height=\"190.35\" fill=\"#dbdbdb\"\u003e\u003c/rect\u003e\u003crect x=\"0.64\" y=\"0.56\" width=\"248.67\" height=\"190.19\"\u003e\u003c/rect\u003e\u003ctext transform=\"translate(17.12 24.62)\" font-size=\"12\" fill=\"#fff\" font-family=\"Monospace\"\u003e\u0026lt;svg viewBox=\"0 0 100 100\"\u0026gt;\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"28.8\"\u003e  \u0026lt;path d=\"      \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"57.6\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"57.6\"\u003eM 25,100\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"72\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"72\"\u003eC 25,150 75,150 75,100\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"86.4\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"86.4\"\u003eS \u003c/tspan\u003e\u003ctspan x=\"50.4\" y=\"86.4\" fill=\"#28db39\"\u003e100,25\u003c/tspan\u003e\u003ctspan x=\"93.6\" y=\"86.4\"\u003e \u003c/tspan\u003e\u003ctspan x=\"100.8\" y=\"86.4\" fill=\"#00c8e7\"\u003e150,75\u003c/tspan\u003e\u003ctspan x=\"144\" y=\"86.4\"\u003e \u003c/tspan\u003e\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"115.2\"\u003e   \" /\u0026gt;\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"129.6\"\u003e        \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"144\"\u003e\u0026lt;/svg\u0026gt; \u003c/tspan\u003e\u003c/text\u003e\u003cline x1=\"274.76\" y1=\"20.03\" x2=\"418.76\" y2=\"20.03\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"297.65\" y1=\"19.6\" x2=\"297.65\" y2=\"16.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"318.68\" y1=\"19.79\" x2=\"318.68\" y2=\"12.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"338.32\" y1=\"19.6\" x2=\"338.32\" y2=\"16.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"359.35\" y1=\"19.79\" x2=\"359.35\" y2=\"12.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"377.82\" y1=\"19.6\" x2=\"377.82\" y2=\"16.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"398.85\" y1=\"19.79\" x2=\"398.85\" y2=\"12.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003crect x=\"275.96\" y=\"20.56\" width=\"142.41\" height=\"143.74\" fill=\"#fff\"\u003e\u003c/rect\u003e\u003cline x1=\"274.98\" y1=\"19.97\" x2=\"274.98\" y2=\"163.97\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.55\" y1=\"42.86\" x2=\"271.12\" y2=\"42.86\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.74\" y1=\"63.89\" x2=\"267.54\" y2=\"63.89\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.55\" y1=\"83.53\" x2=\"271.12\" y2=\"83.53\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.74\" y1=\"104.56\" x2=\"267.54\" y2=\"104.56\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.55\" y1=\"123.03\" x2=\"271.12\" y2=\"123.03\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.74\" y1=\"144.06\" x2=\"267.54\" y2=\"144.06\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cg opacity=\"0.25\"\u003e\u003cline x1=\"297.51\" y1=\"104.62\" x2=\"297.51\" y2=\"106.12\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"297.51\" y1=\"108.97\" x2=\"297.51\" y2=\"141.82\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-dasharray=\"2.86 2.86\"\u003e\u003c/line\u003e\u003cline x1=\"297.51\" y1=\"143.25\" x2=\"297.51\" y2=\"144.75\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003c/g\u003e\u003cg opacity=\"0.25\"\u003e\u003cline x1=\"339.77\" y1=\"104.62\" x2=\"339.77\" y2=\"106.12\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"339.77\" y1=\"108.97\" x2=\"339.77\" y2=\"141.82\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-dasharray=\"2.86 2.86\"\u003e\u003c/line\u003e\u003cline x1=\"339.77\" y1=\"143.25\" x2=\"339.77\" y2=\"144.75\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003c/g\u003e\u003ccircle cx=\"297.51\" cy=\"144.75\" r=\"3.33\" opacity=\"0.25\"\u003e\u003c/circle\u003e\u003ccircle cx=\"339.76\" cy=\"144.75\" r=\"3.33\" opacity=\"0.25\"\u003e\u003c/circle\u003e\u003ccircle cx=\"358.64\" cy=\"40.5\" r=\"3.33\" fill=\"#28db39\"\u003e\u003c/circle\u003e\u003cpath d=\"M298.5,105c-0.2,39.75,41.5,40.5,41.5,0s18.64-66.5,57.65-23.13\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/path\u003e\u003cline x1=\"340.13\" y1=\"107.13\" x2=\"340.13\" y2=\"105.63\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"340.13\" y1=\"102.78\" x2=\"340.13\" y2=\"69.93\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\" stroke-dasharray=\"2.86 2.86\"\u003e\u003c/line\u003e\u003cline x1=\"340.13\" y1=\"68.5\" x2=\"340.13\" y2=\"67\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003ccircle cx=\"340.14\" cy=\"67\" r=\"3.33\" fill=\"#c552d1\"\u003e\u003c/circle\u003e\u003cline x1=\"358.64\" y1=\"40.5\" x2=\"359.67\" y2=\"41.59\" fill=\"none\" stroke=\"#28db39\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"361.61\" y1=\"43.66\" x2=\"395.64\" y2=\"79.87\" fill=\"none\" stroke=\"#28db39\" stroke-miterlimit=\"10\" stroke-dasharray=\"2.84 2.84\"\u003e\u003c/line\u003e\u003cline x1=\"396.61\" y1=\"80.91\" x2=\"397.64\" y2=\"82\" fill=\"none\" stroke=\"#28db39\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003ccircle cx=\"397.64\" cy=\"82\" r=\"3.33\" fill=\"#00c8e7\"\u003e\u003c/circle\u003e\u003ccircle cx=\"340.07\" cy=\"104.62\" r=\"3.33\"\u003e\u003c/circle\u003e\u003ccircle cx=\"297.51\" cy=\"104.62\" r=\"3.33\"\u003e\u003c/circle\u003e\u003cellipse cx=\"261.12\" cy=\"56.86\" rx=\"62.28\" ry=\"16.54\" fill=\"#b645ff\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(221 62)\" font-size=\"12\" fill=\"#fff\"\u003eSUPPOSITION!\u003c/text\u003e\u003cellipse cx=\"227.62\" cy=\"124.86\" rx=\"62.28\" ry=\"16.54\" fill=\"#28db39\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(199 128)\" font-size=\"12\" fill=\"#fff\"\u003eBezier Point\u003c/text\u003e\u003cellipse cx=\"240.12\" cy=\"152.36\" rx=\"62.28\" ry=\"16.54\" fill=\"#00c8e7\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(214 156)\" font-size=\"12\" fill=\"#fff\"\u003ePoint final\u003c/text\u003e\u003c/svg\u003e\u003c/p\u003e\n\nLa commande `Q` est l'une des plus simples car elle ne requiert que deux points. Le point de Bézier requis est un point de contrôle \"quadratique\" de la courbe, tout se passe comme si le point de départ et d'arrivée partageaient un point unique qui serait l'extrémité de leur poignée respective.\nAutant parler de `T` dans la foulée : c'est la petite soeur de `Q`, comme `S` l'est de `C`. Lorsque T vient après Q, le point de contrôle est supposé être le même que le précédent, donc on n'a besoin de donner que le point final\u0026nbsp;:\n\n\u003cp\u003e\u003csvg class=\"svg-diagram\" id=\"75f4ac00-66b2-43bc-93aa-88e8ed5d7e45\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 442.36 191\"\u003e\u003ctitle\u003ecommands\u003c/title\u003e\u003crect x=\"248.67\" y=\"0.56\" width=\"193.69\" height=\"190.35\" fill=\"#dbdbdb\"\u003e\u003c/rect\u003e\u003crect y=\"0.56\" width=\"248.67\" height=\"190.19\"\u003e\u003c/rect\u003e\u003ctext transform=\"translate(16.48 24.62)\" font-size=\"12\" fill=\"#fff\" font-family=\"Monospace\"\u003e\u0026lt;svg viewBox=\"0 0 100 100\"\u0026gt;\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"28.8\"\u003e  \u0026lt;path d=\"      \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"57.6\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"57.6\"\u003eM 25,75\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"72\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"72\"\u003eQ \u003c/tspan\u003e\u003ctspan x=\"50.4\" y=\"72\" fill=\"#21d850\"\u003e50,150\u003c/tspan\u003e\u003ctspan x=\"93.6\" y=\"72\"\u003e \u003c/tspan\u003e\u003ctspan x=\"100.8\" y=\"72\" fill=\"#1cc1f4\"\u003e75,100\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"86.4\" letter-spacing=\"28\"\u003e\t\u003c/tspan\u003e\u003ctspan x=\"36\" y=\"86.4\"\u003eT \u003c/tspan\u003e\u003ctspan x=\"50.4\" y=\"86.4\" fill=\"#f92b66\"\u003e150,150\u003c/tspan\u003e\u003ctspan style=\"white-space:pre\"\u003e\u003ctspan x=\"0\" y=\"115.2\"\u003e   \" /\u0026gt;\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"129.6\"\u003e        \u003c/tspan\u003e\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"144\"\u003e\u0026lt;/svg\u0026gt; \u003c/tspan\u003e\u003c/text\u003e\u003cline x1=\"274.12\" y1=\"20.03\" x2=\"418.12\" y2=\"20.03\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"297.01\" y1=\"19.6\" x2=\"297.01\" y2=\"16.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"318.04\" y1=\"19.79\" x2=\"318.04\" y2=\"12.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"337.68\" y1=\"19.6\" x2=\"337.68\" y2=\"16.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"358.71\" y1=\"19.79\" x2=\"358.71\" y2=\"12.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"377.18\" y1=\"19.6\" x2=\"377.18\" y2=\"16.16\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"398.21\" y1=\"19.79\" x2=\"398.21\" y2=\"12.59\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003crect x=\"275.32\" y=\"20.56\" width=\"142.41\" height=\"143.74\" fill=\"#fff\"\u003e\u003c/rect\u003e\u003cline x1=\"274.34\" y1=\"19.97\" x2=\"274.34\" y2=\"163.97\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"42.86\" x2=\"270.48\" y2=\"42.86\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"63.89\" x2=\"266.9\" y2=\"63.89\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"83.53\" x2=\"270.48\" y2=\"83.53\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"104.56\" x2=\"266.9\" y2=\"104.56\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"273.91\" y1=\"123.03\" x2=\"270.48\" y2=\"123.03\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"274.1\" y1=\"144.06\" x2=\"266.9\" y2=\"144.06\" fill=\"none\" stroke=\"#35d34b\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"337.19\" y1=\"104.67\" x2=\"336.51\" y2=\"106\" fill=\"none\" stroke=\"#21d850\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"335.1\" y1=\"108.76\" x2=\"318.92\" y2=\"140.44\" fill=\"none\" stroke=\"#21d850\" stroke-miterlimit=\"10\" stroke-dasharray=\"3.09 3.09\"\u003e\u003c/line\u003e\u003cline x1=\"318.22\" y1=\"141.82\" x2=\"317.54\" y2=\"143.16\" fill=\"none\" stroke=\"#21d850\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"357.19\" y1=\"65.5\" x2=\"356.51\" y2=\"66.84\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"355.1\" y1=\"69.59\" x2=\"338.92\" y2=\"101.28\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\" stroke-dasharray=\"3.09 3.09\"\u003e\u003c/line\u003e\u003cline x1=\"338.22\" y1=\"102.65\" x2=\"337.54\" y2=\"103.99\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"317.37\" y1=\"143.16\" x2=\"316.89\" y2=\"141.74\" fill=\"none\" stroke=\"#21d850\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"315.89\" y1=\"138.77\" x2=\"298.34\" y2=\"86.9\" fill=\"none\" stroke=\"#21d850\" stroke-miterlimit=\"10\" stroke-dasharray=\"3.13 3.13\"\u003e\u003c/line\u003e\u003cline x1=\"297.84\" y1=\"85.42\" x2=\"297.36\" y2=\"84\" fill=\"none\" stroke=\"#21d850\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003ccircle cx=\"317.36\" cy=\"143.16\" r=\"3.33\" transform=\"translate(-30.33 125.17) rotate(-21.32)\" fill=\"#21d850\"\u003e\u003c/circle\u003e\u003cline x1=\"397.97\" y1=\"143.51\" x2=\"397.28\" y2=\"142.18\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003cline x1=\"395.92\" y1=\"139.59\" x2=\"358.58\" y2=\"68.3\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\" stroke-dasharray=\"2.93 2.93\"\u003e\u003c/line\u003e\u003cline x1=\"357.9\" y1=\"67.01\" x2=\"357.21\" y2=\"65.68\" fill=\"none\" stroke=\"#af17ff\" stroke-miterlimit=\"10\"\u003e\u003c/line\u003e\u003ccircle cx=\"357.21\" cy=\"65.67\" r=\"3.33\" transform=\"translate(15.73 189.37) rotate(-30.33)\" fill=\"#c552d1\"\u003e\u003c/circle\u003e\u003ccircle cx=\"297.36\" cy=\"84\" r=\"3.33\"\u003e\u003c/circle\u003e\u003cpath d=\"M297,84c20,60,20.64,59.73,40.4,20.62S357.19,65.5,398,143.51\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"\u003e\u003c/path\u003e\u003ccircle cx=\"337.43\" cy=\"104.62\" r=\"3.33\" fill=\"#1cc1f4\"\u003e\u003c/circle\u003e\u003ccircle cx=\"397.97\" cy=\"143.51\" r=\"3.33\" fill=\"#f92b66\"\u003e\u003c/circle\u003e\u003cellipse cx=\"239.48\" cy=\"52.95\" rx=\"62.28\" ry=\"16.54\" fill=\"#21d850\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(212.53 57.27)\" font-size=\"12\" fill=\"#fff\"\u003eBezier Point\u003c/text\u003e\u003cellipse cx=\"229.42\" cy=\"78.47\" rx=\"62.28\" ry=\"16.54\" fill=\"#00c8e7\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(204 83)\" font-size=\"12\" fill=\"#fff\"\u003ePoint final\u003c/text\u003e\u003cellipse cx=\"237.93\" cy=\"122.54\" rx=\"62.28\" ry=\"16.54\" fill=\"#c552d1\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(201 126.86)\" font-size=\"12\" fill=\"#fff\"\u003eSUPPOSITION!\u003c/text\u003e\u003cellipse cx=\"222.21\" cy=\"149.86\" rx=\"62.28\" ry=\"16.54\" fill=\"#f92b66\"\u003e\u003c/ellipse\u003e\u003ctext transform=\"translate(198 155)\" font-size=\"12\" fill=\"#fff\"\u003ePoint final\u003c/text\u003e\u003c/svg\u003e\u003c/p\u003e\n\nLa commande `A` est sans doute la plus compliquée. Ou du moins celle qui requiert le plus de données. On lui donne l'information définissant un ovale (sa largeur et sa hauteur, ou plus exactement la longueur du rayon x et la longueur du rayon y) et sa rotation, ainsi que le point final. Puis un peu plus d'info pour dire quel chemin vous voulez que votre _path_ prenne le long de cet ovale. Extrait de MDN\u0026nbsp;:\n\n\u003e Il y a deux ellipses possibles autour desquelles le chemin peut \"voyager\" et deux chemins possibles sur chaque ellipse, ce qui donne en tout quatre chemins possibles. Le premier argument est relatif à l'arc le plus grand, `large-arc-flag`. Il détermine simplement si l'on choisit l'arc qui est plus grand ou plus petit que 180 degrés; au final, ce flag détermine la direction que suivra l'arc autour d'un cercle donné. Le second argument est le `sweep-flag`, il détermine si l'arc doit commencer à se mouvoir selon un angle positif ou négatif, ce qui revient à choisir lequel des deux cercles on suit.\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;NdT\u0026nbsp;: Autre explication, tirée de [SVG Ground](http://svground.fr/paths.php), une bible (en français) pour SVG\u0026nbsp;:\n\n\u003e la lettre qui commande le tracé d’un arc elliptique est A (ou a minuscule pour des coordonnées relatives). Les deux premiers paramètres sont respectivement la longueur du rayon x et la longueur du rayon y (ces deux rayons restent perpendiculaires).\n\u003e Le troisième est la rotation (sens direct, inverse des aiguilles d’une montre) en degrés de l’axe x de l’ellipse par rapport à l’axe des ordonnées.\n\u003e Le quatrième paramètre, appelé large-arc-flag, indique si on doit afficher l’arc dont la mesure fait plus de la moitié du périmètre de l’ellipse (dans ce cas, la valeur est 1), ou l’arc dont la mesure fait moins de la moitié du périmètre (valeur : 0).\n\u003e Le cinquième paramètre, appelé sweep-flag, indique quant à lui si l’arc doit être dessiné dans la direction négative des angles (dans lequel cas sa valeur est 0) ou dans la direction positive des angles (valeur : 1). Les deux derniers sont les coordonnées du point d’arrivée, les coordonnées du point de départ étant données par la commande précédant la commande A.\n\u003e La commande d’arc elliptique est à mon sens assez difficile à comprendre, mais une fois assimilée, elle est très simple d’utilisation. Il faut souvent beaucoup de tests avant de comprendre comment elle fonctionne.\n\nLe graphique de Joni Trythall expliquant la commande `A` dans [son article sur les chemins SVG](https://www.sitepoint.com/closer-look-svg-path-data/) est assez clair\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/curve3.webp\" width=\"600\" height=\"400\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;NdT\u0026nbsp;: _Exemple (modifié) tiré de l'article de Joni Trythall_\u0026nbsp;:\n\n```\n\u003csvg\u003e\n    \u003cpath fill=lightblue\n          stroke=\"#333333\"\n          stroke-width=\"3\"\n          d=\"M100,20 a100,40 10 1,0 100,10\" /\u003e\n\u003c/svg\u003e\n```\n\nLe premier et le dernier ensemble de valeurs (M100,20 \u0026 100,10) représentent les coordonnées initiales et finales. Le second ensemble de valeurs (a100,40) définit les deux rayons. Le troisième, la rotation (10). Enfin, les valeurs 1,0 (large-arc-flag \u0026 sweep-flag) déterminent la façon dont l'arc est dessiné.\n\nCe qui donne :\n\n\u003csvg\u003e\u003cpath fill=lightblue stroke=\"#333333\" stroke-width=\"3\" d=\"M100,20 a100,40 10 1,0 100,10\" /\u003e\u003c/svg\u003e\n\nVoici une explication écrite de ces commandes de courbes\u0026nbsp;:\n\n\u003ctable class=\"specificTable\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eC\u003c/strong\u003e cX1,cY1 cX2,cY2 eX,eY\u003c/td\u003e\u003ctd\u003eDessine une courbe de Bezier à partir de \u003cstrong\u003edeux\u003c/strong\u003e points de contrôle et se termine à des coordonnées spécifiées\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003ec\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eIdem, avec des valeurs relatives\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eS\u003c/strong\u003e cX2,cY2 eX,eY\u003c/td\u003e\u003ctd\u003eEn gros, une commande C qui part du principe que le premier point de contrôle de Bezier est le même que le dernier point de contrôle utilisé dans la commande S or C qui précèdent\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003es\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eIdem, avec des valeurs relatives\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eQ\u003c/strong\u003e cX,cY eX,eY\u003c/td\u003e\u003ctd\u003eDessine une courbe de Bezier à partir d'un \u003cstrong\u003eunique\u003c/strong\u003e point de contrôle et se termine à des coordonnées spécifiées\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eq\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eIdem, avec des valeurs relatives\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eT\u003c/strong\u003e eX,eY\u003c/td\u003e\u003ctd\u003eEn gros, une commande Q qui part du principe que le premier point de contrôle de Bezier est le même que le dernier point de contrôle utilisé dans la commande Q or T qui précèdent\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003et\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eIdem, avec des valeurs relatives\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003eA\u003c/strong\u003e rX,rY rotation, arc, sweep, eX,eY\u003c/td\u003e\n\u003ctd\u003eDessine un arc basé sur la courbe d'un ovale. Définit d'abord la largeur et la hauteur de l'ovale. Puis la rotation de l'ovale. Avec le point final, cela fait deux ovales possibles. L'arc et la courbe ont pour valeur 0 ou 1 et déterminent quel ovale et quel chemin sera pris.\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003e\u003cstrong\u003ea\u003c/strong\u003e\u003c/td\u003e\u003ctd\u003eIdem, avec des valeurs relatives pour eX,eY\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\nVous voulez voir des exemples ? OK :\n\n\u003cdiv class=\"cp_embed_wrapper\"\u003e\u003ciframe id=\"cp_embed_NRwANp\" src=\"//codepen.io/chriscoyier/embed/NRwANp?height=600\u0026amp;theme-id=1\u0026amp;slug-hash=NRwANp\u0026amp;default-tab=html%2Cresult\u0026amp;user=chriscoyier\u0026amp;embed-version=2\u0026amp;editable=true\" height=\"600\" allowfullscreen name=\"CodePen Embed\" title=\"CodePen Embed 1\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\nSi vous le regardez avec un navigateur Blink récent et que vous avez une souris, vous verrez quelques animations au survol\u0026nbsp;! Eh oui, on peut mettre des données de _path_ dans \u003cspan itemprop=\"about\" itemscope itemtype=\"https://schema.org/Thing\"\u003e\u003clink itemprop=\"url\" href=\"https://fr.wikipedia.org/wiki/Feuilles_de_style_en_cascade\"/\u003e\u003cspan itemprop=\"name\"\u003eCSS\u003c/span\u003e\u003c/span\u003e maintenant, par exemple\u0026nbsp;:\n\n```\n//SVG\n\u003csvg viewBox=\"0 0 10 10\"\u003e\n  \u003cpath d=\"M2,5 C2,8 8,8 8,5\" /\u003e\n\u003c/svg\u003e\n```\n\net :\n\n```\n//CSS\nsvg:hover path {\n  transition: d 0.2s;\n  d: path(\"M2,5 C2,2 8,2 8,5\");\n}\n```\n"},{"slug":"comprendre-svg-viewbox","title":"Comprendre SVG viewBox","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"29 octobre 2016","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1151/Understanding-the-SVG-viewBox","copyright":"2016"},"dateCascade":"26 décembre 2016","dateMachine":"2O161226","tags":["svg"],"about":["SVG Viewbox"],"excerpt":"Tout savoir sur SVG viewbox. L'attribut viewBox est l'un des premiers qu'on rencontre quand on débute avec SVG, cette introduction de Dudley Storey vous simplifiera la vie.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nL'attribut `viewBox` est l'un des premiers qu'on rencontre quand on débute avec [SVG](/tags/svg/), et potentiellement une grande source de confusion. Bien que largement couvert par d'autres auteurs —\u0026nbsp;[la série d'articles de Sara Soueidan](https://sarasoueidan.com/blog/svg-coordinate-systems/) pouvant être considérée comme une des sources canoniques sur le sujet\u0026nbsp;— il manquait d'un \"guide de départ\" donnant les quelques détails nécessaires pour pouvoir se lancer dans les applications basiques du dessin vectoriel. C'est l'objectif de cet article.\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;_NdT\u0026nbsp;: En complément, on pourra également consulter dans La Cascade les articles de Joni Trythall [comprendre viewBox et viewPort](/comprendre-svg-viewbox-et-viewport/) ainsi que [comprendre SVG preserveAspectRatio](/comprendre-svg-preserveaspectratio/)_.\n\n\u003ch2\u003eUn canevas infini\u003c/h2\u003e\n\nL'espace de dessin de SVG est infini : on peut dessiner à partir de n'importe quel point de coordonnées dans un document SVG. Toutefois, pour des raisons d'_affichage_, le document a généralement une dimension, comme un cadre ou un canevas. C'est ici qu'entre en jeu la viewBox.\n\nOn la trouve le plus souvent appliquée ainsi :\n\n```\n\u003csvg viewBox=\"0 0 200 100\"\u003e\n```\n\n\u003e 👉🏾 Remarque : j'ai laissé de côté l'[espace de nom](https://developer.mozilla.org/en/docs/Web/SVG/Namespaces_Crash_Course) pour la simplicité et la clarté des exemples. De plus, le background des exemples SVG sera apparent (en bleu clair) pour mieux montrer leur dimension réelle.\n\nLa viewBox utilise 4 valeurs pour localiser deux coordonnées dans l'espace\u0026nbsp;: les coins supérieur gauche et inférieur droit du SVG. Dans le code ci-dessus le coin supérieur gauche est défini comme `0 0` (valeur de x, puis valeur de y), et le coin inférieur droit comme 200 unités vers la droite et 100 unités vers le bas.\n\nDeux points à noter ici :\n\n- Les valeurs utilisées _ne comportent pas d'unité de mesure_. Il est préférable de ne pas les considérer en pixels, centimètres ou autres, mais simplement comme des unités génériques.\n- Même s'il est très courant que le coin supérieur gauche d'un document SVG commence à `0 0`, ce n'est pas obligatoire.\n\nDans la plupart des applications de dessin vectoriel, la viewBox correspond au canevas ou à l'_artboard_ préparé avant que vous ne commenciez à dessiner. Toutefois, de nombreuses applications, dont [Adobe Illustrator](http://www.adobe.com/fr/products/illustrator.html) et [Sketch](https://www.sketch.com/), vont réduire la viewBox à la surface visible autour des éléments que vous aurez dessiné lorsqu'ils les exporteront en SVG. C'est une des raisons pour lesquelles il est important de bien comprendre la viewBox\u0026nbsp;: vous pouvez ajuster le canevas du SVG directement dans le code, sans avoir à vous battre avec le comportement de votre application.\n\nUn [élément SVG circle](/articles/les-bases-de-svg-cercles-et-ellipses/) dessiné sans attributs `cx` ou `cy` supposera que son centre est à `0 0` dans l'espace de coordonnées. Voyons ce que ça donne lorsque nous utilisons les valeurs viewBox que nous avons utilisées\u0026nbsp;:\n\n```\n\u003csvg viewBox=\"0 0 200 100\"\u003e\n    \u003ccircle r=\"50\"\u003e\n\u003c/svg\u003e\n```\n\nCe qui produit :\n\n\u003csvg viewBox=\"0 0 200 100\" style=\"width:80%;margin:0 auto;display:block;background-color:lightblue;\"\u003e\u003ccircle r=\"50\"\u003e\u003c/circle\u003e\u003c/svg\u003e\n\nComme vous pouvez le constater, la viewBox ne détermine pas la taille de l'élément SVG rendu sur la page. Pour cela, il y a les attributs `width` et `height` et/ou n'importe quel CSS appliqué à SVG. Par contre, la viewBox détermine le _ratio d'aspect_ de l'espace et la taille relative des éléments qui l'occupent.\n\n\u003e 👉🏾 Remarquez également la capitale à l'intérieur de `viewBox` : SVG, qui est un langage de [la famille XML](https://fr.wikipedia.org/wiki/Extensible_Markup_Language), est sensible à la casse, donc l'attribut doit être écrit ainsi, avec un B majuscule, pour être reconnu.\n\nSi la viewBox est réduite, la taille apparente du cercle s'agrandit, relativement au document SVG, même si le rayon du cercle reste inchangé\u0026nbsp;:\n\n```\n\u003csvg viewBox=\"0 0 100 50\"\u003e\n    \u003ccircle r=\"50\"\u003e\n\u003c/svg\u003e\n```\n\n\u003csvg viewBox=\"0 0 100 50\" style=\"width:80%;margin:0 auto;display:block;background-color:lightblue;\"\u003e\u003ccircle r=\"50\"\u003e\u003c/circle\u003e\u003c/svg\u003e\n\nOn pourrait voir cela comme un \"zoom avant\" dans le document. La viewBox nous permet une \"mise à l'échelle\" à l'intérieur d'un SVG.\n\nLes éléments dessinés à l'extérieur de l'espace de la viewBox sont coupés. Ajoutons un autre élément `\u003ccircle\u003e`, cette fois-ci avec des valeurs `cx` et `cy` ainsi qu'une \u003cspan itemprop=\"about\" content=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill\"\u003ecouleur de remplissage\u003c/span\u003e (_fill_).\n\n```\n\u003csvg viewBox=\"0 0 100 50\"\u003e\n    \u003ccircle cx=\"150\" cy=\"120\" r=\"20\" fill=\"red\" /\u003e\n\u003c/svg\u003e\n```\n\nDu fait que l'élément se trouve en dehors des dimensions de la viewBox, on ne peut pas le voir. Le document SVG l'a automatiquement découpé. Changeons cela en modifiant les valeurs de la viewBox\u0026nbsp;:\n\n```\n\u003csvg viewBox=\"0 0 200 120\"\u003e\n    \u003ccircle cx=\"150\" cy=\"120\" r=\"20\" fill=\"red\" /\u003e\n\u003c/svg\u003e\n```\n\nCe qui nous donne :\n\n\u003csvg viewBox=\"0 0 200 120\" style=\"width:80%;margin:0 auto;display:block;background-color:lightblue;\"\u003e\u003ccircle cx=\"150\" cy=\"120\" r=\"20\" fill=\"red\" /\u003e\u003c/svg\u003e\n\nIl est important de noter que les éléments SVG découpés en dehors de la viewBox sont toujours présents. Il peuvent être animés et revenir dans la surface visible. Mais par défaut ils ne sont pas visibles.\n\nIl est également possible de faire apparaître des éléments cachés par les dimensions restrictives de la viewBox en appliquant `overflow: visible` au document SVG via CSS. Cependant, cela n'étendra pas le background SVG (s'il y en a un) de manière à s'adapter à l'élément :\n\n\u003cfigure role=\"group\"\u003e\u003csvg viewBox=\"0 0 200 120\" style=\"width:80%;margin:0 auto;display:block;background-color:lightblue;overflow:visible\"\u003e\u003ccircle cx=\"150\" cy=\"120\" r=\"20\" fill=\"red\" /\u003e\u003c/svg\u003e\u003cfigcaption\u003eL'élément caché réapparaît\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch2\u003eSauvetage\u003c/h2\u003e\n\nOn peut également donner des valeurs négatives aux coordonnées du coin supérieur gauche de la viewBox. Dans certains scénarios, comme ceux évoqués en début d'article lorsque les éléments SVG sont exportés un peu trop serrés, cela peut s'avérer nécessaire.\n\nAdmettons que nous ayons ceci :\n\n```\n\u003csvg viewBox=\"0 0 500 100\"\u003e\n    \u003ccircle cx=\"50\" cy=\"0\" r=\"50\" fill=\"red\" /\u003e\n\u003c/svg\u003e\n```\n\n...qui crée :\n\n\u003csvg viewBox=\"0 0 500 100\" style=\"width:80%;margin:0 auto;display:block;background-color:lightblue;\"\u003e\u003ccircle cx=\"50\" cy=\"0\" r=\"50\" fill=\"red\" /\u003e\u003c/svg\u003e\n\nSeule la partie inférieure du cercle est visible. Si nous diminuons la composante `y` du coin supérieur gauche de la viewBox, nous pouvons corriger le problème\u0026nbsp;:\n\n```\n\u003csvg viewBox=\"0 -40 500 100\"\u003e\n    \u003ccircle cx=\"50\" cy=\"0\" r=\"50\" fill=\"red\" /\u003e\n\u003c/svg\u003e\n```\n\nLe résultat :\n\n\u003csvg viewBox=\"0 -40 500 100\" style=\"width:80%;margin:0 auto;display:block;background-color:lightblue;\"\u003e\u003ccircle cx=\"50\" cy=\"0\" r=\"50\" fill=\"red\" /\u003e\u003c/svg\u003e\n\n\u003e 👉🏾 L'ajout d'un padding à notre élément SVG aura le même effet, mais il n'exposera pas davantage un élément caché par la limite de la viewBox.\n\nIl est important de noter que modifier les valeurs de la viewBox ne changera pas le _point d'origine_ du SVG globalement. Autrement dit, un cercle dessiné avec son centre à `0 0` sera complètement visible si le coin supérieur gauche est suffisamment déplacé vers l'extérieur. Le point d'origine, lui, n'est pas modifié.\n\n\u003ch3\u003eConclusion\u003c/h3\u003e\n\nIl y a bien d'autres choses à dire sur viewBox, mais cet article et les liens suggérés ci-dessous devraient vous suffire pour vous lancer dans SVG en toute confiance. Bon courage\u0026nbsp;!\n\n👉🏾 NdT : vous pouvez également consulter ici l'article de Joni Trythall [Comprendre SVG viewBox et viewport](/articles/comprendre-svg-viewbox-et-viewport)\n"},{"slug":"utiliser-svg-use","title":"Utiliser SVG use","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"28 juin 2016","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1102/Cloning-SVG-Elements-Using-use","copyright":"2016"},"dateCascade":"26 décembre 2016","dateMachine":"2O161226","tags":["svg"],"about":["SVG Use"],"excerpt":"use est l'outil de clonage de SVG, il permet de dupliquer des éléments existants ou prédéfinis et d'alléger votre code.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\n`use` est l'outil de clonage de \u003cspan itemprop=\"about\" itemscope itemtype=\"https://schema.org/Thing\"\u003e\u003clink itemprop=\"url\" href=\"http://fr.wikipedia.org/wiki/Scalable_Vector_Graphics\"/\u003e\u003cspan itemprop=\"name\"\u003e[SVG](/tags/svg/)\u003c/span\u003e\u003c/span\u003e : il offre la possibilité de dupliquer des éléments existants ou prédéfinis, tout en permettant d'appliquer des modifications aux copies clonées. `use` est une façon simple d'alléger votre code SVG en utilisant [les meilleurs principes DRY](https://fr.wikipedia.org/wiki/Ne_vous_r%C3%A9p%C3%A9tez_pas) (\"Don't Repeat Yourself\").\n\n\u003ch2 class=\"softTitleBlue\"\u003eCas d'usage\u003c/h2\u003e\n\nVoici quelques `use` cases :) Étant donné un élément SVG avec un `id`:\n\n```\n\u003ccircle cx=\"50\" cy=\"50\" r=\"10\" fill=\"red\" id=\"primcirc\" /\u003e\n```\n\nNous pouvons répliquer cet élément avec `use` :\n\n```\n\u003cuse xlink:href=\"#primcirc\" /\u003e\n```\n\n\u003e 👉🏾 Remarque : l'utilisation de `xlink` dans la référence implique que l'[espace de nom](https://developer.mozilla.org/en/docs/Web/SVG/Namespaces_Crash_Course) xlink soit déclaré dans l'élément racine SVG.\n\nLa copie hérite de toutes les caractéristiques de l'original et par défaut ne peut en être distinguée, ce qui signifie que seules les modifications ajoutées en feront un élément unique. Toutefois, les modifications ne peuvent concerner ce qui a déjà été déclaré dans l'élément original. L'exemple suivant ne fonctionnera pas car il entre en contradiction avec l'original\u0026nbsp;:\n\n```\n\u003cuse xlink:href=\"#primcirc\" fill=\"blue\" /\u003e\n```\n\nLa copie apparaîtra rouge, et non bleue, la couleur de remplissage (_fill_) ayant été définie dans l'élément source. Par contre l'ajout d'un _nouvel_ attribut fonctionnera\u0026nbsp;:\n\n```\n\u003cuse xlink:href=\"#primcirc\" stroke=\"black\" /\u003e\n```\n\nCette fois-ci, la copie aura toujours une couleur de remplissage rouge, mais des traits (_stroke_) de contours noirs.\n\n\u003ch2\u003eUtiliser defs\u003c/h2\u003e\n\nPour contourner le problème, l'élément \"source\" est souvent placé dans un élément `\u003cdefs\u003e` comprenant les attributs qui ne seront _pas_ modifiés dans les clones\u0026nbsp;:\n\n```\n\u003cdefs\u003e\n    \u003ccircle r=\"10\" id=\"primcirc\" /\u003e\n\u003c/defs\u003e\n```\n\nRien de ce qui apparaît dans un élément `\u003cdefs\u003e` ne sera rendu dans le SVG, les éléments ainsi définis ne pouvant apparaître que via une référence. Dans ce cas, nous ajoutons au clone les attributs qui manquaient dans la définition originale\u0026nbsp;:\n\n```\n\u003cuse xlink:href=\"#primcirc\" cx=\"50\" cy=\"50\" fill=\"red\" /\u003e\n```\n\nCeci crée la première instance visible de notre cercle. Il a un rayon de 5, hérité de l'original, mais sa position et sa couleur de remplissage lui sont propres.\nNous pouvons facilement créer une autre copie en ajoutant une nouvelle référence `use`\u0026nbsp;:\n\n```\n\u003cuse xlink:href=\"#primcirc\" cx=\"80\" cy=\"80\" fill=\"yellow\" /\u003e\n```\n\nLes deux cercles ont un rayon égal à 5, dérivé (et non modifiable) de la définition originale, mais chacun a sa propre position et couleur de remplissage.\nSi la définition originale de l'élément comprenait une position...\n\n```\n\u003cdefs\u003e\n    \u003ccircle r=\"10\" cx=\"50\" cy=\"50\" id=\"primcirc\" /\u003e\n\u003c/defs\u003e\n```\n\n...alors nous pourrions modifier la position du clone en utilisant une transformation `transform`\u0026nbsp;:\n\n```\n\u003cuse xlink:href=\"#primcirc\" fill=\"yellow\" transform=\"translate(50 50)\" /\u003e\n```\n\n\u003e Remarque : les attributs prédéfinis peuvent être modifiés dans les clones référencés à l'aide de techniques similaires. Un changement de `fill` via `opacity` ou `blend-mode` par exemple.\n\nLes changements d'opacité ou autres apportés à la définition originale seront reflétés dans les clones.\n\nIl n'y a pas que les éléments qui peuvent ainsi être clonés et référencés\u0026nbsp;: nous pouvons également [regrouper des éléments](/articles/les-bases-de-svg-groupes/), donner un `id` au groupe et l'utiliser autant de fois que nous le voulons.\n\n```\n\u003csvg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 100 100\"\u003e\n\u003cdefs\u003e\n    \u003cg id=\"primgroup\"\u003e\n        \u003ccircle cx=\"50\" cy=\"50\" r=\"10\" fill=\"red\" /\u003e\n        \u003ccircle cx=\"70\" cy=\"70\" r=\"10\" fill=\"blue\" /\u003e\n    \u003c/g\u003e\n\u003c/defs\u003e\n    \u003cuse xlink:href=\"#primgroup\" /\u003e\n\u003c/svg\u003e\n```\n\nJ'utilise les [éléments circle](/articles/les-bases-de-svg-cercles-et-ellipses/) pour la simplicité de la démonstration, mais les sources peuvent être à peu près ce que vous voulez. Il est également possible de générer des références `use` avec JavaScript, mais ce sera pour un autre article.\n"},{"slug":"css-initial-inherit-unset-et-revert","title":"CSS Initial, Inherit, Unset et Revert","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"19 avril 2016","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/initial-inherit-unset-and-revert/","copyright":"2016"},"dateCascade":"8 mai 2016","dateMachine":"2O160508","tags":["css","html"],"about":["initial","inherit","unset","revert"],"excerpt":"Il existe quatre valeurs applicables (en théorie) à n'importe quelle propriété CSS, ce sont les valeurs explicites par défaut. Avec Ire Aderinokun apprenez à les connaître et à les différencier.","featured":false,"featuredImage":"/images/initial-compressor.png","order":null,"content":"\nIl existe quatre valeurs applicables (en théorie) à n’importe quelle propriété CSS. Ce sont les valeurs explicites par défaut —\u0026nbsp;`initial`, `inherit`, `unset` et `revert`. Ces valeurs nous permettent de donner des valeurs par défaut avec nuance. Même si elles ne sont pas universellement supportées, il est utile de les connaître et de comprendre leurs différences.\n\n\u003ch2\u003eInitial\u003c/h2\u003e\n\nLa valeur `initial` est la valeur par défaut de la propriété, telle qu’elle est définie par la [spécification CSS officielle](https://www.w3.org/TR/CSS/). Par exemple pour un élément `\u003cp\u003e`, `text-align` est `left` et `display` est `inline`.\n\n```\n//HTML\n\u003cp style=\"text-align: initial;\n          display: initial;\n          background-color: rgba(255,219,58, 0.3)\"\u003e\n  Hello, world!\n\u003c/p\u003e\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/initial-compressor.png\" width=\"780\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\nCompatibilité navigateurs : [La compatibilité](http://caniuse.com/#feat=css-initial-value) est excellente, à l’exception d’IE et Opera Mini.\n\n\u003ch2\u003eInherit\u003c/h2\u003e\n\nLa valeur `inherit` représente la valeur prise par le parent immédiat de l’élément HTML pour la même propriété.\n\n```\n\u003cdiv style=\"border: 2px solid plum;\"\u003e\n  \u003cdiv style=\"border: inherit; background-color: rgba(255,219,58, 0.3);\"\u003e\n      Hello, world!\n  \u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/inherit-1-compressor.png\" width=\"780\" height=\"185\" alt=\"La div intérieure hérite du style de la div parent\"/\u003e\u003c/figure\u003e\n\nSi la propriété n’est pas explicitement définie pour l’élément parent, c’est le comportement de `revert` qui se produira. CSS ne remontera pas dans l’arbre des éléments parents pour trouver une valeur explicitement définie pour cette propriété.\n\n```\n\u003cdiv style=\"border: 2px solid plum;\"\u003e\n  \u003cdiv\u003e\n    \u003cdiv style=\"border: inherit; background-color: rgba(255,219,58, 0.3);\"\u003e\n           Hello, world!\n    \u003c/div\u003e\n  \u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/inherit-2-compressor.png\" width=\"780\" height=\"197\" alt=\"La div enfant n’hérite pas de son grand-parent\"/\u003e\u003c/figure\u003e\n\n\u003ch2\u003eUnset\u003c/h2\u003e\n\nLa valeur `unset` est une sorte de mélange de `initial` et `inherit`.\n\nCertaines propriétés, si elles ne sont pas définies explicitement, prendront pour valeur par défaut `inherit`. Par exemple, si nous définissons la `color` d’un élément, elle s’applique à tous les éléments enfants par défaut. Par contre, d’autres propriétés, telles que `border`, n’héritent pas par défaut.\n\n```\n\u003cdiv style=\"border: 2px solid plum; color: cornflowerblue;\"\u003e\n  \u003cdiv style=\"background-color: rgb(200, 200, 200)\"\u003e\n    Hello, world\n  \u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/unset-compressor.png\" width=\"780\" height=\"196\" alt=\"\"/\u003e\u003cfigcaption\u003eLa propriété color est héritée, mais pas la propriété border\u003c/figcaption\u003e\u003c/figure\u003e\n\nCompatibilité navigateurs : [La compatibilité](http://caniuse.com/#feat=css-unset-value) est bonne, à l’exception d’IE, iOS Safari et Opera Mini.\n\n\u003ch2\u003eRevert\u003c/h2\u003e\n\nLa valeur `revert`, autrefois appelée `default`, représente toute valeur que prendrait la propriété si aucune valeur ne lui était donnée.\n\nSi aucune valeur n’est donnée à une propriété dans la feuille de style de l’auteur (les styles que nous appliquons en tant qu’auteurs), voici les étapes suivies par le navigateur pour trouver une valeur\u0026nbsp;:\n\n1. Vérifier s’il existe des [styles définis par l’utilisateur](http://www.kloh.ch/le-pouvoir-des-feuilles-de-style-utilisateur-143)\n2. Si rien n’est trouvé, vérifier la feuille de style user agent (styles définis par le navigateur)\n3. Si rien n’est trouvé, appliquer l’équivalent de `unset`\n\nPar exemple, un style fréquemment ajouté aux éléments `\u003cdiv\u003e` par les feuilles de style user agent est `display: block;` même si la valeur initiale de `display` est `inline`. Voici ce qui se passe quand `revert` est utilisé —\u0026nbsp;et la comparaison avec `initial`.\n\n```\n\u003cdiv style=\"display: revert;\n            background-color: rgba(255,219,58, 0.3)\"\u003e\n  Hello, world! (revert)\n\u003c/div\u003e\n\u003cdiv style=\"display: initial;\n            background-color: rgba(255,219,58, 0.3)\"\u003e\n  Hello, world! (initial)\n\u003c/div\u003e\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/revert-compressor.png\" width=\"780\" height=\"231\" alt=\"la div revert est affichée en mode bloc, la div initial est affichée en mode inline\"/\u003e\u003c/figure\u003e\n\nCompatibilité : pour une information à jour à la lecture de cet article, [consultez Can I Use](http://caniuse.com/#feat=css-revert-value).\n"},{"slug":"css-grid-layout-guide-complet","title":"CSS Grid Layout, guide complet","author":{"name":"Chris House","lastname":"House"},"original":{"date":"29 mars 2016","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/snippets/css/complete-guide-grid/","copyright":"2016"},"dateCascade":"18 avril 2016","dateMachine":"2O160418","tags":["cssgrid","css","flexbox"],"about":[],"excerpt":"Avec Flexbox, le module CSS Grid Layout représente l'avenir de la mise page CSS. Chris House a conçu un guide complet et plein d'exemples pour enfin comprendre cette spécification complexe.","featured":true,"featuredImage":"/images/grid-line.png","order":8,"content":"\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\nCSS Grid Layout (aka “Grid”) est un système de layout bi-dimensionnel basé sur les grilles qui a pour ambition ni plus ni moins que de révolutionner la façon dont nous concevons les interfaces utilisateurs basées sur des grilles.\n\nCSS a toujours été utilisé pour la mise en page web, mais il n’a jamais été très bon pour cela. Nous avons d’abord utilisé des tables, puis des _floats_, divers positionnements et inline-block, mais toutes ces méthodes s’apparentaient fondamentalement à des rustines, et ne permettaient pas de résoudre certains problèmes récurrents comme le centrage vertical. Flexbox nous a bien aidés, mais il est conçu pour des layouts plus simples et uni-dimensionnels, et non pour des layouts bi-dimensionnels. En fait, Flexbox et Grid se complètent bien et [sont faits pour travailler ensemble](/articles/grid-et-flexbox-le-duo-gagnant/). Grid est le premier module CSS créé spécifiquement pour résoudre les problèmes de layout que nous avons contournés par des tripatouillages depuis que nous réalisons des sites web.\n\nCe guide et tutoriel puise son inspiration d’une part dans le formidable livre de [Rachel Andrew](/auteurs/rachel-andrew/), [Get Ready for CSS Grid Layout](https://abookapart.com/products/get-ready-for-css-grid-layout), une introduction très claire à CSS Grid que je vous recommande chaudement, et d’autre part dans l’article fameux de Chris Coyier [Flexbox, Guide Complet](/articles/flexbox-guide-complet/), qui est depuis le début mon article de chevet pour tout ce qui concerne Flexbox. Il a aidé des tas de gens et c’est la raison pour laquelle il est le premier résultat que vous trouvez quand vous cherchez “Flexbox” dans Google. Vous remarquerez de nombreuses similarités entre son article et le mien parce que... pourquoi ne pas emprunter chez les maîtres\u0026nbsp;?\n\nMon intention est de vous présenter les concepts Grid tels qu’ils existent dans la dernière version de la spécification. Je ne passerai donc pas en revue la syntaxe IE obsolète et je veillerai à mettre à jour ce guide au fur et à mesure de l’évolution de la spécification.\n\n\u003ch2\u003eLes bases et la compatibilité\u003c/h2\u003e\n\nIl est facile de se lancer dans Grid. Il suffit de définir un élément container comme une grille, via la propriété `display:grid`, de régler les dimensions des colonnes et des rangées avec `grid-template-columns` et `grid-template-rows` et de placer ses éléments enfants dans la grille avec `grid-column` et `grid-row`. Comme pour Flexbox, l’ordre des items de la grille tel qu’il apparaît dans la source n’a pas d’importance. Votre CSS peut les placer dans n’importe quel ordre, ce qui facilite la réorganisation de votre grille avec les media queries. Vous pouvez ainsi définir le layout de votre page et le réorganiser entièrement pour l’adapter à différentes tailles d’écrans, et tout cela avec juste quelques lignes de CSS. Grid est un des modules CSS les plus puissants jamais proposés.\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;_Note du traducteur\u0026nbsp;: depuis mars 2017 CSS Grid est supporté par Firefox, Chrome, Opera et Safari. Pour les détails complets et à jour de la compatibilité, voir [Can I Use](http://caniuse.com/#feat=css-grid)_.\n\n\u003ch2\u003eTerminologie importante\u003c/h2\u003e\n\nAvant de plonger dans les concepts de Grid, il est important de bien comprendre la terminologie. Dans la mesure où les termes utilisés sont assez similaires, il est facile de les confondre si vous n’avez pas bien mémorisé leur signification telle qu’elle est définie par la spécification. Mais ne vous inquiétez pas, il n’y en a pas beaucoup.\n\n\u003ch3 id='gridcontainer'\u003eContainer Grid\u003c/h3\u003e\n\nC’est l’élément sur lequel s’applique `display: grid`. C’est donc le parent direct de tous les items grid. Dans cet exemple, `container` est le container grid.\n\n```\n/HTML\n\u003cdiv class=\"container\"\u003e\n  \u003cdiv class=\"item item-1\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"item item-2\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"item item-3\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003ch3 id='griditem'\u003eItem Grid\u003c/h3\u003e\n\nL’enfant (c’est à dire le descendant direct) du container grid. Ici, les éléments `item` sont des items grid, mais ce n’est pas le cas de `sub-item`.\n\n```\n/HTML\n\u003cdiv class=\"container\"\u003e\n  \u003cdiv class=\"item\"\u003e\u003c/div\u003e\n  \u003cdiv class=\"item\"\u003e\n  \t\u003cp class=\"sub-item\"\u003e\u003c/p\u003e\n  \u003c/div\u003e\n  \u003cdiv class=\"item\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003ch3 id='gridline'\u003eLigne de Grille\u003c/h3\u003e\n\nLes lignes qui divisent et constituent la structure de la grille. Elles peuvent être verticales (“lignes de grille de colonnes”) ou horizontales (“lignes de grille de rangées”) et sont situées d’un côté ou de l’autre d’une rangée ou d’une colonne. Ici, la ligne jaune est un exemple de ligne de grille de colonne (_column grid line_).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-line.png\" width=\"383\" height=\"219\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"gridtrack\"\u003ePiste de Grille\u003c/h3\u003e\n\nLa piste (ou plage) de grille (_grid track_) est l’espace situé entre deux lignes de grille adjacentes, en d’autres termes ce sont les colonnes ou les rangées de la grille. Ci-dessous, la piste de grille est située entre les deuxième et troisième lignes de rangée.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-track.png\" width=\"383\" height=\"219\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3 id='gridcell'\u003eCellule de Grille\u003c/h3\u003e\n\nLa cellule de grille (_grid cell_) est l’espace situé entre deux lignes de grille adjacentes de rangée et deux lignes de grille adjacentes de colonne. C’est une “unité” de la grille. Ci-dessous, la cellule de grille est entre les lignes de grille de rangée 1 \u0026 2, et les lignes de grille de colonne 2 \u0026 3. Dit autrement, une cellule est l’intersection d’une rangée et d’une colonne.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-cell.png\" width=\"383\" height=\"219\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3 id='gridarea'\u003eZone de Grille\u003c/h3\u003e\n\nLa zone de grille (_grid area_) est l’espace entouré par quatre lignes de grille. Une zone de grille peut comprendre n’importe quel nombre de cellules. Voici la zone de grille entre les lignes de grille de rangée 1 \u0026 3 et les lignes de grille de colonne 1 \u0026 3.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-area.png\" width=\"383\" height=\"219\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch2\u003eLes Propriétés Grid\u003c/h2\u003e\n\nNous allons voir d'abord les propriétés du parent (le grid container), puis celles des enfants (les grid items).\n\n- [Propriétés du Parent (Grid Container)](#parent)\n- [Propriétés des Enfants (Grid Items)](#children)\n\n\u003ch3 id=\"parent\"\u003ePropriétés du Parent (Grid Container)\u003c/h3\u003e\n\n\u003ch4\u003eTable des matières\u003c/h4\u003e\n\n- [display](#display)\n- [grid-template-columns](#gtc)\n- [grid-template-rows](#gtc)\n- [grid-template-areas](#gta)\n- [grid-column-gap](#gcg)\n- [grid-row-gap](#gcg)\n- [grid-gap](#gg)\n- [justify-items](#ji)\n- [align-items](#ai)\n- [justify-content](#jc)\n- [align-content](#ac)\n- [grid-auto-columns](#gac)\n- [grid-auto-rows](#gac)\n- [grid-auto-flow](#gaf)\n- [grid](#grid)\n\n\u003ch3 class=\"softTitleBlue\" id=\"display\"\u003edisplay\u003c/h3\u003e\n\nDéfinit l’élément en tant que container grid et établit un _nouveau contexte de formatage_ de son contenu.\n\n**Valeurs** :\n\n- `grid` - génère une grille de niveau bloc\n- `inline grid` - génère une grille de niveau inline.\n\n```\n.container{\n  display: grid | inline-grid\n}\n```\n\nRemarque : `column`, `float`, `clear` et `vertical-align` n’ont aucun effet sur un container grid.\n\n\u003ch3 id=\"gtc\"\u003egrid-template columns, grid-template-rows\u003c/h3\u003e\n\nDéfinissent les colonnes et rangées de la grille via une liste de valeurs séparées par un espace. Les valeurs représentent la dimension de la piste (_track_) et l’espace entre les pistes représente la ligne de grille.\n\n**Valeurs** :\n\n- `\u003ctrack-size\u003e` - peut être une longueur, un pourcentage, ou une fraction de l’espace libre dans la grille (via l’unité `fr`)\n- `\u003cline-name\u003e` - un nom arbitraire choisi par vous\n- `subgrid` - si votre container grid est lui-même un item grid (autrement dit, nous avons des grilles imbriquées), vous pouvez utiliser cette propriété pour indiquer que vous voulez que les dimensions de ses rangées et colonnes soient héritées de l’élément parent plutôt que d’en donner des spécifiques.\n\n```\n.container{\n  grid-template-columns: \u003ctrack-size\u003e ... | \u003cline-name\u003e \u003ctrack-size\u003e ... | subgrid;\n  grid-template-rows: \u003ctrack-size\u003e ... | \u003cline-name\u003e \u003ctrack-size\u003e ... | subgrid;\n}\n```\n\nExemples :\nLorsque vous laissez un espace vide entre les valeurs de pistes (_track_), les lignes de grille se voient automatiquement attribuer des numéros\u0026nbsp;:\n\n```\n.container{\n  grid-template-columns: 40px 50px auto 50px 40px;\n  grid-template-rows: 25% 100px auto;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-numbers.png\" width=\"464\" height=\"365\" alt=\"\"/\u003e\u003c/figure\u003e\n\nMais vous pouvez choisir de nommer explicitement les lignes. Remarquez la syntaxe entre crochets pour les noms de lignes\u0026nbsp;:\n\n```\n.container{\n  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];\n  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/grid-names.png\" width=\"514\" height=\"365\" alt=\"\"/\u003e\u003c/figure\u003e\n\nNotez bien qu’une même ligne peut avoir plus d’un nom. Par exemple ci-dessous la deuxième ligne a deux noms, row1-end et row2-start\u0026nbsp;:\n\n```\n.container{\n  grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end];\n}\n```\n\nSi votre définition contient des parties qui se répètent, vous pouvez utiliser la notation `repeat()` pour alléger le code\u0026nbsp;:\n\n```\n.container{\n  grid-template-columns: repeat(3, 20px [col-start]) 5%;\n}\n```\n\n...ce qui est équivalent à\u0026nbsp;:\n\n```\n.container{\n  grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start] 5%;\n}\n```\n\nL’unité `fr` vous permet de spécifier la dimension d’une piste comme une fraction de l’espace libre du container grid. Par exemple, ce code donnera à chaque item la dimension d’1/3 du container\u0026nbsp;:\n\n```\n.container{\n  grid-template-columns: 1fr 1fr 1fr;\n}\n```\n\nL’espace libre est calculé après prise en compte des items non-flexibles. Dans l’exemple qui suit, la quantité d’espace libre disponible pour les unités `fr` est l’espace total déduction faite des 50px.\n\n```\n.container{\n  grid-template-columns: 1fr 50px 1fr 1fr;\n}\n```\n\n\u003ch3 id=\"gta\"\u003egrid-template-areas\u003c/h3\u003e\n\nDéfinit un template de grille en référençant les noms des zones de grille (_grid areas_) spécifiées par la propriété `grid-area`. Si l’on répète le nom d’une zone de grille, cela étend la surface couverte par ces cellules. Un point (`.`) signifie que la cellule est vide. La syntaxe elle-même fournit une visualisation de la structure de la grille.\n\n**Valeurs** :\n\n- `\u003cgrid-area-name\u003e` - le nom de la zone de grille spécifié avec `grid-area`\n- `.` - un point indique une cellule vide\n- `none` - aucune zone de grille n’est définie\n\n```\n.container{\n  grid-template-areas: \"\u003cgrid-area-name\u003e | . | none | ...\"\n                       \"...\"\n}\n```\n\nExemple :\n\n```\n.item-a{\n  grid-area: header;\n}\n.item-b{\n  grid-area: main;\n}\n.item-c{\n  grid-area: sidebar;\n}\n.item-d{\n  grid-area: footer;\n}\n\n.container{\n  grid-template-columns: 50px 50px 50px 50px;\n  grid-template-rows: auto;\n  grid-template-areas: \"header header header header\"\n                       \"main main . sidebar\"\n                       \"footer footer footer footer\"\n}\n```\n\nOn crée ainsi une grille de quatre colonnes sur trois rangées. La rangée supérieure tout entière constitue le header, la rangée du milieu comprend deux zones principales, une cellule vide et une zone de sidebar. La dernière rangée est le footer.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-template-areas.png\" width=\"427\" height=\"330\" alt=\"\"/\u003e\u003c/figure\u003e\n\nChaque rangée de notre déclaration doit avoir le même nombre de cellules.\n\nVous pouvez utiliser autant de `.` points que vous voulez pour déclarer une cellule vide. Du moment que les points ne sont pas séparés par un espace, ils représentent une cellule unique.\n\nRemarquez qu’avec cette syntaxe vous ne nommez pas les lignes mais les zones. Quand vous utilisez cette syntaxe, les lignes de chaque côté des zones sont nommées automatiquement. Si le nom de votre zone de grille est `foo`, alors le nom de la ligne de rangée (et de colonne) au début de la zone sera `foo-start` et à l’autre bout `foo-end`. En conséquence, certaines lignes pourront avoir plusieurs noms, par exemple dans notre illustration précédente, la ligne verticale tout à gauche aura trois noms\u0026nbsp;: header-start, main-start et footer-start.\n\n\u003ch3 id=\"gcg\"\u003egrid-column-gap et grid-row-gap\u003c/h3\u003e\n\nSpécifie la dimension des lignes de grille. On peut les voir comme des largeurs de gouttières entre les colonnes ou les rangées.\n\n**Valeurs** :\n\n- `\u003cline-size\u003e` - une longueur\n\n```\n.container{\n  grid-column-gap: \u003cline-size\u003e;\n  grid-row-gap: \u003cline-size\u003e;\n}\n```\n\nExemple :\n\n```\n.container{\n  grid-template-columns: 100px 50px 100px;\n  grid-template-rows: 80px auto 80px;\n  grid-column-gap: 10px;\n  grid-row-gap: 15px;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-column-row-gap.png\" width=\"322\" height=\"273\" alt=\"\"/\u003e\u003c/figure\u003e\n\nLes gouttières sont créées _uniquement_ entre les colonnes ou les rangées, pas autour.\n\n\u003ch3 id=\"gg\"\u003egrid-gap\u003c/h3\u003e\n\nC’est un raccourci de `grid-column-gap` et `grid-row-gap`.\n\n**Valeurs** :\n\n- `\u003cgrid-column-gap\u003e\u003cgrid-row-gap\u003e` - longueur\n\n```\n.container{\n  grid-gap: \u003cgrid-column-gap\u003e \u003cgrid-row-gap\u003e;\n}\n```\n\nExemple :\n\n```\n.container{\n  grid-template-columns: 100px 50px 100px;\n  grid-template-rows: 80px auto 80px;\n  grid-gap: 10px 15px;\n}\n```\n\nSi aucun `grid-row-gap` n’est spécifié, il prend la même valeur que `grid-column-gap`.\n\n\u003ch3 id=\"ji\"\u003ejustify-items\u003c/h3\u003e\n\nAligne le contenu à l’intérieur d’un item grille, le long de l’axe des colonnes (par opposition à `align-items` qui les aligne le long de l’axe des rangées). Cette valeur s’applique à tous les items grid à l’intérieur du container.\n\n**Valeurs** :\n\n- `start` - aligne le contenu à partir de la gauche de la zone de grille.\n- `end` - aligne le contenu en partant de la droite de la zone de grille\n- `center` - aligne le contenu au centre de la zone de grille\n- `stretch` - remplit toute la largeur de la zone de grille (c’est la valeur par défaut).\n\n```\n.container{\n  justify-items: start | end | center | stretch;\n}\n```\n\nExemples :\n\n```\n.container{\n  justify-items: start;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-items-start.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-items: end;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-items-end.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-items: center;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-items-center.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-items: stretch;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-items-stretch.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\nOn peut également spécifier ce comportement pour des items de grille _individuels_ [via la propriété `justify-self`](#js).\n\n\u003ch3 id=\"ai\"\u003ealign-items\u003c/h3\u003e\n\nAligne le contenu situé à l’intérieur d’un item de grille le long de l’axe des rangées (par opposition à `justify-items` qui l’aligne le long de l’axe des colonnes). Cette valeur s’applique à tous les items grid à l’intérieur du container.\n\n**Valeurs** :\n\n- `start` - aligne le contenu à partir du sommet de la zone de grille.\n- `end` - aligne le contenu en partant du bas de la zone de grille\n- `center` - aligne le contenu au centre de la zone de grille\n- `stretch` - remplit toute la hauteur de la zone de grille (c’est la valeur par défaut).\n\n```\n.container{\n  align-items: start | end | center | stretch;\n}\n```\n\nExemples :\n\n```\n.container{\n  align-items: start;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-items-start.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-items: end;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-items-end.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-items: center;\n}\n\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-items-center.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-items: stretch;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-items-stretch.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\nOn peut également spécifier ce comportement pour des items de grille _individuels_ [via la propriété `align-self`](#as).\n\n\u003ch3 id=\"jc\"\u003ejustif-content\u003c/h3\u003e\n\nParfois la dimension totale de votre grille semblera inférieure à la dimension de son container grid. Cela peut arriver si tous les items grid sont dimensionnés avec des unités non-flexibles comme `px`. Dans ce cas, vous pouvez régler l’alignement de la grille à l’intérieur du container. Cette propriété aligne la grille le long de l’axe des colonnes ([par opposition à `align-content`](#ac) qui aligne la grille le long de l’axe des rangées).\n\n**Valeurs** :\n\n- `start` - aligne la grille à partir de la gauche de la grille container (_container grid_).\n- `end` - aligne la grille à partir de la droite de la grille container.\n- `center` - aligne la grille au centre de la grille container\n- `stretch` - redimensionne les items pour permettre à la grille de remplir toute la largeur de la grille container.\n- `space-around` - place un espace égal entre chaque item de grille, et un demi-espace aux extrémités.\n- `space-between` - place un espace égal entre chaque item de grille, et aucun espace aux extrémités.\n- `space-evenly` - place un espace égal entre chaque item de grille, y compris aux extrémités.\n\n```\n.container{\n  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;\n}\n```\n\nExemples :\n\n```\n.container{\n  justify-content: start;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-content-start.png\" width=\"387\" height=\"187\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-content: end;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-content-end.png\" width=\"387\" height=\"187\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-content: center;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-content-center.png\" width=\"387\" height=\"187\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-content: stretch;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-content-stretch.png\" width=\"387\" height=\"187\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-content: space-around;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-content-space-around.png\" width=\"387\" height=\"187\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-content: space-between;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-content-space-between.png\" width=\"387\" height=\"187\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  justify-content: space-evenly;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-content-space-evenly.png\" width=\"387\" height=\"187\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"ac\"\u003ealign-content\u003c/h3\u003e\n\nParfois la dimension totale de votre grille semblera inférieure à la dimension de son container grid. Cela peut arriver si tous les items grid sont dimensionnés avec des unités non-flexibles comme `px`. Dans ce cas, vous pouvez régler l’alignement de la grille à l’intérieur du container. Cette propriété aligne la grille le long de l’axe des rangées ([par opposition à `justify-content`](#jc) qui aligne la grille le long de l’axe des colonnes).\n\n**Valeurs** :\n\n- `start` - aligne la grille à partir du sommet de la grille container (_container grid_).\n- `end` - aligne la grille à partir du bas de la grille container.\n- `center` - aligne la grille au centre de la grille container\n- `stretch` - redimensionne les items pour permettre à la grille de remplir toute la hauteur de la grille container.\n- `space-around` - place un espace égal entre chaque item de grille, et un demi-espace aux extrémités.\n- `space-between` - place un espace égal entre chaque item de grille, et aucun espace aux extrémités.\n- `space-evenly` - place un espace égal entre chaque item de grille, y compris aux extrémités.\n\n```\n.container{\n  align-content: start | end | center | stretch | space-around | space-between | space-evenly;\n}\n```\n\nExemples :\n\n```\n.container{\n  align-content: start;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-content-start.png\" width=\"258\" height=\"275\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-content: end;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-content-end.png\" width=\"258\" height=\"275\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-content: center;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-content-center.png\" width=\"258\" height=\"275\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-content: stretch;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-content-stretch.png\" width=\"258\" height=\"275\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-content: space-around;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-content-space-around.png\" width=\"258\" height=\"275\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-content: space-between;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-content-space-between.png\" width=\"258\" height=\"275\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.container{\n  align-content: space-evenly;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-content-space-evenly.png\" width=\"258\" height=\"275\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"gac\"\u003egrid-auto-colums, grid-auto-rows\u003c/h3\u003e\n\nSpécifie la dimension de toute piste auto-générée (également appelée piste implicite —\u0026nbsp;_implicit grid track_). Les pistes implicites sont créées lorsque vous positionnez explicitement des rangées ou des colonnes (via `grid-template-rows` ou `grid-template-column`) qui se trouvent en dehors de la grille définie.\n\n**Valeurs** :\n\n- `\u003ctrack-size\u003e` - peut être une longueur, un pourcentage, ou une fraction de l’espace libre dans la grille (via l’unité `fr`)\n\n```\n.container{\n  grid-auto-columns: \u003ctrack-size\u003e ...;\n  grid-auto-rows: \u003ctrack-size\u003e ...;\n}\n```\n\nPour illustrer la façon dont les pistes implicites sont créées, imaginons ce cas\u0026nbsp;:\n\n```\n.container{\n  grid-template-columns: 60px 60px;\n  grid-template-rows: 90px 90px\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-auto.png\" width=\"188\" height=\"229\" alt=\"Exemple de grid-template-columns et grid-template-rows\"/\u003e\u003c/figure\u003e\n\nOn crée ainsi une grille de 2\u0026nbsp;\u0026times;\u0026nbsp;2.\n\nMais imaginons maintenant que vous utilisiez `grid-column` et `grid-row` pour positionner vos items de grille comme ceci\u0026nbsp;:\n\n```\n.item-a{\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n}\n.item-b{\n  grid-column: 5 / 6;\n  grid-row: 2 / 3;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/implicit-tracks.png\" width=\"320\" height=\"229\" alt=\"\"/\u003e\u003c/figure\u003e\n\nNous avons dit à `.item-b` de commencer à la ligne de colonne 5 et de se terminer à la ligne de colonne 6, _mais nous n’avons jamais défini de lignes de colonne 5 ou 6_.\n\nNous avons référencé des lignes qui n’existent pas, en conséquence de quoi des pistes implicites de largeur 0 sont créées pour remplir l’espace. Nous pouvons utiliser `grid-auto-columns` et `grid-auto-rows` pour spécifier la largeur de ces pistes implicites\u0026nbsp;:\n\n```\n.container{\n  grid-auto-columns: 60px;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/implicit-tracks-with-widths.png\" width=\"401\" height=\"229\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"gaf\"\u003egrid-auto-flow\u003c/h3\u003e\n\nSi vous avez des items de grille que vous ne placez pas explicitement sur la grille, l’algorithme de placement automatique intervient pour placer automatiquement les items. Cette propriété contrôle la façon dont l’algorithme de placement automatique fonctionne.\n\n**Valeurs** :\n\n- `row` - indique à l’algorithme de remplir chaque rangée tout à tour, en ajoutant de nouvelles rangées si nécessaire.\n- `column` - indique à l’algorithme de remplir chaque colonne tout à tour, en ajoutant de nouvelles colonnes si nécessaire.\n- `dense` - indique à l’algorithme d’essayer de remplir les trous le plus tôt possible dans la grille au cas où de plus petits items devaient apparaître plus tard.\n\n```\n.container{\n  grid-auto-flow: row | column | row dense | column dense\n}\n```\n\nAttention : `dense` pourrait faire apparaître vos items dans le désordre.\n\nExemples :\n\nConsidérons ce HTML :\n\n```\n\u003csection class=\"container\"\u003e\n    \u003cdiv class=\"item-a\"\u003eitem-a\u003c/div\u003e\n    \u003cdiv class=\"item-b\"\u003eitem-b\u003c/div\u003e\n    \u003cdiv class=\"item-c\"\u003eitem-c\u003c/div\u003e\n    \u003cdiv class=\"item-d\"\u003eitem-d\u003c/div\u003e\n    \u003cdiv class=\"item-e\"\u003eitem-e\u003c/div\u003e\n\u003c/section\u003e\n```\n\nDéfinissons une grille de cinq colonnes sur deux rangées et réglons `grid-auto-flow` sur `row` (qui est également la valeur par défaut)\u0026nbsp;:\n\n```\n.container{\n    display: grid;\n    grid-template-columns: 60px 60px 60px 60px 60px;\n    grid-template-rows: 30px 30px;\n    grid-auto-flow: row;\n}\n```\n\nQuand nous plaçons les items sur la grille, nous spécifions seulement le placement de deux d’entre eux, les `item-a` et `item-e`\u0026nbsp;:\n\n```\n.item-a{\n    grid-column: 1;\n    grid-row: 1 / 3;\n}\n.item-e{\n    grid-column: 5;\n    grid-row: 1 / 3;\n}\n```\n\nComme nous avons réglé `grid-auto-flow` sur `row`, notre grille va ressembler à ceci. Remarquez que les trois items que nous n’avons pas placés (`item-b`, `item-c` et `item-d`) se répartissent sur les rangées disponibles\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-auto-flow-row.png\" width=\"371\" height=\"77\" alt=\"\"/\u003e\u003c/figure\u003e\n\nMais si au lieu de cela nous avions réglé `grid-auto-flow` sur `column`, les `item-b`, `item-c` et `item-d` se seraient répartis sur les colonnes\u0026nbsp;:\n\n```\n.container{\n    display: grid;\n    grid-template-columns: 60px 60px 60px 60px 60px;\n    grid-template-rows: 30px 30px;\n    grid-auto-flow: column;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-auto-flow-column.png\" width=\"371\" height=\"77\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3 id=\"grid\"\u003egrid\u003c/h3\u003e\n\n`grid` est un raccourci permettant de définir toutes les propriétés suivantes en une seule déclaration\u0026nbsp;: `grid-template-rows`, `grid-template-columns`, `grid-template-areas`, `grid-auto-rows`, `grid-auto-columns`, et `grid-auto-flow`. Il donne également à `grid-column-gap` et `grid-row-gap` leur valeur initiale, même si elles ne peuvent pas être explicitement définies par cette propriété.\n\n**Valeurs** :\n\n- `none` - règle toutes les sous-propriétés à leur valeur initiale.\n- `subgrid` - règle `grid-template-rows` et `grid-template-columns` sur `subgrid` et toutes les autres sous-propriétés à leur valeur initiale.\n- `\u003cgrid-template-rows\u003e / \u003cgrid-template-columns\u003e` - règle `grid-template-rows` et `grid-template-columns` à leur valeur spécifiée, respectivement, et toutes les autres sous-propriétés à leur valeur initiale.\n- `\u003cgrid-auto-flow\u003e [\u003cgrid-auto-rows\u003e [ / \u003cgrid-auto-columns\u003e] ]` - accepte toutes les valeurs de `grid-auto-flow`, `grid-auto-rows` et `grid-auto-columns`, respectivement. Si `grid-auto-columns` est omis, il prend la valeur donnée à `grid-auto-rows`. Si les deux sont omis, ils sont réglés sur leur valeur initiale.\n\n```\n.container{\n    grid: none | subgrid | \u003cgrid-template-rows\u003e / \u003cgrid-template-columns\u003e |\n    \u003cgrid-auto-flow\u003e [\u003cgrid-auto-rows\u003e [/ \u003cgrid-auto-columns\u003e]];\n}\n```\n\nExemples :\n\nLes deux blocs de code suivants sont équivalents\u0026nbsp;:\n\n```\n.container{\n    grid: 200px auto / 1fr auto 1fr;\n}\n```\n\nest l’équivalent de :\n\n```\n.container{\n    grid-template-rows: 200px auto;\n    grid-template-columns: 1fr auto 1fr;\n    grid-template-areas: none;\n}\n```\n\nDe même, les deux blocs de code suivants sont équivalents\u0026nbsp;:\n\n```\n.container{\n    grid: column 1fr / auto;\n}\n\n```\n\nest l’équivalent de :\n\n```\n.container{\n    grid-auto-flow: column;\n    grid-auto-rows: 1fr;\n    grid-auto-columns: auto;\n}\n```\n\n`grid` accepte également une syntaxe plus complexe mais très pratique pour régler toutes les propriétés en une seule fois. Vous spécifiez `grid-template-areas`, `grid-auto-rows` et `grid-auto-columns`, et toutes les autres sous-propriétés sont réglées sur leur valeur initiale. Vous spécifiez les noms de lignes et les dimensions de pistes en ligne avec leur zones de grille respective. C’est plus facile à décrire avec un exemple\u0026nbsp;:\n\n```\n.container{\n    grid: [row1-start] \"header header header\" 1fr [row1-end]\n          [row2-start] \"footer footer footer\" 25px [row2-end]\n          / auto 50px auto;\n}\n```\n\nC’est l’équivalent de :\n\n```\n.container{\n    grid-template-areas: \"header header header\"\n                         \"footer footer footer\";\n    grid-template-rows: [row1-start] 1fr [row1-end row2-start] 25px [row2-end];\n    grid-template-columns: auto 50px auto;\n}\n```\n\n\u003ch3 id=\"children\"\u003ePropriétés des Enfants (Grid Items)\u003c/h3\u003e\n\n\u003ch4\u003eTable des matières\u003c/h4\u003e\n\n- [grid-column-start](#gcs)\n- [grid-column-end](#gcs)\n- [grid-row-start](#gcs)\n- [grid-row-end](#gcs)\n- [grid-column](#gc)\n- [grid-row](#gc)\n- [grid-area](#ga)\n- [justify-self](#js)\n- [align-self](#as)\n\n\u003ch3 id=\"gcs\"\u003egrid column-start, grid-column-end, grid-row-start, grid-row-end\u003c/h3\u003e\n\nDéterminent l’endroit où se trouve un item de grille en référence à des lignes de grille spécifiques. `grid-column-start` / `grid-row-start` est la ligne où commence l’item, `grid-column-end`/ `grid-row-end` est la ligne où il finit.\n\n**Valeurs** :\n\n- `\u003cline\u003e` - peut être un numéro pour se référer à une ligne de grille numérotée, ou un nom pour se référer à une ligne de grille nommée.\n- `span \u003cnumber\u003e` - l’item s’étendra (_span_) sur le nombre spécifié de pistes de grille.\n- `span \u003cname\u003e` - l’item s’étendra jusqu’à rencontrer le ligne contenant le nom fourni.\n- `auto` - indique un auto-placement, une extension (_span_) automatique, ou le span par défaut\n\n```\n.item{\n  grid-column-start: \u003cnumber\u003e | \u003cname\u003e | span \u003cnumber\u003e | span \u003cname\u003e | auto\n  grid-column-end: \u003cnumber\u003e | \u003cname\u003e | span \u003cnumber\u003e | span \u003cname\u003e | auto\n  grid-row-start: \u003cnumber\u003e | \u003cname\u003e | span \u003cnumber\u003e | span \u003cname\u003e | auto\n  grid-row-end: \u003cnumber\u003e | \u003cname\u003e | span \u003cnumber\u003e | span \u003cname\u003e | auto\n}\n```\n\nExemples :\n\n```\n.item-a{\n  grid-column-start: 2;\n  grid-column-end: five;\n  grid-row-start: row1-start\n  grid-row-end: 3\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-start-end-a.png\" width=\"514\" height=\"365\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.item-b{\n  grid-column-start: 1;\n  grid-column-end: span col4-start;\n  grid-row-start: 2\n  grid-row-end: span 2\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-start-end-b.png\" width=\"514\" height=\"365\" alt=\"\"/\u003e\u003c/figure\u003e\n\nSi aucune `grid-column-end`/ `grid-row-end`n’est déclarée, l’item s’étendra sur 1 piste par défaut.\n\nLes items peuvent se recouvrir. Vous pouvez utiliser [z-index](/articles/comment-fonctionne-z-index/) pour contrôler leur empilement.\n\n\u003ch3 id=\"gc\"\u003egrid-column, grid-row\u003c/h3\u003e\nRaccourci pour `grid-column-start` + `grid-column-end`, et `grid-row-start` + `grid-row-end`, respectivement.\n\n**Valeurs** :\n\n- `\u003cstart-line\u003e / \u003cend-line\u003e` - chacun accepte les mêmes valeurs que la version longue, y compris span.\n\n```\n.item{\n  grid-column: \u003cstart-line\u003e / \u003cend-line\u003e | \u003cstart-line\u003e / span \u003cvalue\u003e;\n  grid-row: \u003cstart-line\u003e / \u003cend-line\u003e | \u003cstart-line\u003e / span \u003cvalue\u003e;\n}\n```\n\nExemple :\n\n```\n.item-c{\n  grid-column: 3 / span 2;\n  grid-row: third-line / 4;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-start-end-c.png\" width=\"514\" height=\"365\" alt=\"\"/\u003e\u003cmeta itemprop=\"width\" content=\"514\"\u003e\u003c/figure\u003e\n\nSi aucune valeur de fin de ligne n’est déclarée, l’item s’étendra sur 1 piste par défaut.\n\n\u003ch3id=\"ga\"\u003egrid-area\u003c/h3id=\u003e\n\nDonne un nom à un item pour qu’il puisse être référencé par un template créé avec la propriété `grid-template-areas`. Par ailleurs, cette propriété peut être utilisée comme raccourci encore plus court pour `grid-row-start` + `grid-column-start` + `grid-row-end` + `grid-column-end`.\n\n**Valeurs** :\n\n- `\u003cname\u003e` - un nom, choisi par vous.\n- `\u003crow-start\u003e / \u003ccolumn-start\u003e / \u003crow-end\u003e / \u003ccolumn-end\u003e ` - peuvent être des nombres ou des lingnes nommées.\n\n```\n.item{\n  grid-area: \u003cname\u003e | \u003crow-start\u003e / \u003ccolumn-start\u003e / \u003crow-end\u003e / \u003ccolumn-end\u003e;\n}\n```\n\nExemples :\n\n`grid-area` pour attribuer un nom à l’item\u0026nbsp;:\n\n```\n.item-d{\n  grid-area: header\n}\n```\n\n`grid-area` comme raccourci de `grid-row-start` + `grid-column-start` + `grid-row-end` + `grid-column-end`\u0026nbsp;:\n\n```\n.item-d{\n  grid-area: 1 / col4-start / last-line / 6\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/grid-start-end-d.png\" width=\"514\" height=\"365\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3id=\"js\"\u003ejustify-self\u003c/h3id=\u003e\n\nAligne le contenu d’un item de grille sur l’axe des colonnes (par opposition à `align-self` qui l’aligne le long de l’axe des rangées). Cette propriété s’applique au contenu d’un item de grille et uniquement à lui.\n\n**Valeurs** :\n\n- `start` - aligne le contenu sur la gauche de la zone de grille\n- `end` - aligne le contenu sur la droite de la zone de grille\n- `center` - aligne le contenu au centre de la zone de grille\n- `stretch` - Remplit toute la largeur de la zone de grille (c’est la valeur par défaut).\n\n```\n.item{\n  justify-self: start | end | center | stretch;\n}\n```\n\nExemples :\n\n```\n.item-a{\n  justify-self: start;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-self-start.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.item-a{\n  justify-self: end;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-self-end.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003cmeta itemprop=\"width\" content=\"312\"\u003e\u003c/figure\u003e\n\n```\n.item-a{\n  justify-self: center;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-self-center.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.item-a{\n  justify-self: stretch;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-justify-self-stretch.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\nPour régler l’alignement de _tous_ les items dans une grille, ce comportement peut être défini sur le container grid [via la propriété `justify-items`](#ji).\n\n\u003ch3 id=\"as\"\u003ealign-self\u003c/h3\u003e\n\nAligne le contenu d’un item de grille sur l’axe des rangées (par opposition à `justify-self` qui l’aligne le long de l’axe des colonnes). Cette propriété s’applique au contenu d’un item de grille et uniquement à lui.\n\n**Valeurs** :\n\n- `start` - aligne le contenu sur le sommet de la zone de grille\n- `end` - aligne le contenu sur le bas de la zone de grille\n- `center` - aligne le contenu au centre de la zone de grille\n- `stretch` - Remplit toute la hauteur de la zone de grille (c’est la valeur par défaut).\n-\n\n```\n.item{\n  align-self: start | end | center | stretch;\n}\n```\n\nExemples :\n\n```\n.item-a{\n  align-self: start;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-self-start.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.item-a{\n  align-self: end;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-self-end.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.item-a{\n  align-self: center;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-self-center.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n.item-a{\n  align-self: stretch;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grid-align-self-stretch.png\" width=\"312\" height=\"125\" alt=\"\"/\u003e\u003c/figure\u003e\n\nPour régler l’alignement de _tous_ les items dans une grille, ce comportement peut être défini sur le container grid [via la propriété `align-items`](#ai).\n"},{"slug":"sur-not-et-la-specifite","title":"Sur :not et la spécifité","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"15 mars 2016","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/on-not-and-specificity/","copyright":"2016"},"dateCascade":"20 mars 2016","dateMachine":"2O160320","tags":["css","pseudo-classes"],"about":[":not","Specificité"],"excerpt":"Ire Aderinokun revisite ici la pseudo-classe de négation, nous montre l'envers du décor et nous offre un crash course sur la spécificité!","featured":false,"featuredImage":"/images/authors/ire-aderinokun.jpg","order":null,"content":"\n[La pseudo-classe de négation](/articles/la-pseudo-classe-de-negation/) `:not` peut être extrêmement utile. Elle nous permet de cibler des éléments en fonction d’attributs qu’_ils n’ont pas_. Ce faisant, elle nous évite le recours à des règles supplémentaires et toujours plus spécifiques.\n\nUn exemple assez courant serait celui d’une liste à laquelle nous voulons appliquer un style —\u0026nbsp;sauf au dernier item\u0026nbsp;:\n\n```\n/* Sans :not */\nli { border-right: 1px solid #000; }\nli:last-child { border-right: none; }\n\n/* Avec :not */\nli:not(:last-child) { border-right: 1px solid #000; }\n```\n\n[La pseudo classe :not](https://developer.mozilla.org/fr/docs/Web/CSS/:not) fait partie de mes préférées. Cependant, je me suis parfois trouvée dans des situations où la déclaration `:not` n’écrasait pas la déclaration initiale. Par exemple\u0026nbsp;:\n\n```\na:not(.ul) { text-decoration: none; }\nnav a { text-decoration: underline; }\n```\n\nDans ce cas précis, je me suis aperçue que les éléments `nav a` n'étaient toujours pas soulignés. Après un moment de confusion, j’ai approfondi ma recherche sur le fonctionnement de la règle `:not` et son effet sur la spécificité.\n\n\u003ch2\u003eLa spécificité en 5 sec\u003c/h2\u003e\n\nLa spécificité en CSS peut être compliquée à comprendre, le mieux est de commencer par un exemple. Prenons l’élément HTML suivant\u0026nbsp;:\n\n```\n\u003cp class=\"foo\" id=\"bar\"\u003eLorem ipsum dolor sit amet.\u003c/p\u003e\n```\n\net les styles que voici\u0026nbsp;:\n\n```\np { color: red; }\n.foo { color: green; }\n#bar { color: blue; }\np.foo#bar { color: yellow; }\n```\n\nDans les cas comme celui-ci, où plusieurs sélecteurs ciblent le même élément, c’est la **spécificité du sélecteur** qui déterminera les règles qui prévaudront.\n\nLa spécificité d’un sélecteur dépend de deux facteurs\u0026nbsp;:\n\n1. **De quels types de sélecteur s’agit-il ?** Il y a trois types de sélecteurs :  \n   a. les ID, par exemple `#bar`  \n   b. les classes (dont les pseudo-classes), par exemple `.foo` ou `:last-child`  \n   c. les types, par exemple `p`\n2. **Le nombre de chacun des sélecteurs**. Par exemple s’il y a 2 IDs et 3 classes.\n\nCes deux facteurs combinés déterminent le niveau de spécificité d’un sélecteur. Si nous revenons à notre exemple, voici comment est calculée la spécificité de chaque sélecteur.\n\n\u003ctable class=\"specificTable\"\u003e\u003cthead\u003e\u003ctr class=\"header\"\u003e\u003cth align=\"left\"\u003eSélecteur\u003c/th\u003e\u003cth align=\"left\"\u003eNb d’IDs\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Classes\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Types\u003c/th\u003e\u003cth align=\"left\"\u003eSpécificité\u003c/th\u003e\u003cth align=\"left\"\u003eVainqueur\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr class=\"odd\"\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0-0-1\u003c/td\u003e\u003ctd align=\"left\"\u003e\u0026nbsp;\u003c/td\u003e\u003c/tr\u003e\u003ctr class=\"even\"\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003e.foo\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e0-1-0\u003c/td\u003e\u003ctd align=\"left\"\u003e\u0026nbsp;\u003c/td\u003e\u003c/tr\u003e\u003ctr class=\"odd\"\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003e#bar\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1-0-0\u003c/td\u003e\u003ctd align=\"left\"\u003e\u0026nbsp;\u003c/td\u003e\u003c/tr\u003e\u003ctr class=\"even\"\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep.foo#bar\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e1-1-1\u003c/td\u003e\u003ctd align=\"left\"\u003e \u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\nPour lire le résultat figurant dans la colonne “Spécificité”, on ne prend pas le nombre global, mais chaque unité qui le compose, de gauche à droite.\n\nQuand on compare deux sélécteurs, on prend la première valeur (qui représente le nombre de sélecteurs ID) et on les compare. Si un sélecteur a une valeur ID plus élevée, il gagne automatiquement la bataille. Si, et seulement si, les deux sélecteurs ont la même valeur ID, on passe à la suivante (dans ce cas, c’est le nombre de classes) et ainsi de suite.\n\nPrenons l’exemple suivant\u0026nbsp;:\n\n\u003ctable class=\"specificTable\"\u003e\u003cthead\u003e\u003ctr class=\"header\"\u003e\u003cth align=\"left\"\u003eSélecteur\u003c/th\u003e\u003cth align=\"left\"\u003eNb d’IDs\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Classes\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Types\u003c/th\u003e\u003cth align=\"left\"\u003eSpécificité\u003c/th\u003e\u003cth align=\"left\"\u003eVainqueur\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0-0-1\u003c/td\u003e\u003ctd align=\"left\"\u003e\u0026nbsp;\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep:last-child\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0-1-1\u003c/td\u003e\u003ctd align=\"left\"\u003e\u0026nbsp;\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep.foo.bar.baz\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e3\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0-3-1\u003c/td\u003e\u003ctd align=\"left\"\u003e\u0026nbsp;\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003e#bar\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1-0-0\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\nUn seul ID l’emportera toujours sur 100 classes, parce que le nombre de classes est sans importance s’il existe un ID.\n\nRemarque : ces calculs ne s’appliquent qu’aux styles définis en CSS. Les styles définis en ligne auront la priorité.\n\n👉🏿 _NdT\u0026nbsp;: Pour approfondir ce sujet, vous pouvez consulter [Cascade CSS et priorité des sélecteurs](http://openweb.eu.org/articles/cascade_css) de Laurent Denis_.\n\n\u003ch2\u003eEt :not là-dedans ?\u003c/h2\u003e\n\nLa pseudo-classe de négation n’ajoute rien à la quantité de spécificité contrairement aux autres pseudo-classes. Cependant, les sélecteurs situés à l’intérieur de `:not`, oui.\n\n\u003e Relativement à la spécificité, ajouter `p:not(.foo)` revient au même qu’ajouter `.notFoo` à tous les `p` n’ayant pas la classe `.foo`.\n\nPar exemple :\n\n```\np.bar { color: red; }\np:not(.foo) { color: green; }\n```\n\nDe quelle couleur pensez-vous que sera `\u003cp class=\"bar\"\u003e` ? La bonne réponse est vert, pas rouge. Ceci parce qu’en ajoutant la règle `:not` nous avons fait l’équivalent d’un ajout de classe `.notFoo` à notre élément `\u003cp class=\"bar\"\u003e`.\n\n\u003ctable class=\"specificTable\"\u003e\u003cthead\u003e\u003ctr class=\"header\"\u003e\u003cth align=\"left\"\u003eSélecteur\u003c/th\u003e\u003cth align=\"left\"\u003eNb d’IDs\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Classes\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Types\u003c/th\u003e\u003cth align=\"left\"\u003eSpécificité\u003c/th\u003e\u003cth align=\"left\"\u003eVainqueur\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep.bar\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0-1-1\u003c/td\u003e\u003ctd align=\"left\"\u003eÉgalité\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep:not(.foo)\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e  \n\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0-1-1\u003c/td\u003e\u003ctd align=\"left\"\u003eÉgalité\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\nLa règle `:not` est maintenant au même niveau de spécificité que les éléments ayant une “vraie” classe. Mais comme elle est définie après dans le CSS, c’est elle qui prévaut.Cela explique aussi pourquoi, dans notre exemple de `nav`, la règle `:not` l’emportait sur les sélecteurs de types imbriqués.\n\n\u003ctable class=\"specificTable\"\u003e\u003cthead\u003e\u003ctr class=\"header\"\u003e\u003cth align=\"left\"\u003eSélecteur\u003c/th\u003e\u003cth align=\"left\"\u003eNb d’IDs\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Classes\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Types\u003c/th\u003e\u003cth align=\"left\"\u003eSpécificité\u003c/th\u003e\u003cth align=\"left\"\u003eVainqueur\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ea:not(.ul)\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0-1-1\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003enav a\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e2\u003c/td\u003e\u003ctd align=\"left\"\u003e0-0-2\u003c/td\u003e\u003ctd align=\"left\"\u003e\u0026nbsp;\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\n**Les choses deviennent encore plus complexes quand on introduit des IDs**. De même que `p:not(.foo)` revient à peu près à ajouter `.notFoo` à tous les éléments `\u003cp\u003e`, de même `p:not(#bar)` revient à ajouter `#notBar` à tous les éléments `\u003cp\u003e`. Par exemple si nous avons\u0026nbsp;:\n\n```\np:not(#foo) { color: green; }\np.bar { color: red; }\n```\n\n...de quelle couleur pensez-vous que sera `\u003cp class=\"bar\"\u003e`? La bonne réponse est vert, pas rouge.\n\n\u003ctable class=\"specificTable\"\u003e\u003cthead\u003e\u003ctr class=\"header\"\u003e\u003cth align=\"left\"\u003eSélecteur\u003c/th\u003e\u003cth align=\"left\"\u003eNb d’IDs\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Classes\u003c/th\u003e\u003cth align=\"left\"\u003eNb de Types\u003c/th\u003e\u003cth align=\"left\"\u003eSpécificité\u003c/th\u003e\u003cth align=\"left\"\u003eVainqueur\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep.bar\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0-1-1\u003c/td\u003e\u003ctd align=\"left\"\u003e\u0026nbsp;\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd align=\"left\"\u003e\u003ccode\u003ep:not(#foo)\u003c/code\u003e\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e0\u003c/td\u003e\u003ctd align=\"left\"\u003e1\u003c/td\u003e\u003ctd align=\"left\"\u003e1-0-1\u003c/td\u003e\u003ctd align=\"left\"\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\nBien que notre élément positif et sa classe soient déclarés après dans le CSS, nous avons ajouté pour ainsi dire un ID à l’élément à partir de la règle `:not`\u0026nbsp;!\n\n\u003ch2\u003eUtiliser :not\u003c/h2\u003e\n\nCet effet de `:not` m’a amenée à repensé la façon dont je l’utilisais. Nous croyons contourner le besoin d’écrire des règles spécifiques pour en écraser d’autres, comme dans notre premier exemple, mais en réalité `:not` nous amène à faire quelque chose qui y ressemble, sans que nous nous en apercevions.\n\nJe vais continuer à utiliser `:not` parce que bien souvent c’est la façon la plus propre d’écrire, mais je le ferai en tenant compte de quelques avertissements\u0026nbsp;:\n\n- Ne **jamais** l’utiliser avec des IDs, par exemple\u0026nbsp;: `:not(#bar)`\n- Limiter son utilisation aux sélecteurs de type génériques, par exemple `div` dans `div:not(.foo)`\n- Définir les règles `:not` le plus en amont possible dans mon CSS de façon à pouvoir les écraser si nécessaire.\n"},{"slug":"backgrounds-svg-hexagones-et-ecailles","title":"Backgrounds SVG : hexagones et écailles","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"11 février 2016","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/396/SVG-Backgrounds-Hexagons-and-Scales","copyright":"2016"},"dateCascade":"14 février 2016","dateMachine":"2O160214","tags":["svg","design"],"about":["Background"],"excerpt":"Dudley Storey poursuit sa passionnante série sur les backgrounds SVG, ici avec des motifs en tuiles hexagonales et en écailles. On y apprend quelques petites astuces relatives à l'encodage base64.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nUn récent [dossier de travail réalisé par un de mes étudiants](http://tyler-mackenzie.ca/) utilisait une image de background “en écailles”, très intéressante, encodée en base64. J’ai [décodé la texture](https://www.base64decode.org/) puis j’ai apporté quelques améliorations au SVG. Pour compléter, j’ai créé un background hexagonal simple que je partage ici.\n\n\u003ch2\u003eMotif en écailles\u003c/h2\u003e\n\nPour les écailles, le balisage est assez simple\u0026nbsp;:\n\n```\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\"\nxmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\"\u003e\n\u003cdefs\u003e\n    \u003cpattern id=\"scales\" width=\"30\" height=\"30\"\n    patternUnits=\"userSpaceOnUse\"  patternTransform=\"scale(2)\"\u003e\n            \u003cg id=\"curves\"\u003e\n                \u003cpath id=\"inner\" d=\"M0 0c0,30, 30,30 30,0\" /\u003e\n                \u003cpath id=\"outer\" d=\"M0 0c0,30, 30,30 30,0\" /\u003e\n            \u003c/g\u003e\n            \u003cuse x=\"15\" y=\"15\" xlink:href=\"#curves\" /\u003e\n            \u003cuse x=\"-15\" y=\"15\" xlink:href=\"#curves\" /\u003e\n            \u003cuse x=\"0\" y=\"0\" xlink:href=\"#curves\" /\u003e\n            \u003cuse x=\"15\" y=\"-15\" xlink:href=\"#curves\" /\u003e\n            \u003cuse x=\"-15\" y=\"-15\" xlink:href=\"#curves\" /\u003e\n        \u003c/pattern\u003e\n    \u003c/defs\u003e\n    \u003crect width=\"100%\" height=\"100%\" fill=\"url(#scales)\" /\u003e\n\u003c/svg\u003e\n```\n\nLe SVG utilise la technique standard du `\u003cpattern\u003e` que j’ai déjà illustrée dans de précédents articles (par exemple\u0026nbsp;: [motifs japonais](/articles/motifs-svg-japonais), [diagonales et motifs SVG en background](/articles/diagonales-et-motifs-svg-en-background)) . Moins habituel, le motif utilisé dans le pattern est [un élément “groupe”](/articles/les-bases-de-svg-groupes/).\n\nL’arrière-plan SVG est associé aux styles suivants\u0026nbsp;:\n\n```\nsvg {\n  background: #0F7173;\n}\n#scales {\n  fill: #0F7173;\n}\n#inner {\n    stroke: #0c4c4d;\n    stroke-width: 3.1;\n}\n#outer {\n  stroke: #098f92;\n  stroke-width: 0.9;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xZyKVp\" src=\"//codepen.io/dudleystorey/embed/xZyKVp?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=xZyKVp\u0026amp;user=dudleystorey\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/dudleystorey/pen/xZyKVp\"\u003eécailles SVG\u003c/a\u003e de dudleystorey dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nRemarquez que l’élément SVG et les écailles utilisent la même couleur pour leur `background` et `fill`. Cette technique est répétée dans l’exemple de motifs hexagonaux qui va suivre.\n\n\u003e Le pattern pourait être amélioré en définissant le `stroke` des chemins (_path_) en rgba plutôt qu’en valeurs hexadécimales. On pourrait ainsi les corriger automatiquement si les couleurs de background et de fill des écailles étaient modifiées.\n\n\u003ch2\u003eMotifs hexagonaux\u003c/h2\u003e\n\nLe code comprend un balisage minimal pour créer un background hexagonal lié\u0026nbsp;:\n\n```\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  width=\"100%\" height=\"100%\"\u003e\n     \u003cdefs\u003e\n        \u003cpattern id=\"hexagons\" width=\"50\" height=\"43.4\"\n        patternUnits=\"userSpaceOnUse\"\n        patternTransform=\"scale(5) translate(2) rotate(45)\"\u003e\n            \u003cpolygon\n            points=\"24.8,22 37.3,29.2 37.3,43.7 24.8,50.9 12.3,43.7 12.3,29.2\"\n            id=\"hex\" /\u003e\n            \u003cuse xlink:href=\"#hex\" x=\"25\" /\u003e\n            \u003cuse xlink:href=\"#hex\" x=\"-25\" /\u003e\n            \u003cuse xlink:href=\"#hex\" x=\"12.5\" y=\"-21.7\" /\u003e\n            \u003cuse xlink:href=\"#hex\" x=\"-12.5\" y=\"-21.7\" /\u003e\n        \u003c/pattern\u003e\n     \u003c/defs\u003e\n\u003crect width=\"100%\" height=\"100%\" fill=\"url(#hexagons)\" /\u003e\n\u003c/svg\u003e\n```\n\nLe pattern utilise le CSS suivant\u0026nbsp;:\n\n```\nsvg {\n  background: rgb(125,155,132);\n}\npolygon {\n  fill: rgb(125,155,132);\n  stroke-width: 2;\n  stroke: #000;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YwdYxq\" src=\"//codepen.io/dudleystorey/embed/YwdYxq?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=YwdYxq\u0026amp;user=dudleystorey\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/dudleystorey/pen/YwdYxq\"\u003ebackground SVG hexagones\u003c/a\u003e de dudleystorey dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLà encore, le SVG utilise la même technique consistant à s’appuyer sur les mêmes `background` et `fill` pour l’élément SVG et ses polygones pour “remplir” l’espace vide. Dans cet exemple, j’ai utilisé une série de transformations du pattern pour le placé légèrement “en dehors” de la page.\n\n\u003e Le `translate` est particulièrement important car un hexagone ayant un bord placé contre une bordure du viewport semblera avoir un côté plus long que l’autre.\n\nLes traits (_stroke_) SVG s’étendent de manière égale de chaque côté d’une ligne interne représentant le chemin, par conséquent une augmentation de la valeur `stroke-width` (“épaisseur du trait”) aura pour conséquence de réduire la taille des hexagones.\n\n\u003ch3\u003eExemples CodePen\u003c/h3\u003e\n\nLes exemples CodePen qui précèdent utilisent le code SVG directement dans le HTML pour plus de clarté. En production, le CSS serait intégré au SVG et l’ensemble serait transformé en code base64 qui serait utilisé comme valeur de la propriété `background-image`.\n"},{"slug":"cacher-des-elements-avec-css","title":"Cacher des éléments avec CSS","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"21 juillet 2015","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/hiding-elements-with-css/","copyright":"2015"},"dateCascade":"23 janvier 2016","dateMachine":"2O160123","tags":["css","accessibilite"],"about":["Visibilité","Opacité","Display","Positionnement absolu"],"excerpt":"Encore un article d'Ire Aderinokun, qu'on aime beaucoup ici pour ses analyses en profondeur et la clarté de ses explications. Avez-vous bien tout considéré lorsque vous cachez un élément HTML?","featured":true,"featuredImage":"/images/display-position-compressor.png","order":6,"content":"\nLa possibilité de faire disparaître et apparaître des éléments sur une page fait partie intégrante du design responsif. Selon ce que vous voulez obtenir, il existe plusieurs façons de masquer un élément avec CSS. Dans cet article, je vais explorer les propriétés à notre disposition et les avantages et désavantages de chacune.\n\n\u003ch2\u003eLes Propriétés\u003c/h2\u003e\n\n\u003ch3\u003eDisplay\u003c/h3\u003e\n\n[Comme je l’ai déjà mentionné](/articles/controler-le-modele-de-boite/), à l’intérieur d’un document HTML chaque élément est une boîte rectangulaire. Cacher un élément HTML à l’aide de la propriété `display` signifie que cette boîte rectangulaire n’est pas générée du tout.\n\nBien que l’élément soit toujours dans notre markup (comme vous pouvez le voir en inspectant la page), il n’existe pour ainsi dire pas dans la page. Aucune partie du modèle de boîte —\u0026nbsp;la surface du contenu, celles du padding, de la bordure ou de la marge\u0026nbsp;— n’est générée ou n’apparaît sur la page.\n\nTout contenu situé à l’intérieur de l’élément ou de ses enfants est fonctionnellement inexistant. S’il s’agit d’un élément actionnable, par exemple un bouton ou une ancre, on ne peut pas l’activer. L’élément, et tout ce qu’il contient, est également ignoré par les lecteurs d’écran.\n\n```\n.foo {\n  display: none;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/display-position-compressor.png\" width=\"780\" height=\"354\" alt=\"L’élément foo disparaît et les autres éléments prennent sa place\"/\u003e\u003c/figure\u003e\n\n\u003ch3\u003eVisibility\u003c/h3\u003e\n\nAvec la propriété `visibility`, la “boîte rectangulaire” est générée, mais elle n’est pas rendue à l’écran. Du fait que la boîte est générée, les quatre surfaces constituant la boîte affectent toujours la disposition du reste de la page, cependant sans que les quatre surfaces soient visibles à l’écran.\n\nMis à part le fait que la boîte soit générée, l’utilisation de la propriété visibility pour cacher un élément est semblable à la propriété display.\n\n```\n.foo {\n  visibility: hidden;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/visibility-opacity-compressor.png\" width=\"780\" height=\"350\" alt=\"L’élément foo disparaît mais les autres éléments restent à leur place\"/\u003e\u003c/figure\u003e\n\n\u003ch3\u003eOpacity\u003c/h3\u003e\n\nLa propriété opacity n’a d’impact que sur la façon dont un élément apparaît visuellement —\u0026nbsp;plus exactement sur sa transparence.\n\nLorsque l’opacité d’un élément est à sa valeur minimum, bien qu’il soit invisible à l’écran ses fonctionnalités demeurent, comme s’il avait une couleur solide. Par conséquent, l’élément occupe toujours son espace, il est lu par les lecteurs d’écran et on peut interagir avec lui.\n\n```\n.foo {\n  opacity: 0;\n}\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/visibility-opacity-compressor.png\" width=\"780\" height=\"350\" alt=\"L’élément foo disparaît, les autres éléments restent à leur place et sont actionnables\"/\u003e\u003c/figure\u003e\n\n\u003ch3\u003ePosition\u003c/h3\u003e\n\nLa propriété `position` n’est pas faite a priori pour masquer ou afficher les éléments d’une page. On l’a utilisée à cet effet parce qu’on avait besoin de cacher un élément et de le soustraire de la disposition de la page _tout en conservant la possibilité qu’il soit lu par les lecteurs d’écran et qu’il soit actionnable si besoin_.\n\nIl y a deux manières de combiner la propriété position avec d’autres propriétés pour parvenir à cet effet.\n\nCombiné avec les propriétés `top` et `left`, l’élément est déplacé en dehors du viewport et il est donc hors de vue.\n\n```\n.foo {\n  position: absolute;\n  top: -9999px;\n  left: -9999px;\n}\n```\n\nUne autre façon de faire, imaginée par [Jeff Burnz](http://adaptivethemes.com/using-css-clip-as-an-accessible-method-of-hiding-content), consiste à utiliser la propriété `clip` pour redimensionner la boîte rectangulaire à une taille insignifiante, ce qui la l’escamote fonctionnellement.\n\n```\n.foo {\n  position: absolute;\n  clip: rect(1px 1px 1px 1px); /* syntaxe pour IE6 \u0026 IE7 */\n  clip: rect(1px, 1px, 1px, 1px);\n}\n```\n\nAvec les deux méthodes, le résultat est identique\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/display-position-compressor.png\" width=\"780\" height=\"354\" alt=\"L’élément foo disparaît et les autres éléments prennent sa place\"/\u003e\u003c/figure\u003e\n\nBien que ces solutions relèvent un peu du bidouillage, elles sont actuellement la meilleure manière de faire disparaître un élément de l’écran tout en conservant ses fonctions.\n\n\u003ch3\u003eEn résumé\u003c/h3\u003e\n\n\u003ctable class=\"specificTable\"\u003e  \n  \u003cthead\u003e\u003ctr\u003e\u003cth\u003e\u0026nbsp;\u003c/th\u003e\u003cth\u003edisplay\u003c/th\u003e\u003cth\u003evisibility\u003c/th\u003e\u003cth\u003eopacity\u003c/th\u003e\u003cth\u003eposition\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd\u003eLe modèle de boîte est-il généré ?\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eLa boîte affecte-t-elle le layout ?\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eLa boîte est-elle visible ?\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eL’élément est-il lu par les lecteurs d’écran ?\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003ctr\u003e\u003ctd\u003eL’élément est-il actionnable (cliquable, focusable) ?\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark red\"\u003e✗\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003ctd\u003e\u003cspan class=\"checkmark green\"\u003e✓\u003c/span\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\n👉🏿 _Note complémentaire du traducteur (d'après un [article de David Walsh](https://davidwalsh.name/html5-hidden))_\n\nHTML5 a ajouté quelques attributs intéressants comme placeholder, download et autofocus. Un autre attribut nouveau est `hidden`. Appliqué à un élément, il se comporte comme CSS `display: none;` l'élément disparaît et son espace avec, il sort du flux. Il suffit pour cela d'écrire\u0026nbsp;:\n\n```\n\u003cdiv hidden\u003e\n\tTu ne me vois plus !\n\u003c/div\u003e\n```\n\nSi un navigateur ne supporte pas cet attribut, on peut le styler via:\n\n```\n*[hidden] { display: none; }\n```\n\nPourquoi utiliser l'attribut `hidden` ? Il est plus sémantiquement correct et devrait aider plus efficacement les lecteurs d'écran.\n\nPour faire réapparaître l'élément, il suffit d'utiliser la propriété `display` avec n'importe laquelle des valeurs acceptées, sauf `none`.\n"},{"slug":"controler-le-modele-de-boite","title":"Contrôler le modèle de boîte","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"30 juin 2015","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/controlling-the-box-model/","copyright":"2015"},"dateCascade":"23 janvier 2016","dateMachine":"2O160123","tags":["css","html"],"about":["Box Model","Box Sizing"],"excerpt":"Dans cet article simple et complet, Ire Aderinokun rappelle les bases du modèle de boîte CSS et montre pourquoi vous devriez utiliser box-sizing.","featured":false,"featuredImage":"/images/1-margin-compressor.jpeg","order":null,"content":"\nDans l’arbre qui représente notre document, [chaque élément est une boîte rectangulaire](http://www.w3.org/TR/CSS2/box.html). Le modèle de boîte CSS décrit ces boîtes et leurs composants.\n\n\u003ch2\u003eLes bases du modèle de boîte\u003c/h2\u003e\n\nDans un document HTML, chaque boîte rectangulaire est constituée de quatre zones\u0026nbsp;: la zone du contenu, celle du padding, celle de la bordure et celle de la marge.\n\nPrenons un exemple.\n\n```\n//HTML\n\u003cdiv class=\"box\"\u003e\n  \u003c!-- start content area --\u003e\n  Lorem ipsum dolor sit amet.\n  \u003c!-- end content area --\u003e\n\u003c/div\u003e\n```\n\nDonnons un style à cette boîte :\n\n```\n//CSS\n.box {\n  width: 300px;\n  height: 300px;\n\n  padding: 50px; /* padding area */\n  margin: 50px; /* margin area */\n  border: 50px solid grey; /* border area */\n}\n```\n\n\u003ch3\u003eLa zone du contenu\u003c/h3\u003e\n\nLa zone du contenu est la partie occupée par le contenu de l’élément HTML. Cela peut être du texte, une image ou tout autre media. Le contour est appelé “contour du contenu” ou “contour intérieur”.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/1-content-compressor.jpeg\" alt=\"texte dans une boîte rectangulaire délimitée par un contour\"/\u003e\u003cfigcaption\u003eContent edge, le contour du contenu\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch3\u003eLa zone du padding\u003c/h3\u003e\n\nLa zone du padding est l’espace que nous spécifions entre le contenu et la bordure. Son contour est appelé “contour de padding”.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/1-padding-compressor.jpeg\" alt=\"texte dans une boîte rectangulaire délimitée par un contour et entourée par un padding lui-même délimité par un contour\"/\u003e\u003cfigcaption\u003ePadding edge, le contour de padding\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch3\u003eLa zone de bordure\u003c/h3\u003e\n\nLa zone de bordure est constituée par l’épaisseur de la bordure. Son contour est appelé “contour de bordure”.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/1-border-compressor.jpeg\" alt=\"\"/\u003e\u003cfigcaption\u003eBorder edge, le contour de bordure\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch3\u003eLa zone de marge\u003c/h3\u003e\n\nLa zone de marge est l’espace situé en dehors de la bordure. Bien que ne faisant pas strictement partie de l’élément lui-même, elle est prise en compte lorsque nous considérons l’espace occupé par l’élément dans la page. Son contour est appelé “contour de marge” ou “contour extérieur”.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/1-margin-compressor.jpeg\" alt=\"\"/\u003e\u003cfigcaption\u003eMargin edge, le contour de marge\u003c/figcaption\u003e\u003c/figure\u003e\n\nPour [les éléments de niveau block](/articles/la-difference-entre-block-et-inline/), nous pouvons contrôler la hauteur et la largeur des boîtes rectangulaires avec les propriétés CSS `height` et `width`. Cependant, vu le nombre de zones pour chaque élément, nous devons spécifier (ou calculer) ce que nous entendons par “largeur” et “hauteur” de l’élement. C’est ici qu’intervient la propriété `box-sizing`.\n\n\u003ch2\u003eLa propriété box-sizing\u003c/h2\u003e\n\nLa propriété box-sizing définit lequel parmi les quatre contours nous utilisons pour déterminer la largeur et la hauteur de notre élément. Selon la zone que nous spécifions, la zone de contenu pourra être ajustée.\n\nLa propriété `box-sizing` accepte quatre valeurs, `content-box`, `padding-box`, `border-box` et `inherit`. Pour illustrer les différences entre chacune, appliquons-les à notre exemple de `.box`.\n\n\u003ch3\u003econtent-box\u003c/h3\u003e\n\n\u003e 👉🏿 _largeur = zone du contenu_\n\nC’est la valeur par défaut. Elle définit la largeur de l’élément, dans notre cas 300px, comme étant égale à la largeur de la zone de contenu. L’épaisseur du padding et de la bordure font que l’élément est globalement plus large que 300px. La largeur de l’élément (au sens strict) est maintenant de 500px et l’espace occupé total est de 600px en comptant la marge.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/2-content-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3\u003epadding-box\u003c/h3\u003e\n\n\u003e 👉🏿 _largeur = zone du contenu + zone de padding_\n\nCette valeur intègre l’épaisseur du padding dans le calcul de la largeur de l’élément. La zone de contenu est ajustée à 200px de large pour y arriver.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/2-padding-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\nRemarque : Cette valeur est [uniquement supportée par Firefox](http://caniuse.com/#feat=css3-boxsizing), car elle a été supprimée de la spécification. Les autres navigateurs utiliseront la valeur par défaut, content-box, si vous utilisez padding-box.\n\n\u003ch3\u003eborder-box\u003c/h3\u003e\n\n\u003e 👉🏿 _largeur = zone du contenu + zone de padding + zone de bordure_\n\nCette valeur intègre à la fois la bordure et le padding dans le calcul de la largeur de l’élément. Dans notre exemple, la largeur de la zone de contenu est maintenant réduite à 100px.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/2-border-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch3\u003einherit\u003c/h3\u003e\n\nCette valeur donne au box-sizing de l’élément la valeur du box-sizing de son élément parent.\n\n\u003ch2\u003eContrôler le modèle de boîte\u003c/h2\u003e\n\nLa méthode de dimensionnement de la boîte que vous utiliserez dépendra de la façon dont vous préférez concevoir votre élément. La plupart des gens, y compris moi-même, préfèrent utiliser la valeur `border-box` qui est la façon la plus logique de définir les dimensions de l’élément.\n\nPour écraser la valeur par défaut `content-box`, j’utilise ce reset recommandé par [Paul Irish](http://www.paulirish.com/2012/box-sizing-border-box-ftw/) dans mon fichier reset.css.\n\n```\nhtml {\n  /* Set border-box as the global default */\n  box-sizing: border-box;\n}\n\n*, *:before, *:after {\n  /* Allow each element to override */\n  box-sizing: inherit;\n}\n```\n"},{"slug":"creer-un-cube-en-css","title":"Créer un cube en CSS","author":{"name":"David Walsh","lastname":"Walsh"},"original":{"date":"28 juillet 2013","site":"DWB","siteUrl":"https://davidwalsh.name/","postUrl":"https://davidwalsh.name/css-cube","copyright":"2013"},"dateCascade":"07 février 2016","dateMachine":"2O160107","tags":["css","html","animation"],"about":["Perspective","Transform Style","Transform Origin","Keyframes"],"excerpt":"David Walsh s’amuse à créer un cube 3D en CSS. En chemin, on suit la logique de construction, on apprend ou on révise la 3D CSS et les animations.","featured":false,"featuredImage":"/images/authors/david-walsh.png","order":null,"content":"\nLes cubes CSS sont une bonne démonstration de l’évolution de CSS ces dernières années, depuis les simples directives relatives aux couleurs et aux dimensions du début jusqu’au langage actuel nous permettant de créer des visuels profonds et créatifs. Ajoutez-y l’animation et vous avez un travail abouti.\n\nJusqu’à présent, les tutoriels que j’ai trouvés pour créer des cubes en CSS sont longs et mélangent un peu tout, alors j’ai décidé d’écrire cet article qui vous donnera les infos basiques pour créer ce cube. Pour l’idée, je me suis basé sur cette belle réalisation de Mircea Georgescu\u0026nbsp;:\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/mirceageorgescu/pen/roblc/\"\u003e\n  CSS only spinning cubes\u003c/a\u003e by Mircea Georgescu \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n**[Voir la démo de David Walsh](https://davidwalsh.name/demo/css-cube.php)**\n\n## Le HTML\n\nL’élément cube, qui est un container, sera lui-même enveloppé dans une autre `div`.\n\n```\n//HTML\n\u003cdiv class=\"wrap\"\u003e\n\t\u003cdiv class=\"cube\"\u003e\n\t\t\u003cdiv class=\"front\"\u003efront\u003c/div\u003e\n\t\t\u003cdiv class=\"back\"\u003eback\u003c/div\u003e\n\t\t\u003cdiv class=\"top\"\u003etop\u003c/div\u003e\n\t\t\u003cdiv class=\"bottom\"\u003ebottom\u003c/div\u003e\n\t\t\u003cdiv class=\"left\"\u003eleft\u003c/div\u003e\n\t\t\u003cdiv class=\"right\"\u003eright\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\n```\n\nChaque face du cube aura son propre élément. Comme vous pouvez l’imaginer, CSS va faire un travail de fou pour le disposer comme il faut.\n\n## Le CSS\n\nProcédons pas à pas, en prenant chaque élément significatif. Le premier élément à avoir du sens est le container de l’animation —\u0026nbsp;il fournira une [perspective CSS](https://developer.mozilla.org/fr/docs/Web/CSS/perspective) pour l’élément en 3D\u0026nbsp;:\n\n```\n.wrap {\n\tperspective: 800px;\n\tperspective-origin: 50% 100px;\n}\n```\n\nLa perspective en CSS est [très bien expliquée par MDN](https://developer.mozilla.org/fr/docs/Web/CSS/perspective), je ne répèterai pas leur présentation, mais pour mieux comprendre la perspective, je vous recommande de jouer avec les valeurs de la propriété `perspective` et de voir comment cela affecte la démo. Passons maintenant au container du cube qui contiendra toutes les faces\u0026nbsp;:\n\n```\n.cube {\n\tposition: relative;\n\twidth: 200px;\n\ttransform-style: preserve-3d;\n}\n```\n\nLe cube aura 200px de large, il aura un positionnement relatif de façon à ce que les faces positionnées absolument restent dans les limites. Nous allons aussi utiliser `preserve-3d` pour que notre élément reste en 3D. Avant d’entrer dans le détail des règles relatives aux faces, nous appliquons quelques styles généraux à chaque face\u0026nbsp;:\n\n```\n.cube div {\n\tposition: absolute;\n\twidth: 200px;\n\theight: 200px;\n}\n```\n\nMaintenant que nous avons déterminé la position et les dimensions des faces, nous pouvons ajouter les transformations des faces individuelles\u0026nbsp;:\n\n```\n.back {\n\ttransform: translateZ(-100px) rotateY(180deg);\n}\n.right {\n\ttransform: rotateY(-270deg) translateX(100px);\n\ttransform-origin: top right;\n}\n.left {\n\ttransform: rotateY(270deg) translateX(-100px);\n\ttransform-origin: center left;\n}\n.top {\n\ttransform: rotateX(-90deg) translateY(-100px);\n\ttransform-origin: top center;\n}\n.bottom {\n\ttransform: rotateX(90deg) translateY(100px);\n\ttransform-origin: bottom center;\n}\n.front {\n\ttransform: translateZ(100px);\n}\n```\n\nLes valeurs de `rotateY` font pivoter les faces pour montrer le texte à l’angle voulu, tandis que le `translateZ` déplace les éléments d’avant en arrière à l’intérieur de l’empilement. `translateY` est peut-être encore confus pour vous, mais considérez qu’il permet d’élever ou d’abaisser une face pour montrer l’effet 3D à travers les panneaux transparents. Chaque face a ses propres réglages de translation qui la place au bon endroit, là encore je vous conseille de jouer avec ces valeurs pour voir à quoi cela correspond pour chacune.\n\n**[Voir la démo](https://davidwalsh.name/demo/css-cube.php)**\n\n## Rotation horizontale du cube\n\nÉvidemment, à quoi servent tous ces éléments 3D s’il n’y a pas d’animation\u0026nbsp;? Réponse\u0026nbsp;: à rien. Alors, voici les étapes qu’il nous reste à franchir pour animer notre cube horizontalement\u0026nbsp;:\n\n```\n@keyframes spin {\n\tfrom { transform: rotateY(0); }\n\tto { transform: rotateY(360deg); }\n}\n\n.cube {\n\tanimation: spin 5s infinite linear;\n}\n```\n\nSans doute plus simple que vous ne l’imaginiez, pas vrai\u0026nbsp;? Le texte apparaît comme il faut grâce à la rotation que nous avons implémentée au départ, et j’ai utilisé une animation keyframe au cas où nous voudrions ajouter des choses plus sexy à l’avenir.\n\n## Rotation verticale du cube\n\nPour faire tourner le cube verticalement, il suffit de changer l’animation en prenant l’axe des Y, pas vrai\u0026nbsp;? Eh bien, malheureusement non. Les panneaux, tels qu’ils sont actuellement, montreraient le texte à l’envers dans certains cas, donc il nous faut revoir la rotation de certains éléments.\n\n```\n@keyframes spin-vertical {\n\tfrom { transform: rotateX(0); }\n\tto { transform: rotateX(-360deg); }\n}\n\n.cube-wrap.vertical .cube {\n\tmargin: 0 auto; /* keeps the cube centered */\n\n\ttransform-origin: 0 100px;\n\tanimation: spin-vertical 5s infinite linear;\n}\n\n.cube-wrap.vertical .top {\n\ttransform: rotateX(-270deg) translateY(-100px);\n}\n\n.cube-wrap.vertical .back {\n\ttransform: translateZ(-100px) rotateX(180deg);\n}\n\n.cube-wrap.vertical .bottom {\n\ttransform: rotateX(-90deg) translateY(100px);\n}\n```\n\n...et il nous faut bien sûr changer l’animation.\n\n## Aplatir le cube\n\nPour supprimer l’aspect 3D du cube et simplement afficher un bloc à chaque fois, supprimez la perspective et l’origine du container\u0026nbsp;:\n\n```\n.wrap {\n\t/* suppression de la perspective */\n\tperspective: none;\n\tperspective-origin: 0 0;\n}\n```\n\nMaintenant, seule une face s’affiche.\n\n**[Voir la démo](https://davidwalsh.name/demo/css-cube.php)**\n\nJ’espère que cet article a suffisamment simplifié la façon dont un cube 3D est constitué en CSS et qu’il vous aura donné envie de créer les vôtres. Et ne vous découragez pas si vous rencontrez des problèmes, ça m’est arrivé également\u0026nbsp;! J’espère voir bientôt ce que vous aurez inventé\u0026nbsp;!\n"},{"slug":"comprendre-svg-preserveaspectratio","title":"Comprendre SVG preserveAspectRatio","author":{"name":"Joni Trythall","lastname":"Trythall"},"original":{"date":"24 juin 2014","site":"le blog de Joni Trythall","siteUrl":"https://jonitrythall.com/","postUrl":"https://jonitrythall.com/a-look-at-preserveaspectratio-in-svg","copyright":"2014"},"dateCascade":"22 novembre 2015","dateMachine":"2O151122","tags":["svg"],"about":["preserveAspectRatio"],"excerpt":"Après SVG viewport et viewBox, Joni Trythall présente le complément logique, l'attribut preserveAspectRatio. Là aussi, les choses sont d'abord un peu complexes, mais présentées par Joni elles deviennent très claires.","featured":false,"featuredImage":"/images/authors/joni-trythall.jpeg","order":null,"content":"\nJ’ai écrit dernièrement un article sur [Comprendre SVG viewport et viewBox](/articles/comprendre-svg-viewbox-et-viewport/) et je me suis dit que celui-ci ferait une suite idéale pour approfondir le sujet.\n\nComprendre l’espace de travail SVG est parfois compliqué. La qualité de notre SVG dépend fortement du système de coordonnées que nous aurons défini.\n\n\u003ch2\u003eRésumé de viewport et viewBox\u003c/h2\u003e\n\nLa largeur `width` et la hauteur `height` de notre SVG établissent la surface visible (le viewport). Si nous définissons une `viewBox`, nous pouvons spécifier la façon dont notre élément graphique peut s’étendre pour remplir un container (habituellement le viewport). Lorsque les valeurs de chacun des deux sont identiques, l’image est visible dans son entièreté et se redimensionne lorsque la taille du viewport est modifiée. C’est magnifique.\n\nSi la `viewBox` SVG et le viewport n’ont pas le même ratio largeur et hauteur, `preserveAspectRatio` indique si l’on doit ou non forcer un redimensionnement uniforme.\n\nDans les exemples qui suivent, nous allons passer des poires aux cerises et nous verrons l’effet que les diverses valeurs de `preserveAspectRatio` auront sur le rendu visuel. Dans ce premier exemple, les cerises sont définies de façon à se redimensionner uniformément grâce à des valeurs de viewport et de `viewBox` identiques.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_avxQPo\" src=\"//codepen.io/pierrechoffe/embed/avxQPo?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=avxQPo\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/avxQPo/\"\u003e\n  viewport et viewBox\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2\u003eValeurs de preserveAspectRatio\u003c/h2\u003e\n\n`preserveAspectRatio` accepte deux paramètres, `\u003calign\u003e` et `\u003cmeetOrSlice\u003e`. Le premier paramètre comporte deux parties et régit l’alignement de la `viewBox` à l’intérieur du viewport. Le second paramètre est optionnel et indique la façon dont le ratio d’aspect doit être préservé.\n\n`preserveAspectRatio=“xMaxYMax meet”`\n\nCes valeurs vont aligner le coin inférieur droit de la `viewBox` avec le coin inférieur droit du viewport. La valeur `meet` préserve le ratio d’aspect en redimensionnant la `viewBox` de façon à ce qu’elle s’adapte autant que possible au viewport.\n\nIl existe trois options `\u003cmeetOrSlice\u003e`\u0026nbsp;: `meet` (par défaut), `slice` et `none`. La première option `meet` assure une complète visibilité du graphique (autant que possible), alors que `slice` essaie de remplir le viewport avec la `viewBox` et découpe (_slice off_) tout ce qui dépasse. La troisième option `none` a pour résultat la perte du ratio d’aspect et donc une image potentiellement déformée.\n\nVous pourrez trouver une liste complète des combinaisons de valeurs et leur description [sur W3C](http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute).\n\n\u003ch3\u003eRatio d’aspect et cerises\u003c/h3\u003e\n\nLa valeur la plus simple est `none`, elle établit qu’aucun redimensionnement uniforme ne doit être appliqué. Si nous augmentons les valeurs en pixel du viewport, les cerises vont s’étirer de manière non uniforme et seront déformées (et pas très appétissantes...)\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_qOwQgd\" src=\"//codepen.io/pierrechoffe/embed/qOwQgd?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=qOwQgd\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/qOwQgd/\"\u003e\n  Ratio d’aspect\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eValeurs Min, Max et Mid modifiées\u003c/h3\u003e\n\nJetons un coup d’oeil à ce que donnent les différentes combinaisons.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_jbRQdp\" src=\"//codepen.io/pierrechoffe/embed/jbRQdp?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=jbRQdp\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/jbRQdp/\"\u003e\n  preserveAspectRatio à xMinYMax\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLe `preserveAspectRatio` est fixé à `xMinYMax` ce qui aligne le coin inférieur gauche de la `viewBox` au coin inférieur gauche du viewport, qui est maintenant visualisé par son contour. `meet` assure que l’image est redimensionnée de façon à entrer dans le viewport autant que possible.\n\nSi on change `xMin` en `xMax` ou en `xMid`, les cerises seront positionnées à droite ou au centre du viewport.\n\nVoici ce qui se passe si nous changeons `meet` en `slice`\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_dYLQrX\" src=\"//codepen.io/pierrechoffe/embed/dYLQrX?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=dYLQrX\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/dYLQrX/\"\u003e\n  meet en slice\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLes cerises ne sont plus forcées de rester à l’intérieur du viewport, et l’excédent graphique est éliminé : tout le contenu de la `viewBox` qui n’entre pas dans le viewport est supprimé.\n\nLes valeurs d’alignement ne sont pas obligées d’être liées.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_XmQyGL\" src=\"//codepen.io/pierrechoffe/embed/XmQyGL?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=XmQyGL\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/XmQyGL/\"\u003e\n  preserveAspectRatio à xMinYMid slice\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nL’exemple ci-dessus a un `preserveAspectRatio` égal à `xMinYMid slice`. Nous voyons maintenant les cerises alignées sur le milieu de l’axe des y du viewport.\n\n👉🏾 Le livre de Joni, “Pocket Guide to Writing SVG” est open source, vous pouvez le [télécharger gratuitement ici](http://svgpocketguide.com/) ou le lire en ligne en suivant le même lien.\n\n\u003ch3\u003e\u003csmall\u003eRessources complémentaires en anglais\u003c/small\u003e\u003c/h3\u003e\n\n- [SVG Viewport and viewBox](http://tutorials.jenkov.com/svg/svg-viewport-view-box.html), par Jakob Jenkov\n\n\u003ch3\u003e\u003csmall\u003eRessources complémentaires en français\u003c/small\u003e\u003c/h3\u003e\n\n- [Système de coordonnées, transformations et unités](http://tecfa.unige.ch/guides/tie/html/svg-intro/svg-intro-8.html), par Tecfa\n"},{"slug":"comprendre-svg-viewbox-et-viewport","title":"Comprendre SVG viewBox et viewport","author":{"name":"Joni Trythall","lastname":"Trythall"},"original":{"date":"17 juin 2014","site":"le blog de Joni Trythall","siteUrl":"https://jonitrythall.com/","postUrl":"https://jonitrythall.com/svg-viewbox-and-viewport","copyright":"2014"},"dateCascade":"22 novembre 2015","dateMachine":"2O151122","tags":["svg"],"about":["SVG Viewbox"],"excerpt":"SVG viewport et viewBox peuvent sembler compliqués et intimidants lorsqu’on débute avec SVG. Excellente introduction agrémentée d'illustrations fruitées.","featured":true,"featuredImage":"/images/authors/joni-trythall.jpeg","order":60,"content":"\nQuand nous utilisons l’élément `\u003csvg\u003e`, nous créons un fragment constitué de détails multiples, imbriqué dans notre document. Ce fragment a son propre viewport et son propre système de coordonnées, ce qui peut semble compliqué et intimidant lorsqu’on débute avec SVG.\n\nSi vous voulez que votre travail s’affiche correctement, il est utile de comprendre l’espace dans lequel se situe votre SVG, mais cela devient réellement crucial dès lors que vous vous lancez dans un SVG un peu plus complexe, comme [les dégradés](/articles/les-degrades-svg/) et les motifs, où les détails sont fortement liés à un système de coordonnées.\n\nLe sujet est riche, mais je donnerai ici les bases, en indiquant l’objectif et le comportement de SVG viewport et viewBox. J’espère que cette introduction vous donnera des fondations solides pour avancer dans vos créations SVG.\n\n👉🏾 _NdT\u0026nbsp;: Vous pouvez également consulter l'article de Dudley Storey traduit dans la Cascade \"[Comprendre SVG viewBox](/articles/comprendre-svg-viewbox/)\"_.\n\n\u003ch2\u003eLe viewport\u003c/h2\u003e\n\nLe viewport est la partie visible d’un SVG. Un SVG est par nature extensible, il peut être aussi haut et large que nous le voulons, et nous pouvons également déterminer qu’une partie seulement soit visible.\n\n**Le viewport est défini grâce aux attributs `height` et `width` à l’intérieur de l’élément `\u003csvg\u003e`.**\n\nSi nous choisissons de ne pas définir de viewport, les dimensions du viewport seront déterminées par tout autre indicateur présent dans le SVG, par exemple la largeur de l’élément SVG contenant. Cependant, si vous laissez cet information non définie, le risque est que votre SVG soit coupé à l’affichage.\n\nDe mon point de vue, plus on donne de détails à l’intérieur de SVG, et mieux notre image se comportera sur tous les navigateurs.\n\n\u003ch2\u003epreserveAspectRatio\u003c/h2\u003e\n\nSi le viewport et la `viewBox` n’ont pas le même ration de hauteur et de largeur, l’attribut `preserveAspectRatio` indique au navigateur comment afficher l’image (_NdT\u0026nbsp;: Voir [l'article sur preserveAspectRatio](/articles/comprendre-svg-preserveaspectratio/) qui fait suite à celui-ci_).\n\nLes valeurs de cet attribut sont nombreuses, [Mozilla Developer Network les liste clairement](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio).\n\nSi nous ne spécifions pas de valeur, le réglage par défaut impose une mise à l’échelle uniforme et la viewBox entière est visible dans le viewport.\n\n\u003ch2\u003ePoire exemple\u003c/h2\u003e\n\nPrenons une image de poire. Dans ce premier exemple, le viewport et la `viewBox` sont définis avec des valeurs correspondantes, une `width` de 155px et une `height` de 190px. La `viewBox` est définie de façon à couvrir entièrement l’image de la poire et cette image est définie de façon à entrer dans les limites de son container.\n\nDans l’exemple ci-dessous, vous pourrez constater en jouant avec Codepen que l’élément `\u003csvg\u003e` est défini ainsi\u0026nbsp;:\n\n```\n//HTML\n...\n\u003csvg width=\"115\" height=\"190\" viewBox=\"0 0 115 190\"\u003e\n...\n```\n\nLes `width`et `height` définissent le viewport.\n\n\u003ch3\u003e1 - Dimensions concordantes\u003c/h3\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_RWOeLO\" src=\"//codepen.io/pierrechoffe/embed/RWOeLO?height=320\u0026amp;theme-id=light\u0026amp;slug-hash=RWOeLO\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"320\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/RWOeLO/\"\u003e\n  Dimensions concordantes\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003e2 - viewBox réduite\u003c/h3\u003e\n\nSi nous réduisons de 50px la hauteur et la largeur de la `viewBox` de notre image, nous réduisons la dimension de la portion de notre poire que nous souhaitons afficher, mais du coup ce qui reste visible est redimensionné de façon à remplir le container.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_RWOexO\" src=\"//codepen.io/pierrechoffe/embed/RWOexO?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=RWOexO\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/RWOexO/\"\u003e\n  viewBox réduite\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003e3 - viewport agrandi\u003c/h3\u003e\n\nAjoutons maintenant 200px aux `width` et `height` de notre viewport. L’image se redimensionne pour correspondre à ces dimensions. La `viewBox` couvre l’image entière, la poire est entièrement visible. Le viewport contient toute l’image et définit les limites que doit remplir notre poire.\n\nVoici ce que donne notre viewport agrandi\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LpvgQg\" src=\"//codepen.io/pierrechoffe/embed/LpvgQg?height=520\u0026amp;theme-id=light\u0026amp;slug-hash=LpvgQg\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"520\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/LpvgQg/\"\u003e\n  viewport agrandi\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003e4 - Changer les valeurs `min`\u003c/h3\u003e\n\nÀ l’intérieur de la `viewBox`, les valeurs `min` définissent l’origine de la `viewBox` dans l’élément parent. En d’autres termes, à quel point, dans la `viewBox`, nous voulons que commence la correspondance avec le viewport. Dans les exemples qui précèdent, les valeurs `min` sont définies comme `0, 0` (c’est à dire en haut à gauche). Modifions-les en `50, 30`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_XmQxEV\" src=\"//codepen.io/pierrechoffe/embed/XmQxEV?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=XmQxEV\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/pierrechoffe/pen/XmQxEV/\"\u003e\n  Changer les valeurs `min`\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa `viewBox` (ce qui sera visible) commence maintenant à 50px sur l’axe des x et à 30px sur celui des y. En changeant ces valeurs, nous avons simplement changé la partie de la poire sur laquelle nous voulons nous concentrer.\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\nComprendre et mettre en oeuvre un bon système de coordonnées pour SVG est vraiment utile pour créer et afficher vos réalisations graphiques.\n\nNous avons passé en revue quelques modifications basiques de SVG viewport et `viewBox` qui je l’espère ont montré toute la puissance et l’utilité d’une bonne définition de l’espace de travail SVG.\n\n👉🏾 Le livre de Joni, “Pocket Guide to Writing SVG” est open source, vous pouvez le [télécharger gratuitement ici](https://svgpocketguide.com/) ou le lire en ligne en suivant le même lien.\n\n\u003ch3\u003e\u003csmall\u003eRessources complémentaires en anglais\u003c/small\u003e\u003c/h3\u003e\n\n- [SVG Viewport and viewBox](http://tutorials.jenkov.com/svg/svg-viewport-view-box.html), par Jakob Jenkov\n\n\u003ch3\u003e\u003csmall\u003eRessources complémentaires en français\u003c/small\u003e\u003c/h3\u003e\n\n- [Système de coordonnées, transformations et unités](http://tecfa.unige.ch/guides/tie/html/svg-intro/svg-intro-8.html), par Tecfa\n- [SVG viewport et viewBox (pour les débutants complets)](https://webdesign.tutsplus.com/fr/tutorials/svg-viewport-and-viewbox-for-beginners--cms-30844), par Kezz Bracey\n"},{"slug":"comment-fonctionne-z-index","title":"Comment fonctionne z-index","author":{"name":"Ire Aderinokun","lastname":"Aderinokun"},"original":{"date":"20 octobre 2015","site":"Bits of Code","siteUrl":"https://bitsofco.de/","postUrl":"https://bitsofco.de/2015/how-z-index-works/","copyright":"2015"},"dateCascade":"02 novembre 2015","dateMachine":"2O151102","tags":["css","html"],"about":["z-index"],"excerpt":"Ça n'est pas évident à première vue, mais les éléments HTML sont générés en 3D. La propriété CSS z-index spécifie le niveau et le contexte d'empilement.","featured":false,"featuredImage":"/images/les_3_dimensions-compressor.jpeg","order":null,"content":"\nÇa n’a pas l’air évident à première vue, mais les éléments HTML sont générés en 3D. Alignés sur les axes des x et des y, les éléments peuvent en outre reposer sur l’axe des z, qui contrôle leur CSS dans la troisième dimension.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/les_3_dimensions-compressor.jpeg\" width=\"780\" height=\"387\" alt=\"les trois axes x, y et z\"/\u003e\u003c/figure\u003e\n\nLes marges, les float et autres propriétés permettant de décaler un élément contrôlent la façon dont un élément est positionné sur les axes des x et des y. Mais seule la propriété CSS `z-index` permet de contrôler la façon dont il repose sur l’axe des z.\n\n\u003ch2\u003eLa propriété z-index\u003c/h2\u003e\n\nLa propriété `z-index` spécifie deux choses\u0026nbsp;:\n\n- le [niveau d’empilement](/articles/comment-fonctionne-z-index/#niveau) de l’élément courant\n- et si l’élément courant établit un nouveau [contexte d’empilement](/articles/comment-fonctionne-z-index/#contexte)\n\nLa propriété ne s’applique qu’aux [éléments positionnés](/articles/le-positionnement-css/). Autrement dit, les éléments qui ont une `position` soit `relative`, soit `absolute`, soit `fixed`.\n\nLa propriété `z-index` peut prendre trois valeurs\u0026nbsp;:\n\n\u003ctable class=\"specificTable\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eValeur\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003eauto\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eFixe le niveau d’empilement à 0 et ne crée pas de nouveau contexte d’empilement\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003e\u0026lt;integer\u0026gt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eLe niveau d’empilement est un nombre entier \u003cstrong\u003eet\u003c/strong\u003e un nouveau contexte d’empilement est créé\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003einherit\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eLe niveau d’empilement est hérité de l’élément parent, ce qui ne crée pas de nouveau contexte d’empilement\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n```\nz-index: auto | \u003cinteger\u003e | inherit\n```\n\n\u003ch2 id=\"niveau\"\u003eNiveau d’empilement\u003c/h2\u003e\n\nLe niveau d’empilement est la valeur attribuée à l’élément courant sur l’axe des z. Plus le nombre est élevé, plus l’élément se situe haut dans l’empilement et donc plus près de la surface de l’écran.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/stacking_level-compressor.png\" width=\"780\" height=\"413\" alt=\"4 niveaux d’empilement, de 1 en bas à 4 en haut\"/\u003e\u003c/figure\u003e\n\nS’il n’est pas spécifié par la propriété `z-index`, le niveau d’empilement d’un élément est établi [en fonction de sa place dans le document](https://developer.mozilla.org/fr/docs/Web/CSS/Comprendre_z-index/Empilement_sans_z-index). Les éléments déclarés plus tard dans le document ont un niveau d’empilement plus élevé par défaut.\n\n\u003ch2\u003eCalculer le niveau d’empilement\u003c/h2\u003e\n\nEn plus du z-index spécifié, le niveau d’empilement est contrôlé par un certain nombre de facteurs. Les éléments sont empilés dans l’ordre suivant.\n\n\u003ctable class=\"specificTable\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003ePosition\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n      \u003cth\u003eCSS\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e1 (en bas)\u003c/td\u003e\n      \u003ctd\u003eL’élément qui crée le contexte d’empilement\u003c/td\u003e\n      \u003ctd\u003e\u003ccode\u003ez-index: \u0026lt;integer\u0026gt;\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003eÉléments enfants ayant des niveaux d’empilement négatifs\u003c/td\u003e\n      \u003ctd\u003e\u003ccode\u003ez-index: \u0026lt;negative integer\u0026gt;\u003c/code\u003e \u003cbr\u003e \u003ccode\u003eposition: relative | absolute | fixed\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003eÉlément enfants dans le flux, pas en ligne, non positionnés\u003c/td\u003e\n      \u003ctd\u003e\u003ccode\u003edisplay: /* not inline */\u003c/code\u003e \u003cbr\u003e \u003ccode\u003eposition: static\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e4\u003c/td\u003e\n      \u003ctd\u003eÉléments enfants flottants non positionnés\u003c/td\u003e\n      \u003ctd\u003e\u003ccode\u003efloat: left | right\u003c/code\u003e \u003cbr\u003e \u003ccode\u003eposition: static\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n      \u003ctd\u003eÉléments enfants dans le flux, en ligne, non positionnés\u003c/td\u003e\n      \u003ctd\u003e\u003ccode\u003edisplay: /* inline */\u003c/code\u003e \u003cbr\u003e \u003ccode\u003eposition: static\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e6\u003c/td\u003e\n      \u003ctd\u003eÉléments enfants avec niveau d’empilement égal à 0\u003c/td\u003e\n      \u003ctd\u003e\u003ccode\u003ez-index: auto | 0\u003c/code\u003e \u003cbr\u003e \u003ccode\u003eposition: relative | absolute | fixed\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e7 (en haut)\u003c/td\u003e\n      \u003ctd\u003eÉléments enfants avec des niveaux d’empilement positifs\u003c/td\u003e\n      \u003ctd\u003e\u003ccode\u003ez-index: \u0026lt;positive integer\u0026gt;\u003c/code\u003e \u003cbr\u003e \u003ccode\u003eposition: relative | absolute | fixed\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003ch2 id=\"contexte\"\u003eContexte d’empilement\u003c/h2\u003e\n\nLorsque nous spécifions le niveau d’empilement d’un élément à l’aide de la propriété `z-index`, nous ne spécifions pas toujours le niveau d’empilement de l’élément par rapport à chaque autre élément de la page. **Le niveau d’empilement de l’élément est seulement défini par rapport à son contexte d’empilement**.\n\nCela peut conduire à des situations bizarres où un élément ayant un z-index plus élevé ne se retrouve pas au-dessus d’un élément ayant un z-index plus bas.\n\nLe contexte d’empilement peut être expliqué à l’aide des règles suivantes.\n\n\u003ch3\u003e1 - Le contexte d’empilement par défaut est l’élément racine\u003c/h3\u003e\n\nLe contexte d’empilement par défaut pour tout document HTML est l’élément racine `\u003chtml\u003e`. C’est pourquoi, à moins qu’un nouveau contexte d’empilement ne soit créé, le niveau d’empilement d’un élément est par défaut en relation avec celui de tous les autres éléments de la page.\n\n\u003ch3\u003e2 - Créez un nouveau contexte d’empilement avec la propriété z-index\u003c/h3\u003e\n\nNous créons un nouveau contexte d’empilement en donnant une valeur au z-index d’un élément. Cela a pour effet, d’une part de donner ce niveau d’empilement à cet élément, d’autre part de créer un nouveau contexte d’empilement.\n\nLe nouveau contexte d’empilement s’applique à tous les enfants de cet élément. Leurs niveaux d’empilement sont maintenant situés à l’intérieur de ce contexte d’empilement et non dans le contexte racine.\n\nDans l’exemple qui suit, `.foo` appartient au contexte d’empilement 1, alors que `.bar` appartient au contexte d’empilement 2.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/stacking-context-compressor.png\" width=\"780\" height=\"431\" alt=\"l’élément foo est dans le contexte racine, bar est au-dessus\"/\u003e\u003cmeta itemprop=\"width\" content=\"780\"\u003e\u003c/figure\u003e\n\n\u003ch3\u003e3 - Les éléments ne peuvent pas être empilés au-dessus (ou en-dessous) du niveau de leur élément parent\u003c/h3\u003e\n\nLorsque le niveau d’empilement de l’élément parent est défini, ses enfants ne peuvent pas être empilés au-dessus ou en-dessous de ce niveau (par rapport au contexte d’empilement de l’élément parent).\n\nDans l’exemple ci-dessous, même si `.bar` a un z-index plus élevé que `.baz`, il est toujours affiché en-dessous. Cela est dû au fait que dans le contexte d’empilement 1, `.bar` ne peut pas dépasser le niveau d’empilement 1.\n\n```\n.foo { z-index: 1; }\n.bar { z-index: 1000; }\n.baz { z-index: 2; }\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/stacking-context-2-compressor.png\" width=\"780\" height=\"481\" alt=\"\"/\u003e\u003c/figure\u003e\n\n```\n//HTML\n\u003cdiv class=\"foo\"\u003e\n  .foo\n  \u003cdiv class=\"bar\"\u003e\n    .bar\n  \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv class=\"baz\"\u003e\n  .baz\n\u003c/div\u003e\n```\n\net le CSS :\n\n```\nbody {\n  background-color: rgb(230, 230, 230);\n}\n.foo {\n  background-color: green;\n  height: 300px;\n  width: 500px;\n  position: relative;\n  z-index: 1;\n}\n.bar {\n  background-color: blue;\n  height: 200px;\n  width: 200px;\n  position: absolute;\n  bottom: 20px;\n  right: 20px;\n  z-index: 1000;\n}\n.baz {\n  background-color: red;\n  height: 250px;\n  width: 300px;\n  position: absolute;\n  top: 150px;\n  left: 400px;\n  z-index: 2;\n}\n.foo,\n.bar,\n.baz {\n  box-sizing: border-box;\n  padding: 20px;\n  color: #fff;\n}\n```\n"},{"slug":"les-bases-de-svg-groupes","title":"Les bases de SVG : Groupes","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"6 octobre 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/24/SVG-Basics-Groups","copyright":"2015"},"dateCascade":"17 octobre 2015","dateMachine":"2O151017","tags":["svg"],"about":[],"excerpt":"Suite des bases de SVG par Dudley Storey : les groupes SVG ressemblent aux éléments div des pages web mais il existe des différences qu’il est important de bien comprendre.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nLes groupes —\u0026nbsp;la balise `\u003cg\u003e` en SVG\u0026nbsp;— ressemblent un peu aux éléments `\u003cdiv\u003e` de nos pages web en ce sens qu’ils permettent de contenir et de contrôler des éléments ayant une relation les uns avec les autres.\n\nToutefois, il existe des différences entre `\u003cg\u003e` et `\u003cdiv\u003e` qu’il est important de bien comprendre.\n\n- De même que les éléments `\u003cdiv\u003e`, les éléments `\u003cg\u003e` **permettent à leurs éléments descendants d’hériter de leurs styles**\u0026nbsp;:\n\n```\n\u003csvg viewBox=\"0 0 400 160\"\u003e\n    \u003cg fill=\"#33E\" stroke=\"#000\" stroke-width=\"10px\"\u003e\n        \u003ccircle  cx=\"88\" cy=\"80\" r=\"62\"/\u003e\n        \u003crect x=\"246\" y=\"17\" width=\"123\" height=\"123\"/\u003e\n    \u003c/g\u003e\n\u003c/svg\u003e\n```\n\nCe qui nous donne :\n\n\u003csvg viewBox=\"0 0 400 160\"\u003e\u003cg fill=\"#33E\" stroke=\"#000\" stroke-width=\"10px\"\u003e\u003ccircle  cx=\"88\" cy=\"80\" r=\"62\"/\u003e\u003crect x=\"246\" y=\"17\" width=\"123\" height=\"123\"/\u003e\u003c/g\u003e\u003c/svg\u003e\n\n- De même, **les transformations appliquées à des groupes sont héritées** par les éléments situés à l’intérieur du groupe.\n- Cependant, contrairement aux éléments `\u003cdiv\u003e`, **les groupes SVG ne peuvent pas être positionnés**. Ils peuvent être déplacés vers une nouvelle position, _via_ `transform`, mais du fait qu’ils n’ont pas d’attributs x ou y, ils ne peuvent être _positionnés_ dans le document SVG. On peut contourner le problème en imbriquant les éléments `\u003csvg\u003e` à l’intérieur de groupes, puisque les éléments `\u003csvg\u003e` ont des attributs x et y. Je reviendrai là-dessus dans un article à venir.\n- Tout comme les éléments `\u003cdiv\u003e`, les éléments `\u003cg\u003e` peuvent avoir un attribut `id` (et également des classes, même si c’est moins courant), pour les styles ou les scripts\u0026nbsp;:\n\n```\n\u003csvg viewBox=\"0 0 400 163\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n    #svg-container {\n        fill: hsl(45,80%,80%);\n        stroke: rgba(0,0,0,0.3);\n        stroke-width: 10px;\n    }\n\u003c/style\u003e\n    \u003cg id=\"svg-container\"\u003e\n        \u003ccircle  cx=\"88\" cy=\"80\" r=\"62\"/\u003e\n        \u003crect x=\"246\" y=\"17\" width=\"123\" height=\"123\"/\u003e\n    \u003c/g\u003e\n\u003c/svg\u003e\n```\n\nCe qui crée :\n\n\u003csvg viewBox=\"0 0 400 163\"\u003e\u003cstyle type=\"text/css\"\u003e#svg-container { fill: hsl(45,80%,80%);stroke: rgba(0,0,0,0.3);stroke-width: 10px;}\u003c/style\u003e\u003cg id=\"svg-container\"\u003e\u003ccircle  cx=\"88\" cy=\"80\" r=\"62\"/\u003e\u003crect x=\"246\" y=\"17\" width=\"123\" height=\"123\"/\u003e\u003c/g\u003e\u003c/svg\u003e\n\nTout comme en CSS, les règles de présentation appliquées directement aux éléments écraseront les règles héritées de leurs éléments parents si les deux entrent en conflit.\n\n- Enfin, contrairement aux éléments `\u003cdiv\u003e`, les éléments `\u003cg\u003e` peuvent avoir leurs propres éléments `\u003ctitle\u003e` (_titre_) et `\u003cdesc\u003e` (_description_) imbriqués pour ajouter des informations supplémentaires et améliorer l’accessibilité.\n\nAttention : [Adobe Illustrator](http://thenewcode.com/821/Adobe-Illustrator-Workflow-For-SVG-Production) et d’autres éditeurs graphiques surchargent de code leurs exports SVG en utilisant de nombreux éléments `\u003cg\u003e` souvent inutiles (et en général liés à des calques multiples). Pour éviter cela, il est conseillé de fusionner les calques _avant_ de sauvegarder le fichier en format SVG. Une autre solution est d’utiliser un outil comme [SVGoMG](https://jakearchibald.github.io/svgomg/) de [Jake Archibald](https://twitter.com/jaffathecake) qui pourra supprimer les éléments groupes redondants lors du processus de minification.\n\n\u003csmall\u003ePhoto par [Dina Belenko](https://500px.com/arken) reproduite avec sa permission.\u003c/small\u003e\n"},{"slug":"bien-utiliser-lattribut-alt","title":"Bien utiliser l'attribut alt","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"22 décembre 2014","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/969/The-Art-of-alt-Writing-Great-Descriptive-Text-For-Images","copyright":"2014"},"dateCascade":"03 octobre 2015","dateMachine":"2O151003","tags":["html","svg","accessibilite"],"about":["Alt"],"excerpt":"Dudley Storey fait le point sur les règles à connaître concernant l'attribut alt d'alternative textuelle pour les images, indispensable pour l'accessibilité et le SEO.","featured":false,"featuredImage":"/images/Giovanni_Bellini-_portrait_of_Doge_Leonardo_Loredan.jpeg","order":null,"content":"\nLe web est plus fort lorsqu’il est divers\u0026nbsp;: plus il est accessible, meilleur est ce qu’il nous offre. L’attribut `alt` est un exemple déjà ancien de ce que nous pouvons faire pour améliorer l’accessibilité, mais pour bien écrire un texte alternatif pour vos images il est utile de connaître quelques règles.\n\n## L'attribut alt\n\nQu'est-ce que l'attribut `alt` ? c'est la **représentation alternative d’une image sous forme de texte**. Si une image ne se charge pas ou si elle est bloquée, la valeur de l’attribut `alt` s’affichera à la place. Les utilisateurs d’outils pour l'accessibilité pourront entendre le texte lu à haute voix ou lire sa transcription en braille. Optimiser `alt` est également utile pour le SEO, car il fait partie des informations permettant aux moteurs de recherche de déterminer le contenu d’une image et d’associer votre site aux termes de recherche.\n\nL’attribut `alt` (souvent appelé par erreur la “balise tag”) est obligatoire pour tous les éléments `\u003cimg\u003e` de votre site. La plupart du temps, la façon la plus simple de rédiger un texte alternatif est **d’écrire ce que vous diriez si vous faisiez le description de l’image à quelqu’un**. Par exemple la photographie en tête de cet article pourrait être décrite ainsi\u0026nbsp;:\n\n```\n\u003cimg src=\"singel.jpg\" alt=\"Crépuscule à Jordaan, Amsterdam, Hollande\"\u003e\n```\n\nOu encore (et mieux) :\n\n```\n\u003cimg src=\"singel.jpg\" alt=\"Une rangée de maisons aux fenêtres illuminées le long d’un canal à Amsterdam\"\u003e\n```\n\nD’une manière générale, plus le texte est descriptif, meilleur il est.\n\n### Exceptions à alt : les logos\n\n**Si le contenu principal d’une image est un texte, les règles changent**. Les images bitmap présentant un texte intégré, comme celle-ci\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/festa-del-rederentore.png\" width=\"700\" height=\"370\" alt=\"Festa Del Rederentore, Venezia ~ Dal 1577\"/\u003e\u003c/figure\u003e\n\n…devrait avoir **une valeur d’attribut `alt` reflétant directement le texte de l’image**.\n\n```\n\u003cimg src=\"festa-del-rederentore.png\" alt=\"Festa Del Rederentore, Venezia ~ Dal 1577\"\u003e\n```\n\nLa raison en est simple : la plupart des lecteurs d’écran ne savent pas bien reconnaître et traduire le texte d’une image, celui-ci est donc impénétrable à la fois pour les moteurs de recherche et pour les personnes malvoyantes. En plaçant le texte dans `alt`, vous faites la traduction pour eux.\n\n_NB\u0026nbsp;: vous verrez souvent ce genre de balisage pauvre, Ne faites pas cela\u0026nbsp;_:\n\n```\n\u003cimg src=\"logo.gif\" alt=\"Logo\"\u003e\n```\n\nC’est aussi une excellente raison d’utiliser le [SVG](/tags/svg/) en ligne pour les logos. Correctement construit, un logo SVG sera un vrai texte, lisible par tous. Il est important de noter que si le texte est dispersé en plusieurs chemins SVG, sa valeur sémantique est perdue. Une solution alternative (et peut-être meilleure) est de conserver la partie graphique du logo en SVG et d’écrire le reste dans le balisage auquel on appliquera un style. Bien sûr les deux options doivent être examinées en tenant compte du temps que prendra le chargement d’une police de caractères embarquée.\n\n### alt vide\n\nIl y a deux cas dans lesquels on peut laisser vide l’attribut `alt`\u0026nbsp;:\n\n- l’image est purement décorative, c’est à dire qu’elle n’a pas de valeur informative;\n- l’image est décrite de manière appropriée par un élément sémantique qui la suit immédiatement, généralement une légende `\u003cfigcaption\u003e`.\n\nSi vous voulez que votre page reste valide, `alt` doit malgré tout être présent dans `\u003cimg\u003e`, et pour indiquer qu’il est vide on lui donne la valeur `\"\"` (guillemets ouvrant et fermant sans espace entre les deux).\n\n```\n\u003cimg src=\"flourish.png\" alt=\"\"\u003e\n```\n\nUne autre solution en HTML5 est de laisser l’attribut `alt` sans valeur\u0026nbsp;:\n\n```\n\u003cimg src=\"flourish.png\" alt\u003e\n```\n\nDans certaines occasions rares, la valeur de `alt` peut être très proche du [texte en légende (`\u003cfigcaption\u003e`)](http://thenewcode.com/413/Captioning-images-in-HTML5), dans ce cas le texte alternatif est redondant et peut être laissé vide.\n\n```\n\u003cfigure\u003e\n\t\u003cimg src=\"rio-di-san-barnaba.jpg\" alt\u003e\n\t\u003cfigcaption\u003ePhotograph down the canal of the Rio di San Barnaba, Venice\u003c/figcaption\u003e\n\u003c/figure\u003e\n```\n\nLes différences peuvent être subtiles : `alt` **décrit** une image, alors que `\u003cfigcaption\u003e` **intitule** le contenu de l’élément `\u003cfigure\u003e`. Dans la plupart des cas, les deux seront différents et devraient donc être conservés\u0026nbsp;:\n\n```\n\u003cfigure\u003e\n\t\u003cimg src=\"doge-portrait.jpg\" alt=\"Peinture à l'huile représentant un homme âgé portant un couvre-chef et un manteau brodé\"\u003e\n\t\u003cfigcaption\u003ePortrait du Doge Leonardo Loredan par Giovanni Bellini\u003c/figcaption\u003e\n\u003c/figure\u003e\n```\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Giovanni_Bellini-_portrait_of_Doge_Leonardo_Loredan.jpeg\" width=\"512\" height=\"708\" alt=\"Peinture à l'huile représentant le doge Loredan dans des vêtements formels sur un fond bleu clair.  Il porte un couvre-chef typique des doges de Venise. La dignité du caractère est suggérée par la fixité, le détachement solennel par le contact non-visuel avec le spectateur.\"/\u003e\u003cfigcaption\u003ePortrait du Doge Leonardo Loredan par Giovanni Bellini\u003c/figcaption\u003e\u003c/figure\u003e\n\n### Ne confondez pas alt et title\n\nOn trouve parfois des balisages qui appliquent la même valeur à `alt` et à `title`. En général, c’est une mauvaise idée. Le texte de title, qui apparaît en pop-up, est rarement vu par les utilisateurs car il faut quelques secondes avant qu’il ne surgisse, et il ne sera pas lu par les outils d’accessibilité sauf si l’élément est en focus.\n\n### Positionnement de alt\n\nLes lecteurs d’écran lisent le texte de `alt` en ligne avec le reste du contenu, par conséquent il est souhaitable d’écrire le texte descriptif dans un flux contextuel, en particulier si l’image est flottée.\n\n### Ne négligez pas les autres media\n\n`alt` est presque exclusivement associé aux images, mais cela ne signifie pas que le texte descriptif des autres formats de media doive être négligé\u0026nbsp;: les vidéos et les audios devraient par exemple utiliser [les sous-titres WebVTT](http://thenewcode.com/580/Make-Online-Video-Accessible-And-Searchable-With-WebVTT).\n\n\u003ci\u003ePhoto par \u003ca href=\"https://www.flickr.com/people/bcnbits\"\u003eMorBCN\u003c/a\u003e, sous licence Creative Commons\u003c/i\u003e.\n"},{"slug":"css-roots-le-retour-aux-racines","title":"CSS :root, le retour aux racines","author":{"name":"Simurai","lastname":"Simurai"},"original":{"date":"9 septembre 2015","site":"simurai","siteUrl":"https://simurai.com/","postUrl":"https://simurai.com/blog/2015/09/09/back-to-the-roots","copyright":"2015"},"dateCascade":"14 septembre 2015","dateMachine":"2O150914","tags":["css","html"],"about":["Root"],"excerpt":"La cascade CSS est la meilleure et la pire des choses. Dans cet article limpide, Simurai donne quelques astuces simples pour réduire les problèmes de spécificité et mieux comprendre CSS.","featured":false,"featuredImage":"/images/roots-1.png","order":null,"content":"\nCSS est comme la langue d’Ésope, la meilleure et la pire des choses. Elle fonctionne généralement bien, mais elle présente des inconvénients qui amènent parfois certains à se demander [si nous avons vraiment encore besoin de CSS](https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/). Je les rejoins quelquefois —\u0026nbsp;mais je pense également que la cascade n’est pas la seule responsable et que nous devons souvent nous battre contre la spécifité. Il est difficile de ne pas rencontrer de problèmes de spécificité, à peu près aussi difficile que de prononcer le mot.\n\nDans cet article, je vais essayer de montrer que la cascade peut être votre amie et nous allons voir quelques façons de réduire le besoin d’écraser des styles et donc de réduire les problèmes de spécificité.\n\n\u003ch2\u003eAstuce 1 :\u003c/h2\u003e\n\n\u003e _Pour chaque propriété CSS que vous écrivez, essayez de la remonter aussi haut que possible vers la racine de l’arbre. En d’autres termes\u0026nbsp;:_ back to the :root.\n\nPar exemple, si notre site a une side bar et que nous voulons y insérer une petite bio. Le balisage ressemblerait à ceci\u0026nbsp;:\n\n```HTML\n  \u003cbody\u003e\n    \u003cmain class=“Posts”\u003e\n    \u003caside class=“SideBar”\u003e\n      \u003cnav class=“Nav”\u003e\n      \u003cp class=“Bio”\u003e\n```\n\n...et le CSS :\n\n```CSS\n  Bio {\n    font-size: .8em;\n    line-height: 1.5;\n    color: #888;\n  }\n```\n\nÇa pourrait marcher. Mais si nous regardons la `nav` qui est déjà dans la side bar, il y a des chances que certains des styles soient identiques, dans notre cas, ce serait `font-size` et `color`. Donc, retirons ces propriétés de `nav` et de `.Bio` et ajoutons-les à l’élément parent, la side bar.\n\n```CSS\n  .SideBar {\n    font-size: .8em;\n    color: #888;\n  }\n```\n\nDe plus, il se trouve que cette `line-height: 1.5;` est déjà définie pour nos articles. Donc, puisqu’il semble que toute la page utilise la même hauteur de ligne, retirons-la des éléments Bio et Post et remontons-la au niveau du nœud racine.\n\n```CSS\n  :root {\n    line-height: 1.5;\n  }\n```\n\nC’est du simple bon sens direz-vous, mais il est souvent tentant de styler un nouvel élément sans même regarder si les éléments frères définissent la même chose. Cela se produit également lorsqu’on fait un copier/coller de styles d’une autre section ou lorsqu’on récupère des bouts de code trouvés sur le web. La refactorisation prendra un tout petit peu plus de temps mais votre CSS sera bien plus sain.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/roots-1.png\" width=\"760\" height=\"510\" alt=\"image d’un arbre divisé en deux, d’un côté chaque feuille est stylée, de l’autre uniquement les branches, pour le même effet\"/\u003e\u003cfigcaption\u003eStylez les branches, pas chaque feuille !\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch2\u003eAstuce 2 :\u003c/h2\u003e\n\n\u003e _Certaines propriétés doivent être stylées de manière combinée_.\n\nUn bon exemple de cela est le combo `color` et `background-color`. Sauf s’il ne s’agit que d’ajustements mineurs, c’est généralement une bonne idée de les modifier ensemble. Lorsqu’on ajoute une couleur d’arrière-plan à un élément HTML, il peut ne contenir aucun texte, toutefois il est très probable qu’un élément enfant en contiendra. Par conséquent, si nous définissons les couleurs d’arrière-plan et de premier plan ensemble, nous pouvons être sûrs que nous n’aurons jamais de problèmes de lisibilité ou de contraste. De plus, si nous changeons la couleur d’arrière-plan, nous n’avons pas à faire la chasse à toutes les couleurs de texte qui doivent être modifiées, elles sont là, au même endroit.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/roots-2.png\" width=\"760\" height=\"370\" alt=\"\"/\u003e\u003cfigcaption\u003eCapture d’écran de \u003ca href=\"http://jxnblk.com/colorable/demos/text/\"\u003eColorable\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch2\u003eAstuce 3 :\u003c/h2\u003e\n\n\u003e _Utilisez des valeurs “dynamiques”, comme `currentColor` et `em`_.\n\nParfois il est plus malin d’utiliser la `color` du texte pour d’autre propriétés. Par exemple, pour `border`, pour `bow-shadow` ou pour le `fill` des icônes [SVG](/tags/svg/). Au lieu de les définir directement, vous pouvez [utiliser currentColor](/articles/la-premiere-variable-css-currentcolor) et ce sera la même propriété `color`. Et comme `color` hérite par défaut, vous pourriez même n’avoir à le changer qu’à un seul endroit.\n\nDe la même manière, les `em` sont mappés à `font-size` et vous permettent de redimensionner ce que vous voulez, simplement en modifiant la font size de :root.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/cssconf-size.gif\" width=\"760\" height=\"422\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch2\u003eAstuce 4 :\u003c/h2\u003e\n\n\u003e _Écrasez les styles user-agent pour qu’ils héritent de leurs parents_.\n\nDes contrôles de formulaires comme les boutons, ou les inputs sont stylés par le navigateur d’une certaine façon. On peut les écraser avec `inherit` pour qu’ils s’adaptent à votre style.\n\n```CSS\n  button,\n  input,\n  select,\n  textarea {\n    color: inherit;\n    font-family: inherit;\n    font-style: inherit;\n    font-weight: inherit;\n  }\n```\n\nL’exemple ci-dessus est repris de [sanitize.css](https://github.com/csstools/sanitize.css/). [normalize.css](https://necolas.github.io/normalize.css/) fait la même chose, donc si vous avez l’un des deux, vous êtes couverts.\n\nVous pouvez également essayer de restyler d’autres inputs comme des curseurs, des boutons radio, des cases à cocher, etc. Et comme nous l’avons vu ci-dessus, en utilisant `currentColor` on leur donne automatiquement la propriété `color`. On peut les faire passer d’un thème lumineux à un thème sombre sans avoir rien d’autre à changer.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/cssconf-color3.gif\" width=\"760\" height=\"422\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\nTout cela est très cool, mais à qui est-ce que cela s’adresse\u0026nbsp;? Bien sûr, ce n’est pas adapté à toutes les situations. Je dirais que les sites web simples en seront les premiers bénéficiaires. Mais même lorsqu’on utilise un préprocesseur, ça ne fait pas de mal de réduire encore un peu la quantité de CSS produite, voire d’éviter de créer certaines variables.\n\nCela s’accorde bien aussi à l’approche “une classe pour chaque objectif” de [Tachyons](http://tachyons.io/). Cela peut aider à réduire la complexité et le nombre de classes nécessaires.\n\nUn autre intérêt pourrait apparaître avec les propriétés personnalisés, autrement dit les variables CSS. Contrairement aux variables utilisées dans les préprocesseur, lorsqu’on écrase une propriété personnalisée cela n’affecte que la portée (_scope_) du sélecteur courant. Donc, dans un certain sens ce seront des “variables en cascade”. Mais il faut que je voie ça de plus près en pratique.\n\nPS\u0026nbsp;: il est possible que cet article ait été inspiré par [ce tweet](https://twitter.com/kaelig/status/616902099457175552) de [Kaelig](https://twitter.com/kaelig).\n\nNdT: voyez également (comme toujours) [la page MDN](https://developer.mozilla.org/fr/docs/Web/CSS/:root).\n"},{"slug":"nth-child","title":":nth-child","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"6 septembre 2011","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/almanac/selectors/n/nth-child","copyright":"2011"},"dateCascade":"06 septembre 2015","dateMachine":"2O150906","tags":["css","pseudo-classes"],"about":[":nth-child"],"excerpt":"Le sélecteur :nth-child (“n-ième enfant”) permet de sélectionner un ou plusieurs éléments en fonction de leur ordre dans la source et selon des critères que vous déterminez.","featured":false,"featuredImage":"/images/authors/chris-coyier.jpg","order":null,"content":"\nLe sélecteur `:nth-child` (\u0026ldquo;n-ième enfant\u0026rdquo;) permet de sélectionner un ou plusieurs éléments en fonction de leur ordre dans la source et selon des critères que vous déterminez. La spécification W3C le range parmi les \u0026ldquo;pseudo-classes structurelles\u0026rdquo;, ce qui signifie qu'il est utilisé pour appliquer un style au contenu en fonction de ses relations avec les éléments parents et enfants.\n\nSupposons que nous ayons une grille CSS et que nous voulions retirer la marge sur chaque quatrième module\u0026nbsp;:\n\n    //HTML\n    \u003csection class=\"grid\"\u003e\n      \u003carticle class=\"module\"\u003eOne\u003c/article\u003e\n      \u003carticle class=\"module\"\u003eTwo\u003c/article\u003e\n      \u003carticle class=\"module\"\u003eThree\u003c/article\u003e\n      \u003carticle class=\"module\"\u003eFour\u003c/article\u003e\n      \u003carticle class=\"module\"\u003eFive\u003c/article\u003e\n    \u003c/section\u003e\n\nPlutôt que d'ajouter une classe à chaque quatrième item, nous pouvons utiliser `:nth-child`\u0026nbsp;:\n\n    //CSS\n    .module:nth-child(4n) {\n      margin-right: 0;\n    }\n\nComme vous le voyez, `:nth-child` prend un argument (c'est le n-ième enfant, mais il faut bien préciser comment on détermine ce _n_). Cela peut être un simple chiffre, les mots-clés `even` (pair) ou `odd` (impair), ou bien une formule.\n\nSi un chiffre est spécifié, seul _un_ élément sera sélectionné, par exemple `:nth-child(2)` sélectionnerait le deuxième module dans notre HTML ci-dessus.\n\nSi c'est un mot-clé ou une formule, une itération permettra de sélectionner le ou les éléments correspondants. Par exemple, `:nth-child(even)` sélectionnerait les modules 2 et 4. `:nth-child(3n+1)` séléctionnerait les modules 1 et 4.\n\nAu passage, on voit ici que `:nth-child(even)` est l'équivalent de `:nth-child(2n)` et `:nth-child(odd)` est l'équivalent de `:nth-child(2n+1)` - sachant que lorsque la valeur de l'argument est inférieure ou égale à zéro, il n'y a pas de sélection. Inférieure à zéro\u0026nbsp;? Oui, car on pourrait très bien utiliser une formule du type `:nth-child(2n-1)` et pour n=0 on aurait un argument égal à -1. Dans ce cas, aucun élément ne serait sélectionné.\n\nPour illustrer tout ceci, voici quelques exemples de sélecteurs `:nth-child`\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ALiBx\" src=\"//codepen.io/zakkain/embed/ALiBx?height=650\u0026amp;theme-id=light\u0026amp;slug-hash=ALiBx\u0026amp;user=zakkain\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"650\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/zakkain/pen/ALiBx/\"\u003e\n  CSS-Tricks: :nth-child\u003c/a\u003e by Zachary Kain \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n**À noter**\n\n- `:nth-child` procède par itération en commençant par le début de la liste. C'est la seule différence avec `:nth-last-child` qui commence par la fin de la liste.\n- le sélecteur `:nth-child` est très proche de `:nth-of-type` mais avec une différence essentielle\u0026nbsp;: il est [moins spécifique](../nth-of-type). Dans notre premier exemple, il donnerait le même résultat parce que nous ne faisons d'itérations que sur les éléments `.module`, mais si nous avions un groupe plus complexe, `:nth-child` essaierait de cibler _tous_ les éléments frères (siblings) et non pas les éléments frères limités au même type. C'est un point important à retenir concernant la puissance de `:nth-child`\u0026nbsp;: il sélectionne tous les éléments frères et non pas seulement ceux qui sont spécifiés avant les deux-points `:`. Vous pouvez consulter [l'article `:nth-of-type`](../nth-of-type) pour plus de détails sur la différence entre les deux.\u003cspan id=\"diffspecificity\"\u003e\u003c/span\u003e\n\n**Allons plus loin sur la différence entre les deux**\n\nPrenons le HTML suivant\u0026nbsp;:\n\n    //HTML\n    \u003csection\u003e\n       \u003cp\u003ePetit\u003c/p\u003e\n       \u003cp\u003eCochon\u003c/p\u003e    \u003c!-- Celui que je veux --\u003e\n    \u003c/section\u003e\n\nLes deux CSS qui suivent parviendraient au même résultat\u0026nbsp;:\n\n    //CSS\n    p:nth-child(2) { color: red; }\n\n    p:nth-of-type(2) { color: red; }\n\nEt pourtant il y a une différence. En bon français, le sélecteur `:nth-child` nous dit de sélectionner un élément _si_\u0026nbsp;:\n\n1. c'est un élément paragraphe\n2. c'est le second enfant d'un parent (quel qu'il soit)\n\nLe sélecteur `:nth-of-type`, lui, dit ceci\u0026nbsp;:\n\n1. sélectionner le second paragraphe enfant d'un parent (quel qu'il soit)\n\n`:nth-of-type` est… comment dire… _moins conditionnel_.\n\nAdmettons que notre balisage soit maintenant\u0026nbsp;:\n\n    //HTML\n    \u003csection\u003e\n       \u003ch1\u003eMots\u003c/h1\u003e\n       \u003cp\u003ePetit\u003c/p\u003e\n       \u003cp\u003eCochon\u003c/p\u003e    \u003c!-- Celui que je veux --\u003e\n    \u003c/section\u003e\n\nCe CSS ne fonctionne plus\u0026nbsp;:\n\n    //CSS\n    p:nth-child(2) { color: red; }\n\nCelui-ci fonctionne encore :\n\n    //CSS\n    p:nth-of-type(2) { color: red; }\n\nQuand je dis qu'il ne fonctionne plus, je veux dire que le sélecteur `:nth-child` sélectionne maintenant _Petit_ au lieu de _Cochon_, parce que cet élément répond à la fois à la condition (1) être le deuxième enfant (de `\u003csection\u003e`) et (2) être un élément paragraphe.\n\nEt quand je dis que le deuxième fonctionne encore, je veux dire que c'est bien _Cochon_ qui est sélectionné, parce que c'est le deuxième paragraphe à l'intérieur de cet élément parent `\u003csection\u003e`.\n\nSi nous ajoutions un `\u003ch2\u003e` après le `\u003ch1\u003e`, le sélecteur `:nth-child` ne sélectionnerait plus rien du tout parce que maintenant le deuxième enfant n'est plus un paragraphe. Le sélecteur `:nth-of-type` quant à lui fonctionnerait toujours.\n\nMon sentiment est que le sélecteur `:nth-of-type` est moins fragile et plus utile en règle générale, même si `:nth-child` est plus courant apparemment. Vous vous dites sans doute parfois \u0026ldquo;je veux sélectionner le second enfant d'un parent si c'est un paragraphe\u0026rdquo;, mais il y a des chances que vous vouliez plutôt \u0026ldquo;sélectionner le deuxième paragraphe\u0026rdquo; ou \u0026ldquo;sélectionner une ligne sur trois dans le tableau\u0026rdquo;, et ce sont là des cas où `:nth-of-type` (à mon avis) est un meilleur choix.\n\nDernière chose : je me suis rendu compte que la plupart de mes moments de \u0026ldquo;_mais pourquoi ce #@/$!!! de :nth-child ne marche pas ??_\u0026rdquo; venaient du fait que j'avais qualifié le sélecteur avec la balise. Donc lorsque j'utilise `:nth-child` je préfère en général spécifier le parent et ne pas qualifier `:nth-child`\u0026nbsp;:\n\n    //CSS\n    dl :nth-child(2) {  } /* est préférable à */\n    dd:nth-child(2) {  } /* ceci */\n\nMais bien sûr, tout dépend de la situation exacte.\n\n**Quelques recettes**\n\nIl existe quelques \"testeurs\" de `:nth-child` que vous pouvez vous amuser à utiliser :\n\n[CSS-Tricks nth-child tester](http://css-tricks.com/examples/nth-child-tester/#)  \n[Le testeur de Lea Verou](http://lea.verou.me/demos/nth.html)  \n[Nth-Test](http://nth-test.com/) de Paul Maloney\n\nVous pouvez tester les **recettes** suivantes :\n\n👉🏾 Sélectionner uniquement le cinquième élément\u0026nbsp;:\n\n    //CSS\n    li:nth-child(5) {\n        color: green;\n    }\n\n👉🏾 Sélectionner tous les éléments sauf les 5 premiers\u0026nbsp;:\n\n    //CSS\n    li:nth-child(n+6) {\n        color: green;\n    }\n\n👉🏾 Sélectionner seulement les 5 premiers éléments\u0026nbsp;:\n\n    //CSS\n    li:nth-child(-n+5) {\n        color: green;\n    }\n\n👉🏾 Sélectionner un élément sur quatre, en commençant par le premier\u0026nbsp;:\n\n    //CSS\n    li:nth-child(4n-7) {  /* or 4n+1 */\n        color: green;\n    }\n\n---\n\nAutres ressources à consulter sur ce sujet\u0026nbsp;:\n\n- MDN : [:nth-child](https://developer.mozilla.org/fr/docs/Web/CSS/:nth-child)\n- [Référence SitePoint](http://www.sitepoint.com/web-foundations/nth-childn-css-selector/) (en anglais)\n- [CSS Reference Codrops](http://tympanus.net/codrops/css_reference/nth-child/) (en anglais)\n- [Wiki W3C](http://www.w3.org/wiki/CSS/Selectors/pseudo-classes/:nth-child) (en anglais)\n- [Spécification W3C](http://dev.w3.org/csswg/selectors3/#structural-pseudos) (en anglais)\n\nAutres articles intéressants\u0026nbsp;:\n\n**articles en français** :\n\n- [Le sélecteur :nth-child](http://www.grafikart.fr/tutoriels/html-css/css-nth-child-168), vidéo par Grafikart\n\n**articles en anglais** :\n\n- [nthmaster](http://nthmaster.com/), quelques exemples complexes d'utilisation des pseudo-classes structurelles **:nth**\n- [Usefil :nth-child recipes](https://css-tricks.com/useful-nth-child-recipies/), de Chris Coyier, quelques recette utiles\n"},{"slug":"motifs-svg-japonais","title":"Motifs SVG japonais","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"2 août 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1057/SVG-Patterns-of-Japan","copyright":"2015"},"dateCascade":"3 août 2015","dateMachine":"2O150803","tags":["svg","design"],"about":[],"excerpt":"Pour le plaisir, Dudley Storey a réalisé deux nouveaux backgrounds SVG dérivés des motifs géométriques traditionnels japonais. Un approfondissement de la série sur SVG, mine de rien, ça devient sérieux!","featured":false,"featuredImage":"/images/asanoha-visualisation-compressor.jpeg","order":null,"content":"\nJuste pour le plaisir (et de manière fortuite pour le [week end des tuiles rétro sur CodePen](http://codepen.io/collection/Dmrpwb/)), j'ai réalisé deux nouveaux backgrounds SVG dérivés des motifs géométriques traditionnels japonais.\n\n\u003ch2\u003eSeigaiha\u003c/h2\u003e\n\nLa traduction littérale de [seigaiha](https://www.jhinparis.com/tissusjaponaisgeometriques/k2ke5csnq9c1nwyxd48xr7gl24c3a2) est “mer bleue et vagues”. À l'origine, ce motif était utilisé dans les cartes chinoises pour représenter l'océan. Importé au Japon un peu avant le 6e siècle de notre ère, il apparaît sur des figurines funéraires [haniwa](https://fr.wikipedia.org/wiki/Haniwa). Il existe de nombreuses variantes du motif qui sont utilisées partout\u0026nbsp;: impressions géométriques, incrustations, ou dessiné au rateau dans les jardins japonais.\n\n\u003ch3\u003eLe SVG\u003c/h3\u003e\n\n    \u003csvg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\"\u003e\n      \u003cdefs\u003e\n        \u003cpattern id=\"waves\" patternUnits=\"userSpaceOnUse\" width=\"230.4\" height=\"221.7\" patternTransform=\"scale(.5)\"\u003e\n        \u003cdefs\u003e\n          \u003cg id=\"wave\" stroke=\"#000080\" fill=\"none\"\u003e\n            \u003ccircle fill=\"#FFF\" stroke-width=\"8\" r=\"106.7\" /\u003e\n            \u003ccircle stroke-width=\"9\" r=\"81\" /\u003e\n            \u003ccircle stroke-width=\"8\" r=\"55.3\" /\u003e\n            \u003ccircle stroke-width=\"7\" r=\"32.5\" /\u003e\n            \u003ccircle stroke-width=\"7\" r=\"13.2\" /\u003e\n          \u003c/g\u003e\n        \u003c/defs\u003e\n        \u003cuse x=\"229.9\" y=\"0.7\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"114.9\" y=\"55.3\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"-114.9\" y=\"55.3\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"0\" y=\"111.3\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"229.9\" y=\"111.3\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"114.9\" y=\"166.4\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"-114.9\" y=\"166.4\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"0\" y=\"222.2\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"345.1\" y=\"166.4\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"229.9\" y=\"222.2\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"114.9\" y=\"277.2\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"-114.9\" y=\"277.2\" xlink:href=\"#wave\" /\u003e\n        \u003cuse x=\"345.1\" y=\"277.2\" xlink:href=\"#wave\" /\u003e\n        \u003c/pattern\u003e\n      \u003c/defs\u003e\n     \u003crect width=\"100%\" height=\"100%\" fill=\"url(#waves)\" /\u003e\n    \u003c/svg\u003e\n\n\u003cdiv style=\"margin-bottom: 2em;\"\u003e\u003csvg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\"\u003e\u003cdefs\u003e\u003cpattern id=\"waves\" patternUnits=\"userSpaceOnUse\" width=\"230.4\" height=\"221.7\" patternTransform=\"scale( .5)\"\u003e\u003cdefs\u003e\u003cg id=\"wave\" stroke=\"#000080\" fill=\"none\"\u003e\u003ccircle fill=\"#FFF\" stroke-width=\"8\" r=\"106.7\" /\u003e\u003ccircle stroke-width=\"9\" r=\"81\" /\u003e\u003ccircle stroke-width=\"8\" r=\"55.3\" /\u003e\u003ccircle stroke-width=\"7\" r=\"32.5\" /\u003e\u003ccircle stroke-width=\"7\" r=\"13.2\" /\u003e\u003c/g\u003e\u003c/defs\u003e\u003cuse x=\"229.9\" y=\"0.7\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"114.9\" y=\"55.3\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"-114.9\" y=\"55.3\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"0\" y=\"111.3\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"229.9\" y=\"111.3\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"114.9\" y=\"166.4\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"-114.9\" y=\"166.4\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"0\" y=\"222.2\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"345.1\" y=\"166.4\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"229.9\" y=\"222.2\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"114.9\" y=\"277.2\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"-114.9\" y=\"277.2\" xlink:href=\"#wave\" /\u003e\u003cuse x=\"345.1\" y=\"277.2\" xlink:href=\"#wave\" /\u003e\u003c/pattern\u003e\u003c/defs\u003e\u003crect width=\"100%\" height=\"100%\" fill=\"url(#waves)\" /\u003e\u003c/svg\u003e\u003c/div\u003e\n\nLe balisage utilise pour l'essentiel la même idée que mon [design de lignes SVG](/articles/diagonales-et-motifs-svg-en-background/), mais il va un peu plus loin\u0026nbsp;: dans ce cas, j'utilise `defs` à l'intérieur de `defs` pour créer le motif initial. Ce qu'il faut retenir\u0026nbsp;:\n\n1. Le `fill` et le `stroke` par défaut des [cercles](/articles/les-bases-de-svg-cercles-et-ellipses/) ont été déplacés dans un élément groupe pour l'efficacité.\n2. Les `cx` et `cy` des cercles n'ont pas besoin d'être définis car le motif lui-même n'est jamais rendu directement\u0026nbsp;; les cercles sont supposés être centrés sur `0,0`.\n3. Le plus grand cercle extérieur du motif a un background blanc, qui sert à le remplir et à créer un effet de recouvrement.\n4. Le `use` du motif du cercle est disposé en couches allant du dessus vers le dessous à l'intérieur de la surface définie par les `width` et `height` du motif.\n5. L'échelle du motif, et donc le nombre de fois qu'il se répète sur la page, est contrôlée par la valeur `scale` de `patternTransform`.\n\n\u003ch2\u003eAsanoha\u003c/h2\u003e\n\nUn dessin géométrique régulier tracé à partir d'un motif de feuilles de chanvre qui se recouvrent. Il est utilisé pour les kimono de tous les jours et (traditionnellement) pour les langes des bébés. On le comprend plus aisément si on le voit comme un motif d'étoile à 6 pointes, chacune étant reliée au centre de l'étoile adjacente.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/asanoha-visualisation-compressor.jpeg\" width=\"768\" height=\"466\" alt=\"\"/\u003e\u003cfigcaption\u003eVisualisation du motif asanoha comme des étoiles à 6 pointes qui se recouvrent les unes les autres.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch3\u003eLe SVG\u003c/h3\u003e\n\nLe motif de cet exemple consiste en un simple [polygone](/articles/les-bases-de-svg-polygones/) couplé à des [lignes et polylignes](/articles/les-bases-de-svg-lignes-simples-et-multiples/)\u0026nbsp;:\n\n    \u003csvg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\"\u003e\n    \u003cdefs\u003e\n      \u003cpattern id=\"ashano\" patternUnits=\"userSpaceOnUse\" width=\"119\" height=\"103\" patternTransform=\"scale(1)\"\u003e\n      \u003cg stroke=\"#231F20\" fill=\"none\"\u003e\n        \u003cpolygon points=\"89.3,0 89.3,34.4 119,51.6 89.3,68.7 89.3,103.1 59.5,85.9 29.8,103.1 29.8,68.7 0,51.5 29.8,34.4 29.8,0 59.5,17.2\"/\u003e\n        \u003cline x1=\"59.5\" y1=\"17.2\" x2=\"59.5\" y2=\"85.9\"/\u003e\n        \u003cline x1=\"29.8\" y1=\"103.1\" x2=\"89.3\" y2=\"0\"/\u003e\n        \u003cline x1=\"29.8\" y1=\"0\" x2=\"89.3\" y2=\"103.1\"/\u003e\n        \u003cline x1=\"0\" y1=\"51.5\" x2=\"119\" y2=\"51.5\"/\u003e\n        \u003cline x1=\"29.8\" y1=\"68.7\" x2=\"89.3\" y2=\"34.4\"/\u003e\n        \u003cline x1=\"89.3\" y1=\"68.7\" x2=\"29.8\" y2=\"34.4\"/\u003e\n        \u003cline x1=\"29.8\" y1=\"0\" x2=\"89.3\" y2=\"0\"/\u003e\n        \u003cline x1=\"89.3\" y1=\"0\" x2=\"119\" y2=\"51.6\"/\u003e\n        \u003cline x1=\"119\" y1=\"51.6\" x2=\"89.3\" y2=\"103.1\"/\u003e\n        \u003cline x1=\"89.3\" y1=\"103.1\" x2=\"29.8\" y2=\"103.1\"/\u003e\n        \u003cpolyline points=\"89.3,103.1 119,85.9 119,51.5\"/\u003e\n        \u003cline x1=\"89.3\" y1=\"103.1\" x2=\"119\" y2=\"103.1\"/\u003e\n        \u003cpolyline points=\"119,51.5 119,17.2 89.3,0\"/\u003e\n        \u003cline x1=\"89.3\" y1=\"0\" x2=\"119\" y2=\"0\"/\u003e\n        \u003cline x1=\"119\" y1=\"51.5\" x2=\"89.3\" y2=\"0\"/\u003e\n        \u003cpolyline points=\"29.8,0.1 0,17.2 0,51.6\"/\u003e\n        \u003cline x1=\"0\" y1=\"0\" x2=\"29.8\" y2=\"0.1\"/\u003e\n        \u003cline x1=\"29.8\" y1=\"0.1\" x2=\"0\" y2=\"51.6\"/\u003e\n        \u003cpolyline points=\"0.1,51.5 0.1,85.9 29.8,103.1\"/\u003e\n        \u003cline x1=\"0\" y1=\"103\" x2=\"29.8\" y2=\"103.1\"/\u003e\n        \u003cline x1=\"0.1\" y1=\"51.5\" x2=\"29.8\" y2=\"103.1\"/\u003e\n      \u003c/g\u003e\n      \u003c/pattern\u003e\n    \u003c/defs\u003e\n    \u003crect width=\"100%\" height=\"100%\" fill=\"url(#ashano)\" /\u003e\n    \u003c/svg\u003e\n\n\u003csvg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100%\" height=\"100%\"\u003e\u003cdefs\u003e\u003cpattern id=\"ashano\" patternUnits=\"userSpaceOnUse\" width=\"119\" height=\"103\" patternTransform=\"scale(1)\"\u003e\u003cg stroke=\"#231F20\" fill=\"none\"\u003e\u003cpolygon points=\"89.3,0 89.3,34.4 119,51.6 89.3,68.7 89.3,103.1 59.5,85.9 29.8,103.1 29.8,68.7 0,51.5 29.8,34.4 29.8,0 59.5,17.2\"/\u003e\u003cline x1=\"59.5\" y1=\"17.2\" x2=\"59.5\" y2=\"85.9\"/\u003e\u003cline x1=\"29.8\" y1=\"103.1\" x2=\"89.3\" y2=\"0\"/\u003e\u003cline x1=\"29.8\" y1=\"0\" x2=\"89.3\" y2=\"103.1\"/\u003e\u003cline x1=\"0\" y1=\"51.5\" x2=\"119\" y2=\"51.5\"/\u003e\u003cline x1=\"29.8\" y1=\"68.7\" x2=\"89.3\" y2=\"34.4\"/\u003e\u003cline x1=\"89.3\" y1=\"68.7\" x2=\"29.8\" y2=\"34.4\"/\u003e\u003cline x1=\"29.8\" y1=\"0\" x2=\"89.3\" y2=\"0\"/\u003e\u003cline x1=\"89.3\" y1=\"0\" x2=\"119\" y2=\"51.6\"/\u003e\u003cline x1=\"119\" y1=\"51.6\" x2=\"89.3\" y2=\"103.1\"/\u003e\u003cline x1=\"89.3\" y1=\"103.1\" x2=\"29.8\" y2=\"103.1\"/\u003e\u003cpolyline points=\"89.3,103.1 119,85.9 119,51.5\"/\u003e\u003cline x1=\"89.3\" y1=\"103.1\" x2=\"119\" y2=\"103.1\"/\u003e\u003cpolyline points=\"119,51.5 119,17.2 89.3,0\"/\u003e\u003cline x1=\"89.3\" y1=\"0\" x2=\"119\" y2=\"0\"/\u003e\u003cline x1=\"119\" y1=\"51.5\" x2=\"89.3\" y2=\"0\"/\u003e\u003cpolyline points=\"29.8,0.1 0,17.2 0,51.6\"/\u003e\u003cline x1=\"0\" y1=\"0\" x2=\"29.8\" y2=\"0.1\"/\u003e\u003cline x1=\"29.8\" y1=\"0.1\" x2=\"0\" y2=\"51.6\"/\u003e\u003cpolyline points=\"0.1,51.5 0.1,85.9 29.8,103.1\"/\u003e\u003cline x1=\"0\" y1=\"103\" x2=\"29.8\" y2=\"103.1\"/\u003e\u003cline x1=\"0.1\" y1=\"51.5\" x2=\"29.8\" y2=\"103.1\"/\u003e\u003c/g\u003e\u003c/pattern\u003e\u003c/defs\u003e\u003crect width=\"100%\" height=\"100%\" fill=\"url(#ashano)\" /\u003e\u003c/svg\u003e\n\nDans de prochains articles j'espère passer plus de temps à recréer des motifs japonais et arabes en SVG.\n"},{"slug":"creer-de-superbes-diagrammes-avec-svg-et-blend-modes","title":"Créer de superbes diagrammes avec SVG et Blend Modes","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"30 juillet 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1056/Better-Diagrams-with-SVG-and-Blend-Modes","copyright":"2015"},"dateCascade":"30 juillet 2015","dateMachine":"2O150730","tags":["svg","design"],"about":["BlendModes"],"excerpt":"Une nouvelle association de SVG et CSS Blend Modes pour de nouveaux effets créatifs. De quoi vous faire regretter le bureau, les graphiques et les diagrammes en camembert. Merci Dudley!","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nUn cas intéressant d’utilisation de CSS Blend Mode est l’amélioration du design des diagrammes et des graphes.\n\n## Diagrammes de Venn améliorés\n\nPrenez par exemple le diagramme de Venn classique illustrant [la règle \"Fast, Cheap, Good\"](https://en.wikipedia.org/wiki/Project_management_triangle)\u0026nbsp;: Le markup [SVG](/tags/svg/)\u003c/span\u003e\u003c/span\u003e du diagramme de base pourrait être\u0026nbsp;:\n\n```xml\n  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\"\u003e\n      \u003ctitle\u003eProject Triangle\u003c/title\u003e\n      \u003cdesc\u003eThree overlapping circles, labelled \"Good\", \"Fast\" and \"Cheap\"\u003c/desc\u003e\n      \u003cstyle type=\"text/css\"\u003e\n        svg {\n          background: #1c1c38;\n          }\n        circle {\n          opacity: 0.76;\n          }\n        text {\n          font-family: Avenir Black, Avenir, sans-serif;\n          font-weight: 700;\n          font-size: 36px;\n          }\n      \u003c/style\u003e\n      \u003ccircle fill=\"#ED1F24\" cx=\"163\" cy=\"165\" r=\"141\" aria-labelledby=\"#fast\" /\u003e \u003ccircle fill=\"#55C6D9\" cx=\"250\" cy=\"306\" r=\"141\" aria-labelledby=\"#good\" /\u003e \u003ccircle fill=\"#FEE600\" cx=\"337\" cy=\"165\" r=\"141\" aria-labelledby=\"#cheap\"\u003e      \u003ctext x=\"100\" y=\"165\" id=\"fast\"\u003eFAST\u003c/text\u003e\n      \u003ctext x=\"310\" y=\"165\" id=\"good\"\u003eGOOD\u003c/text\u003e\n      \u003ctext x=\"190\" y=\"340\" id=\"cheap\"\u003eCHEAP\u003c/text\u003e\n  \u003c/svg\u003e\n```\n\nLe résultat :\n\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\"\u003e\u003ctitle\u003eProject Triangle\u003c/title\u003e\u003cdesc\u003eThree overlapping circles, labelled \"Good\", \"Fast\" and \"Cheap\"\u003c/desc\u003e\u003cstyle type=\"text/css\"\u003esvg { background: #1c1c38; }circle { opacity: 0.76; }text { font-family: Avenir Black, Avenir, sans-serif;font-weight: 700; font-size: 36px;}\u003c/style\u003e\u003ccircle fill=\"#ED1F24\" cx=\"163\" cy=\"165\" r=\"141\" aria-labelledby=\"#fast\" /\u003e\u003ccircle fill=\"#55C6D9\" cx=\"250\" cy=\"306\" r=\"141\" aria-labelledby=\"#good\" /\u003e\u003ccircle fill=\"#FEE600\" cx=\"337\" cy=\"165\" r=\"141\" aria-labelledby=\"#cheap\" /\u003e\u003ctext x=\"100\" y=\"165\" id=\"fast\"\u003eFAST\u003c/text\u003e\u003ctext x=\"310\" y=\"165\" id=\"good\"\u003eGOOD\u003c/text\u003e\u003ctext x=\"190\" y=\"340\" id=\"cheap\"\u003eCHEAP\u003c/text\u003e\u003c/svg\u003e\n\nRemarquez que nous aurions pu laisser l’opacité en ligne pour chacun des cercles, puisque c’est également un attribut de présentation SVG. Je les ai intégrés comme des styles pour économiser de l’espace et éviter des répétitions inutiles. J’ai utilisé `aria-labelledby` pour l’accessibilité afin d’associer chaque cercle avec le texte approprié.\n\nC’est un bon début, mais nous pouvons améliorer l’apparence du diagramme en ajoutant `mix-blend-mode` aux éléments `circle`\u0026nbsp;:\n\n```css\ncircle {\n  opacity: 0.76;\n  mix-blend-mode: color-dodge;\n}\n```\n\nCe qui nous donne\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/venn.svg\" alt=\"le diagramme fast, good, cheap\"  width=\"450\" height=\"450\" alt=\"diagramme amélioré\"/\u003e\u003c/figure\u003e\n\n👉🏾 _Nota Bene_ : pour parvenir au résultat espéré, les éléments auxquels on applique `mix-blend-mode` _ne doivent pas être_ sur un fond blanc ou noir purs. C’est une bonne règle pour tester vos blend modes en général.\\n\\nTout comme `opacity`, nous aurions pu appliquer la version SVG native de `blend-mode`, les filtres `\u003cfeBlend\u003e`. Comme beaucoup d’aspects récents de CSS, les blend modes ont leurs racines dans la syntaxe SVG. J’ai utilisé la version CSS dans la mesure où il s’agit d’une _amélioration_ de la présentation, et non une obligation, et la syntaxe CSS est plus simple à écrire et à utiliser.\n\n## Graphiques à barres améliorés\n\n\u003cdiv class=\"bargraph\"\u003e\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 200\"\u003e\n\u003cline x1=\"69.7\" y1=\"187.9\" x2=\"422.7\" y2=\"187.9\"\u003e\u003c/line\u003e\n\u003cline x1=\"69.7\" y1=\"187.9\" x2=\"69.7\" y2=\"183.4\"\u003e\u003c/line\u003e\n\u003cline x1=\"422.7\" y1=\"187.9\" x2=\"422.7\" y2=\"183.4\"\u003e\u003c/line\u003e\n\u003cline x1=\"69.7\" y1=\"187.9\" x2=\"69.7\" y2=\"10.2\"\u003e\u003c/line\u003e\n\u003cline x1=\"69.7\" y1=\"187.9\" x2=\"78.6\" y2=\"187.9\"\u003e\u003c/line\u003e\n\u003cline x1=\"69.7\" y1=\"152.3\" x2=\"78.6\" y2=\"152.3\"\u003e\u003c/line\u003e\n\u003cline x1=\"69.7\" y1=\"116.8\" x2=\"78.6\" y2=\"116.8\"\u003e\u003c/line\u003e\n\u003cline x1=\"69.7\" y1=\"81.3\" x2=\"78.6\" y2=\"81.3\"\u003e\u003c/line\u003e\n\u003cline x1=\"69.7\" y1=\"45.7\" x2=\"78.6\" y2=\"45.7\"\u003e\u003c/line\u003e\n\u003cline x1=\"69.7\" y1=\"10.2\" x2=\"78.6\" y2=\"10.2\"\u003e\u003c/line\u003e\n\u003crect x=\"342.7\" y=\"51.1\" width=\"42.4\" height=\"136.8\"\u003e\u003c/rect\u003e\n\u003crect x=\"295.7\" y=\"47.5\" width=\"42.4\" height=\"140.4\"\u003e\u003c/rect\u003e\n\u003crect x=\"248.6\" y=\"63.5\" width=\"42.4\" height=\"124.4\"\u003e\u003c/rect\u003e\n\u003crect x=\"201.5\" y=\"57.8\" width=\"42.4\" height=\"130.1\"\u003e\u003c/rect\u003e\n\u003crect x=\"154.5\" y=\"45.7\" width=\"42.4\" height=\"142.1\"\u003e\u003c/rect\u003e\n\u003crect x=\"107.4\" y=\"42.7\" width=\"42.4\" height=\"145.2\"\u003e\u003c/rect\u003e\n\u003c/svg\u003e\n\u003c/div\u003e\u003cbr/\u003e\u003cbr/\u003e\n\nComme dans mon article sur les [textes avec effets blend modes](http://thenewcode.com/1032/Easy-Cross-Browser-Text-Masks-with-Blend-Modes), nous pouvons utiliser les blend modes pour donner un background aux barres verticales d’un diagramme en barres. Pour cet exemple, j’ai laissé de côté les aspects liés à l’accessibilité ainsi que les légendes, pour plus de clarté. L’effet principal ici est obtenu par le fait que le SVG qui contient le diagramme en barres est lui-même inclus dans une div qui a une image de background\u0026nbsp;:\n\n```css\ndiv {\n  background-image: url(new-york-city-skyline.jpg);\n  background-size: cover;\n  font-size: 0;\n}\nsvg {\n  background: #fff;\n  mix-blend-mode: lighten;\n}\nrect {\n  fill: #202020;\n  width: 42.4px;\n}\n```\n\nNous pourrions donner un aspect plus propre à l’effet en redimensionnant l’image de background. Telles quelles, les axes des abscisses et des ordonnées prennent également l’effet. Une autre manière de faire serait d’entourer les rectangles représentant les barres avec des [éléments clip-path](http://thenewcode.com/1007/Combining-CSS-clip-path-and-Shapes-for-New-Layout-Possibilities), ce qui fonctionnerait assez comme notre effet blend-mode.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eNQbjz\" src=\"//codepen.io/dudleystorey/embed/eNQbjz?height=450\u0026amp;theme-id=light\u0026amp;slug-hash=eNQbjz\u0026amp;user=dudleystorey\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/dudleystorey/pen/eNQbjz/\"\u003e\n  Better SVG Diagrams \u0026 Graphs with Blend Modes\u003c/a\u003e de Dudley Storey dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n_(Photo par [Josh Liba](https://www.flickr.com/photos/jliba/8067975235), sous licence [CC-BY-NC-ND 2.0](https://creativecommons.org/licenses/by-nc-nd/2.0/))_\n"},{"slug":"backgrounds-pop-art-avec-svg-et-blend-modes","title":"Backgrounds Pop-Art avec SVG et Blend Modes","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"19 juillet 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1047/Pop-Art-Backgrounds-w-SVG--Blend-Modes/","copyright":"2015"},"dateCascade":"19 juillet 2015","dateMachine":"2O150719","tags":["svg","design"],"about":["BlendModes","Background"],"excerpt":"Dudley Storey nous a appris à dessiner avec SVG. Ces lignes peuvent devenir complexes, on peut les mélanger à des images via Blend Modes pour créer des backgrounds “pop art","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\n[Dans un précédent article](/articles/backgrounds-svg-les-rayures/), j’ai présenté l’utilisation de [SVG](/tags/svg/) dans des backgrounds “carrelés”. Ces simples lignes et rayures peuvent devenir des formes complexes, et on peut les mélanger à des images bitmap via CSS Blend Modes pour créer des backgrounds “pop art”. Ces techniques permettent de créer des effets visuels plus riches avec un code plus simple et plus de flexibilité que [mon essai précédent](http://thenewcode.com/307/Pop-Art-Web-Page-Backgrounds-Via-CSS3-Gradients-Merged-With-Images) qui faisait appel aux dégradés CSS.\n\n## Motif en échiquier\n\nPour créer un échiquier avec SVG, il suffit d’utiliser deux [éléments carrés](/les-bases-de-svg-rectangles-et-carres/) disposés diagonalement\u0026nbsp;:\n\n```xml\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\"\u003e\n  \u003cg fill=\"#ccc\"\u003e\n    \u003crect width=\"25\" height=\"25\" /\u003e\n    \u003crect x=\"25\" y=\"25\" width=\"25\" height=\"25\" /\u003e\n  \u003c/g\u003e\n\u003c/svg\u003e\n```\n\nCe qui produit :\n\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\"\u003e\n  \u003cg fill=\"#ccc\"\u003e\n    \u003crect width=\"25\" height=\"25\" /\u003e\n    \u003crect x=\"25\" y=\"25\" width=\"25\" height=\"25\" /\u003e\n  \u003c/g\u003e\n\u003c/svg\u003e\n\n\u003cbr/\u003e\nAppliqué par-dessus une image bitmap\u0026nbsp;:\n\n```css\nsection#grid {\n  background-image: url(checkerboard.svg), url(grace-kelly.jpg);\n  background-size: 100px 100px, cover;\n  background-blend-mode: overlay;\n}\n```\n\nCela nous donne ce bel effet :\n\n  \u003cdiv class=\"sd-kelly\"\u003e\u003c/div\u003e\n\nL’image bitmap est dimensionnée pour couvrir la surface de l’élément. Le motif en échiquier se répète tous les 100px à la fois horizontalement et verticalement. Mais plutôt que de recouvrir l’image, il se mélange avec elle dans le mode `overlay` ( _NdT : en fait ici dans le mode `multiply` qui est plus doux_.)\n\n## Motif à pois\n\nLa même idée peut être utilisée pour recouvrir une image d’un motif à pois, à l’aide de cinq [cercles SVG](/articles/les-bases-de-svg-cercles-et-ellipses/)\u0026nbsp;: un au centre exact de la [viewbox](/articles/comprendre-svg-viewbox/) et les quatre autres ayant leur centre à chaque coin.\n\n```xml\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\"\u003e\n\u003cstyle type=\"text/css\"\u003e\n  circle { fill: #f99; }\n\u003c/style\u003e\n\u003ccircle cx=\"0\" cy=\"0\" r=\"100\"/\u003e\n\u003ccircle cx=\"300\" cy=\"0\" r=\"100\"/\u003e\n\u003ccircle cx=\"0\" cy=\"300\" r=\"100\" /\u003e\n\u003ccircle cx=\"300\" cy=\"300\" r=\"100\"/\u003e\n\u003ccircle cx=\"150\" cy=\"150\" r=\"100\"/\u003e\u003c/svg\u003e\n```\n\nCe qui crée ce pattern :\n\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"300\" height=\"300\"\u003e\u003cstyle type=\"text/css\"\u003ecircle{fill:#f99}\u003c/style\u003e\u003ccircle cx=\"0\" cy=\"0\" r=\"80\"\u003e\u003c/circle\u003e\u003ccircle cx=\"300\" cy=\"0\" r=\"80\"\u003e\u003c/circle\u003e\u003ccircle cx=\"0\" cy=\"300\" r=\"80\"\u003e\u003c/circle\u003e\u003ccircle cx=\"300\" cy=\"300\" r=\"80\"\u003e\u003c/circle\u003e\u003ccircle cx=\"150\" cy=\"150\" r=\"80\"\u003e\u003c/circle\u003e\u003c/svg\u003e\n\nOn sauvegarde ce code comme `circle-grid.svg` et on applique le SVG sur l’image bitmap dans le background de l’élément\u0026nbsp;:\n\n```CSS\nsection#circles {\n  background-image: url(kelly-brook-as-gilda.jpg), url(circle-grid.svg);\n  background-size: cover, 100px 100px;\n  background-blend-mode: multiply;\n  }\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_PqQmxM\" src=\"//codepen.io/dudleystorey/embed/PqQmxM?height=450\u0026amp;theme-id=light\u0026amp;slug-hash=PqQmxM\u0026amp;user=dudleystorey\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/dudleystorey/pen/PqQmxM/\"\u003e\n  Pop Art Backgrounds with SVG \u0026 Blend Modes\u003c/a\u003e de Dudley Storey dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n  \n## Conclusion\n  \nJ’espère que cela vous a donné une idée de la façon dont vous pouvez mettre en œuvre vos propres idées. Il y a bien d’autres possibilités de designs de ce genre, nous les verrons dans de futurs articles.\n"},{"slug":"backgrounds-svg-les-rayures","title":"Backgrounds SVG : les rayures","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"7 juillet 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1045/Using-SVG-in-Web-Page-Backgrounds-Stripes","copyright":"2015"},"dateCascade":"19 juillet 2015","dateMachine":"2O150719","tags":["svg","design"],"about":["Background"],"excerpt":"Dans la continuité des articles sur les bases de SVG, Dudley Storey commence une série sur les motifs et les backgrounds. SVG permet de réaliser des choses impossibles en CSS.","featured":false,"featuredImage":"/images/yv-vertical-stripes.png","order":null,"content":"\nIndépendantes de la résolution, légères, faciles à éditer, les images vectorielles ont de nombreux avantages sur les [dégradés css](/articles/les-degrades-css/)\u0026nbsp;:\n\n1. La syntaxe SVG pour les rayures est plus simple et moins verbeuse que celle des dégradés CSS.\n2. Les backgrounds SVG sont mieux supportés par les navigateurs (SVG est compatible avec IE9 mais les dégradés CSS ne sont supportés qu’à partir de IE10).\n3. On peut réaliser des backgrounds bien plus complexes avec SVG qu’avec CSS.\n\nMais pour être efficaces, les illustrations vectorielles doivent suivre quelques règles\u0026nbsp;:\n\n\u003ch2\u003eRègles générales\u003c/h2\u003e\n\n- Tout comme les [backgrounds répétés en bitmap](http://thenewcode.com/991/Cross-Fading-Background-Images), vous avez seulement besoin d’une “tuile” ou d’un “carreau” pour réaliser un carrelage. Un seul `\u003cpattern\u003e` suffit pour construire l’ensemble.\n- Votre fichier SVG doit être aussi petit, “léger” et éditable que possible\u0026nbsp;: cela impliquera un peu de travail manuel.\n- En général, il est bon de garder au moins une composante couleur de votre background dans votre CSS, pour une meilleure flexibilité.\n\nNous allons commencer par quelques exemples. Remarquez bien que je me suis concentré sur les backgrounds répétés, les backgrounds simples en SVG sont traités à peu près de la même façon que leurs équivalents en bitmap.\n\n\u003ch2\u003eRayures simples en SVG\u003c/h2\u003e\n\nUn effet de “rayures” simple n’est rien d’autre qu’une surface remplie à côté d’une surface vide, le tout répété à l’infini. Dans le cas de SVG, la manière la plus simple de réaliser cette surface pleine est d’utiliser [un élément rectangle](/articles/les-bases-de-svg-rectangles-et-carres/). Sauvegardez le code suivant dans un fichier `stripe.svg`\u0026nbsp;:\n\n    \u003csvg viewBox=\"0 0 1 1\" xmlns=\"http://www.w3.org/2000/svg\"\u003e \u003crect width=\"0.5\" height=\"1\" /\u003e \u003c/svg\u003e\n\nRemarquez que `viewBox` **ou** les attributs équivalents `width` et `height` peuvent être utilisés pour dimensionner l’élément `\u003csvg\u003e` lorsqu’on crée des images de background.\n\nCe fichier SVG peut être appliqué au background d’une page web via\u0026nbsp;:\n\n    //CSS\n    body { background-image: url(stripe.svg); }\n\nPar défaut, le SVG s’étendra pour couvrir la surface entière de l’élément. Il en résultera une division de la page, moitié noire (le remplissage par défaut du rectangle SVG) et moitié blanche (la couleur de background par défaut de la page web, puisque toute surface non explicitement colorée en SVG est automatiquement transparente).\n\nPour que ce motif SVG se répète plus d’une fois, nous pouvons modifier la `background-size` dans notre déclaration CSS\u0026nbsp;: une largeur x suivie d’une hauteur y.\n\n     //CSS\n    body {\n      background-image: url(stripe.svg);\n      background-size: 20px 20px;\n    }\n\nCe qui donne :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/bw-vertical-stripes.png\" width=\"602\" height=\"317\" alt=\"rayures verticales noires et blanches\"/\u003e\u003c/figure\u003e\n\nUn aspect sympa et pratique de cette concision de notre illustration SVG c’est qu’elle est très simple à modifier. par exemple, pour la transformer de verticale en horizontale, il suffit de modifier `background-size`\u0026nbsp;:\n\nRayures horizontales : `body { background-size: 1px 10px; }`  \nRayures verticales : `body { background-size: 10px 1px; }`\n\nPour plus de versatilité, vous pouvez colorer les rayures grâce à `rgba` ou [HSL](/articles/utiliser-hsl-pour-vos-couleurs/) et renvoyer la question du `background-color` de la page à CSS\u0026nbsp;:\n\n    \u003csvg viewBox=\"0 0 1 1\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n      \u003crect width=\"0.5\" height=\"1\" fill=\"hsla(32, 42%, 50%, .5)\" /\u003e\n    \u003c/svg\u003e\n\nLe CSS :\n\n    body {\n      background-image: url(stripe.svg);\n      background-size: 20px 20px;\n      background-color: #669;\n    }\n\nCe fichier SVG est suffisamment petit pour être inséré en ligne dans le CSS lui-même, ce qui évite une requête HTTP\u0026nbsp;:\n\n    body {\n      background-image: url(’data:image/svg+xml;utf8,\u003csvg viewBox=\"0 0 1 1\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003crect width=\"0.5\" height=\"1\" fill=\"hsla(32, 42%, 50%, .5)\" /\u003e\u003c/svg\u003e’);\n      background-size: 20px 20px;\n    }\n\nFaites bien attention aux guillemets ! Ce SVG utilise des doubles guillemets en interne, ce qui signifie que nous devons utiliser des guillemets simples à l’extérieur pour éviter que notre navigateur s’embrouille.\n\nVous pouvez également encoder le fichier SVG en base64 et utiliser ce code dans le CSS\u0026nbsp;:\n\n    body { background-image: url(’data:image/svg+xml;base64,\n    PHN2ZyB2aWV3Qm94PSIwIDAgMiAxIiB4bWxucz0iaHR0cDovL3d3dy53\n    My5vcmcvMjAwMC9zdmciIHByZXNlcnZlQXNwZWN0UmF0aW89InhNaW5Z\n    TWluIG1lZXQiPjxyZWN0IHdpZHRoPSIxIiBoZWlnaHQ9IjIiIGZpbGw\n    9ImhzbGEoMzIsIDQyJSwgNTAlLCAuNSkiIC8+PC9zdmc+’); }\n\nC’est évidemment une option, mais elle présente trois désavantages\u0026nbsp;:\n\n- La version Data URI occupe plus d’espace que la version SVG en ligne.\n- Le fait de convertir l’image en base64 la rend non éditable. Pour faire un changement, il vous faudra retrouver le fichier SVG original, le modifier, le convertir en base64 et l’ajouter à votre CSS.\n- le désencodage de base64 est plus lent sur les plateformes mobiles.\n\nToutefois, l’utilisation de base64 vous donne un peu plus de compatibilité navigateurs. Au final, c’est à vous de décider.\n\n\u003ch2\u003eSéparer les lignes\u003c/h2\u003e\nIl est facile de rendre les lignes plus fines ou plus épaisses dans notre exemple, via `background-size`, mais une chose que cela ne changera pas c’est le *ratio* entre l’épaisseur des lignes et l’espace alentour. Pour changer cela, nous retournons à notre SVG et nous rendons notre rectangle plus large ou plus étroit\u0026nbsp;:\n\n    \u003csvg viewBox=\"0 0 1 1\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n      \u003crect width=\".25\" height=\"1\" /\u003e\n    \u003c/svg\u003e\n\nCe qui produit :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/yv-vertical-stripes.png\" width=\"613\" height=\"310\" alt=\"rayures fines jaunes sur fond violet\"/\u003e\u003c/figure\u003e\n\n\u003ch2\u003eRéaliser des motifs plus complexes\u003c/h2\u003e\n\nUne fois les bases intégrées, il est aisé de réaliser des variations plus complexes de rayures horizontales et verticales en SVG. Par exemple, un motif guingan (Vichy) serait réalisé via un rectangle de ⅓ de large recouvrant un élément de ⅓ de hauteur.\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\n      \u003cg fill=\"rgba(0,0,0,0.3)\"\u003e\n        \u003crect width=\"100\" height=\"33\" /\u003e\n        \u003crect width=\"33\" height=\"100\" x=\"67\" /\u003e\n      \u003c/g\u003e\n    \u003c/svg\u003e\n\nLes mêmes concepts peuvent être utilisés pour créer des plaids et des tartans, mais les plus complexes d’entre eux devraient plutôt utiliser la syntaxe `\u003cpattern\u003e` de SVG que nous pouvons retrouver dans l’article [Diagonales et motifs SVG en background](/articles/diagonales-et-motifs-svg-en-background/).\n"},{"slug":"diagonales-et-motifs-svg-en-background","title":"Diagonales et motifs SVG en background","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"18 juillet 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1048/Using-SVG-in-Web-Page-Backgrounds-Diagonals-and-Patterns","copyright":"2015"},"dateCascade":"19 juillet 2015","dateMachine":"2O150719","tags":["svg"],"about":["Background"],"excerpt":"Lorsque nous comprenons les bases des motifs SVG, c'est un monde de créativité qui s'ouvre. Après les bases de SVG, Dudley Storey nous montre comment créer des backgrounds en SVG.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nQuand on se lance dans un design de background avec motifs en diagonale, on utilise habituellement nos connaissances en trigonométrie (pour des motifs (_patterns_) qui se répètent à l’intérieur d’un carré et se suivent sans rupture) ou bien des dégradés linéaires CSS. Ces deux méthodes ont leurs limites et leurs complications, que résout le pattern SVG.\n\n\u003ch2\u003eTuiles SVG\u003c/h2\u003e\n\nUn motif SVG est exactement ce que son nom indique : une surface qui comporte des informations de tracé, lesquelles sont ensuite reprises sur une surface plus large —\u0026nbsp;un peu comme un carrelage à partir d’un carreau.\n\nDans la plupart des cas, il est plus facile de dessiner le motif _d’abord_, c’est à dire de créer de SVG de l’intérieur. Le template de base est le suivant\u0026nbsp;:\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"\u003e\n      \u003cdefs\u003e\n        \u003cpattern id=\"pinstripe\" patternUnits=\"userSpaceOnUse\" width=\"50\" height=\"50\"\u003e\n          \u003cline x1=\"25\" y1=\"0\" x2=\"25\" y2=\"50\" stroke=\"goldenrod\" stroke-width=\"25\" /\u003e\n        \u003c/pattern\u003e\n      \u003c/defs\u003e\n    \u003c/svg\u003e\n\nPlusieurs choses sont à noter ici :\n\n1. Le SVG ne comporte pas de `viewBox` mais utilise `width` et `height` à la place, les deux attributs ayant pour valeur 100%.\n2. Le `\u003cpattern\u003e` a ses _propres_ `width` et `height`. Le `patternUnits=\"userSpaceOnUse\"` signifie que ces limites sont utilisées _à l’intérieur du motif_ lui-même\u0026nbsp;: elles deviennent les limites du monde occupé par le motif.\n3. Le `\u003cpattern\u003e` est défini à l’intérieur d’un élément `\u003cdefs\u003e` et il faut se rappeler que les `\u003cdefs\u003e` ne sont pas affichés tant qu’ils ne sont pas référencés. C’est pourquoi il peut être préférable de dessiner votre motif SVG dans un autre document, comme un dessin vectoriel normal, idéalement à l’intérieur d’une [viewBox](/articles/comprendre-svg-viewbox/) de mêmes dimensions que le pattern (50\u0026nbsp;\u0026times;\u0026nbsp;50 dans notre cas), ce qui vous permet de visualiser les composants du motif —\u0026nbsp;et de les modifier le cas échéant\u0026nbsp;— avant de les placer à l’intérieur du contexte du `\u003cpattern\u003e` lui-même.\n4. Dans notre exemple, le motif est constitué d’une ligne verticale qui occupe exactement la moitié de la surface du motif.\n\nNous n’avons pas tout à fait terminé. Pour voir le résultat, notre motif doit être utilisé pour remplir un élément SVG. Un rectangle est ce qui paraît le plus logique\u0026nbsp;:\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"\u003e\n      \u003cdefs\u003e\n        \u003cpattern id=\"pinstripe\" patternUnits=\"userSpaceOnUse\" width=\"50\" height=\"50\"\u003e\n          \u003cline x1=\"25\" y1=\"0\" x2=\"25\" y2=\"50\" stroke=\"goldenrod\" stroke-width=\"25\" /\u003e\n        \u003c/pattern\u003e\n      \u003c/defs\u003e\n      \u003crect width=\"100%\" height=\"100%\" fill=\"url(#pinstripe)\" /\u003e\n    \u003c/svg\u003e\n\nLe `\u003crect\u003e` occupe tout l’espace du SVG. Peu importe qu’il soit déclaré avant ou après l’élément `\u003cdefs\u003e`\u0026nbsp;: le `fill` trouvera l’`id` du motif de toute façon\u0026nbsp;:\n\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"\u003e\u003cdefs\u003e\u003cpattern id=\"pinstripe\" patternUnits=\"userSpaceOnUse\" width=\"50\" height=\"50\"\u003e\u003cline x1=\"25\" y1=\"0\" x2=\"25\" y2=\"50\" stroke=\"goldenrod\" stroke-width=\"25\" /\u003e\u003c/pattern\u003e\u003c/defs\u003e\u003crect width=\"100%\" height=\"100%\" fill=\"url(#pinstripe)\" /\u003e\u003c/svg\u003e\n\nSauvegardé sous le nom `pinstripe.svg`, le résultat est appliqué comme image de background à une page HTML, de la même façon qu’habituellement\u0026nbsp;:\n\n    body { background-color: darkblue; background-image: url(’pinstripe.svg’); }\n\nLe motif se reproduit sur toute la page. Arrivé ici, vous pourriez vous dire “eh, mais on peut faire la même chose avec moins de markup” et en effet c’est que nous avons vu dans l’article sur [Backgrounds SVG : les rayures](/articles/backgrounds-svg-les-rayures/). Mais c’est ici que ça devient intéressant. Du fait que `\u003cpattern\u003e` est un petit monde en soi, nous pouvons faire ce que nous voulons avec lui et voir ces changements appliqués dans le contexte plus large de la page. Revenons à `pinstripes.svg` et modifions la balise `\u003cpattern\u003e`\u0026nbsp;:\n\n    \u003cpattern id=\"pinstripe\" patternTransform=\"rotate(45)\" patternUnits=\"userSpaceOnUse\" width=\"50\" height=\"50\"\u003e\n\nSauvegardons le fichier, on rafraîchit la page HTML et on voit maintenant que notre motif de background est à 45°, sans que nous ayons besoin de rien faire d’autre.\n\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"\u003e\u003cdefs\u003e\u003cpattern id=\"pinstripe2\" patternTransform=\"rotate(45)\" patternUnits=\"userSpaceOnUse\" width=\"50\" height=\"50\"\u003e\u003cline x1=\"25\" y1=\"0\" x2=\"25\" y2=\"50\" stroke=\"goldenrod\" stroke-width=\"25\" /\u003e\u003c/pattern\u003e\u003c/defs\u003e\u003crect width=\"100%\" height=\"100%\" fill=\"url(#pinstripe2)\" /\u003e\u003c/svg\u003e\n\nLa rotation peut prendre n’importe quelle valeur avec le même résultat\u0026nbsp;:\n\n    \u003cpattern id=\"pinstripe\" patternTransform=\"rotate(33)\" patternUnits=\"userSpaceOnUse\" width=\"50\" height=\"50\"\u003e\n\nLà encore, le tuilage est parfait. Vous voulez des lignes plus fines\u0026nbsp;? Il suffit de diminuer le `stroke-width` sur l’élément `line`. Moins de lignes sur la page\u0026nbsp;? Ajoutez une déclaration `background-size` à votre CSS.\n\nVoyez aussi [patternTransform](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/patternTransform) dans MDN.\n\n\u003ch2\u003eConclusion\u003c/h2\u003e\n\nLorsque nous comprenons les bases des motifs SVG, c’est un monde de créativité qui s’ouvre\u0026nbsp;: dans vos backgrounds, vous pouvez superposer des motifs multiples, créer des tuilages parfait à partir de formes vectorielles. J’en montrerai quelques-uns dans les prochains articles.\n\n_Tous mes remerciements à [Amelia Bellamy-Royds](https://twitter.com/AmeliasBrain) qui a attiré mon attention sur cette technique et dont j’ai eu plaisir à lire et critiquer les livres récemment. C’est dans ses ouvrages que j’ai trouvé l’inspiration pour cet article_.\n"},{"slug":"pourquoi-height-100-ne-marche-pas","title":"Pourquoi height: 100% ne marche pas","author":{"name":"Maujor","lastname":"Maujor"},"original":{"date":"8 mars 2013","site":"Blog do Maujor","siteUrl":"https://www.maujor.com/blog/","postUrl":"https://www.maujor.com/blog/2013/03/08/por-que-height-100-nao-funciona/","copyright":"2013","language":"pt-BR"},"dateCascade":"19 juillet 2015","dateMachine":"2O150719","tags":["css"],"about":[],"excerpt":"Le blog que Maujor consacre à CSS depuis 2006 est bien connu au Brésil pour ses articles spécialisés ou de vulgarisation. Celui-ci fait le point sur le problème height:100%.","featured":false,"featuredImage":"/images/authors/maujor.jpeg","order":null,"content":"\nUne des déclarations CSS championnes des réclamations chez les débutants (et même chez ceux qui ont déjà une bonne pratique de CSS) est la déclaration `height: 100%;`. Il est courant de trouver sur les forums de discussion des questions ou remarques du genre\u0026nbsp;:\n\n\u003e J’ai déjà déclaré `height: 100%` dans mon CSS et cette `div` ne s’étire pas verticalement comme on pouvait l’espérer, un conseil\u0026nbsp;?\n\nou des réponses du genre :\n\n\u003e Déclare `height: 100%` et ta div sera responsive dans le sens vertical\n\nLe problème ne vient pas du fonctionnement de la propriété, car elle a été créée pour étirer la hauteur d’une boîte de 100%, exactement en effet _comme on pouvait l’espérer_. Alors, où est le problème\u0026nbsp;? Eh bien en fait il n’y a pas de problème, ce qu’il faut c’est _bien comprendre comment fonctionne la propriété_ `height`.\n\nUne mesure CSS (comme n’importe quelle mesure) exprimée en pourcentage est une mesure relative, elle doit donc être rapportée à autre chose.\n\n\u003ch2\u003eWidth: 100%\u003c/h2\u003e\n\nDans le modèle de boîte CSS, la boîte a une largeur (_width_) initiale définie comme égale à `auto` qui par défaut est considérée comme couvrant toute la largeur du viewport. Si l’utilisateur redimensionne la fenêtre du navigateur, il modifie de manière dynamique la largeur du viewport et par conséquent la largeur `auto` de la boîte pour lui donner la valeur actuelle du viewport.\n\nLa largeur à laquelle se réfère le navigateur pour calculer celle, exprimée en pourcentage, d’une boîte est la largeur de son élément parent. Ainsi, une boîte ayant une largeur `width: 50%` qui est enfant d’un container de largeur égale à 200px aura une largeur de 50% de 200px, c’est à dire 100px. Élémentaire.\n\nEt si la largeur de l’élément parent n’est pas définie, comment s’effectue le calcul\u0026nbsp;?\n\nEh bien dans ce cas, elle est par défaut considérée comme `auto`.\n\nEt s’il n’y a pas d’élément parent ayant une largeur définie\u0026nbsp;?\n\nDans ce cas, on considère implicitement que la largeur de tous les éléments parents est `auto`, en d’autres termes la largeur est calculée par rapport à celle du viewport, comme nous venons de le voir. Dans ces conditions, une boîte ayant une largeur de 25% occupera toujours 1/4 de la largeur du viewport. Si l’utilisateur redimensionne la fenêtre du navigateur, la largeur s’ajuste automatiquement.\n\n\u003ch2\u003eHeight: 100%\u003c/h2\u003e\n\nDans le modèle de boîte CSS, une boîte a une hauteur initiale définie comme `auto` mais, contrairement à width, **cette valeur par défaut n’est pas égale à la hauteur du viewport**. Pour la propriété `height`, la valeur `auto` par défaut est celle qui permet de faire rentrer le contenu verticalement dans la boîte —\u0026nbsp;et elle dépend d’autres facteurs, comme par exemple la largeur de la boîte.\n\nPour le calcul de la hauteur exprimée en pourcentage, la référence est la hauteur de l’élément parent. Ainsi, une boîte de hauteur `height: 50%` qui est l’enfant d’une boîte de hauteur égale à 200px aura une hauteur de 50% de 200px, soit 100px. Élémentaire à nouveau.\n\nEt si la hauteur de l’élément parent n’est pas définie\u0026nbsp;? Comment se fait le calcul\u0026nbsp;?\n\nDans ce cas, il est implicite que la hauteur de l’élément parent est `auto` (indéfini) et n’importe quel pourcentage d’_indéfini_ donnera _indéfini_.\n\nLa déclaration CSS n’est donc pas appliquée, et ce qui détermine la hauteur est alors _le contenu_. Voilà pourquoi `height: 100%` ne fonctionne pas.\n\n\u003ch2\u003eFaire fonctionner height: 100%\u003c/h2\u003e\n\nReprenons ce que nous venons d’exposer et n’oublions pas que les éléments `html` et `body` sont les ancêtres les plus distants de n’importe quel élément de notre document.\n\nDans toute structure HTML, lorsque nous définissons la hauteur d’un élément en pourcentage il est nécessaire que son élément parent ait une hauteur définie. Si cette hauteur est définie de manière absolue, on calcule le pourcentage sur la valeur en question et c’est bon.\n\nSi par contre la hauteur de l’élément parent est définie en pourcentage, il faut alors examiner la définition de la hauteur de l’ancêtre (l’élément parent de l’élément parent) et répéter le processus jusqu’à arriver à l’élément racine `html`.\n\nSi dans cette chaîne d’ancêtres l’un n’a pas de hauteur définie, les définitions de hauteur en pourcentage pour tous ses descendants ne sont pas prises en compte, puisque comme nous l’avons vu ne pas définir de hauteur revient à donner la valeur `auto` (qui est indéfinie).\n\n\u003ch2\u003eExemples\u003c/h2\u003e\n\nPour démontrer le fonctionnement de la déclaration `height: 100%` j’ai créé ces quelques démos.\n\nLes démos montrent un élément `div` ayant une classe de `um` (“un” en portugais) et son contenu : un petit texte et le code correspondant à la démo. Nous souhaitons que la div prenne toute la hauteur de la page.\n\nLa première tentative consiste simplement à déclarer la règle de style :\n\n    .um { height: 100%; }\n\nCela ne va pas fonctionner car l’élément parent de `div.um` (`body`) n’a pas de hauteur déclarée. Voir [la démo 1](http://maujor.com/blog/pg_apoio/height100/exemplo1.html).\n\nPour que cela fonctionne, nous devons déclarer la hauteur de **tous** les éléments ancêtres de `div.um`. Ce sont `body` et `html`. Voir [la démo 2](http://maujor.com/blog/pg_apoio/height100/exemplo2.html).\n\nVous aurez peut-être la tentation de déclarer `* { height: 100%; }` dans l’espoir de normer les hauteurs. Ou encore de déclarer `height: 100%;` pour tous les éléments d’une partie du DOM où vous aurez besoin de cette extension. Attention\u0026nbsp;: procéder de la sorte peut résulter en une belle confusion dans votre mise en page.\n\nSi un élément sur lequel vous déclarez `height: 100%` comporte des marges ou du padding verticaux, des barres de défilement apparaîtront dans le rendu final car le calcul du pourcentage est effectué avant ajout des marges et/ou padding. Voir [la démo 3](http://maujor.com/blog/pg_apoio/height100/exemplo3.html) (observez la barre de défilement)\n\nPour éliminer les barres de défilement, nous devons soustraire la valeur des marges et/ou padding verticaux de nos 100%. Si ces espacements sont eux-mêmes définis en pourcentages, c’est simple, il suffit de les déduire de nos 100%, sinon utilisez la fonction `calc()` de CSS. Voir [la démo 4](http://maujor.com/blog/pg_apoio/height100/exemplo4.html).\n\nNB : on peut également utiliser la propriété [box-sizing](/articles/controler-le-modele-de-boite/) à la place de la fonction `calc()`.\n\n\u003ch3\u003eConclusion\u003c/h3\u003e\n\nPour faire fonctionner `height: 100%` il suffit de déclarer explicitement la valeur de hauteur de tous les éléments ancêtres. La difficulté est de savoir quelles implications cela peut avoir sur le reste de la mise en page.\n\nPar conséquent, la déclaration `height: 100%` est finalement d’usage restreint, et n’est certainement pas la solution à tous nos problèmes de hauteur.\n\nTout n’est pas perdu cependant, [Flexbox](/tags/flexbox/) est là\u0026nbsp;! Parmi les fonctionnalités de cette nouvelle spécification, celles qui permettent un plus grand contrôle des dimensions de nos boîtes, sans dépendre des éléments liés dans le markup, sont particulièrement intéressantes.\n\n**Mise à jour** du 24 juillet 2015, via [jon begood](https://twitter.com/johnnybegood_21) : la spécification du W3C [CSS Values and Units Module Level 3](http://www.w3.org/TR/css3-values/#viewport-relative-lengths) est actuellement dans la phase de candidate à recommandation. Parmi les fonctionnalités proposées, on trouve les unités de mesure dont la valeur est un pourcentage de la largeur ou de la hauteur du viewport (unités ‘vw’, ‘vh’, ‘vmin’, ‘vmax’).\nCette unité de mesure est [bien supportée par les navigateurs actuels](http://caniuse.com/#feat=viewport-units), voir l'[exemple 5](http://maujor.com/blog/pg_apoio/height100/exemplo5.html).\n\n👉🏿 _NdT : un bel exemple de_ cascade de la connaissance : _un article brésilien traduit en français, mis à jour par un lecteur français. Merci Johnny B Good !_\n"},{"slug":"mecanique-des-polices-de-caracteres-2-2","title":"Mécanique des polices de caractères, 2","author":{"name":"Tobias Frere-Jones","lastname":"Frere-Jones"},"original":{"date":"11 juin 2015","site":"Frere-Jones","siteUrl":"https://frerejones.com/","postUrl":"https://frerejones.com/blog/typeface-mechanics-002/","copyright":"2015"},"dateCascade":"18 juillet 2015","dateMachine":"2O150718","tags":["typographie"],"about":[],"excerpt":"Deuxième article de la brillante série de Tobias Frere-Jones. Après les questions de dimensions, Tobias aborde celles de l’épaisseur du trait et des graisses.","featured":false,"featuredImage":"/images/Futura-Bruce101-compressor.jpeg","order":null,"content":"\nDans l’[article précédent](/articles/fonctionnement-des-polices-de-caracteres-1/), nous avons vu avec surprise à quel point il était difficile de retrouver une équivalence visuelle entre dimensions et alignements. Notre prochain défi —\u0026nbsp;qui lui non plus ne semble pas en être un au départ\u0026nbsp;— est de gérer les [graisses](http://fr.wikipedia.org/wiki/Graisse_%28typographie%29) différentes, à la fois au niveau d’une lettre et au niveau d’un groupe de lettres.\n\nImaginons que nous voulions dessiner quelque chose de simple\u0026nbsp;: une police de caractères sans [empattement](http://fr.wikipedia.org/wiki/Empattement_%28typographie%29) (_sans serif_) avec une graisse identique dans tous les cas de figure. Nous choisissons les dimensions et nous commençons à construire les formes.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Horiz-Vert01-compressor.gif\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eLes graissses, égalité mathématique ou visuelle ?\u003c/figcaption\u003e\u003c/figure\u003e\n\nMais après les deux premières, une base verticale et une barre horizontale, tout s’écroule. L’horizontale semble plus lourde que la verticale, notre beau plan tombe à l’eau. Nous voulions appliquer les mêmes mesures de manière uniforme, et voilà que nous en avons (apparemment) deux. Pourtant, nous venons de les mesurer et nous savons qu’elles sont égales. Ou plutôt “égales”.\n\nNos yeux ne voient pas toutes les formes de la même façon, par exemple ils voient les formes horizontales plus lourdes qu’elles ne sont. Ce phénomène a fait l’objet de descriptions multiples, depuis la théorie de “[l’inférence inconsciente](https://en.wikipedia.org/wiki/Unconscious_inference)” de la perception visuelle, jusqu’à la sagesse populaire sur les vêtements rayés nous faisant paraître plus minces ou plus grands. Dans ces exemples et dans bien d’autres, nous sommes trompés par les changements d’orientation. Pour contrecarrer cette mauvaise interprétation, nous devons alléger la graisse des horizontales jusqu’à ce qu’elles aient l’air égales aux verticales. En d’autres termes, nous avons besoin de graisses multiples pour donner l’illusion d’une graisse unique.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Futura-O-anim-compressor.gif\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eVues verticale et horizontale : Futura Medium par Paul Renner, Bauer 1927\u003c/figcaption\u003e\u003c/figure\u003e\n\nDans cette vaste entreprise de traficotage, nous nous retrouvons malgré tout en bonne compagnie. [Futura](\u003chttps://en.wikipedia.org/wiki/Futura_(typeface)\u003e), l’exemple ultime de la stricte géométrie, fait les mêmes concessions sous ses airs de pureté. Nous jurerions que ce _O_ est un cercle parfait dessiné par un compas impartial. Mais si nous basculons la forme d’un quart de tour, nous faisons apparaître la supercherie optique et nous voyons la forme telle qu’elle est\u0026nbsp;: une ellipse à l’intérieur d’un cercle.\n\n(Il m’a fallu du temps pour l’accepter après m’en être aperçu. “_Bien sûr_ que ces formes géométriques sont pures. Elles _doivent_ l’être, n’est-ce pas\u0026nbsp;? Oui\u0026nbsp;? Sil vous plaît…” C’était comme d’apprendre que la petite souris n’existe pas.)\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Futura-Bruce101-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eFutura Medium par Paul Renner, Bauer 1927 \u0026 Roman n°\u0026nbsp;1, Bruce Type Foundry, vers 1815\u003c/figcaption\u003e\u003c/figure\u003e\n\nCette relation déséquilibrée des verticales et des horizontales se retrouve dans tous les styles. Les deux designs ci-dessus, bien que d’apparence très différente, fonctionnent selon le même principe de contraste des graisses. L’une est recherchée et subtile, l’autre est bruyante et mélodramatique. Sur les plans culturel, émotionnel et pratique, ces designs de l’Europe moderniste et de l’Amérique victorienne n’ont rien à voir. Mais sur le plan optique, ils sont construits selon le même schéma, avec une simple différence d’intensité. Le contraste ne disparaît jamais complètement.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/InitialesLabeur01-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003e“Initiales Labeur” par La Fonderie Typographique Française, spécimen, vers 1930\u003c/figcaption\u003e\u003c/figure\u003e\n\nCe design nous montre un autre conflit fréquent, cette fois-ci entre les formes droites et incurvées. Si nous nous approchons et que nous mesurons les éléments droits et courbes, nous constatons que ce bel ordonnancement précis est fait de disparités.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/InitialesLabeur02-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\nUn poids supplémentaire a été ajouté aux formes incurvées qui, à leur maximum, sont 12% plus larges que les verticales. Le problème sous-jacent et sa solution correspondent en grande partie à ce que nous avons vu avec les alignements dans l’article précédent.\n\nUne courbe atteint son épaisseur maximale en un seul point à son centre, alors que les autres parties deviennent progressivement plus légères. La colonne droite quant à elle conserve son épaisseur du sommet jusqu’en bas. La seule façon de leur donner un air égal est de donner plus d’épaisseur aux parties incurvées, de la même façon que nous avions dû [les étendre vers le haut et vers le bas](/articles/fonctionnement-des-polices-de-caracteres-1/).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/InitialesLabeur03-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi le travail est bien fait, cette différence sera à peine perceptible. Mais si nous superposons les formes, nous pouvons voir à quel point les fonderies trichent avec l’épaisseur des courbes pour leur donner un air correct.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/CandidaMemphis01-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eCandida Mager de Jakob Erbar, Ludwig \u0026 Mayer 1936 \u0026 Memphis Halbfett de Rudolf Wolf, Stempel 1929\u003c/figcaption\u003e\u003c/figure\u003e\n\nNous avons vu précédemment que le “dépassement” (_[overshoot](http://en.wikipedia.org/wiki/Overshoot_%28typography%29)_) est fonction du type de courbe\u0026nbsp;: moindre lorsque la courbe tend vers une forme carrée, maximum lorsqu’elle est plus ronde. Ici, nous avons les mêmes conditions et conséquences, avec cette masse supplémentaire nécessitée par le contraste. Ci-dessus, Candida offre certains contrastes remarquables, bien que moins accentués que dans le style néoclassique que nous venons de voir. Au-dessous, Memphis est une égyptienne (_[slab serif](https://en.wikipedia.org/wiki/Slab_serif)\\_) sans contraste apparent.\n\nÀ mesure que le contraste diminue, l’écart entre épaisseur maximum et minimum se réduit. Lorsque l’épaisseur du trait varie moins, on a moins besoin d’ajouter une masse supplémentaire.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/CandidaMemphis04-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eMasse supplémentaire dans Candida \u0026 Memphis\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi nous reprenons nos mesures, nous nous apercevons qu’un contraste moindre nécessite moins de masse supplémentaire. Candida augmente l’épaisseur de son trait de 9% alors que le faible contraste de Memphis ne nécessite que 1%. Par conséquent, si vous avez noté comme règle 12% à partir de l’exemple précédent, vous pouvez le rayer\u0026nbsp;: il n’y a pas de formule universelle, mais uniquement des situations particulières, parfois au niveau d’une seule lettre, parfois au niveau de l’alphabet ou de la famille tout entière.\n\nAu bout du compte, tout revient à ajouter du noir lorsqu’il y a trop de blanc. Mais ailleurs dans notre design —\u0026nbsp;voire dans la même lettre\u0026nbsp;— nous pouvons avoir le problème inverse, où nous devons supprimer du noir parce qu’il n’y a pas assez de blanc.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/B-Wratios-1b-compressor.gif\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eSuppression de blanc à droite\u003c/figcaption\u003e\u003c/figure\u003e\n\nPour prendre à nouveau un exemple simplifié, nous avons ici un ensemble de lignes séparées par un espace constant. Admettons que nous voulions les rapprocher —\u0026nbsp;les condenser si vous voulez.\n\nSi nous modifions l’intervalle blanc, sans rien changer d’autre, cela aboutit à un résultat inattendu (du moins si nous pensions conserver la même luminosité). La proportion de noir et de blanc a changé, et c’est _de là_ que nous percevons la lumière, pas des dimensions de tel ou tel élément. Alors, si moins de blanc donne l’impression de plus de noir, pouvons-nous redimensionner les éléments de façon à ce que le ration noir-blanc reste intact\u0026nbsp;?\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/B-Wratios-2b-compressor.gif\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eNoir et blanc, redimensionnés pour conserver le même ratio\u003c/figcaption\u003e\u003c/figure\u003e\n\nHélas, ça ne marche pas. Tout devient trop léger à droite car nous voyons que l’épaisseur des traits ne correspond pas. Au passage, c’est la raison pour laquelle les fausses [petites capitales](https://fr.wikipedia.org/wiki/Petite_capitale) (_small caps_) ont l’air maigrichonnes. En redimensionnant les lettres capitales on crée des caractères dont le poids est différent comme dans l’exemple précédent.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/B-Wratios-3b-compressor.gif\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eNoir et blanc, rééquilibrés optiquement\u003c/figcaption\u003e\u003c/figure\u003e\n\nDonc, quand nous rééquilibrons les choses en mettant une épaisseur de trait et un espacement qui ont l’air corrects, nous créons une relation qui n’est ni arithmétique ni géométrique, mais quelque part entre les deux. Nos yeux sont exigeants, ils acceptent rarement la solution la plus simple.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Intersections-anim-compressor.gif\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eIntersection de traits, avec et sans amincissement (Interstate Bold, Font Bureau 1994)\u003c/figcaption\u003e\u003c/figure\u003e\n\nCe problème de ratio noir/blanc apparaît à l’intérieur même des lettres. Lorsque les bordures des traits sont conservées mécaniquement parallèles, nous constatons un empilement de graisses à l’endroit où ils se croisent. Le centre du _x_ semble vouloir se gonfler, tandis que le _v_ a l’air d’être en caractère gras au sommet et extra-gras en bas. Nous pouvons corriger tout cela en amincissant les traits à l’approche de leur intersection, ce qui stabilise partiellement le ratio de noir et de blanc.\n\nLes graisses s’accumulent en fonction de l’angle de l’intersection, le problème devenant plus aigu à mesure que l’angle est plus pointu. Voilà pourquoi les designers de polices de caractères respirent profondément avant de se lancer dans une version _Compressed Extra Bold_ d’une police, et c’est aussi la raison pour laquelle ils lancent des jurons au _W_ majuscule (ça c’est moi\u0026nbsp;!).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Intersections-3-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"\"/\u003e\u003cfigcaption\u003eMapping de l’amincissement\u003c/figcaption\u003e\u003c/figure\u003e\n\nPour en avoir une vue différente (et en couleur), j’ai demandé à ma collègue Nina Stössinger d’écrire un petit programme en Python qui repère ces changements de graisses et modifie la couleur en fonction. Cela illumine littéralement l’amincissement des traits, dont on voit qu’il s’accélère aux intersections. Il fait également apparaître que la partie gauche du _v_ est plus lourde que la partie droite —\u0026nbsp;mais c’est tout une autre histoire que je vous raconterai la prochaine fois.\n"},{"slug":"guide-de-flexbox-space-between-loublie","title":"Guide de Flexbox : space-between, l'oublié","author":{"name":"Noah Blon","lastname":"Blon"},"original":{"date":"5 mai 2015","site":"Codepen","siteUrl":"https://codepen.io/noahblon","postUrl":"https://codepen.io/noahblon","copyright":"2015"},"dateCascade":"5 juillet 2015","dateMachine":"2O150705","tags":["flexbox"],"about":[],"excerpt":"Tout comprendre sur space-between, le héros oublié de Flexbox. Noah Blon propose un cas pratique d'utilisation de cette valeur de justify-content dans Flexbox, super pratique pour vos mises en page.","featured":true,"featuredImage":"/images/super-smash-bros-2-compressor.jpeg","order":6,"content":"\nPlus j’utilise [flexbox](/tags/flexbox/), plus revient la même règle\u0026nbsp;: `justify-content: space-between`. Dans cet article, je vais vous montrer mon approche des questions de mise en page avec flexbox et l’utilité de `space-between` pour résoudre efficacement quelques difficultés épineuses.\n\n\u003ch2\u003espace-between\u003c/h2\u003e\n\n`space-between` est une des valeurs possibles de la propriété [justify-content](https://developer.mozilla.org/fr/docs/Web/CSS/justify-content). Elle dispose tous les items flex de manière régulière le long de l’axe principal. L’espace résiduel éventuel est distribué de manière égale _entre_ les items. Un peu comme des items flottants à gauche et à droite, mais vous n’avez pas besoin de _clear_ et vous pouvez le faire horizontalement ou verticalement. C’est un pattern qu’on retrouve à peu près tout le temps.\n\nCe qui est cool avec `space-between` c’est que les items que vous disposez conservent leur dimension intrinsèque. Cela vous permet d’avoir un markup (balisage) vraiment efficace, qui ne requiert pas d’utiliser des éléments contenants —\u0026nbsp;en fait, la plupart du temps vous pouvez simplement positionner vos items avec flex et c’est bon.\n\nComme pour tout, à mon avis rien ne vaut une bonne démo. Imaginons que nous avons un super projet d’appli de tournoi Super Smash Bros et un designer nous remet ceci\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/super-smash-bros-1-compressor.png\" width=\"360\" height=\"640\" alt=\"tableau de scores\"/\u003e\u003c/figure\u003e\n\nVoici comment je m’y prendrais pour construire la section header —\u0026nbsp;la partie avec les images des combattants, les icônes, leurs noms, le score, etc.\u0026nbsp;— avec flexbox et `space-between`.\n\n\u003ch3\u003eFigure 1 - Décomposer le problème de layout\u003c/h3\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/super-smash-bros-2-compressor.jpeg\" width=\"576\" height=\"414\" alt=\"décomposition de l'image en ses éléments\"/\u003e\u003c/figure\u003e\n\nLa première chose que je fais lorsque je m’attaque à un problème de mise en , c’est de décomposer tous ses éléments. On a l’image de background, que nous pouvons traiter avec un positionnement absolu et sortir du flow.\n\nIl nous reste à positionner le contenu supérieur par-dessus l’image. Nous avons deux régions\u0026nbsp;:\n\n1. une section en haut avec quelques boutons icônes, l’un à gauche, l’autre à droite.\n2. une section en bas comportant le nom du combattant , le score final, des icônes, etc.\n\nPour ces deux sections, l’axe principal est vertical. Avec `display: flex` et `flex-direction: column` puis `justify-content: space-between`, on fixe les items flex en haut et en bas du header.\n\nPour illustrer la façon dont ça marche, j’ai indiqué une hauteur donnée pour les sections, mais normalement on peut simplement laisser la dimension du contenu situé à l’intérieur d’un item flex déterminer sa taille. Plus tard dans ces exemples je retirerai la hauteur fixe. Voici une démo.\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/noahblon/pen/EjVjJV/\"\u003e\n  Figure 1\u003c/a\u003e de Noah Blon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n_Note : Nous devons laisser le background en dehors du contexte flex, car il y a un [bug dans Firefox](https://github.com/philipwalton/flexbugs/issues/18) qui fait que `space-between` applique de l’espace à des éléments positionnés absolument. Pour éviter ce bug, j’ai enveloppé le contenu dans un élément positionné absolument —\u0026nbsp;.header-content\u0026nbsp;— et indiqué le contexte flex à l’intérieur_\n\n\u003ch3\u003eFigure 2 - Flexibiliser et grouper les items\u003c/h3\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/super-smash-bros-3-compressor.jpeg\" width=\"564\" height=\"356\" alt=\"icônes de navigation, partage, menu\"/\u003e\u003c/figure\u003e\n\nMaintenant, attaquons-nous à la section du haut. Cette fois-ci, les items sont fixés sur les côtés du header, mais selon un axe horizontal. Indiquons `display: flex` dans cette section pour créer notre contexte flex. Nous n’avons pas besoin de définir explicitement la `flex-direction` parce que la valeur est `row`, ou horizontal, par défaut. On utilise à nouveau `justify-content: space-between` pour fixer les items sur les côtés. Les deux icônes sur la droite sont enveloppées dans un élément pour les fixer ensemble sur le côté droit. C’est une façon commode et efficace de grouper des items flex. Dans l’enveloppe de droite, nous pouvons utiliser une autre astuce sympa de flexbox, `display: inline-flex`. Tout se passe comme si on mettait `display: inline-block` sur chacun des items pour leur permettre d’être les uns à côté des autres, mais contrairement à `inline-block`, nous n’avons pas besoin de le définir sur chaque item et il ne nous reste pas d’espace à éliminer entre les items.\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/noahblon/pen/YXyXbQ/\"\u003e\n  Figure 2\u003c/a\u003e de Noah Blon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eFigure 3 - L’efficacité de space-between\u003c/h3\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/super-smash-bros-4-compressor.jpeg\" width=\"512\" height=\"373\" alt=\"partie du bas\"/\u003e\u003c/figure\u003e\n\nEt maintenant, la partie du bas. Ce sont juste deux boîtes superposées. Comme avec les enveloppes de la partie du haut, nous n’avons rien de particulier à faire avec ces items. À nouveau, je donnerai une hauteur déterminée pour la démonstration, mais on pourrait tout aussi bien laisser cette section prendre les dimensions de son contenu.\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/noahblon/pen/doYoxW/\"\u003e\n  Figure 3\u003c/a\u003e de Noah Blon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eFigure 4\u003c/h3\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/super-smash-bros-5-compressor.jpeg\" width=\"526\" height=\"342\" alt=\"\"/\u003e\u003c/figure\u003e\n\nLa partie du haut de la section inférieure est semblable au header. Les items sont fixés de chaque côté de l’axe horizontal. Est-ce que vous trouvez qu’on se répète\u0026nbsp;? J’espère bien que oui\u0026nbsp;!\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/noahblon/pen/bdVVbm/\"\u003e\n  Figure 4\u003c/a\u003e de Noah Blon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eFigure 5\u003c/h3\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/super-smash-bros-6-compressor.jpeg\" width=\"506\" height=\"442\" alt=\"\"/\u003e\u003c/figure\u003e\n\nLa partie du bas de la section inférieure comporte des items fixés de chaque côté et un item au milieu. Là encore, `space-between` est l’outil qu’il nous faut : un troisième item à l’intérieur d’un contexte flex est positionné au milieu. Trop fort\u0026nbsp;!\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/noahblon/pen/waKKBY/\"\u003e\n  Figure 5\u003c/a\u003e de Noah Blon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch3\u003eFigure 6 - Tous ensemble maintenant !\u003c/h3\u003e\nEt voici tous les éléments réunis et stylés.\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/noahblon/pen/GJppMX/\"\u003e\n  le résultat final\u003c/a\u003e de Noah Blon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nEt voici les mêmes, avec l’image de background, un SVG que j’ai créé pour avoir des couleurs qui se mélangent dynamiquement. Restez branché pour en savoir plus à ce sujet\u0026nbsp;!\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/noahblon/pen/MwabGx/\"\u003e\n  le résultat vraiment final\u003c/a\u003e de Noah Blon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003c!-- \u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : l'article génial de Landon Schropp [Flexbox, un coup de dés](https://la-cascade.io/flexbox-un-coup-de-des/) utilise largement `justify-content: space-between`, n'hésitez pas à vous y reporter_. --\u003e\n"},{"slug":"les-bases-de-svg-lignes-simples-et-multiples","title":"Les bases de SVG : Lignes simples et multiples","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"3 juillet 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1042/SVG-Basics-Lines-PolyLines-Caps-and-Corners","copyright":"2015"},"dateCascade":"4 juillet 2015","dateMachine":"2O150704","tags":["svg"],"about":[],"excerpt":"Après les formes de base de SVG, Dudley Storey présente les lignes, simples et multiples et... ce n’est pas si simple.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nSi vous souhaitez dessiner des lignes ou une forme ouverte, plutôt qu’un [polygone](/articles/les-bases-de-svg-polygones/) ou un [cercle](/articles/les-bases-de-svg-cercles-et-ellipses/), [SVG](/tags/svg/) vous offre deux options\u0026nbsp;: les lignes et les polylignes.\n\n\u003ch2\u003eLes lignes\u003c/h2\u003e\n\nLa syntaxe SVG pour les lignes peut paraître intimidante de prime abord, mais c’est parce qu’elle est précise\u0026nbsp;: une ligne peut être décrite simplement en deux points, chacun spécifié par ses coordonnées `x` et `y`.\n\nÀ la différence des formes que nous avons vues jusqu’ici, **les lignes sont entièrement invisibles par défaut**, et le resteront tant qu’on n’aura pas spécifié au moins une couleur de trait (_stroke_). Une fois colorées, elles auront l’épaisseur d’un cheveu tant qu’on n’aura pas spécifié une épaisseur via `stroke-width`.\n\n    \u003csvg width=\"300\" height=\"300\" viewBox=\"0 0 300 200\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n      \u003cline x1=\"0\" y1=\"0\" x2=\"300\" y2=\"200\" stroke-width=\"20\" stroke=\"black\" /\u003e\n    \u003c/svg\u003e\n\n\u003cdiv style=\"margin:0 auto;\"\u003e\u003csvg width=\"300\" height=\"300\" viewBox=\"0 0 300 200\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cline x1=\"0\" y1=\"0\" x2=\"300\" y2=\"200\" stroke-width=\"25\" stroke=\"black\" /\u003e\u003c/svg\u003e\u003c/div\u003e\n\nLe lecteur à l’oeil exercé aura remarqué que l’extrémité du trait est coupé par les coins de la `viewBox`. Pour s’assurer que le trait apparaisse dans son intégrité, il faut lui donner des coordonnées qui dépassent la viewBox —\u0026nbsp;ou bien utiliser `stroke-linecap: square` (dont nous allons parler plus bas) afin d’étendre l’extrémité des lignes.\n\nLe résultat avec `stroke-linecap: square` :\n\n\u003cdiv style=\"margin:0 auto;\"\u003e\u003csvg width=\"300\" height=\"300\" viewBox=\"0 0 300 200\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cline x1=\"0\" y1=\"0\" x2=\"300\" y2=\"200\" stroke-width=\"25\" stroke=\"black\" stroke-linecap=\"square\" /\u003e\u003c/svg\u003e\u003c/div\u003e\n\n\u003ch2\u003eLes polylignes\u003c/h2\u003e\n\nLes polylignes sont simplement des lignes SVG qui se rejoignent en des points multiples\u0026nbsp;:\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 414.3 231.4\"\u003e\n      \u003cpolyline stroke=\"#000\" stroke-width=\"6\" fill=\"none\" points=\"15.7,127.9 112.1,15 294.3,205 75,167.9 364.3,36.4 392.1,212.9 \"/\u003e\n    \u003c/svg\u003e\n\nCe qui donne :\n\n\u003cdiv\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 414.3 231.4\"\u003e\u003cpolyline stroke=\"#000\" stroke-width=\"6\" fill=\"none\" points=\"15.7,127.9 112.1,15 294.3,205 75,167.9 364.3,36.4 392.1,212.9 \"/\u003e\u003c/svg\u003e\u003c/div\u003e\n\nRemarquez que contrairement à ce qui se passe avec les outils graphiques, le fait de placer le dernier point d’une polyligne au même endroit que le point de départ n’aura pas pour résultat de “fermer” la forme. Cependant, vous pouvez appliquer un remplissage couleur (_fill_) à la forme\u0026nbsp;:\n\n\u003cdiv\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 414.3 231.4\"\u003e\u003cpolyline stroke=\"#000\" stroke-width=\"12\" fill=\"tomato\" points=\"15.7,127.9 112.1,15 294.3,205 75,167.9 364.3,36.4 392.1,212.9 \"/\u003e\u003c/svg\u003e\u003c/div\u003e\n\nJe vous en dirai plus sur les `fill` dans un article à venir, mais pour l’instant, il suffira de dire que même si nous pouvons appliquer un remplissage couleur à une polyligne, et en général il marchera comme souhaité, il ne donnera qu’une _apparence_ de polygone fermé, mais ce ne sera pas la même chose.\n\n\u003ch2\u003eCaps \u0026 corners\u003c/h2\u003e\n\nLorsqu’une ligne SVG change de direction, on n’est pas obligé de rendre l’angle qui en résulte sous la forme d’un angle “dur”\u0026nbsp;: il existe deux autres options, grâce à la propriété `stroke-linejoin`. Celle-ci prend deux valeurs, `round` (arrondi) et `bevel` (biseauté), qui font exactement ce qu’on attend d’elles (vous aurez peut-être besoin d’augmenter l’épaisseur du trait pour bien voir l’effet). Une troisième valeur, `miter`, est la valeur par défaut.\n\nCi-dessous, nos polylignes avec une valeur de `stroke-linejoin=\"bevel\"`\u0026nbsp;:\n\n\u003cdiv\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 414.3 231.4\"\u003e\u003cpolyline stroke=\"#000\" stroke-width=\"12\" fill=\"none\" points=\"15.7,127.9 112.1,15 294.3,205 75,167.9 364.3,36.4 392.1,212.9 \" stroke-linejoin=\"bevel\"/\u003e\u003c/svg\u003e\u003c/div\u003e\n\nDe la même manière, les fins de lignes peuvent se terminer par des sortes de capuchons, via la propriété `stroke-linecap`, qui prend trois valeurs, `round` (arrondi en demi cercle), `square` (la ligne prend un capuchon carré, comme le bout d’un lacet de chaussure), ou `butt` par défaut. Ci-dessous les trois options, où l’on voit que le capuchon allonge légèrement la ligne, comme on le voyait déjà dans le deuxième exemple de cet article\u0026nbsp;:\n\n\u003cdiv style=\"margin:0 auto;width:50%;\"\u003e\u003csvg width=\"300\" height=\"300\" viewBox=\"0 0 300 200\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cline x1=\"50\" y1=\"50\" x2=\"280\" y2=\"50\" stroke-width=\"25\" stroke=\"black\" stroke-linecap=\"round\" /\u003e\u003cline x1=\"50\" y1=\"100\" x2=\"280\" y2=\"100\" stroke-width=\"25\" stroke=\"black\" stroke-linecap=\"square\" /\u003e\u003cline x1=\"50\" y1=\"150\" x2=\"280\" y2=\"150\" stroke-width=\"25\" stroke=\"black\" stroke-linecap=\"butt\" /\u003e\u003c/svg\u003e\u003c/div\u003e\n\nS’agissant de propriétés liées à l’apparence, `stroke-linejoin` et `stroke-linecap` peuvent être appliquées soit comme attributs, soit comme propriétés CSS.\n\nUn dernier point : Les traits (_stroke_) et les remplissages couleur (_fill_) peuvent être appliqués à d’autres objets que les lignes, polylignes et polygones\u0026nbsp;; par exemple, ils peuvent être utilisés pour [tracer un texte](http://thenewcode.com/439/Introduction-to-SVG-Text).\n"},{"slug":"le-path-vers-la-lumiere","title":"Le $Path vers la lumière","author":{"name":"Olivier Lacan","lastname":"Lacan"},"original":{"date":"4 novembre 2014","site":"A List Apart","siteUrl":"https://alistapart.com/","postUrl":"https://alistapart.com/article/the-path-to-enlightenment","copyright":"2014"},"dateCascade":"7 juin 2015","dateMachine":"2O150607","tags":["outils"],"about":["Path"],"excerpt":"L'installation de logiciels sur notre machine est souvent un processus pénible et semé d'embûches. Mieux connaître $PATH facilitera notre vie et nous évitera quelques crises","featured":false,"featuredImage":"/images/authors/olivier-lacan.jpeg","order":null,"content":"\nL’installation des logiciels open source est souvent pénible, mais un processus d'installation un peu compliqué —\u0026nbsp;même lorsqu'il semble nous éloigner du but (résoudre des problèmes au moyen dudit logiciel)\u0026nbsp;— constitue une bonne opportunité d’apprivoiser l’un de nos principaux outils de travail\u0026nbsp;: la ligne de commande.\n\nLa [ligne de commande](https://fr.wikipedia.org/wiki/Interface_en_ligne_de_commande) (_command line_) repousse pas mal de gens —\u0026nbsp;elle est souvent considérée comme la technologie des hackers et des “sorciers de l’informatique”. La réalité n’est pas aussi cool, il s’agit en fait d’un ensemble d’outils ridiculement simples créés dans les années 70 par les employés de Bell (aujourd’hui AT\u0026T) pour réaliser les tâches les plus basiques. C’est à peu près aussi “space-age” que votre four à micro-ondes.\n\nMais la ligne de commande est extrêmement utile et puissante, et vous donnera parfois l’impression de passer de la construction manuelle à la construction industrielle. Avec quelques concepts et quelques métaphores, nous allons essayer de jeter un peu de lumière dans les recoins les plus sombres de notre ligne de commande.\n\n**Parmi ces concepts, l’un des plus importants est le Chemin d'Accès (_Path_)**.\n\nDe nombreux frameworks, préprocesseur CSS, bibliothèques JavaScript et autres outils de développement reposent sur Ruby ou sur Node.js pour leur installation sur votre machine. Bower est l’un de ces outils. Invariablement, ces outils vous conduiront à interagir avec le PATH —\u0026nbsp;parce que le Chemin doit connaître l’ensemble des outils que vous installez pour votre environnement de développement, afin que votre ligne de commande fonctionne convenablement.\n\nPlus vous utiliserez la ligne de commande et plus il y a de chances que vous rencontriez des problèmes avec le Chemin. Avant que vous ne perdiez trop de temps ou que vous ne vous en preniez à votre machine, passons en revue les bases de l’utilisation du Chemin.\n\n\u003ch2\u003eUne humble petite variable\u003c/h2\u003e\n\n`$PATH`, comme le dénotent son préfixe $ et ses majuscules criardes, est une [variable d’environnement](https://fr.wikipedia.org/wiki/Variable_d%27environnement#.3CPATH.3E_pour_l.27emplacement_des_ex.C3.A9cutables) Unix. À l’intérieur de cette variable est enregistrée une liste de chemins de dossiers, séparés par des `:`, qui ressemble à ceci\u0026nbsp;:\n\n    /root/directory/binary:/root/other_directory/other_binary\n\nSi vous êtes curieux de savoir quelles autres variables d’environnement existent dans votre système, vous pouvez taper `env` dans la ligne de commande. Faites _Enter_ et vous verrez la liste de toutes les variables d’environnement présentes.\n\nPuisque `$PATH` est une variable, elle peut être modifiée comme vous le souhaitez, à la volée. Par exemple, vous pouvez taper ceci dans votre ligne de commande\u0026nbsp;:\n\n    $ export PATH=banana\n\nQue fait cette commande ? Eh bien, après l’avoir tapée, essayez de lancer n’importe quelle commande basique (par exemple `ls` pour lister le contenu d’un dossier) et vous obtiendrez un message `-bash: ls: command not found` alors que `ls` fonctionnait jusqu’ici sans problème…\n\nCe sabotage sournois nous aide à comprendre que sans contenu dans notre `$PATH` nous nous retrouvons… comme des bananes.\n\nMais pourquoi ? Eh bien parce que comme le font de nombreux chemins de chargement (y compris dans les langages de programmation et dans les frameworks comme Rails), ce Path détermine ce qui peut être exécuté dans votre ligne de commande. Si cette dernière ne peut rien trouver qui corresponde au nom que vous avez entré, elle ne peut pas l’exécuter.\n\nAh ! à propos : il suffit de quitter votre application de ligne de commande pour restaurer toutes vos commandes. C’était un sabotage temporaire. Mais faites attention de ne jamais sauvegarder ce genre de blagues dans votre `~/.bash_profile`, ça pourrait mal se terminer.\n\n\u003ch2\u003eLe conte des mille et un binaires\u003c/h2\u003e\n\nDans Unix, certains programmes exécutables sont appelés binaires (_binaries_). Honnêtement, ce n’est pas un nom génial, il se focalise sur leur format plutôt que sur leur fonction. Quand vous écrivez un programme Unix, vous avez parfois besoin de compiler la source avant de pouvoir l’exécuter. Ce processus de compilation est ce qui crée le binaire. Plutôt que d’utiliser du texte (comme votre code source), ces fichiers utilisent un format binaire pour faciliter le traitement des instructions par les ordinateurs.\n\nUnix comporte de nombreux dossiers dans lesquels enregistrer les binaires. Vous pouvez voir quel dossier est le dossier par défaut de stockage des binaires dans le fichier `/etc/paths`, pour cela il suffit d’utiliser la commande `cat` qui permet d’imprimer le contenu d’un fichier\u0026nbsp;:\n\n    $ cat /etc/paths\n    /usr/bin\n    /bin\n    /usr/sbin\n    /sbin\n    /usr/local/bin\n\nCe fichier contient un dossier par ligne. Les chemins sont listés dans un ordre signifiant. Lorsqu’un binaire est trouvé dans un chemin, il est chargé. Si un binaire portant le même nom est trouvé par la suite dans un autre chemin, il est ignoré. Autrement dit, les chemins listés les premiers prennent le pas sur ceux qui les suivent.\n\nVoilà pourquoi il est si commun de rencontrer des problèmes lorsqu’on essaie d’installer un binaire pour quelque chose qui existe déjà dans notre système. Dans le cas d’OS\u0026nbsp;X, si vous essayez d’installer une version de Git différente de celle déjà présente dans le système, vous serez confronté à ce genre de problème. Et c’est bien dommage, parce que Git 2.0 est vraiment super.\n\nSi je fais `cd` (_change directory_) dans `/usr/bin` —\u0026nbsp;un dossier courant pour stocker les binaires\u0026nbsp;— et que je fais `ls` j’aurai plus de 1.000 résultats. Ça ne m’aide pas beaucoup. Ceci dit, si j’utilise [grep](http://fr.wikipedia.org/wiki/Grep) avec `ls | grep git`, je peux filtrer les résultats de la commande `ls` en ne conservant que ceux qui contiennent “git”.\n\n    $ ls | grep git\n    git\n    git-cvsserver\n    git-receive-pack\n    git-shell\n    git-upload-archive\n    git-upload-pack\n\n...et bien sûr il y a un binaire pour Git à l’intérieur de `/usr/bin`. Une installation propre d’OS\u0026nbsp;X devrait retourner `/usr/bin/git` lorsque vous faites `which git`\u0026nbsp;:\n\n    $ which git\n    /usr/local/bin/git\n\nAlors pourquoi mon résultat est-il différent ? En utilisant l’option `-a`, nous pouvons avoir une idée de ce qui se passe\u0026nbsp;:\n\n    $ which -a git\n    /usr/bin/git\n    /usr/local/bin/git\n\nCeci me dit qu’il y a _deux_ versions de Git sur mon système. Mais seule la première version est utilisée quant j’exécute les commandes `git` dans ma ligne de commande, la seconde est ignorée.\n\n\u003ch2\u003eChanger de chemins\u003c/h2\u003e\n\nJ’ai installé ma propre version de Git à l’aide d’un package manager pour OS\u0026nbsp;X appelé [Homebrew](http://brew.sh/), parce que j’aime bien pouvoir contrôler les outils que j’utilise au quotidien et les mettre à jour quand je le veux. Je pourrais certes mettre à jour le Git installé dans le système, mais je n’ai aucune idée des applications ou des autres binaires qui en dépendent.\n\nNous avons vu que les fichiers binaires sont sélectionnés dans l’ordre où ils apparaissent, alors pourquoi ne changerions-nous pas cet ordre\u0026nbsp;?\n\nÀ l’intérieur du fichier `/etc/paths`, je peux voir que le dossier `/usr/local/bin`, dans lequel se trouve ma version de Git installée avec Homebrew, arrive en dernier. Cela signifie que le binaire git qui se trouve dans `/usr/bin` aura la priorité et mon git sera ignoré. Il faut changer cela.\n\nPour ce faire, vous pourriez essayer de modifier l’ordre dans `/etc/paths` de façon à ce qu’il corresponde à vos besoins, en mettant `/usr/local/bin` tout en haut, et la version Homebrew serait chargée en premier. Mais malgré le nombre de fois où vous verrez ce conseil répété dans les discussions sur [Stack Overflow](http://stackoverflow.com/), ne le faites pas. _Jamais_. Les configurations enregistrées dans `/etc/` affectent le système tout entier. Elles ne sont pas censées être modifiées par les utilisateurs individuels (même si vous êtes le seul utilisateur de la machine), et vous pourriez créer des problèmes inattendus en bricolant de la sorte. Par exemple, certains services utilisés par OS\u0026nbsp;X pourraient reposer sur l’ordre original de `/etc/paths`.\n\nC’est le `$PATH` que vous devez modifier, dans _votre_ environnement, en utilisant _votre_ `.bash_profile` —\u0026nbsp;celui qui est enregistré dans `/Users/votrenomdutilisateur/.bash_profile`.\n\nPour vous assurer que `/usr/local/bin` soit recherché en premier, il suffit d’inclure ce qui suit dans votre `.bash_profile` (par exemple pour moi dans `/Users/olivierlacan/.bash_profile`)\u0026nbsp;:\n\n    export PATH=/usr/local/bin:$PATH\n\nCette ligne exporte une nouvelle variable d’environnement `$PATH` en imprimant celle qui existe actuellement et en plaçant juste avant le chemin `/usr/local/bin`. Après avoir enregistré votre `~/.bash_profile` et redémarré votre ligne de commande, voici ce que vous devriez voir lorsque vous faite `echo` sur le `$PATH`\u0026nbsp;:\n\n    $ echo $PATH\n    /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin\n\nComme vous pouvez le voir, `/usr/local/bin` est mentionné deux fois dans le `$PATH`, et ce n’est pas un problème. Comme il est mentionné en premier, tous les binaires chargés à ce moment seront ignorés lorsqu’ils sont rencontrés par la suite. Honnêtement, j’aimerais qu’il existe une façon simple et sûre de changer l’ordre des chemins, mais la plupart des solutions que je connais sont un peu trop complexes.\n\nMaintenant que vous avez changé le `$PATH`, vous pouvez vérifier que le bon binaire est appelé quand vous utilisez la commande `git`\u0026nbsp;:\n\n    $ which git\n    /usr/local/bin/git\n\n    $ git --version\n    git version 2.0.0\n    /usr/bin/git --version git version 1.8.5.2 (Apple Git-48)\n\nEt voilà. Git 2.0.0 (la version installée par Homebrew) répond maintenant à la commande `git`, et la version installée par Apple est reléguée à l’arrière. Si vous préférez ne pas utiliser git 2.0.0, il suffit de le désinstaller et la version par défaut prendra le relais.\n\n\u003ch2\u003eProtégez votre chemin\u003c/h2\u003e\n\nTout un tas de services pour les développeurs et les designers injecteront automatiquement du code dans votre `.bash_profile` lors de leur installation, souvent sans même le mentionner. Si vous trouvez des chemins bizarres listés dans votre profil, cela peut expliquer que le chargement d’une nouvelle session (ce qui arrive lorsque vous ouvrez une nouvelle fenêtre ou onglet de la ligne de commande) prenne plus de temps que prévu\u0026nbsp;: un `$PATH` boursoufflé peut prendre du temps à se charger.\n\nVoici mon chemin aujourd’hui\u0026nbsp;:\n\n    /Users/olivierlacan/.rbenv/shims:/Users/olivierlacan/.rbenv/bin:\n    /usr/local/bin:/usr/local/heroku/bin:/usr/bin:/bin:/usr/sbin:\n    /sbin:/usr/local/bin:/opt/X11/bin:/usr/local/MacGPG2/bin\n\nC’est un peu dur à lire, alors j’ai tendance à subdiviser l’affichage en lignes distinctes. C’est facile à faire avec la commande `tr` (_traduire_ les caractères\u0026nbsp;: les `:` sont traduits en `\\n`, c’est à dire en retour à la ligne)\u0026nbsp;:\n\n    $ echo $PATH | tr ':' '\\n'\n    /Users/olivierlacan/.rbenv/shims\n    /Users/olivierlacan/.rbenv/bin\n    /usr/local/bin\n    /usr/local/heroku/bin\n    /usr/bin\n    /bin\n    /usr/sbin\n    /sbin\n    /usr/local/bin\n    /opt/X11/bin\n    /usr/local/MacGPG2/bin\n\nCela fait beaucoup en effet, et c’est bien plus simple à lire verticalement. Essayez sur votre machine, et si vous ne savez pas pourquoi une de ces lignes est dans votre `$PATH`, tentez de savoir pourquoi.\n\nMaintenant que vous connaissez votre Chemin, à quoi il ressemble lorsqu’il est propre, comment le modifier comme il faut, et comment vérifier qu’il correspond à vos outils, il y a des chances que vous ne passerez plus des heures à retrouver votre chemin\u0026nbsp;: celui que vous utilisez pour construire des choses pour les autres.\n"},{"slug":"les-bases-de-svg-polygones","title":"Les bases de SVG : Polygones","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"5 juin 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1037/SVG-Basics-Polygons","copyright":"2015"},"dateCascade":"7 juin 2015","dateMachine":"2O150607","tags":["svg"],"about":[],"excerpt":"Dudley Storey termine la série d'articles sur les formes de bases SVG avec les polygones : triangles, étoiles et autres formes plus complexes.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nSi vous voulez créer une forme SVG plus complexe qu’un [cercle](/articles/les-bases-de-svg-cercles-et-ellipses/) ou un [rectangle](/articles/les-bases-de-svg-rectangles-et-carres/), vous pouvez essayer le polygone.\n\nEn [SVG](/tags/svg/), un polygone est une forme fermée constituée de lignes droites\u0026nbsp;; SVG ne propose pas (encore) d’éléments pour les polygones réguliers (comme _étoile_ ou _hexagone_ par exemple), mais il vous permet de créer n’importe quelle forme en indiquant les points qui la définissent. Des formes constituées de trois ou quatre pointes sont faciles à coder manuellement, mais vous aurez sans doute besoin d’un logiciel de création graphique comme [Adobe Illustrator](http://demosthenes.info/blog/823/SVG-Export-Settings-For-Adobe-Illustrator), Inkscape, Sketch ou Photoshop pour réaliser des designs plus complexes, que vous pourrez [exporter au format SVG](http://webdesign.tutsplus.com/fr/tutorials/understanding-sketchs-export-options--cms-22207). Cependant, il est vraiment utile de comprendre les bases des polygones SVG car cela vous permettra de “bidouiller” et de modifier les formes directement dans le code sans avoir à repasser par l’éditeur graphique.\n\n\u003ch2\u003eLe plus simple des polygones SVG : le triangle\u003c/h2\u003e\n\nCommençons par la plus simple des formes, en utilisant trois points pour créer un triangle rectangle\u0026nbsp;:\n\n    \u003csvg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\n      \u003cpolygon points=\"0 0, 100 100, 0 100\"/\u003e\n    \u003c/svg\u003e\n\nCe qui nous donne :\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003cpolygon points=\"0 0, 100 100, 0 100\"/\u003e\u003c/svg\u003e\u003c/figure\u003e\n\nQuelques petites choses à noter :\n\n- comme [précédemment](/articles/les-bases-de-svg-rectangles-et-carres/), les axes x et y ont leur origine dans le coin supérieur gauche de [la viewBox](/articles/comprendre-svg-viewbox/)\u0026nbsp;: X est l’axe horizontal, la valeur de x augmente lorsque le point se déplace vers la droite, et Y est l’axe vertical, la valeur de y augmente lorsque le point se déplace vers le bas.\n- les points constituant le polygone sont définis comme des paires de coordonnées x et y.\n- ces coordonnées sont séparées par une virgule.\n- il n’y a pas de direction requise dans l’ordre des points\u0026nbsp;: vous pouvez commencer par n’importe quel point et continuer dans la direction que vous voulez. Dans l’exemple qui précède, le point “sommet” du polygone est défini le premier, suivi des deux autres dans le sens des aiguilles d’une montre —\u0026nbsp;on aurait tout aussi bien pu commencer par le point inférieur gauche et continuer ensuite dans le sens inverse des aiguilles d’une montre.\n- il est inutile de répéter le premier point à la fin, SVG sait comment fermer le polygone tout seul comme un grand.\n- on peut appliquer `stroke`, `fill` et `stroke-width` aux polygones, comme nous l’avions fait pour les cercles, ellipses, rectangles et carrés.\n\nEt si nous voulions créer un triangle équilatéral\u0026nbsp;? il suffit pour cela de repositionner un seul point\u0026nbsp;:\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\n      \u003cpolygon points=\"50 15, 100 100, 0 100\"/\u003e\n    \u003c/svg\u003e\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\u003cpolygon points=\"50 15, 100 100, 0 100\"/\u003e\u003c/svg\u003e\u003c/figure\u003e\n\n\u003ch2\u003eLe problème du remplissage croisé\u003c/h2\u003e\n\nAvec trois points reliés par des lignes droites, il est impossible d’avoir des intersections. Mais à partir de quatre points, c’est parfaitement possible\u0026nbsp;:\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\n      \u003cpolygon points=\"0 20, 100 20, 100 0, 0 100 \"/\u003e\n    \u003c/svg\u003e\n\nSVG (comme la plupart des logiciels de création graphique) ne voit pas d’inconvénient à retourner ce résultat —\u0026nbsp;qui n’est peut-être pas celui que vous attendiez\u0026nbsp;:\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\u003cpolygon points=\"0 20, 100 20, 100 0, 0 100 \"/\u003e\u003c/svg\u003e\u003c/figure\u003e\n\nSelon ce que vous voulez obtenir, il vous faudra peut-être repositionner le troisième point ou en ajouter un cinquième de manière à régler le problème.\n\n\u003ch2\u003eUne petite bibliothèque de polygones réguliers\u003c/h2\u003e\n\nMême s’il est probable que vous créerez vos éléments SVG à l’aide d’un outil graphique, il est utile de voir la manière dont est construit le code des polygones réguliers. Vous pouvez bien évidemment copier ce code et l’utiliser dans vos créations, chaque polygone tient à l’intérieur d’une viewBox de 100\u0026nbsp;\u0026times;\u0026nbsp;100.\n\n### Pentagone\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\u003cpolygon points=\"26,86 11.2,40.4 50,12.2 88.8,40.4 74,86 \" fill=\"hsl(56,80%,50%)\"/\u003e\u003c/svg\u003e\u003c/figure\u003e\n\n    \u003cpolygon points=\"26,86 11.2,40.4 50,12.2 88.8,40.4 74,86 \" fill=\"hsl(56,80%,50%)\"/\u003e\n\n### Étoile\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\u003cpolygon points=\"50,9 60.5,39.5 92.7,40.1 67,59.5 76.4,90.3 50,71.9 23.6,90.3 32.9,59.5 7.2,40.1 39.4,39.5\" fill=\"hsl(106,80%,50%)\"/\u003e\u003c/svg\u003e\u003c/figure\u003e\n\n    \u003cpolygon points=\"50,9 60.5,39.5 92.7,40.1 67,59.5 76.4,90.3 50,71.9 23.6,90.3 32.9,59.5 7.2,40.1 39.4,39.5\" fill=\"hsl(106,80%,50%)\"/\u003e\n\n## Hexagone\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\u003cpolygon points=\"30.1,84.5 10.2,50 30.1,15.5 69.9,15.5 89.8,50 69.9,84.5\" fill=\"hsl(156,80%,50%)\"/\u003e\u003c/svg\u003e\u003c/figure\u003e\n\n    \u003cpolygon points=\"30.1,84.5 10.2,50 30.1,15.5 69.9,15.5 89.8,50 69.9,84.5\" fill=\"hsl(156,80%,50%)\"/\u003e\n\n## Octogone\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"\u003e\u003cpolygon points=\"34.2,87.4 12.3,65.5 12.3,34.5 34.2,12.6 65.2,12.6 87.1,34.5 87.1,65.5 65.2,87.4\" fill=\"hsl(216,80%,50%)\"/\u003e\u003c/svg\u003e\u003c/figure\u003e\n\n    \u003cpolygon points=\"34.2,87.4 12.3,65.5 12.3,34.5 34.2,12.6 65.2,12.6 87.1,34.5 87.1,65.5 65.2,87.4\" fill=\"hsl(216,80%,50%)\"/\u003e\n\nEt voilà ! Maintenant que nous avons passé en revue les formes de base, nous allons revenir aux lignes dans notre prochain article, en nous intéressant plus précisément aux lignes SVG, aux lignes multiples et aux chemins.\n"},{"slug":"lajustement-optique","title":"L'ajustement optique","author":{"name":"Luke Jones","lastname":"Jones"},"original":{"date":"20 mai 2015","site":"Medium","siteUrl":"https://medium.com/","postUrl":"","copyright":"2015"},"dateCascade":"31 mai 2015\"","dateMachine":"2O150531","tags":["design","typographie"],"about":[],"excerpt":"Les designers ne doivent pas compter sur les seuls logiciels pour faire le travail d'ajustement, mais également sur leurs yeux et leur instinct. Preuves à l'appui.","featured":false,"featuredImage":"/images/play-icon-compressor.jpeg","order":null,"content":"\n## Logique vs Design\n\nQuand j’étais tout jeune designer, je faisais confiance à Photoshop ou CSS pour me dire si quelque chose n’allait pas. Si Photoshop indiquait que deux formes étaient alignées, alors elles étaient alignées. Si elles avaient les mêmes dimensions, idem, et si deux couleurs avaient les mêmes valeurs hexadécimales, alors elles avaient le même rendu couleur.\n\nCette approche était logique, pourtant elle est incorrecte.\n\nLes calculs de nos applications sont évidemment exacts, mais les softwares ne peuvent pas percevoir les formes, les couleurs, les dimensions de la même façon que les êtres humains —\u0026nbsp;ils ne peuvent pas comprendre le _contexte_ d’un objet en relation à d’autres, ou le contexte d’un langage visuel.\n\nL’esprit humain juge et décide en fonction d’un contexte. Comprendre ces différences subtiles et savoir ajuster notre travail en fonction nous permet d’améliorer notre design —\u0026nbsp;peu de gens le verront, mais par contre beaucoup s’en rendront compte si nous n’y avons pas fait suffisamment attention.\n\nVoyons quelques exemples pratiques.\n\n\u003ch2\u003eAlignement et poids visuel\u003c/h2\u003e\n\nLes ordinateurs ne peuvent savoir où se situe le poids d’un objet, ils ne connaissent que la largeur, la hauteur ou les positions x \u0026 y. Notre travail de designer est de compenser cela par ce qu’on appelle l’ajustement optique.\n\nDans une icône _Play_, le triangle est centré dans le cercle, n’est-ce pas\u0026nbsp;? Eh bien non, si l’on trace un rectangle sur le triangle, on s’aperçoit qu’il est excentré.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/play-icon-compressor.jpeg\" width=\"900\" height=\"506\" alt=\"\"/\u003e\u003cfigcaption\u003eL’icône de gauche apparaît centrée, alors qu’en réalité on l’a décalée vers la droite.\u003c/figcaption\u003e\u003c/figure\u003e\n\nÀ gauche, l’icône n’a pas l’air excentrée, et pourtant elle l’est (et _pas qu’un peu_…), pourquoi\u0026nbsp;? À cause du poids visuel. Le poids ou la masse du triangle se situe dans sa partie gauche, ce qui crée une illusion d’optique le tirant vers la gauche (comme on le voit dans le triangle “mathématiquement correct” à droite).\n\nPour résoudre ce problème, nous devons déplacer le triangle vers la droite jusqu’à ce qu’il ait _l'air_ centré.\n\n\u003ch2\u003eLa couleur\u003c/h2\u003e\n\nLes ajustements optiques de couleurs sont plus subtils. Là encore, il s’agit du poids de l’objet et de la quantité de couleur qui apparaît.\n\nEn résumé : le même vert, selon qu’il est utilisé pour un texte ou pour un remplissage d’icône, paraîtra plus ou moins clair.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/heart-recommend-compressor.jpeg\" width=\"900\" height=\"506\" alt=\"\"/\u003e\u003cfigcaption\u003eLa combinaison de gauche utilise la même valeur hexadécimale, celle de droite est ajustée en augmentant la quantité de noir dans le texte.\u003c/figcaption\u003e\u003c/figure\u003e\n\nC’est subtil, mais vous pouvez observer que l’icône est plus “lourde” que le texte et que ce dernier semble d’un vert plus clair. Pour ajuster les deux, il convient soit d’éclaircir l’icône, soit d’assombrir le texte -\u0026nbsp;le mieux étant de choisir la couleur qui respectera les critères d’accessibilité. Je recommande d’utiliser les valeurs de couleurs HSB (Photoshop, Sketch ou HSL (CSS) dans vos applications de design. Parmi tous leurs avantages, la possibilité d’ajuster facilement la valeur “B” ou “L” (luminosité).\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : [Dudley Storey](/auteurs/dudley-storey) a écrit deux articles instructifs sur HSL, dont “[3 raisons d’utiliser HSL pour vos couleurs](/3-raisons-dutiliser-hsl-pour-vos-couleurs/)”_.\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/heart-recommend-2-compressor.jpeg\" width=\"900\" height=\"481\" alt=\"\"/\u003e\u003cfigcaption\u003eL’ajustement se fait à vue, simplement en modifiant la valeur de “B”.\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch2\u003eL’échelle\u003c/h2\u003e\n\nPar échelle, on entend la façon dont notre cerveau perçoit la taille des objects, texte y compris. Si nous traduisons cela en termes de cercles et de carrés, un carré de 120\u0026nbsp;\u0026times;\u0026nbsp;120\u0026nbsp;pixels a une surface supérieure à celle d’un cercle de diamètre égal à 120\u0026nbsp;pixels, le cercle doit donc être légèrement plus grand pour pouvoir compenser.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/cercle-and-rectangle.jpeg\" width=\"900\" height=\"506\" alt=\"\"/\u003e\u003cfigcaption\u003eÀ gauche, les deux formes ont des dimensions de 120px, à droite le cercle a un diamètre de 126px.\u003c/figcaption\u003e\u003c/figure\u003e\n\nComme pour les autres ajustements, on fait dans la subtilité, mais ces modifications aident vraiment votre design à avoir l’air _juste_. C’est souvent un réglage fin d’éléments —\u0026nbsp;comme de modifier des valeurs un pixel à la fois jusqu’à parvenir au bon _feeling_.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/x-height-revealed-compressor.jpeg\" width=\"900\" height=\"506\" alt=\"\"/\u003e\u003cfigcaption\u003eLe haut et le bas des formes incurvées de Didot dépassent la hauteur d’x et la ligne de base.\u003c/figcaption\u003e\u003c/figure\u003e\n\nC’est également vrai pour la typographie, avec les dépassements (_overshoots_) des lettres arrondies (\u003ci\u003eNdT : Tobias Frere-Jones a écrit deux superbes articles à ce sujet, [Mécanique des polices de caractères, 1](/fonctionnement-des-polices-de-caracteres-1/) et [Mécanique des polices de caractères, 2](/mecanique-des-polices-de-caracteres-2-2/)\u003c/i\u003e). Si vous écrivez un texte en [Garamond](http://fr.wikipedia.org/wiki/Garamond_%28police_d%27%C3%A9criture%29) et que vous représentez la [ligne de base](http://fr.wikipedia.org/wiki/Ligne_de_base_%28typographie%29) et la [hauteur d’x](http://fr.wikipedia.org/wiki/Hauteur_d%27x) du texte, vous verrez les dépassements des formes arrondies. Sans eux, les caractères donneraient l’impression d’être plus petits que leurs voisins.\n\n\u003ch2\u003eLettres capitales\u003c/h2\u003e\n\nUn dernier exemple rapide d’ajustement optique nécessaire\u0026nbsp;: lorsqu’un texte en lettres capitales est placé à côté d’un texte en bas-de-casse. Le premier est proéminent et doit être ajusté pour équilibrer l’ensemble.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/upper-case-compressor.jpeg\" width=\"900\" height=\"506\" alt=\"\"/\u003e\u003cfigcaption\u003eDans l’exemple du bas, le texte en capitales a été ajusté de 2px pour donner l’impression qu’il a la même taille.\u003c/figcaption\u003e\u003c/figure\u003e\n\nSauf si l’objectif de ce design est précisément de donner plus d’importance au texte en lettres capitales, celui-ci doit toujours être réduit de quelques pixels, par exemple en passant de 16 à 14 pixels ou de 12 à 11 pixels.\n\nLorsqu’on travaille sur une interface importante, chacun de ces petits détails s’accumule et affecte la sensation générale qui se dégage du site.\n\nUne fois que vous l’aurez intégré à votre workflow, réduire un texte de 2 pixels ou déplacer un triangle de 10 pixels ne prendra que quelques instants, mais c’est ce qui rendra votre design proche de la perfection.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/eye-compressor.jpeg\" width=\"900\" height=\"506\" alt=\"un oeil\"/\u003e\u003c/figure\u003e\n\nNous ne devons pas compter sur les seuls ordinateurs pour faire tout le travail pour nous, mais également sur nos yeux et notre instinct. Le regard des designers est plus aigu, leur instinct plus aiguisé à mesure qu’ils gagnent en expérience, c’est sur eux que doivent s’appuyer nos décisions.\n"},{"slug":"astuces-css-avec-checkbox","title":"Astuces CSS avec checkbox","author":{"name":"Will Boyd","lastname":"Boyd"},"original":{"date":"16 juin 2015","site":"Codersblock","siteUrl":"https://codersblock.com/","postUrl":"https://codersblock.com/blog/checkbox-trickery-with-css/","copyright":"2015"},"dateCascade":"28 juin 2015","dateMachine":"2O150528","tags":["css","html","flexbox","pseudo-classes","pseudo-elements"],"about":["Combinators","Checkbox"],"excerpt":"C'est incroyable ce qu'on peut faire avec un élément aussi modeste que les cases à cocher... du moins lorsqu'on s'appelle Will Boyd et qu'on a de la créativité à revendre !","featured":false,"featuredImage":"/images/authors/will-boyd.webp","order":null,"content":"\nLes checkboxes (cases à cocher) sont épatantes, surtout quand vous les combinez avec un CSS astucieux. Cet article vise à montrer quelques petites choses créatives qu’on peut réaliser avec les checkboxes, et _sans JavaScript_.\n\n\u003ch2\u003eLa formule de base\u003c/h2\u003e\n\nTout commence avec un peu de HTML :\n\n    //HTML\n    \u003cinput id=\"toggle\" type=\"checkbox\"\u003e\n    \u003clabel for=\"toggle\"\u003e\n\nRien de bien spécial ici. L’attribut `for` sur le `\u003clabel\u003e` correspond à l’`id` qu’on retrouve sur `\u003cinput\u003e`, par conséquent lorsqu’on clique sur `\u003clabel\u003e` on bascule l’état de la case à cocher `\u003cinput\u003e`. C’est important parce que la prochaine étape va consister à cacher la case `\u003cinput\u003e`.\n\n    //CSS\n    input {\n      position: absolute;\n      left: -9999px;\n    }\n\nPourquoi ne pas utiliser `display: none`\u0026nbsp;? Parce qu’il serait ignoré par les lecteurs d’écran et la navigation par tabulation. La méthode de décalage de la position permet de garder `\u003cinput\u003e` dans le circuit, mais hors écran.\n\nCacher `\u003cinput\u003e` nous facilite le travail. Nous devons toutefois transmettre l’état coché/non coché, ce que nous pouvons faire avec `\u003clabel\u003e`. Et c’est ici qu’on commence à s’amuser.\n\n    //CSS\n    input:checked + label {\n      /* nos styles */\n    }\n\nNous utilisons un mélange de [pseudo-classe :checked](https://developer.mozilla.org/fr/docs/Web/CSS/:checked) et de [combinateur adjacent](/articles/combinateurs-et-pseudo-classes-css/#combinateur-adjacent) (_adjacent sibling_) pour dire ceci\u0026nbsp;: “quand la checkbox est cochée (_checked_), trouver le `\u003clabel\u003e` immédiatement consécutif et appliquer nos styles”. Vous pouvez même utiliser des pseudo-éléments ([:before et :after](/articles/les-pseudo-elements-css-before-et-after/)) à l’intérieur de `\u003clabel\u003e` pour plus de créativité encore.\n\n    //CSS\n    input:checked + label::before {\n      /* styles pour un indicateur \"on\" */\n    }\n\nTrès bien. Voyons tout cela en action. Cette démo utilise la formule basique dont nous venons de parler pour transformer les cases à cocher habituelles en quelque chose de plus impressionnant.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_RPZZPe\" src=\"//codepen.io/lonekorean/embed/RPZZPe?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=RPZZPe\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/RPZZPe/\"\u003e\n  Checkbox Trickery: Simple Toggle\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nRemarquez que ce qu’il y a de bien, c’est que ça reste des checkboxes. Utilisez-les dans un formulaire et elles le soumettront exactement comme il faut\u0026nbsp;: nous avons modifié leur apparence, pas leur comportement.\n\n\u003ch2 class=\"softTitleBlue\"\u003eCacher et montrer du contenu\u003c/h2\u003e\n\nJusqu’ici, nous avons simplement appliqué quelques styles à `\u003clabel\u003e` mais nous pouvons aller plus loin que cela. Cette démo cache et révèle dynamiquement des sections du formulaire en fonction des choix de l’utilisateur.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_NqvvGK\" src=\"//codepen.io/lonekorean/embed/NqvvGK?height=640\u0026amp;theme-id=light\u0026amp;slug-hash=NqvvGK\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"640\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/NqvvGK/\"\u003e\n  Checkbox Trickery: Form Disclosure\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa pseudo-classe `:checked` fonctionne avec les boutons radio de la même façon qu’avec les cases à cocher. Voici le code HTML correspondant aux boutons radio “Comment avez-vous entendu parler de nous\u0026nbsp;?” (_How did you hear about us?_)\u0026nbsp;:\n\n    //HTML\n    \u003cinput id=\"how-friend\" name=\"how\" type=\"radio\"\u003e\n    \u003clabel for=\"how-friend\" class=\"side-label\"\u003eFrom a friend\u003c/label\u003e\n\n    \u003cinput id=\"how-internet\" name=\"how\" type=\"radio\"\u003e\n    \u003clabel for=\"how-internet\" class=\"side-label\"\u003eSomewhere on the internet\u003c/label\u003e\n\n    \u003cinput id=\"how-other\" name=\"how\" type=\"radio\"\u003e\n    \u003clabel for=\"how-other\" class=\"side-label\"\u003eOther...\u003c/label\u003e\n\n    \u003cdiv class=\"how-other-disclosure\"\u003e\n      \u003clabel for=\"how-other-explain\" class=\"top-label\"\u003ePlease explain\u003c/label\u003e\n      \u003ctextarea id=\"how-other-explain\"\u003e\u003c/textarea\u003e\n    \u003c/div\u003e\n\nLe style des boutons radio est réalisé dans `\u003clabel\u003e` via une combinaison de `:before` (pour le cercle externe) et `:after` (pour le point vert). Révéler ou cacher `:after` lorsqu’un bouton radio est coché ou décoché est très facile\u0026nbsp;:\n\n    //CSS\n    .side-label::after {\n      display: none;\n\n      /* autres styles */\n    }\n\n    input:checked + .side-label::after {\n      display: block;\n    }\n\nLa `\u003cdiv\u003e` est cachée jusqu’à ce que le bouton radio “Other...” soit coché. Cette fois-ci, la `\u003cdiv\u003e` est cachée via `display: none` car je veux que le contenu soit ignoré par les lecteurs d’écran jusqu’à ce qu’il soit effectivement révélé. Le CSS permettant de révéler le contenu de la `\u003cdiv\u003e` lorsque le bouton radio est coché est le suivant\u0026nbsp;:\n\n    //CSS\n    #how-other:checked ~ .how-other-disclosure {\n      display: block;\n    }\n\nJusqu’à présent, nous avons utilisé le combinateur adjacent `+` (plus), mais il est temps d’introduire [le combinateur général](https://la-cascade.io/combinateurs-et-pseudo-classes-css/#combinateur-general) `~` (tilde). Il fonctionne un peu de la même manière, mais sur des frères (_siblings_) non adjacents, comme notre `\u003cdiv\u003e`.\n\n\u003ch2\u003eArborescence de dossiers\u003c/h2\u003e\n\nNous pouvons réutiliser les techniques de la démo précédente pour créer un widget d’arborescence de dossiers.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eNEEpB\" src=\"//codepen.io/lonekorean/embed/eNEEpB?height=640\u0026amp;theme-id=light\u0026amp;slug-hash=eNEEpB\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"640\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/eNEEpB/\"\u003e\n  Checkbox Trickery: Folder Tree\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLe HTML d’un dossier individuel est donné ci-dessous. Le `\u003clabel\u003e` est le dossier et les deux éléments `\u003ca\u003e` sont les “fichiers” à l’intérieur.\n\n    //HTML\n    \u003cdiv\u003e\n      \u003cinput id=\"n-1\" type=\"checkbox\"\u003e\n      \u003clabel for=\"n-1\"\u003eBlue\u003c/label\u003e\n      \u003cdiv class=\"sub\"\u003e\n        \u003ca href=\"#link\"\u003eMana Leak\u003c/a\u003e\n        \u003ca href=\"#link\"\u003eTime Warp\u003c/a\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n\nDes icônes de [Font Awesome](http://fortawesome.github.io/Font-Awesome/) sont utilisées pour indiquer l’état _checked_ (ouvert) ou _unchecked_ (fermé).\n\n    //CSS\n    label::before, a::before {\n      display: block;\n      position: absolute;\n      top: 6px;\n      left: -25px;\n      font-family: ’FontAwesome’;\n    }\n\n    label::before {\n      content: ’\\f07b’; /* closed folder */\n    }\n\n    input:checked + label::before {\n      content: ’\\f07c’; /* open folder */\n    }\n\n    a::before {\n      content: ’\\f068’; /* dash */\n    }\n\nLe contenu situé à l’intérieur d’un dossier est montré ou caché via le combinateur général `~`. C’est pourquoi on a une `\u003cdiv\u003e` supplémentaire pour envelopper chaque dossier, afin d’éviter que le combinateur ne se propage son effet et n’ouvre les autres dossiers.\n\n    //CSS\n    input:checked ~ .sub {\n      display: block;\n    }\n\nÉvidemment, les dossiers peuvent être imbriqués. Cliquez sur le dossier “Multicolor” pour en voir un exemple.\n\nEnfin, disons un mot sur notre bouton Reset.\n\n    //HTML\n    \u003cinput type=\"reset\" value=\"Collapse All\"\u003e\n\nLes boutons de Reset de formulaires ne sont plus vraiment utilisés de nos jours, mais nous avons ici un bon cas d’usage. Si nous cliquons dessus, toutes les cases à cocher retournent à leur état initial non-coché, ce qui ferme tous les dossiers. Cool\u0026nbsp;!\n\n\u003ch2\u003eListes scindées\u003c/h2\u003e\n\nCette démo partage les items en deux listes distinctes, selon qu’ils sont cochés ou non.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_xGLLwX\" src=\"//codepen.io/lonekorean/embed/xGLLwX?height=660\u0026amp;theme-id=light\u0026amp;slug-hash=xGLLwX\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"660\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/xGLLwX/\"\u003e\n  Checkbox Trickery: To-Do List\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLe HTML ressemble à ceci :\n\n    //HTML\n    \u003cdiv class=\"items\"\u003e\n      \u003cinput id=\"item1\" type=\"checkbox\" checked\u003e\n      \u003clabel for=\"item1\"\u003eCreate a to-do list\u003c/label\u003e\n\n      \u003c!-- more items --\u003e\n\n      \u003ch2 class=\"done\" aria-hidden=\"true\"\u003eDone\u003c/h2\u003e\n      \u003ch2 class=\"undone\" aria-hidden=\"true\"\u003eNot Done\u003c/h2\u003e\n    \u003c/div\u003e\n\nLe mécanisme de séparation des listes est obtenu via [Flexbox](/tags/flexbox/). Voici le CSS correspondant\u0026nbsp;:\n\n    //CSS\n    .items {\n      display: flex;\n      flex-direction: column;\n    }\n\n    .done {\n      order: 1;\n    }\n\n    input:checked + label {\n      order: 2;\n    }\n\n    .undone {\n      order: 3;\n    }\n\n    label {\n      order: 4;\n    }\n\nCSS Flexbox nous permet de réordonner directement les éléments grâce à la propriété `order`. La valeur de la propriété passe de `4` à `2` lorsque la checkbox est cochée, ce qui la déplace de la partie inférieure “Not Done” vers la partie supérieure “Done”.\n\nMalheureusement, la navigation via le clavier ainsi que [de nombreux lecteurs d’écran](http://sprungmarker.de/wp-content/uploads/css-a11y-group/css-a11y-flexbox.html) suivront l’ordre des éléments dans le DOM, même s’ils ont été visuellement réordonnés avec flexbox. Du coup, les titres “Done” et “Not Done” sont sans utilité pour les lecteurs d’écran —\u0026nbsp;c’est pourquoi j’ai ajouté `aria-hidden=\"true\"` pour eux, mieux vaut qu’ils soient ignorés plutôt que de créer de la confusion. À part cela, la liste scindée est opérationnelle via le clavier et les lecteurs d’écran annonceront l’état d’un item (checked/unchecked).\n\nSi vous êtes intrigués par les compteurs à droite de “Done” et “Not Done”, ils sont générés par des [CSS counters](https://developer.mozilla.org/fr/docs/Web/CSS/Compteurs_CSS), voyez [cet article](http://codersblock.com/blog/fun-times-with-css-counters/) pour plus de détails.\n\n\u003ch2\u003eFiltrage de groupes\u003c/h2\u003e\n\nC’est notre dernière démo. Nous allons voir comment mettre en valeur un tri croisé de données correspondant à un critère de sélection.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_YXxxyj\" src=\"//codepen.io/lonekorean/embed/YXxxyj?height=660\u0026amp;theme-id=light\u0026amp;slug-hash=YXxxyj\u0026amp;user=lonekorean\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"660\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/lonekorean/pen/YXxxyj/\"\u003e\n  Checkbox Trickery: Group Filter\u003c/a\u003e de Will Boyd dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVoici le HTML abrégé. Remarquez que l’attribut `data-teams` est une liste d’attributs `id` de boutons radio séparés par un espace. C’est ainsi qu’on fait correspondre les personnages et les équipes.\n\n    //HTML\n    \u003cinput id=\"original\" type=\"radio\" name=\"team\" checked\u003e\n    \u003clabel for=\"original\"\u003eOriginal X-Men\u003c/label\u003e\n\n    \u003c!-- autres équipes ici --\u003e\n\n    \u003cbr\u003e\n    \u003cul class=\"characters\"\u003e\n      \u003cli id=\"angel\" data-teams=\"original force factor hellfire\"\u003e\n        \u003ch2\u003eAngel\u003c/h2\u003e\n        \u003cimg src=\"ct-angel.png\" alt=\"\"\u003e\n      \u003c/li\u003e\n\n      \u003c!-- autres personnages ici --\u003e\n    \u003c/ul\u003e\n\nEn ce qui concerne l’accessibilité, j’utilise des attributs `alt` vides parce que les noms de personnages sont déjà dans les balises `\u003ch2\u003e` —\u0026nbsp;il n’est donc pas nécessaire, ni souhaitable, de les répéter. De plus, puisque je ne cache pas les éléments `\u003cimg\u003e` (ils sont seulement rétrécis et décolorés), cela permet aux lecteurs d’écrans de “sauter” les personnages non sélectionnés, il me suffit de cacher la balise `\u003ch2\u003e`.\n\nVoici le CSS qui fait ressortir les personnages lorsque leur équipe est sélectionnée\u0026nbsp;:\n\n    //CSS\n    #original:checked ~ .characters [data-teams~=\"original\"] h2,\n    #force:checked ~ .characters [data-teams~=\"force\"] h2,\n    #factor:checked ~ .characters [data-teams~=\"factor\"] h2,\n    #hellfire:checked ~ .characters [data-teams~=\"hellfire\"] h2 {\n      /* styles to show character name */\n    }\n\n    #original:checked ~ .characters [data-teams~=\"original\"] img,\n    #force:checked ~ .characters [data-teams~=\"force\"] img,\n    #factor:checked ~ .characters [data-teams~=\"factor\"] img,\n    #hellfire:checked ~ .characters [data-teams~=\"hellfire\"] img {\n      /* styles to show character avatar */\n    }\n\nOk, je reconnais que ces sélecteurs sont un peu touffus, mais en fait ce n’est pas si compliqué. Analysons la ligne 1 par exemple. Si on l’exprime en bon français, ça donne ceci\u0026nbsp;: lorsque l’élément ayant une `id` ‘original’ est coché, chercher le ou les éléments frères (_general sibling_) ayant la classe de ‘personnages’ (_characters_) et contenant un attribut `data-teams` dans lequel se trouve ‘original’, puis aller chercher la balise `\u003ch2\u003e` située à l’intérieur.\nOn répète avec ‘force’, ‘factor’ et ‘hellfire’ dans les lignes 2 à 4. Enfin, on reproduit le schéma dans le second bloc, mais cette fois-ci pour `\u003cimg\u003e` à la place de `\u003ch2\u003e`.\n\n\u003ch3\u003eEn guise de conclusion\u003c/h3\u003e\n\nJ’espère que vous avez eu autant de plaisir à jouer avec ces démos que j’en ai eu à les créer. C’était une expérience très intéressante de voir qu’on pouvait tirer quelque chose d’un élément aussi modeste que les cases à cocher. Je n’ai rien contre l’utilisation de JavaScript, lorsqu’elle est appropriée, mais c’est sympa de voir tout ce qu’on peut accomplir sans JS. Merci d’avoir lu cet article\u0026nbsp;!\n"},{"slug":"les-bases-de-svg-rectangles-et-carres","title":"Les bases de SVG : Rectangles et Carrés","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"25 mai 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1034/SVG-Basics-Rectangles-and-Squares","copyright":"2015"},"dateCascade":"26 mai 2015","dateMachine":"2O150526","tags":["svg"],"about":[],"excerpt":"Dudley Storey reconstitue un célèbre tableau de Mondrian et nous montre chemin faisant tout ce qu'il faut savoir pour créer des rectangles en SVG.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nAprès [les cercles](/articles/les-bases-de-svg-cercles-et-ellipses/), les rectangles sont sans doute l’élément le plus facile à réaliser en [SVG](/tags/svg/) puisqu’il suffit d’ajouter un attribut pour y parvenir. La syntaxe de base consiste en une position x, une position y, une largeur et une hauteur\u0026nbsp;:\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 80 80\"\u003e\n      \u003crect x=\"20\" y=\"20\" width=\"40\" height=\"40\"/\u003e\n    \u003c/svg\u003e\n\nQuelques petites choses à noter tout de suite\u0026nbsp;:\n\n- contrairement aux cercles, les rectangles sont dessinés à partir de leur coin supérieur gauche (déterminé par les coordonnées x et y).\n- comme la plupart des autres éléments, les rectangles sont noirs par défaut si aucun remplissage (_fill_) n’est indiqué.\n- l’élément rectangle est “auto-fermant”\n- comme tous les autres éléments, les rectangles qui apparaissent _après_ dans le code seront positionnés au dessus des éléments qui les précèdent s’il y a chevauchement.\n- malgré l’impression trompeuse que pourrait donner le titre de cet article, il n’existe pas d’élément “carré” distinct du rectangle en SVG. Les carrés sont simplement des rectangles de côtés égaux.\n\n\u003cfigure role=\"group\" class=\"ds-big-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 602 522\"\u003e\u003ctitle\u003eComposition in Color A, 1917, by Piet Mondrian\u003c/title\u003e\u003cg id=\"Reds\" fill=\"#E12432\"\u003e\u003crect x=\"488.5\" y=\"408\" width=\"58.8\" height=\"59.3\"/\u003e\u003crect x=\"364.2\" y=\"218\" width=\"89.8\" height=\"81.3\"/\u003e\u003crect x=\"584\" y=\"147.3\" width=\"18\" height=\"65.7\"/\u003e\u003crect x=\"191.7\" y=\"87.8\" width=\"59.3\" height=\"62.5\"/\u003e\u003crect x=\"82\" y=\"172.3\" width=\"57.3\" height=\"65\"/\u003e\u003crect x=\"278.3\" y=\"306.6\" width=\"63\" height=\"55.1\"/\u003e\u003c/g\u003e\u003cg id=\"Blues\" fill=\"#026BA6\"\u003e\u003crect x=\"288.3\" y=\"42\" width=\"43.7\" height=\"81.7\"/\u003e\u003crect x=\"404.3\" y=\"127\" width=\"68.3\" height=\"71\"/\u003e\u003crect x=\"531\" y=\"248.3\" width=\"53\" height=\"56\"/\u003e\u003crect x=\"464.3\" y=\"378.7\" width=\"48.3\" height=\"49.7\"/\u003e\u003crect x=\"355\" y=\"395.3\" width=\"58.7\" height=\"52.7\"/\u003e\u003crect x=\"382.7\" y=\"487.3\" width=\"55.3\" height=\"34.7\"/\u003e\u003crect x=\"256\" y=\"435.7\" width=\"52.7\" height=\"49.3\"/\u003e\u003crect x=\"193\" y=\"282.7\" width=\"61.3\" height=\"61.3\"/\u003e\u003c/g\u003e\u003cg id=\"Oranges\" fill=\"#C74C26\" \u003e\u003crect x=\"162.7\" y=\"203.3\" width=\"55.7\" height=\"59.7\"/\u003e\u003crect x=\"101.3\" y=\"133.3\" width=\"57.3\" height=\"66.3\"/\u003e\u003crect x=\"310.7\" y=\"119.7\" width=\"61\" height=\"61.3\"/\u003e\u003crect x=\"461.7\" y=\"31.3\" width=\"50.7\" height=\"47.7\"/\u003e\u003crect x=\"451\" y=\"100\" width=\"52.3\" height=\"50.3\"/\u003e\u003crect x=\"469.3\" y=\"269.2\" width=\"74.4\" height=\"74.8\"/\u003e\u003crect x=\"594.7\" y=\"333.7\" width=\"7.4\" height=\"50.7\"/\u003e\u003crect x=\"341.3\" y=\"446.7\" width=\"50.7\" height=\"53\"/\u003e\u003crect x=\"341.3\" y=\"306.6\" width=\"52.2\" height=\"55.1\"/\u003e\u003crect x=\"227.3\" y=\"361.7\" width=\"98.7\" height=\"53.7\"/\u003e\u003crect x=\"39.3\" y=\"295.3\" width=\"57.3\" height=\"59.2\"/\u003e\u003c/g\u003e\u003cg id=\"Blacks\"\u003e\u003crect x=\"82\" y=\"93\" width=\"11\" height=\"21\"/\u003e\u003crect x=\"200.7\" y=\"7.7\" width=\"24\" height=\"10.7\"/\u003e\u003crect x=\"274.7\" y=\"82.7\" width=\"24\" height=\"10.3\"/\u003e\u003crect x=\"294\" y=\"133.3\" width=\"11\" height=\"34\"/\u003e\u003crect x=\"294\" y=\"181\" width=\"25.3\" height=\"11.3\"/\u003e\u003crect x=\"255.3\" y=\"192.3\" width=\"11\" height=\"29.3\"/\u003e\u003crect x=\"371.7\" y=\"13\" width=\"21.7\" height=\"10\"/\u003e\u003crect x=\"349.3\" y=\"106\" width=\"20.7\" height=\"10.3\"/\u003e\u003crect x=\"370\" y=\"201\" width=\"21.3\" height=\"10.3\"/\u003e\u003crect x=\"460\" y=\"190.7\" width=\"22\" height=\"9\"/\u003e\u003crect x=\"507.3\" y=\"96\" width=\"10\" height=\"20.3\"/\u003e\u003crect x=\"568.7\" y=\"153.3\" width=\"10\" height=\"23\"/\u003e\u003crect x=\"521.3\" y=\"263.3\" width=\"19.3\" height=\"11.7\"/\u003e\u003crect x=\"387\" y=\"281.3\" width=\"34.7\" height=\"11\"/\u003e\u003crect x=\"358.3\" y=\"275\" width=\"11.7\" height=\"45\"/\u003e\u003crect x=\"274.3\" y=\"299.3\" width=\"23.7\" height=\"10.3\"/\u003e\u003crect x=\"326\" y=\"361.7\" width=\"21.7\" height=\"12.3\"/\u003e\u003crect x=\"454\" y=\"314.3\" width=\"24.3\" height=\"11.3\"/\u003e\u003crect x=\"509.6\" y=\"338.7\" width=\"10.1\" height=\"16\"/\u003e\u003crect x=\"381.3\" y=\"449.3\" width=\"24.3\" height=\"10\"/\u003e\u003crect x=\"331.7\" y=\"485\" width=\"9.7\" height=\"26\"/\u003e\u003crect x=\"287\" y=\"428.3\" width=\"25\" height=\"10.3\"/\u003e\u003crect x=\"220.7\" y=\"349\" width=\"23.7\" height=\"11\"/\u003e\u003crect x=\"124.3\" y=\"323.7\" width=\"23.3\" height=\"12\"/\u003e\u003crect x=\"130\" y=\"190.7\" width=\"16\" height=\"9\"/\u003e\u003crect x=\"87.3\" y=\"354.5\" width=\"18.7\" height=\"10.5\"/\u003e\u003crect x=\"96.7\" y=\"452.7\" width=\"21\" height=\"9.3\"/\u003e\u003crect x=\"187.3\" y=\"446\" width=\"11.3\" height=\"27.7\"/\u003e\u003crect x=\"17.7\" y=\"230.3\" width=\"11.3\" height=\"27.3\"/\u003e\u003c/g\u003e\u003c/svg\u003e\u003cfigcaption\u003e\u003ca href=\"https://www.pinterest.fr/pin/91268329932353503/\"\u003eComposition en couleur A, 1917\u003c/a\u003e, de Piet Mondrian, reconstituée en SVG\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003ch2\u003eBordures \u0026 Coins\u003c/h2\u003e\n\nComme pour toutes les autres formes en SVG, on peut donner une bordure aux éléments `\u003crect\u003e`, celle-ci étant un trait (_stroke_) dans le langage SVG\u0026nbsp;:\n\n    \u003crect x=\"20\" y=\"20\" width=\"40\" height=\"40\" stroke=\"red\" stroke-width=\"5\" /\u003e\n\nCe qui nous donne\u0026nbsp;:\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 80 80\"\u003e\u003crect x=\"20\" y=\"20\" width=\"40\" height=\"40\" stroke=\"tomato\" stroke-width=\"5\" /\u003e\u003c/svg\u003e\u003c/figure\u003e\n\nEn CSS, on peut utiliser `border-radius` pour arrondir les angles visibles des éléments. Pour les rectangles SVG, on utilise les attributs `rx` et `ry`\u0026nbsp;:\n\n    \u003crect x=\"20\" y=\"20\" width=\"40\" height=\"40\" stroke=\"red\" stroke-width =\"5\" rx=\"5\" ry=\"5\" /\u003e\n\nLe résultat :\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 80 80\"\u003e\u003crect x=\"20\" y=\"20\" width=\"40\" height=\"40\" stroke=\"tomato\" stroke-width =\"5\" rx=\"5\" ry=\"5\" /\u003e\u003c/svg\u003e\u003c/figure\u003e\n\nCependant, contrairement à `border-radius`, `rx` et `ry` affectent simultanément et de manière égale tous les coins de l’élément —\u0026nbsp;pas moyen de n’arrondir qu’un seul angle à la fois. On peut donner des valeurs différentes aux attributs `rx` et `ry` pour créer des effets spéciaux, par exemple pour donner une forme de de tonneau\u0026nbsp;:\n\n\u003cfigure role=\"group\" class=\"ds-small-svg\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 80 80\"\u003e\u003crect x=\"20\" y=\"20\" width=\"40\" height=\"40\" stroke=\"tomato\" stroke-width =\"5\" rx=\"5\" ry=\"15\" /\u003e\u003c/svg\u003e\u003c/figure\u003e\n\n…mais la plupart du temps on donnera la même valeur aux deux attributs, et dans ce cas il existe un raccourci, il suffit d’indiquer uniquement `rx`\u0026nbsp;:\n\n    \u003crect x=\"20\" y=\"20\" width=\"40\" height=\"40\" rx=\"5\" /\u003e\n\nNote : `rx` et `ry` sont considérés comme des attributs _réguliers_, et non comme des attributs _de présentation_, par conséquent on ne peut pas les utiliser actuellement en CSS, pas plus d’ailleurs qu’on ne peut utiliser `border-radius` sur les éléments SVG (mais on peut l’utiliser sur l’élément SVG lui-même, comme on peut le voir sur le Mondrian ci-dessus).\n\n\u003ch2 class=\"softTitleBlue\"\u003eLe plus grand rectangle : styler le viewport\u003c/h2\u003e\n\nDans la plupart des éditeurs, le background d’un SVG apparaît blanc. En fait ce n’est pas le cas\u0026nbsp;: il est transparent, son canal alpha est masqué, ce qui signifie que son rendu sera parfait lorsqu’on le placera comme image ou élément en ligne sur n’importe quel background de page HTML.\n\nLa première solution qui vient à l’esprit lorsqu’on a besoin d’un “canevas” de couleur différente dans un SVG est de dessiner un énorme rectangle qui couvre tout le viewport SVG. Mais en général c’est plutôt une mauvaise idée\u0026nbsp;: non seulement cela ajoute un élément supplémentaire à la page, mais en plus cela complique le rendu de la page. À la place, il suffit d’appliquer un style à l’élément SVG lui-même, comme sur notre reproduction de Mondrian.\n\n    svg { background: #fcedd6; }\n\nIl est même possible de placer un `border-radius` sur l’élément SVG, comme je l’ai fait dans [l’exemple de bouclier de Captain America](http://codepen.io/dudleystorey/pen/ZGOKLJ), créé pour l’article sur les cercles. C’est pratique si, par exemple, vous voulez donner une impression d’ombre portée sur le SVG entier.\n\nRetrouvez [le code du tableau de Mondrian sur CodePen](http://codepen.io/dudleystorey/pen/MwbYaL)\u0026nbsp;!\n\n_La recréation de l'oeuvre de [Piet Mondrian](http://fr.wikipedia.org/wiki/Piet_Mondrian) est en partie inspirée du travail de [Jenn Schiffer](http://jennmoney.biz/), qui a écrit une excellente série d'articles sur [la recréation d'oeuvres d'art au moyen des technologies du web](http://vart.institute/)_.\n"},{"slug":"les-bases-de-svg-cercles-et-ellipses","title":"Les bases de SVG : Cercles et ellipses","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"24 mai 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1031/SVG-Basics-Circles-and-Ellipses","copyright":"2015"},"dateCascade":"25 mai 2015","dateMachine":"2O150525","tags":["svg"],"about":[],"excerpt":"Même lorsqu’on utilise un logiciel de création graphique pour créer des SVG, la connaissance de la syntaxe permet de créer plus rapidement et efficacement des formes simples.","featured":true,"featuredImage":"/images/authors/dudley-storey.jpg","order":55,"content":"\nMême si la plupart des designers utilisent un logiciel de création graphique du type Adobe Illustrator ou Sketch pour créer des formes en \u003cspan itemprop=\"about\" itemscope itemtype=\"https://schema.org/Thing\"\u003e\u003clink itemprop=\"url\" href=\"http://fr.wikipedia.org/wiki/Scalable_Vector_Graphics\"/\u003e\u003cspan itemprop=\"name\"\u003e[SVG](/tags/svg/)\u003c/span\u003e\u003c/span\u003e, le fait de connaître la syntaxe de base de SVG permet de créer plus facilement et plus précisément des éléments tels que lignes, cercles et rectangles —\u0026nbsp;et parfois, encoder ces éléments à la main est plus rapide et plus efficace qu’un éditeur visuel.\n\n\u003ch2\u003eCercles\u003c/h2\u003e\n\nRegardons par exemple le tracé basique d’un cercle. Pour faire simple, je laisserai pour un prochain article les complications des unités et de leurs variations.\n\nVous pourriez écrire ce code à l’intérieur d’une balise `\u003cbody\u003e` sur une page HTML, ou bien comme un document séparé, enregistré avec l’extension .svg —\u0026nbsp;dans les deux cas le résultat serait visible dans un navigateur.\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\" width=\"200\" height=\"200\"\u003e\n      \u003ccircle cx=\"100\" cy=\"100\" r=\"80\" fill=\"red\" /\u003e\n    \u003c/svg\u003e\n\n…et le résultat est le suivant :\n\n\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\" width=\"200\" height=\"200\"\u003e\u003ccircle cx=\"100\" cy=\"100\" r=\"80\" fill=\"tomato\" /\u003e\u003c/svg\u003e\n\nQuelques points à noter à ce stade :\n\n1. L’élément `circle` doit être “auto-fermant”\n2. Le cercle est positionné à partir de son centre (cx pour “centre, axe des x”, cy pour “centre, axe des y”)\n3. La position du centre du cercle est mesurée à partir du coin supérieur gauche de l’élément SVG\n4. Le rayon (r) du cercle est, par défaut, mesuré dans la même unité que le reste\n5. Si l’un de ces attributs n’est pas mentionné, il est supposé être égal à 0 (et noir pour les attributs de présentation impliquant la couleur)\n6. le remplissage (_fill_) du cercle peut être spécifié via [le système de couleur CSS](/tags/couleur/) que vous préférez.\n\nComme les rectangles et les autres éléments SVG, un cercle SVG est constitué de deux “parties”, un remplissage interne et un tracé (_stroke_) externe.\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\" width=\"200\" height=\"200\"\u003e\n      \u003ccircle cx=\"100\" cy=\"100\" r=\"80\" fill=\"red\" stroke-width=\"15\" stroke=\"black\" /\u003e\n    \u003c/svg\u003e\n\nLe code du cercle est un peu long et compliqué\u0026nbsp;: nettoyons-le avec un sélecteur de classe\u0026nbsp;:\n\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\"\u003e\n      \u003ccircle cx=\"100\" cy=\"100\" r=\"80\" class=\"redcirc\" /\u003e\n    \u003c/svg\u003e\n\n…et utilisons ce CSS :\n\n    //CSS\n    svg {\n      width: 200; height: 200;\n    }\n    .redcirc {\n      fill: red;\n      stroke: black;\n      stroke-width: 15;\n    }\n\nLe résultat est le même que dans la version précédente\u0026nbsp;:\n\n\u003cdiv class=\"ds-svg-circles\"\u003e\u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\"\u003e\u003ccircle cx=\"100\" cy=\"100\" r=\"50\" class=\"redcirc\" /\u003e\u003c/svg\u003e\u003c/div\u003e\n\nNotes :\n\n- Cela ne signifie pas que vous ayez tout d’un coup la possibilité d’appliquer `fill` aux éléments HTML. `fill`, `stroke` et `stroke-width` ne s’appliquent qu’aux éléments SVG. La plupart des attributs de présentation SVG ont un équivalent en propriété CSS, mais pas tous.\n- Si vous écrivez votre SVG dans le contexte d’une page HTML, la classe `.redcirc` peut se trouver dans la partie `\u003chead\u003e` de votre document ou dans une feuille de style externe.\n- La largeur du trait (_stroke-width_) est répartie de façon égale des deux côtés du contour de l’élément.\n\nUne fois que nous avons ceci, il est très facile de commencer à créer des tracés plus complexes. Je pense que vous voyez déjà où nous allons en venir\u0026nbsp;:\n\n    \u003csvg viewBox=\"0 0 500 500\"\u003e\n      \u003ctitle\u003eCaptain America’s Shield\u003c/title\u003e\n      \u003ccircle cx=\"250\" cy=\"250\" r=\"250\" fill=\"red\" /\u003e\n      \u003ccircle cx=\"250\" cy=\"250\" r=\"200\" fill=\"white\" /\u003e\n      \u003ccircle cx=\"250\" cy=\"250\" r=\"150\" fill=\"red\" /\u003e\n      \u003ccircle cx=\"250\" cy=\"250\" r=\"50\" fill=\"blue\" /\u003e\n      \u003cpolygon fill=\"white\" points=\"250,150 280,209 346,219 298,265 309,330 250,300 192,330 203,265 155,219 221,209\" /\u003e\n    \u003c/svg\u003e\n\nRemarquez que les éléments SVG s’empilent [comme les éléments HTML](http://demosthenes.info/blog/136/Stacking-order-and-z-index).\n\nCependant, nous pouvons être plus malins ! D’une manière générale, moins il y a d’éléments dans un document SVG et mieux on se porte, donc nous pouvons simuler des sections du bouclier en utilisant `stroke` et seulement deux cercles\u0026nbsp;:\n\n    \u003csvg viewBox=\"0 0 500 500\"\u003e\n      \u003ctitle\u003eCaptain America’s Shield\u003c/title\u003e\n      \u003ccircle cx=\"250\" cy=\"250\" r=\"220\" fill=\"white\" /\u003e\n      \u003ccircle cx=\"250\" cy=\"250\" r=\"125\" fill=\"blue\" /\u003e\n      \u003cpolygon fill=\"white\" points=\"250,150 280,209 346,219 298,265 309,330 250,300 192,330 203,265 155,219 221,209\" /\u003e\n    \u003c/svg\u003e\n\ncombinés avec ce CSS :\n\n    //CSS\n    circle {\n      stroke-width: 50;\n      stroke: red;\n    }\n\n\u003cdiv class=\"ds-svg-shield\"\u003e\u003cdiv class=\"ds-svg-container\"\u003e\u003csvg viewBox=\"0 0 500 500\" preserveAspectRatio=\"xMinYMin meet\"\u003e\u003ctitle\u003eCaptain America’s Shield\u003c/title\u003e\u003ccircle cx=\"250\" cy=\"250\" r=\"220\" fill=\"white\" /\u003e\u003ccircle cx=\"250\" cy=\"250\" r=\"125\" fill=\"blue\" /\u003e\u003cpolygon fill=\"white\" points=\"250,150 280,209 346,219 298,265 309,330 250,300 192,330 203,265 155,219 221,209 \" /\u003e\u003c/svg\u003e\u003c/div\u003e\u003c/div\u003e\n\nLe résultat est le même que l’original. [La version complète](http://codepen.io/dudleystorey/pen/ZGOKLJ) (ci-dessus) utilise également une variation intéressante de [flexbox](/tags/flexbox/) et de `box-shadow` pour positionner et ombrer le bouclier.\n\n\u003ch2\u003eEllipses\u003c/h2\u003e\n\nLa syntaxe de l’ellipse est proche de celle du cercle\u0026nbsp;:\n\n    \u003csvg viewBox=\"0 0 120 120\"\u003e\n      \u003cellipse cx=\"60\" cy=\"60\" rx=\"60\" ry=\"30\"/\u003e\n    \u003c/svg\u003e\n\nIci, nous avons deux rayons représentant [le demi-grand-axe (_semi-major_) et le demi-petit-axe (_semi-minor_)](http://en.wikipedia.org/wiki/Semi-major_axis) de l’ellipse.\n\nUn trait utile des cercles et des ellipses (et des formes SVG en général) écrites en ligne dans une page est que, contrairement aux éléments HTML, leur “zone active” correspond exactement à leur forme. Donc si nous insérons un lien dans notre ellipse\u0026nbsp;:\n\n    \u003csvg viewBox=\"0 0 120 120\"\u003e\n      \u003ca xlink:href=\"http://www.cnn.com\"\u003e\n        \u003cellipse cx=\"60\" cy=\"60\" rx=\"50\" ry=\"25\" /\u003e\n      \u003c/a\u003e\n    \u003c/svg\u003e\n\net que nous combinons ceci avec ce CSS\u0026nbsp;:\n\n    //CSS\n    ellipse:hover { fill: red; }\n\nnous obtenons exactement ceci : remarquez la réponse précise en fonction de la position de la souris.\n\n\u003cdiv class=\"sd-ellipse\"\u003e\u003csvg viewBox=\"0 0 120 120\"\u003e\u003ca xlink:href=\"http://www.cnn.com\"\u003e\u003cellipse cx=\"60\" cy=\"60\" rx=\"50\" ry=\"25\" /\u003e\u003c/a\u003e\u003c/svg\u003e\u003c/div\u003e\n\nIl est possible de reproduire cette forme en HTML via `border-radius` sur un élément, mais le défi devient insurmontable dès lors que les formes de boutons sont plus compliquées —\u0026nbsp;et c’est l’une des raisons qui font de SVG un excellent format pour les éléments d’interface utilisateur.\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/dudleystorey/pen/ZGOKLJ\"\u003eLe bouclier de Captain America\u003c/a\u003e de dudleystorey dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n"},{"slug":"comprendre-clip-path","title":"Comprendre Clip Path","author":{"name":"Andrew Minns","lastname":"Minns"},"original":{"date":"14 avril 2015","site":"Medium","siteUrl":"https://medium.com/","postUrl":"https://medium.com/@drewisthe/using-making-sense-of-clip-path-cf651676438c","copyright":"2015"},"dateCascade":"09 mai 2015","dateMachine":"2O150509","tags":["css","animation","design"],"about":["Clip Path"],"excerpt":"La propriété clip-path de CSS est un super outil pour réaliser des effets de style","featured":false,"featuredImage":"/images/ville-compressor.jpeg","order":null,"content":"\nCe qui est bien quand on enseigne, c’est que les étudiants arrivent toujours avec de nouvelles idées. L’un d’eux voulait reproduire un effet observé sur [Squarespace](http://www.squarespace.com/about/values), où une `div` semble entaillée\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/navigation-compressor.jpeg\" width=\"800\" height=\"100\" alt=\"navigation, l’onglet sélectionné semble porter une entaille\"/\u003e\u003c/figure\u003e\n\nSachant que son niveau lui permettait de comprendre les HTML et CSS du site, je me suis lancé avec elle dans la réalisation de cet effet. Ce découpage de la `nav` n’est pas si facile, ma première idée était de créer une image aux dimensions de l’entaille et de l’intégrer avec `::after`, mais ce n’est pas très responsif et pas aisé à gérer.\n\n## Clip Path entre en scène\n\nLa propriété CSS clip-path permet de cacher des portions d’un élément via le masquage (_masking_) et le découpage, ou détourage (_clipping_).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/ville-compressor.jpeg\" width=\"300\" height=\"300\" alt=\"\"/\u003e\u003cfigcaption\u003eL’image qui nous servira de base pour nos découpages.\u003c/figcaption\u003e\u003c/figure\u003e\n\nEn bref, la façon dont la propriété fonctionne est simple\u0026nbsp;: on fournit une série de valeurs X et Y pour créer un chemin. Ces valeurs, une fois un chemin complet créé, découpent l’image située à l’intérieur.\n\nNous pouvons créer de nombreuses formes différentes à partir de cercles, d’ellipses, de polygones. La créativité est la seule limite.\n\n\u003ch3\u003eUn triangle simple\u003c/h3\u003e\n\n\u003cdiv class=\"clipbox clipPolygon\"\u003e\u003c/div\u003e\n\nL’effet ci-dessus est obtenu en utilisant simplement un élément et en lui appliquant un clip-path.\n\n    //CSS\n    .clipClass {\n       clip-path: polygon(0 100%, 50% 0, 100% 100%);\n    }\n\n### Whoa, détaillons tout ça\n\nDe la même façon que pour la propriété `position`, nous devons penser en termes de valeurs X et Y. X:0 et Y:0 sont situés dans le coin supérieur gauche de l’élément. X:100% signifie qu’on a atteint le côté droit et Y:100% le bas.\n\nOk, cool. Donc le chemin que nous venons de créer utilise les points suivants\u0026nbsp;:\n\n    x: 0, y:100%\n    x: 50%, y: 0\n    x: 100%, y: 100%\n\nUn chemin simple, qui part du bas à gauche, se déplace horizontalement jusqu’à la moitié de l’espace (50%), puis monte jusqu’en haut (0) pour atteindre le 2e point, puis va tout à fait à droite horizontalement et en bas, pour atteindre le 3e point\u0026nbsp;: 3 points\u0026nbsp;=\u0026nbsp;un\u0026nbsp;triangle\u0026nbsp;!\n\nTout ce qui ne se trouve pas à l’intérieur de ces limites est simplement découpé et n’apparaît pas. L’élément lui-même garde ses dimensions, bien que le mode de présentation ait changé.\n\n### Formes\n\nDans ce premier exemple, nous avons utilisé un polygone pour créer une forme et définir un chemin en créant des paires x et y, séparées par des virgules. Mais nous pouvons travailler avec différentes formes, qui prennent des valeurs différentes.\n\n\u003ch3\u003eCercles\u003c/h3\u003e\n\n\u003cdiv class=\"clipbox clipCircle\"\u003e\u003c/div\u003e\n\nPour créer des cercles, nous passons trois valeurs. L’axe des x et des y nous donne les coordonnées du centre du cercle, et le rayon définit sa taille. La syntaxe est la suivante : “dimension du rayon (at) coordonnées du centre”\u0026nbsp;:\n\n    //CSS\n    .clipClass {\n      clip-path: circle(50% at 50% 50%);\n    }\n\n\u003ch3\u003eEllipses\u003c/h3\u003e\n\n\u003cdiv class=\"clipbox clipEllipse\"\u003e\u003c/div\u003e\n\nSi vous préférez une forme oblongue, vous pouvez choisir l’[ellipse](http://fr.wikipedia.org/wiki/Ellipse_%28math%C3%A9matiques%29). Pour celle-ci, vous devez fournir quatre valeurs, une valeur sur l’axe des x, une sur l’axe des y, et les deux valeurs correspondant au centre. Ici encore, les coordonnées du centre sont précédées du mot-clé “at”\u0026nbsp;:\n\n    //CSS\n    .clipClass {\n      clip-path: ellipse(30% 20% at 50% 50%);\n    }\n\n\u003ch3\u003eInset\u003c/h3\u003e\n\n\u003cdiv class=\"clipbox clipInset\"\u003e\u003c/div\u003e\n\nSi les angles aigus des polygones ne vous plaisent pas et que vous souhaitez créer des rectangles arrondis, utilisez les valeurs “inset”. Inset prend quatre valeurs, correspondant aux positions haut, droit, bas, gauche et permet l’utilisation d’un rayon sur chacune de ces valeurs.\n\n    //CSS\n    .clipClass {\n      clip-path: inset(25% 0 25% 0 round 0 25% 0 25%);\n    }\n\nCe qui se lit comme\u0026nbsp;:\n\n    inset(\u003chaut\u003e \u003cdroit\u003e \u003cbas\u003e \u003cgauche\u003e round \u003crayon-haut\u003e \u003crayon-droit\u003e \u003crayon-bas\u003e \u003crayon-gauche\u003e)\n\nUn peu long ? Bonne nouvelle, il y a un raccourci\u0026nbsp;:\n\n    //CSS\n    .clipClass {\n      clip-path: inset(25% 0 round 0 25%);\n    }\n\n#### Références rapides :\n\n**Cercle** : circle(rayon at x y)\n\n**Ellipse** : ellipse(rayon-x rayon-y at x y)\n\n**Polygone** : polygon(x y, x y, ...)\n\n**Inset** : inset(haut droit bas gauche round rayon-haut rayon-droit rayon-bas rayon-gauche)\n\n### Créer des formes\n\nLes cercles et les formes utilisant les rayons sont limités à quelques valeurs, par conséquent les polygones sont souvent un meilleur choix pour créer des formes complexes. Comme nous pouvons définir autant de points que nous le voulons, nous pouvons découper notre élément dans des formes très variées.\n\n\u003ch3\u003eBulle de bande dessinée\u003c/h3\u003e\n\n\u003cdiv class=\"clipbox clipComic\"\u003e\u003c/div\u003e\n\n    //CSS\n    .clipClass {\n      clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);\n    }\n\n\u003ch3\u003eÉtoile\u003c/h3\u003e\n\n\u003cdiv class=\"clipbox clipStar\"\u003e\u003c/div\u003e\n\n    //CSS\n    .clipClass {\n      clip-path: polygon(50% 0%, 63% 38%, 100% 38%, 69% 59%, 82% 100%, 50% 75%, 18% 100%, 31% 59%, 0 38%, 37% 38%);\n    }\n\n### Animation\n\nMaintenant que nous maîtrisons mieux les formes et la façon de les produire, nous pouvons nous amuser à créer des effets.\n\nNous pouvons par exemple avoir une forme qui s’applique au survol, en utilisant une propriété [transition](https://la-cascade.io/transition/) pour créer un effet en douceur. Cependant, nous devons garder à l’esprit qu’il nous faut créer un état initial par défaut, utilisant les mêmes points que ceux qui nous serviront pour notre état modifié.\n\n\u003cdiv class=\"clipbox clipAnimate\"\u003e\u003c/div\u003e\n\n    //CSS\n    .animateClass {\n      clip-path: polygon(20% 0%, 0% 0%, 0% 50%, 0% 80%, 0% 100%, 50% 100%, 80% 100%, 100% 100%, 100% 50%, 100% 0, 80% 0, 50% 0);\n      transition: clip-path 0.5s;\n    }\n    .animateClass:hover {\n      clip-path: polygon(20% 0%, 0% 20%, 30% 50%, 0% 80%, 20% 100%, 50% 70%, 80% 100%, 100% 80%, 70% 50%, 100% 20%, 80% 0%, 50% 30%);\n    }\n\n## Utilisation en production\n\nComme toujours, pour connaître les détails à jour de la compatibilité vous pouvez consulter [Can I Use](http://caniuse.com/#search=css%20clip-path).\n\n### Retour à notre tâche initiale\n\nTout ceci parce que nous voulions recréer la navigation Squarespace, vous vous rappelez ? Eh bien maintenant, si nous utilisons le positionnement pour recouvrir un élément par un autre, puis que nous utilisons clip-path pour masquer l’image, nous pouvons simplement montrer l’image de background sans avoir à appliquer de techniques complexes de remplacement d’images.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_https://codepen.io/rachelandrew/pen/vEZOeq\" src=\"//codepen.io/rachelandrew/embed/vEZOeq?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=vEZOeq\u0026amp;user=rachelandrew\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/rachelandrew/pen/vEZOeq/\"\u003e\n  Squarespace clip-path\u003c/a\u003e de Drew Minns dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nJe ne sais pas ce que vous en pensez, mais je trouve que l’avenir est de plus en plus géométrique.\n"},{"slug":"5-regles-pour-rendre-svg-accessible","title":"5 règles pour rendre SVG accessible","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"7 mai 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1026/Making-SVG-Accessible","copyright":"2015"},"dateCascade":"8 mai 2015","dateMachine":"2O150508","tags":["svg","accessibilite"],"about":["Alt","Title","SVGdesc"],"excerpt":"SVG est formidable pour le design responsif, la performance et la qualité vectorielle, mais rendre SVG accessible demande encore un peu de travail, rendu simple avec ces 5 règles proposées par Dudley Storey.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nLe [SVG](/tags/svg/) en ligne peut faire des miracles pour le design responsif tout en réduisant le temps de chargement des pages web et en produisant des icônes propres et à la netteté parfaite —\u0026nbsp;mais il n’est pas sans poser quelques problèmes, parmi lesquels l’accessibilité. L’accessibilité n’était pas une priorité lorsque la spécification originale SVG 1.0 a été publiée il y a 15 ans. Cependant, SVG 1.1 a amélioré les choses et SVG 2.0 devrait à l’avenir mettre l’accessibilité au premier plan.\n\nPour l’instant, rendre les SVG accessibles demande un peu de travail, mais c’est un processus assez simple si vous suivez ces cinq règles\u0026nbsp;:\n\n\u003ch2\u003e1 - Traitez les liens vers une image SVG comme les bitmaps\u003c/h2\u003e\n\nLorsque vous faites un lien vers un document SVG comme image, l’attribut `alt` est requis\u0026nbsp;:\n\n```HTML\n  \u003cimg src=\"coca-cola-logo.svg\" alt=\"Coca-Cola\"\u003e\n```\n\n...comme pour n’importe quelle [image matricielle](http://thenewcode.com/64/Bitmap-Images-for-the-Web-Formats-and-Optimisation-Options)\n(_bitmap_).\n\n\u003ch2\u003e2 - Pour SVG en ligne, donnez un titre\u003c/h2\u003e\n\nLe `\u003ctitle\u003e` d’un élément SVG sert le même objectif que le `\u003ctitle\u003e` d’un document HTML\u0026nbsp;: C’est une brève description du document, ou un conseil. On peut le voir comme le `\u003calt\u003e` d’un SVG inline.\n\n```HTML\n  \u003cheader\u003e\n    \u003csvg\u003e\n      \u003ctitle\u003eCoca-Cola\u003c/title\u003e\n      \u003cpolyline ... /\u003e\n    \u003c/svg\u003e\n  \u003c/header\u003e\n```\n\n`\u003ctitle\u003e` peut également être utilisé pour les éléments individuels\u0026nbsp;: plus spécifiquement `\u003ccircle\u003e`, `\u003cellipse\u003e`, `\u003cimage\u003e`, `\u003cline\u003e`, `\u003cpath\u003e`, `\u003cpolygon\u003e`, `\u003cpolyline\u003e`, `\u003crect\u003e`, `\u003ctext\u003e` et `\u003cuse\u003e`, ainsi que les éléments container SVG tels que `\u003ca\u003e`, `\u003cdefs\u003e`, `\u003cg\u003e` et `\u003csymbol\u003e`. `\u003ctitle\u003e` sera généralement le premier enfant de cet élément. Parfois, ce titre sera _visuellement_ descriptif\u0026nbsp;:\n\n```xml\n  \u003ctitle\u003eYellow Five-Pointed Star\u003c/title\u003e\n  \u003cpolygon fill=\"#ff0\" points=\"509,19.6 534.7,71.7 592.1,80 550.5,120.5 560.4,177.7 509,150.7 457.6,177.7 467.5,120.5 425.9,80 483.3,71.7 \"/\u003e\n```\n\n...et parfois il sera _informationnel_ (c’est à dire qu’il décrit la _finalité_ d’un élément, ou son _sens_).\n\n**Note** : on remarquera que les éléments `\u003ctext\u003e` de SVG inline sont dans la plupart des cas complètement accessibles, puisqu’ils contiennent du texte —\u0026nbsp;quels que soient les effets graphiques qui leur sont appliqués\u0026nbsp;— ils n’auront donc pas besoin de `\u003ctitle\u003e` dans ce cas. Toutefois, si vous transformez votre texte en pures formes vectorielles, il vous _faudra_ fournir un `\u003ctitle\u003e`.\n\nComme pour les pages HTML, le texte situé à l’intérieur d’un élément SVG est lu par les outils d’accessibilité dans l’_ordre du document_, et non dans l’ordre de leur _position visuelle à l’écran_.\n\nSi un SVG ne contient qu’un seul élément, un simple `\u003ctitle\u003e` après la balise ouvrante `\u003csvg\u003e` pourra s’avérer suffisant. Si le document contient plusieurs éléments, vous aurez probablement besoin d’un `\u003ctitle\u003e` pour chacun ou pour chaque groupe\u0026nbsp;:\n\n```xml\n\u003csvg\u003e\n  \u003cg\u003e\n    \u003ctitle\u003eRed Rectangle\u003c/title\u003e\n    \u003crect x=\"0\" y=\"0\" width=\"100\" height=\"50\" fill=\"red\" /\u003e\n  \u003c/g\u003e\n\u003c/svg\u003e\n```\n\nVous pouvez améliorer cette information en associant `\u003ctitle\u003e` à `aria-labelledby`. Dans le cas d’un élément simple, cela peut renvoyer à l’élément racine `\u003csvg\u003e`\u0026nbsp;:\n\n```xml\n\u003csvg aria-labelledby=\"title\"\u003e\n  \u003cg\u003e\n    \u003ctitle id=\"title\" lang=\"en\"\u003eRed Rectangle\u003c/title\u003e\n    \u003crect x=\"0\" y=\"0\" width=\"100\" height=\"50\" fill=\"red\" /\u003e\n  \u003c/g\u003e\n\u003c/svg\u003e\n```\n\nTout comme `\u003cdesc\u003e` et d’autres éléments HTML, `\u003ctitle\u003e` devrait également avoir [un attribut `lang` indiquant la langue utilisée](http://thenewcode.com/474/Language-Support-In-HTML) (voir plus bas).\n\n**Note** : il est possible de naviguer vers les éléments SVG utilisés dans les balises `\u003cimg\u003e` comme s’ils étaient des éléments autonomes, ils peuvent également être indexés par les moteurs de recherche en tant de documents séparés, et de ce fait ils devraient aussi contenir un `\u003ctitle\u003e` et une `\u003cdesc\u003e` appropriés _dans le balisage du document SVG original_.\n\n\u003ch2\u003e3 - Donnez une description lorsque nécessaire\u003c/h2\u003e\n\n`\u003cdesc\u003e` correspond à une description plus longue de votre élément SVG, spécifiant son intention. On peut le voir un peu comme l’équivalent SVG de `figcaption`.\n\n```xml\n\u003csvg\u003e\n  \u003cg\u003e\n    \u003ctitle\u003eInternational sales by country\u003c/title\u003e\n    \u003ctitle lang=\"fr\"\u003eLes ventes internationales par pays\u003c/title\u003e\n    \u003cdesc\u003eBar chart showing company sales by country, in millions of dollars (US).\u003c/desc\u003e\n    \u003cdesc lang=\"fr\"\u003eDiagramme montrant les ventes de l’entreprise par pays, en millions de dollars (US).\u003c/desc\u003e\n    \u003cg\u003e\n      \u003ctext x=\"20\" y=\"70\"\u003eUS Sales\u003c/text\u003e\n      \u003ctitle id=\"USamount\"\u003e30 million\u003c/title\u003e\n      \u003crect x=\"0\" y=\"0\" width=\"100\" height=\"50\" fill=\"red\" aria-labelledby=\"USamount\" /\u003e\n    \u003c/g\u003e\n  \u003cg\u003e\n\u003c/svg\u003e\n```\n\n\u003ctext x=\"20\" y=\"70\"\u003eFrench Sales\u003c/text\u003e\u003ctitle id=\"FRamount\"\u003e50 million\u003c/title\u003e\u003crect x=\"150\" y=\"20\" width=\"100\" height=\"80\" fill=\"red\" aria-labelledby=\"FRamount\" /\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003csvg width=\"320\" height=\"150\"\u003e\u003cg\u003e\u003ctitle\u003eInternational sales by country\u003c/title\u003e\u003ctitle lang=\"fr\"\u003eLes ventes internationales par pays\u003c/title\u003e\u003cdesc\u003eBar chart showing company sales by country, in millions of dollars (US).\u003c/desc\u003e\u003cdesc lang=\"fr\"\u003eDiagramme montrant les ventes de l’entreprise par pays, en millions de dollars (US).\u003c/desc\u003e\u003cg\u003e\u003ctext x=\"20\" y=\"120\"\u003eUS Sales\u003c/text\u003e\u003ctitle id=\"USamount\"\u003e30 million\u003c/title\u003e\u003crect x=\"0\" y=\"50\" width=\"100\" height=\"50\" fill=\"green\" aria-labelledby=\"USamount\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003cg\u003e\u003ctext x=\"140\" y=\"120\"\u003eFrench Sales\u003c/text\u003e\u003ctitle id=\"FRamount\"\u003e50 million\u003c/title\u003e\u003crect x=\"150\" y=\"20\" width=\"100\" height=\"80\" fill=\"red\" aria-labelledby=\"FRamount\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\n\nCet exemple suppose que vous fournirez également les axes graphiques et les informations chiffrées pour les utilisateurs n’ayant _pas_ de problèmes d’accessibilité\u0026nbsp;: quand c’est possible, exposer l’information sous forme de `\u003ctext\u003e` rendra service à _tous_ comme dans l'illustration qui précède.\n\n\u003ch2\u003e4 - Vous n’avez rien à faire si le SVG est purement décoratif\u003c/h2\u003e\n\nSi l’élément SVG est utilisé à des fins purement décoratives —\u0026nbsp;un dégradé ou un motif de background par exemple\u0026nbsp;— pas besoin de fournir `\u003ctitle\u003e`, `\u003cdesc\u003e` ni `alt`. (Si vous voulez que votre page soit [validée](http://thenewcode.com/454/Climbing-Mount-Sinai-The-Importance-of-Web-Page-Validation) par les outils de validation, vous devrez mettre un `alt` pour les SVG liés, mais vide pour les éléments décoratifs, c’est à dire `alt=\"\"` ou simplement `alt`).\n\nPar défaut, ni `\u003cdesc\u003e` ni `\u003ctitle\u003e` ne sont rendus visuellement dans le navigateur (bien qu’on puisse leur appliquer un style pour qu’ils le soient)\u0026nbsp;; le texte de `\u003ctitle\u003e` apparaîtra au survol dans les navigateurs compatibles.  \n(\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : vous pouvez faire l’essai avec le diagramme ci-dessus_).\n\n\u003ch2\u003e5 - Ne comptez pas sur votre WYSIWYG pour le faire à votre place\u003ch2\u003e\n\nMalheureusement, Adobe Illustrator ne supporte que très peu l’accessibilité SVG. Il exporte les noms de calques comme des valeurs d’ `id` plutôt que comme une information `\u003ctitle\u003e`. Inkscape fait mieux en vous permettant d’ajouter et d’éditer `\u003ctitle\u003e` et `\u003cdesc\u003e` pour chaque élément, avec l’inconvénient d’ajouter du code redondant à votre markup. Vous en viendrez sans doute à la conclusion qu’il est préférable d’ajouter un peu de code à la main pour ajouter une pleine accessibilité à un document SVG réalisé avec les outils vectoriels.\n\n\u003cspan class=\"ressourcesComplementaires\"\u003e**Ressources complémentaires en anglais**\u003c/span\u003e\n\n- [Tips for creating accessible SVG](http://www.sitepoint.com/tips-accessible-svg/), par Léonie Watson\n\n\u003cspan class=\"ressourcesComplementaires\"\u003e**Ressources complémentaires en français**\u003c/span\u003e\n\n- [SVG, liens et lecteurs d’écran](http://blog.atalan.fr/svg-liens-et-lecteurs-decran/), sur le blog d’Atalan\n"},{"slug":"rendre-svg-accessible","title":"5 règles pour rendre SVG accessible","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"7 mai 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/1026/Making-SVG-Accessible","copyright":"2015"},"dateCascade":"8 mai 2015","dateMachine":"2O150508","tags":["svg","accessibilite"],"about":[],"excerpt":"rendre SVG accessible demande encore du travail, simple avec ces 5 règles proposées par Dudley Storey","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nLe SVG en ligne peut faire des miracles pour le design responsif tout en réduisant le temps de chargement des pages web et en produisant des icônes propres et à la netteté parfaite —\u0026nbsp;mais il n’est pas sans poser quelques problèmes, parmi lesquels l’accessibilité. L’accessibilité n’était pas une priorité lorsque la spécification originale SVG 1.0 a été publiée il y a 15 ans. Cependant, SVG 1.1 a amélioré les choses et SVG 2.0 devrait à l’avenir mettre l’accessibilité au premier plan.\n\nPour l’instant, rendre les SVG accessibles demande un peu de travail, mais c’est un processus assez simple si vous suivez ces cinq règles\u0026nbsp;:\n\n\u003ch2\u003e1 - Traitez les liens vers une image SVG comme les bitmaps\u003c/h2\u003e\n\nLorsque vous faites un lien vers un document SVG comme image, l’attribut `alt` est requis\u0026nbsp;:\n\n    //HTML\n    \u003cimg src=\"coca-cola-logo.svg\" alt=\"Coca-Cola\"\u003e\n\n...comme pour n’importe quelle [image matricielle](http://thenewcode.com/64/Bitmap-Images-for-the-Web-Formats-and-Optimisation-Options)\u003c/span\u003e\u003c/span\u003e\n(_bitmap_).\n\n\u003ch2\u003e2 - Pour SVG en ligne, donnez un titre\u003c/h2\u003e\n\nLe `\u003ctitle\u003e` d’un élément SVG sert le même objectif que le `\u003ctitle\u003e` d’un document HTML\u0026nbsp;: C’est une brève description du document, ou un conseil. On peut le voir comme le `\u003calt\u003e` d’un SVG inline.\n\n    //HTML\n    \u003cheader\u003e\n      \u003csvg\u003e\n        \u003ctitle\u003eCoca-Cola\u003c/title\u003e\n        \u003cpolyline ... /\u003e\n       \u003c/svg\u003e\n    \u003c/header\u003e\n\n`\u003ctitle\u003e` peut également être utilisé pour les éléments individuels\u0026nbsp;: plus spécifiquement `\u003ccircle\u003e`, `\u003cellipse\u003e`, `\u003cimage\u003e`, `\u003cline\u003e`, `\u003cpath\u003e`, `\u003cpolygon\u003e`, `\u003cpolyline\u003e`, `\u003crect\u003e`, `\u003ctext\u003e` et `\u003cuse\u003e`, ainsi que les éléments container SVG tels que `\u003ca\u003e`, `\u003cdefs\u003e`, `\u003cg\u003e` et `\u003csymbol\u003e`. `\u003ctitle\u003e` sera généralement le premier enfant de cet élément. Parfois, ce titre sera _visuellement_ descriptif\u0026nbsp;:\n\n    \u003ctitle\u003eYellow Five-Pointed Star\u003c/title\u003e\n    \u003cpolygon fill=\"#ff0\" points=\"509,19.6 534.7,71.7 592.1,80 550.5,120.5 560.4,177.7 509,150.7 457.6,177.7 467.5,120.5 425.9,80 483.3,71.7 \"/\u003e\n\n...et parfois il sera _informationnel_ (c’est à dire qu’il décrit la _finalité_ d’un élément, ou son _sens_).\n\n**Note** : on remarquera que les éléments `\u003ctext\u003e` de SVG inline sont dans la plupart des cas complètement accessibles, puisqu’ils contiennent du texte —\u0026nbsp;quels que soient les effets graphiques qui leur sont appliqués\u0026nbsp;— ils n’auront donc pas besoin de `\u003ctitle\u003e` dans ce cas. Toutefois, si transformez votre texte en pures formes vectorielles, il vous _faudra_ fournir un `\u003ctitle\u003e`.\n\nComme pour les pages HTML, le texte situé à l’intérieur d’un élément SVG est lu par les outils d’accessibilité dans l’_ordre du document_, et non dans l’ordre de leur _position visuelle à l’écran_.\n\nSi un SVG ne contient qu’un seul élément, un simple `\u003ctitle\u003e` après la balise ouvrante `\u003csvg\u003e` pourra s’avérer suffisant. Si le document contient plusieurs éléments, vous aurez probablement besoin d’un `\u003ctitle\u003e` pour chacun ou pour chaque groupe\u0026nbsp;:\n\n    \u003csvg\u003e\n      \u003cg\u003e\n        \u003ctitle\u003eRed Rectangle\u003c/title\u003e\n        \u003crect x=\"0\" y=\"0\" width=\"100\" height=\"50\" fill=\"red\" /\u003e\n      \u003c/g\u003e\n    \u003c/svg\u003e\n\nVous pouvez améliorer cette information en associant `\u003ctitle\u003e` à `aria-labelledby`. Dans le cas d’un élément simple, cela peut renvoyer à l’élément racine `\u003csvg\u003e`\u0026nbsp;:\n\n    \u003csvg aria-labelledby=\"title\"\u003e\n      \u003cg\u003e\n        \u003ctitle id=\"title\" lang=\"en\"\u003eRed Rectangle\u003c/title\u003e\n        \u003crect x=\"0\" y=\"0\" width=\"100\" height=\"50\" fill=\"red\" /\u003e\n      \u003c/g\u003e\n    \u003c/svg\u003e\n\nTout comme `\u003cdesc\u003e` et d’autres éléments HTML, `\u003ctitle\u003e` devrait également avoir [un attribut `lang` indiquant la langue utilisée](http://thenewcode.com/474/Language-Support-In-HTML) (voir plus bas).\n\n**Note** : il est possible de naviguer vers les éléments SVG utilisés dans les balises `\u003cimg\u003e` comme s’ils étaient des éléments autonomes, ils peuvent également être indexés par les moteurs de recherche en tant de documents séparés, et de ce fait ils devraient aussi contenir un `\u003ctitle\u003e` et une `\u003cdesc\u003e` appropriés _dans le balisage du document SVG original_.\n\n\u003ch2\u003e3 - Donnez une description lorsque nécessaire\u003c/h2\u003e\n\n`\u003cdesc\u003e` correspond à une description plus longue de votre élément SVG, spécifiant son intention. On peut le voir un peu comme l’équivalent SVG de `figcaption`.\n\n    \u003csvg\u003e\n      \u003cg\u003e\n        \u003ctitle\u003eInternational sales by country\u003c/title\u003e\n        \u003ctitle lang=\"fr\"\u003eLes ventes internationales par pays\u003c/title\u003e\n        \u003cdesc\u003eBar chart showing company sales by country, in millions of dollars (US).\u003c/desc\u003e\n        \u003cdesc lang=\"fr\"\u003eDiagramme montrant les ventes de l’entreprise par pays, en millions de dollars (US).\u003c/desc\u003e\n      \u003cg\u003e\n        \u003ctext x=\"20\" y=\"70\"\u003eUS Sales\u003c/text\u003e\n        \u003ctitle id=\"USamount\"\u003e30 million\u003c/title\u003e\n        \u003crect x=\"0\" y=\"0\" width=\"100\" height=\"50\" fill=\"red\" aria-labelledby=\"USamount\" /\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003ctext x=\"20\" y=\"70\"\u003eFrench Sales\u003c/text\u003e\n        \u003ctitle id=\"FRamount\"\u003e50 million\u003c/title\u003e\n        \u003crect x=\"150\" y=\"20\" width=\"100\" height=\"80\" fill=\"red\" aria-labelledby=\"FRamount\" /\u003e\n      \u003c/g\u003e\n      \u003c/g\u003e\n    \u003c/svg\u003e\n\n\u003csvg width=\"320\" height=\"150\"\u003e\u003cg\u003e\u003ctitle\u003eInternational sales by country\u003c/title\u003e\u003ctitle lang=\"fr\"\u003eLes ventes internationales par pays\u003c/title\u003e\u003cdesc\u003eBar chart showing company sales by country, in millions of dollars (US).\u003c/desc\u003e\u003cdesc lang=\"fr\"\u003eDiagramme montrant les ventes de l’entreprise par pays, en millions de dollars (US).\u003c/desc\u003e\u003cg\u003e\u003ctext x=\"0\" y=\"120\"\u003eVentes US\u003c/text\u003e\u003ctitle id=\"USamount\"\u003e30 million\u003c/title\u003e\u003crect x=\"0\" y=\"50\" width=\"100\" height=\"50\" fill=\"green\" aria-labelledby=\"USamount\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003cg\u003e\u003ctext x=\"140\" y=\"120\"\u003eVentes France\u003c/text\u003e\u003ctitle id=\"FRamount\"\u003e50 million\u003c/title\u003e\u003crect x=\"150\" y=\"20\" width=\"100\" height=\"80\" fill=\"red\" aria-labelledby=\"FRamount\"\u003e\u003c/rect\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\n\nCet exemple suppose que vous fournirez également les axes graphiques et les informations chiffrées pour les utilisateurs n’ayant _pas_ de problèmes d’accessibilité\u0026nbsp;: quand c’est possible, exposer l’information sous forme de `\u003ctext\u003e` rendra service à _tous_.\n\n\u003ch2\u003e4 - Vous n’avez rien à faire si le SVG est purement décoratif\u003c/h2\u003e\n\nSi l’élément SVG est utilisé à des fins purement décoratives —\u0026nbsp;un dégradé ou un motif de background par exemple\u0026nbsp;— pas besoin de fournir `\u003ctitle\u003e`, `\u003cdesc\u003e` ni `alt`. (Si vous voulez que votre page soit [validée](http://thenewcode.com/454/Climbing-Mount-Sinai-The-Importance-of-Web-Page-Validation) par les outils de validation, vous devrez mettre un `alt` pour les SVG liés, mais vide pour les éléments décoratifs, c’est à dire `alt=\"\"` ou simplement `alt`).\n\nPar défaut, ni `\u003cdesc\u003e` ni `\u003ctitle\u003e` ne sont rendus visuellement dans le navigateur (bien qu’on puisse leur appliquer un style pour qu’ils le soient)\u0026nbsp;; le texte de `\u003ctitle\u003e` apparaîtra au survol dans les navigateurs compatibles.\n(\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : vous pouvez faire l’essai avec le diagramme ci-dessus_).\n\n\u003ch2\u003e5 - Ne comptez pas sur votre WYSIWYG pour le faire à votre place\u003c/h2\u003e\n\nMalheureusement, Adobe Illustrator ne supporte que très peu l’accessibilité SVG. Il exporte les noms de calques comme des valeurs d’ `id` plutôt que comme une information `\u003ctitle\u003e`. Inkscape fait mieux en vous permettant d’ajouter et d’éditer `\u003ctitle\u003e` et `\u003cdesc\u003e` pour chaque élément, avec l’inconvénient d’ajouter du code redondant à votre markup. Vous en viendrez sans doute à la conclusion qu’il est préférable d’ajouter un peu de code à la main pour ajouter une pleine accessibilité à un document SVG réalisé avec les outils vectoriels.\n"},{"slug":"3-raisons-dutiliser-hsl-pour-vos-couleurs","title":"3 raisons d'utiliser HSL pour vos couleurs","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"5 février 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/576/Three-Ways-You-Should-Be-Using-HSL-Color-In-Your-Site-Today","copyright":"2015"},"dateCascade":"4 mai 2015","dateMachine":"2O150504","tags":["css","design","couleur"],"about":["HSL","RGB","Saturation","Luminosité"],"excerpt":"Pourquoi utiliser HSL ? Quelle différence entre HSL et RGB ? Dudley Storey passe en revue quelques situations où HSL peut vraiment vous changer la vie.","featured":false,"featuredImage":"/images/holi-2x.jpeg","order":null,"content":"\nNous avons vu dans [l’article précédent](/articles/utiliser-hsl-pour-vos-couleurs/) tout l’intérêt qu’il y avait à utiliser HSL pour créer et manipuler les couleurs, mais il est des domaines où cela présente tellement d’avantages qu’il est presque surprenant que les développeurs n’en profitent pas plus.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/holi-2x.jpeg\" width=\"1536\" height=\"820\" alt=\"jeune fille recouverte de peinture et tirant la langue\"/\u003e\u003c/figure\u003e\n\n\u003ch2\u003eCréer des prototypes rapides de schémas de couleurs\u003c/h2\u003e\n\n[HSL](https://fr.wikipedia.org/wiki/Teinte_saturation_lumière) est idéal pour la création rapide de [schémas de couleurs](http://en.wikipedia.org/wiki/Color_scheme), en particulier pour les développeurs qui ne maîtrisent pas parfaitement le design ou la théorie des couleurs. \u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e (_NdT : si c’est votre cas, pas d’inquiétude\u0026nbsp;! Vous retrouverez dans la Cascade tout un tas d’articles et de ressources pour maîtriser les couleurs comme un pro, voyez la liste dans la [page du tag \"couleur\"](/tags/couleur)_). L’utilisation de quelques règles simples permet de créer des choix de couleurs harmonieux qui fonctionnent en toute situation.\n\nPrenons un exemple, disons que vous avez une couleur principale et que vous voulez l’utiliser pour générer rapidement le schéma de couleurs d’un site. Admettons, par exemple, que vous ayez une couleur orange dérivée du logo du client, qui correspond à `hsl(30, 90%, 29%)`.\n\nPour générer instantanément une couleur complémentaire, il suffit d’ajouter 180 degrés à la valeur de la couleur\u0026nbsp;: dans notre exemple, cela donne `hsl(210, 90%, 29%)`. Facile, non\u0026nbsp;? Et si votre première couleur a une valeur supérieure à 180 degrés, pas de souci, votre navigateur saura “faire le tour du cadran de l’horloge” et convertir les valeurs supérieures à 360 degrés. Il sait même gérer les valeurs négatives.\n\nPour créer en un tournemain un schéma de couleurs monochromatique\u0026nbsp;: prenez la valeur de saturation et soustrayez un tiers. Notre base de couleur est `hsl(30, 90%, 29%)`, les couleurs additionnelles seront donc `hsl(30, 60%, 29%)` et `hsl(30, 30%, 29%)`.\n\nPour un schéma de couleurs neutre\u0026nbsp;: soustrayez et/ou ajoutez à la couleur un nombre de degrés identiques à chaque fois, mais jamais supérieur à 90°. Par exemple, à partir d’une couleur de 30°, on obtiendra `hsl(0,90%,29%)` et `hsl(60,90%,29%)`.\n\nPour un schéma de couleurs triadique, ajoutez 120° à la valeur de la couleur principale.\n\nBien utilisé, ceci élimine le débat sur la question de savoir “ce qui irait bien avec ça\u0026nbsp;?” et vous aide à générer le design d’un site très rapidement.\n\n\u003ch2\u003eAjustement rapide de couleurs\u003c/h2\u003e\n\nCombien de fois un client vous a-t-il demandé “pourriez-vous éclaircir un peu le background\u0026nbsp;?” Si vous avez spécifié les couleurs en [RGB](http://fr.wikipedia.org/wiki/Rouge_vert_bleu) ou en [Hexadécimal](http://fr.wikipedia.org/wiki/Noms_de_couleur_du_Web), il vous faudra ajuster trois composants simultanément, en faisant attention que l’un ne prenne pas plus d’importance que l’autre. Si votre schéma de couleurs est en HSL, rien de plus facile et sûr. Le background orange doit être plus sombre\u0026nbsp;? Vous prenez votre background\u0026nbsp;:\n\n    body { background: hsl(60,100%,50%); }\n\n...et vous réduisez la dernière composante (luminosité) :\n\n    body { background: hsl(60,100%,40%); }\n\nEt voilà ! Et si vous avez utilisé les techniques de schémas de couleurs dont nous avons parlé ci-dessus, il suffit d’ajuster les autres couleurs —\u0026nbsp;tout aussi facilement.\n\n\u003ch2\u003eCréer rapidement des variantes de couleurs\u003c/h2\u003e\n\nJ’ai travaillé sur un article qui utilise [un dégradé radial](/articles/les-degrades-css/#radial) pour créer une lumière témoin sur le bouton que vous voyez ici (le rendu est meilleur sur Webkit au moment où j’écris ceci), basé sur ce travail de simurai\u0026nbsp;:\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/simurai/pen/rJwpz/\"\u003e\n  Animated Radio Inputs\u003c/a\u003e de \u003ca href=\"/auteurs/simurai\"\u003esimurai\u003c/a\u003e dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi l’on fait abstraction des préfixes constructeurs, le code CSS3 ressemble à ceci\u0026nbsp;:\n\n    //CSS\n    input {\n      background-image:\n        radial-gradient( hsla(0,100%,90%,1) 0%,\n        hsla(0,100%,70%,1) 15%,\n        hsla(0,100%,60%,.3) 28%,\n        hsla(0,100%,30%,0) 70% );\n    }\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/red-button-compressor.jpeg\" width=\"206\" height=\"75\" alt=\"\"/\u003e\u003cfigcaption\u003eLumière témoin rouge, inspirée de simurai\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi je veux une lumière bleue, tout ce que j’ai à faire c’est de faire tourner la composante couleur du code HSL\u0026nbsp;:\n\n    //CSS\n    input {\n      background-image:\n        radial-gradient( hsla(200,100%,90%,1) 0%,\n        hsla(200,100%,70%,1) 15%,\n        hsla(200,100%,60%,.3) 28%,\n        hsla(200,100%,30%,0) 70% );\n    }\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/blue-button-compressor.jpeg\" width=\"206\" height=\"73\" alt=\"\"/\u003e\u003cfigcaption\u003eLumière témoin bleue, vite fait !\u003c/figcaption\u003e\u003c/figure\u003e\n\nLa nouvelle lumière a la même intensité et la même brillance, dans une couleur différente. Pas besoin de bricoler entre les rouges, les verts et les bleus.\n\n\u003ch2\u003eQuand ne faut-il \u0026nbsp;\u003cem\u003epas\u003c/em\u003e\u0026nbsp; utiliser HSL ?\u003c/h2\u003e\n\nRéponse courte : quand votre site doit être visible sur IE8 et avant. Si vous avez besoin de la compatibilité IE, [Sass peut automatiquement transférer les couleurs HSL en hexadécimal](http://thenewcode.com/982/Learning-Sass-With-CodePen-Part-Four-Color)... Donc vous pouvez commencer dès aujourd’hui à profiter de tout ce qu’HSL peut vous apporter\u0026nbsp;!\n"},{"slug":"utiliser-hsl-pour-vos-couleurs","title":"Utiliser HSL pour vos couleurs","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"1er juin 2014","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/61/An-Easy-Guide-To-HSL-Color","copyright":"2014"},"dateCascade":"3 mai 2015","dateMachine":"2O150503","tags":["css","design","couleur"],"about":["HSL","RGB","Hexadécimal","Saturation","Luminosité"],"excerpt":"La méthode HSL de création de couleurs est bien connue des designers mais négligée par les codeurs. Dudley Storey nous en montre ici tout l'intérêt.","featured":true,"featuredImage":"/images/cercle-chromatique-hsl-compressor.jpeg","order":30,"content":"\nLa [méthode HSL](http://fr.wikipedia.org/wiki/Teinte_saturation_lumi%C3%A8re) de création de couleurs en CSS3 est très bien supportée par les navigateurs modernes mais quelque peu négligée par les codeurs, en raison sans doute de sa différence avec [les autres modèles](/tags/couleur/)\u0026nbsp;:\n\n- Il est facile de traduire d’[hexadécimal](http://fr.wikipedia.org/wiki/Noms_de_couleur_du_Web) en [RGB](http://fr.wikipedia.org/wiki/Rouge_vert_bleu), mais plus difficile de traduire de ces modèles vers HSL.\n- Les valeurs Hex et RGB de Photoshop peuvent être transférées directement dans votre CSS, ce qui n’est pas le cas de HSB qui n’est _pas_ la même chose que HSL.\n- HSL ne vous offre pas une plus grande palette de couleurs que Hex et RGB, on reste sur la même étendue.\n\nEt pourtant, malgré ces quelques restrictions, HSL est la méthode préférée des designers, voici pourquoi.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/cercle-chromatique-hsl-compressor.jpeg\" width=\"742\" height=\"577\" alt=\"le cercle chromatique\"/\u003e\u003c/figure\u003e\n\nTout d’abord, il vous faut un nouveau modèle mental pour la couleur, focalisez-vous sur le cercle chromatique. Vous voyez le rouge, le vert et le bleu\u0026nbsp;: au sommet, le rouge est à 0 degrés, le vert à 120 degrés et le bleu à 240 degrés, ensemble ils partagent le cercle en trois parties égales. À distance égale entre eux se trouvent le jaune, le cyan et le magenta (du système de couleurs CMYK) respectivement à 60, 180 et 300 degrés.\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : HSL signifie Hue, Saturation, Luminosity, c’est à dire Teinte, Saturation, Luminosité. Ce sont les trois composantes que nous retrouverons dans le code `hsl`. Pour une solide intro à la terminologie de la théorie des couleurs, vous pouvez consulter [l’excellent article de Cameron Chapman](https://la-cascade.io/theorie-des-couleurs-2-concepts-et-terminologie/). Voyez également la liste de ressources en fin d’article_.\n\nEn partant du sommet et en tournant dans le sens des aiguilles d’une montre, nous passons par toutes les couleurs de l’arc en ciel.\n\nLa première composante de HSL est donc très facile\u0026nbsp;: c’est la position de la couleur (la “teinte\") sur le cercle chromatique, exprimée en degrés.\n\nPour prendre un exemple, le violet se trouve à mi-chemin du bleu (240°) et du magenta (300°), son code serait donc `hsl(270, 100%, 50%)` (ne vous inquiétez pas pour les autres composantes du code, nous allons voir ça tout de suite). Pour obtenir un violet “plus bleu”, il suffit de revenir en arrière vers le bleu, par exemple en faisant `hsl(255, 100%, 50%)`.\n\nLa deuxième composante est la saturation, également décrite comme l’intensité. Plus on s’éloigne du centre, plus l’intensité de la couleur augmente, atteignant le maximum de saturation sur le bord extérieur du cercle. Au contraire, plus on va vers le centre, plus la couleur tend vers le gris. En d’autres termes, le degré de saturation dépend de la distance à laquelle on se trouve du gris. Toutes les couleurs HSL ayant une saturation de 0% ont la même ombre (_shade_) de gris, toutes choses étant égales par ailleurs.\n\n\u003cdiv className=\"centeredBold\"\u003eValeurs de saturation hsl(45, x%, 50%)\u003c/div\u003e\n\n\u003cdiv class=\"container-hsl\"\u003e\n\u003cspan style=\"background-color:hsl(45,0%,50%);color:#fff\"\u003ehsl(45,0%,50%)\u003c/span\u003e\n\u003cspan style=\"background:hsl(45,25%,50%)\"\u003ehsl(45,25%,50%)\u003c/span\u003e\n\u003cspan style=\"background:hsl(45,50%,50%)\"\u003ehsl(45,50%,50%)\u003c/span\u003e\n\u003cspan style=\"background:hsl(45,75%,50%)\"\u003ehsl(45,75%,50%)\u003c/span\u003e\n\u003cspan style=\"background:hsl(45,100%,50%)\"\u003ehsl(45,100%,50%)\u003c/span\u003e\u003c/div\u003e\n\nNote : Pour la saturation et la luminosité, le signe % doit _toujours_ être inclus, même si la valeur est égale à 0.\n\nLa luminosité, ou “brillance”, spécifie la distance à laquelle la couleur se trouve du blanc et du noir. Un niveau de luminosité de 50% signifie que la couleur est en équilibre parfait entre le clair et le sombre, et demeure inchangée. Si l’on réduit la luminosité, la couleur s’assombrit\u0026nbsp;: toute couleur ayant un niveau de luminosité de 0 est un noir pur. Si l’on augmente la luminosité, la couleur s’éclaircit et à l’extrême (100%) elle est blanche. Entre les deux, vous avez de nombreuses possibilités, comme illustré ci-dessous\u0026nbsp;:\n\n\u003cdiv className=\"centeredBold\"\u003eValeurs de luminosité hsl(90, 100%, x%)\u003c/div\u003e\n\n\u003cdiv class=\"container-hsl\"\u003e\n\u003cspan style=\"background-color:hsl(90,100%,0%);color:#fff\"\u003ehsl(90, 100%, 0%)\u003c/span\u003e\n\u003cspan style=\"background:hsl(90,100%,25%)\"\u003ehsl(90, 100%, 25%)\u003c/span\u003e\n\u003cspan style=\"background:hsl(90,100%,50%)\"\u003ehsl(90, 100%, 50%)\u003c/span\u003e\n\u003cspan style=\"background:hsl(90,100%,75%)\"\u003ehsl(90, 100%, 75%)\u003c/span\u003e\n\u003cspan style=\"background:hsl(90,100%,100%)\"\u003ehsl(90, 100%, 100%)\u003c/span\u003e\u003c/div\u003e\n\nAvec un peu de pratique, cette carte mentale de la couleur deviendra instinctive et vous trouverez probablement qu’il est bien plus facile de créer et de manipuler les couleurs spécifiées en HSL. Même si vous choisissez de ne pas toujours l’utiliser, HSL présente quelques avantages spécifiques dans certaines circonstances —\u0026nbsp;nous verrons cela dans [le prochain article](/articles/3-raisons-dutiliser-hsl-pour-vos-couleurs/).\n\n**Note** :\n\nEric Meyer propose [un diagramme bien utile](http://meyerweb.com/eric/css/colors/hsl-16.html) permettant de traduire les mots-clés de couleurs habituels en valeurs HSL, et Lars Gunther a construit un outil pédagogique intéressant pour [utiliser le cercle chromatique](http://itpastorn.github.io/webbteknik/future-stuff/svg/color-wheel.html).\n"},{"slug":"un-carrousel-responsif-en-pur-css","title":"Un carrousel responsif en pur CSS","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"25 mars 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/627/A-Responsive-CSS3-Image-Slider","copyright":"2015"},"dateCascade":"25 avril 2015","dateMachine":"2O150425","tags":["css","html","animation","accessibilite"],"about":[],"excerpt":"De plus en plus les développeurs web ont besoin de solutions responsives et performantes. Dudley Storey propose ici un carrousel responsive en pur CSS qui répond parfaitement à ces objectifs.","featured":true,"featuredImage":"/images/authors/dudley-storey.jpg","order":7,"content":"\nJ’ai [déjà montré](http://thenewcode.com/495/Make-A-CSS3-Animated-Image-Slider) comment réaliser un carrousel d’images de largeur fixe en CSS. De plus en plus, les développeurs web ont besoin de solutions qui non seulement se redimensionnent selon le viewport, mais aussi offrent de bonnes performances sur les mobiles. La solution responsive détaillée ici est particulièrement adaptée à ces objectifs, car elle se passe totalement de JavaScript et repose uniquement sur CSS.\n\nL’idée est assez proche de mon tutoriel précédent\u0026nbsp;: une “bande d’images” contenant toutes les photos de notre carrousel se déplace à l’intérieur d’une “fenêtre” dont le rôle est d’empêcher qu’on ne voie les éléments qui sont en dehors. Pour cet exemple, nous aurons besoin de quatre images, mais en pratique vous pouvez réaliser une bande contenant autant d’images que vous le souhaitez. La seule condition est que **toutes les images doivent avoir la même taille**.\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/dudleystorey/pen/ehKpi\"\u003e\n  Responsive CSS Image Slider\u003c/a\u003e de Dudley Storey dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003ch2\u003eCréer un cadre responsif avec une bande d’images\u003c/h2\u003e\n\nTout d’abord nous avons besoin de rendre l’élément carrousel responsif. Pour cela, nous commençons avec le HTML suivant\u0026nbsp;:\n\n    //HTML\n    \u003cdiv id=\"slider\"\u003e\n      \u003cfigure\u003e\n        \u003cimg src=\"austin-fireworks.jpg\" alt\u003e\n        \u003cimg src=\"taj-mahal.jpg\" alt\u003e\n        \u003cimg src=\"ibiza.jpg\" alt\u003e\n        \u003cimg src=\"ankor-wat.jpg\" alt\u003e\n        \u003cimg src=\"austin-fireworks.jpg\" alt\u003e\n      \u003c/figure\u003e\n    \u003c/div\u003e\n\n(Je laisse l’[attribut `alt`](/articles/articles/bien-utiliser-lattribut-alt/) vide pour la clarté, il faudra le remplir pour l’[accessibilité](/tags/accessibilite/) et pour le SEO). Remarquez que la même image est placée au début et à la fin de la bande, pour permettre à l’animation de faire une boucle en douceur.\n\nNous donnons à la fenêtre une largeur de 80% pour la rendre responsive, et une largeur maximum (`max-width`) qui correspond à la largeur naturelle d’une image individuelle (1000px dans notre exemple), car nous ne souhaitons pas qu’une image soit agrandie :\n\n    //CSS\n    div#slider { width: 80%; max-width: 1000px; }\n\n\u003cfigure\u003e\u003cimg src=\"/images/image-strip-compressor.jpeg\" width=\"1444\" height=\"301\" alt=\"\"/\u003e\u003cfigcaption\u003eLa bande de 5 images, avec à gauche la “fenêtre” contenant une image. La bande fait 5 fois (500%) la largeur de la fenêtre.\u003c/figcaption\u003e\u003c/figure\u003e\n\nDans notre CSS, la largeur de l’élément `figure` est un pourcentage, qui est un multiple de la `div` qui le contient. Autrement dit, si la bande d’images contient cinq images, et que notre `div` n’en montre qu’une, la `figure` est 5x plus large, c’est à dire 500% la largeur de la `div` container\u0026nbsp;:\n\n    //CSS\n    div#slider figure {\n      position: relative;\n      width: 500%;\n      margin: 0;\n      padding: 0;\n      font-size: 0;\n      text-align: left;\n    }\n\nLa `font-size: 0` aspire l’air autout de l’élément `figure` en retirant tout espace entre les images et autour. `position: relative` permet à la `figure` d’être déplacée facilement pendant l’animation. `text-align: left` est là en raison d’un bug de Safari\u0026nbsp;5 pour Windows.\n\nNous devons répartir les images de manière régulière à l’intérieur de la bande. Le calcul est très simple\u0026nbsp;: Si nous considérons que l’élément `figure` fait 100% de large, chaque image doit prendre 1/5 de l’espace horizontal\u0026nbsp;:\n\n100% / 5 = 20%\n\nCe qui nous conduit à la déclaration CSS suivante\u0026nbsp;:\n\n    //CSS\n    div#slider figure img { width: 20%; height: auto; float: left; }\n\n(Ici aussi, `float: left` sert à corriger un bug de Win Safari\u0026nbsp;5).\n\nEnfin, nous cachons ce qui dépasse (_overflow_) de la `div`\u0026nbsp;:\n\n    //CSS\n    div#slider { width: 80%; max-width: 1000px; overflow: hidden }\n\n\u003ch2\u003eAnimer la bande\u003c/h2\u003e\n\nIl nous faut maintenant déplacer la bande de droite à gauche. Si on considère que la `div` container fait 100% de large, chaque mouvement de la bande vers la gauche sera mesuré en incréments de cette distance\u0026nbsp;:\n\n    //CSS\n    @keyframes slidy {\n      0% { left: 0%; }\n      20% { left: 0%; }\n      25% { left: -100%; }\n      45% { left: -100%; }\n      50% { left: -200%; }\n      70% { left: -200%; }\n      75% { left: -300%; }\n      95% { left: -300%; }\n      100% { left: -400%; }\n    }\n\nChaque image du carrousel sera affichée dans la `div` pour 20% de la durée totale de l’animation, le temps de déplacement étant de 5%.\n\nIl ne nous reste plus qu’à appeler notre animation pour que les choses commencent (le code est indiqué ici sans préfixes constructeurs, pour la simplicité, mais il ne faudra pas les oublier, vous pouvez utiliser Autoprefixer pour cela).\n\n    //CSS\n    div#slider figure {\n      position: relative;\n      width: 500%;\n      margin: 0;\n      padding: 0;\n      font-size: 0;\n      left: 0;\n      text-align: left;\n      animation: 30s slidy infinite;\n    }\n\nComme vous le voyez, réaliser un _responsive carousel_ est à maints égards plus facile qu’un carrousel fixe\u0026nbsp;!\n\n**Note**\u0026nbsp;: Si vous voulez une solution plus facile et plus rapide, [CSSslidy](http://thenewcode.com/871/CSS-Slidy-20-Captions--more) est un petit JavaScript qui auto-génère des keyframes d’animation CSS3 pour n’importe quel ensemble d’images.\n\nLes photos sont utilisées avec la permission de l’excellent [Trey Radcliff](http://www.stuckincustoms.com/).\n\nVous pouvez retrouver le code de cet article sur Codepen\u0026nbsp;:\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/dudleystorey/pen/ehKpi\"\u003e\n  Responsive CSS Image Slider\u003c/a\u003e de Dudley Storey dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n"},{"slug":"fonctionnement-des-polices-de-caracteres-1","title":"Mécanique des polices de caractères, 1","author":{"name":"Tobias Frere-Jones","lastname":"Frere-Jones"},"original":{"date":"10 février 2015","site":"Frere-Jones","siteUrl":"https://frerejones.com/","postUrl":"https://frerejones.com/blog/typeface-mechanics-001","copyright":"2015"},"dateCascade":"14 février 2015","dateMachine":"2O150214","tags":["typographie"],"about":[],"excerpt":"Notre esprit veut dessiner une forme, mais nos yeux veulent en voir une autre. Cette série d'articles de Tobias Frere-Jones explore le travail en coulisses permettant aux polices d'être fonctionnelles.","featured":false,"featuredImage":"/images/Turlot-cropB1-compressor.jpeg","order":null,"content":"\nNotre esprit veut dessiner une forme, mais nos yeux veulent en voir une autre. Le design de police de caractères consiste en partie à gérer cette éternelle friction entre la logique et l’optique. Elle est toujours présente, quel que soit le style.\n\nCette nouvelle série d’articles explorera ce que j’appelle la “mécanique des polices”, le travail en coulisses qui permet aux polices d’être visuellement fonctionnelles. C’est lui qui apaise les bizarreries de la perception humaine, qui aide ou gêne l’utilisateur, et façonne les vieilles conventions du design.\n\nLe processus de design de polices de caractères comporte de nombreux moments contre-intuitifs. L’un des premiers concerne la position verticale et la taille, que nous souhaitons cohérentes entre toutes les lettres. Nous pourrions décider d’une mesure et l’appliquer partout, mais ce plan simple et logique échouerait une fois le résultat devant nos yeux et notre esprit.\n\nDes formes telles que le _H_ ont une relation simple et stable à la [ligne de base](http://fr.wikipedia.org/wiki/Ligne_de_base_%28typographie%29) et la hauteur de capitale (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e \u003ci\u003eNdT : voir l’article [Caractères](http://fr.wikipedia.org/wiki/Caract%C3%A8re_%28typographie%29), de wikipedia, pour les termes techniques\u003c/i\u003e.). Leurs bords supérieur et inférieur coïncident avec ces limites et s’y maintiennent. Mais seul un tout petit bout d’un _O_ est compris dans ces limites, le reste de la forme s’en éloigne et nous en concluons —\u0026nbsp;faussement mais logiquement\u0026nbsp;— que la forme arrondie est trop petite.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/square-round-06-compressor.gif\" width=\"700\" height=\"394\" alt=\"des formes mathématiquement égales ne le sont pas optiquement\"/\u003e\u003cfigcaption\u003eDes formes carrée et ronde : mathématiquement égales ou optiquement égales\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi la hauteur “correcte” semble inadéquate, alors “trop” paraîtra correct. C’est pourquoi on dessine le _O_ plus grand que le _H_ même si c’est mathématiquement incorrect. Mais nous lisons avec nos yeux, pas avec des règles, et l’oeil devrait toujours être vainqueur. Les polices de caractères de toutes les époques utilisent cette compensation, souvent appelée “dépassement” (_[overshoot](http://en.wikipedia.org/wiki/Overshoot_%28typography%29)\\_).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Turlot-cropA2-compressor.jpeg\" width=\"1000\" height=\"200\" alt='une police \"antique\"'/\u003e\u003cfigcaption\u003eRomaines Droites, par la Fonderie Turlot, 1880\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Turlot-cropB1-compressor.jpeg\" width=\"1000\" height=\"200\" alt=\"le O dépasse les empattements du I et du U\"/\u003e\u003cfigcaption\u003e\"Overshoot\", Les formes arrondies dépassent les formes plates\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi les courbes ont besoin de dépasser parce que leur comportement est différent de celui des carrés, les formes pointues, elles, sont encore moins semblables aux carrés, et c’est pourquoi elles ont besoin de plus de dépassement. Mais si l’on fait bien attention, les lecteurs ne se rendront pas compte des tailles et positions multiples. Toutes _ont l’air_ égales.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/FutMedFASHIONS-compressor.jpeg\" width=\"2000\" height=\"500\" alt='une police \"moderne\"'/\u003e\u003cfigcaption\u003eFutura Medium, par Paul Renner, Bauer 1928\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/FutMed-overlay-5a-compressor.gif\" width=\"1000\" height=\"1000\" alt=\"dépassements différents selon la forme des lettres\"/\u003e\u003cfigcaption\u003eDépassements progressifs, pour les formes arrondies et pointues\u003c/figcaption\u003e\u003c/figure\u003e\n\nMais comme de nombreux aspects de la mécanique des polices de caractères, le dépassement est affaire de gradation. Les courbes larges se comportent presque comme des formes plates, elles s’attardent plus longtemps sur la ligne de base qu’une forme ronde ou ovale. Ci-dessous, deux polices du même designer et de la même fonderie, à la même taille et à peu près les mêmes proportions. La différence de dépassement est liée à la différence de courbe. L’une est un arrondie (tendant vers l’ovale), l’autre tend vers le rectangle.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Recta-Metropole-words-02-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"deux polices\"/\u003e\u003cfigcaption\u003eRecta Nera Stretta (au-dessus) et Metropol Nera Compatta, par Aldo Novarese, Nebiolo vers 1960 et 1967\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Recta-Metropole-overshoot-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"le design différent des polices entraîne des dépassements différents\"/\u003e\u003cfigcaption\u003eDifférences de dépassement\u003c/figcaption\u003e\u003c/figure\u003e\n\nMême à l’intérieur d’une famille, des variations de graisse et d’épaisseur peuvent altérer l’apparence de la forme et imposer un calibrage de son alignement. Par exemple un _V_ peut avoir une pointe dans une [graisse](http://fr.wikipedia.org/wiki/Graisse_%28typographie%29) légère, mais avoir une pointe émoussée et modifier sa profondeur apparente et son alignement pour s’accorder à une graisse supérieure.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Nobel-V2-compressor.jpeg\" width=\"1000\" height=\"562\" alt=\"la lettre V dans des graisses différentes\"/\u003e\u003cfigcaption\u003eLe dépassement diminue à mesure que la pointe s’émousse\u0026nbsp;: FB Nobel Light, Book et Regular, par S.H.\u0026nbsp;de\u0026nbsp;Roos, Amsterdam 1928. Revisité par Font Bureau en 1992\u003c/figcaption\u003e\u003c/figure\u003e\n\nLes alignements en [bas de casse](https://fr.wikipedia.org/wiki/Bas_de_casse) sont souvent plus difficiles à obtenir du fait que de nombreuses lettres ont des formes aplaties immédiatement adjacentes à des formes arrondies et toutes deux doivent être optiquement correctes. Un alignement mixte devrait sembler “naturel” et ne montrer aucun signe de l’effort nécessaire.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/HelvMedMainz4-compressor.jpeg\" width=\"1000\" height=\"400\" alt=\"le mot Mainz en helvetica medium\"/\u003e\u003cfigcaption\u003eHelvetica Medium par Eduard Hoffmann, Stempel 1956\u003c/figcaption\u003e\u003c/figure\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/HelvMed-lc-arch3-compressor.jpeg\" width=\"1000\" height=\"400\" alt=\"le I et le N de Mainz, le N dépasse\"/\u003e\u003cfigcaption\u003eAlignement mixte en bas de casse\u003c/figcaption\u003e\u003c/figure\u003e\n\nLes polices avec [empattement](http://fr.wikipedia.org/wiki/Empattement_%28typographie%29) (_serif_) inclinés peuvent encore compliquer les choses. Cette caractéristique est emblématique du style ancien en bas de casse, peu de lettres sont aplaties. Dans ce style, la hauteur théorique des lettres en bas de casse est très rarement respectée et la majorité des lettres —\u0026nbsp;dont certaines parmi les plus communes\u0026nbsp;— sont un mélange de courbes et d’angles capricieux.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Caslon540_nx0-compressor.jpeg\" width=\"1000\" height=\"500\" alt=\"le N dépasse, mais aussi le sérif supérieur du N, qui est incliné\"/\u003e\u003cfigcaption\u003eCarlson No. 540, American Type Founders 1906\u003c/figcaption\u003e\u003c/figure\u003e\n\nLe _x_ en bas de casse est un cas rare de quasi absence de changement entre un style et un autre. Quelle que soit l’épaisseur de ses empattements, le contraste de ses graisses, l’[inclinaison de son axe](http://fr.wikipedia.org/wiki/Axe_%28typographie%29), le _x_ aura très certainement une partie supérieure et inférieure aplatie. C’est parce que le _x_ est un repère fiable qu’on utilise l’expression “hauteur d’x” pour parler de la zone de bas-de-casse (W.A. Dwiggins a parfois utilisé le terme “hauteur de z” mais je n’ai pas retrouvé d’autre mention de cette convention).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Orpheo-serif-02-compressor.jpeg\" width=\"1280\" height=\"720\" alt=\"l'empattement inférieur d'un I, concave\"/\u003e\u003cfigcaption\u003eOrpheo (inachevé)\u003c/figcaption\u003e\u003c/figure\u003e\n\nLes empattements marquent les limites supérieure et inférieure, mais de façon parfois imprécise. Des designs basés sur une dérivation calligraphique ou autre peuvent présenter des empattements concaves qui font que de nombreuses formes “plates” ne le sont plus. Le conflit est localisé de manière inhabituelle, le centre et les extrémités de l’empattement étant alignés différemment. La paix visuelle est souvent obtenue en établissant ces empattements concaves à mi-chemin de la ligne de base, une partie au-dessus, l’autre en-dessous.\n\nL’établissement d’une taille optiquement cohérente est souvent une difficulté parmi bien d’autres. L’enchevêtrement de poids, de largeur, d’espacement en sont d’autres, ainsi que les difficultés liées à certaines lettres en particulier. Mais nous verrons cela dans les articles à suivre.\n"},{"slug":"un-surlignage-simple-en-css","title":"Un surlignage simple en CSS","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"30 janvier 2015","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/simple-css-row-column-highlighting/","copyright":"2015"},"dateCascade":"14 février 2015","dateMachine":"2O150214","tags":["css","javascript"],"about":[],"excerpt":"Surligner les rangées d'un tableau en CSS est très facile, mais les colonnes ? Les pseudo-éléments sont mis à contribution dans ce tutoriel court, facile et astucieux de l'indispensable Chris Coyier.","featured":false,"featuredImage":"/images/authors/chris-coyier.jpg","order":null,"content":"\nIl est très facile de surligner les rangées d’un tableau en CSS. `tr:hover { background: yellow; }` fait ça très bien. Mais surligner les colonnes est déjà plus difficile, parce qu’il n’y a pas d’élément HTML unique qui serait le parent des cellules d’un tableau dans une colonne donnée. Une [petite touche de JavaScript](http://css-tricks.com/row-and-column-highlighting/) pourrait faire l’affaire, mais Andrew Howe mais envoyé un mail dernièrement pour partager une astuce qu’il avait trouvée sur [StackOverflow](http://stackoverflow.com/questions/848840/cols-colgroups-and-css-hover-psuedoclass/11175979#11175979), envoyée par [Matt Walton](http://thinkingstiff.com/). Elle avait déjà quelques années, alors je me suis dit que je pourrais la mettre à jour et vous la livrer.\n\n## L’astuce : des pseudo-éléments géants sur les td, et overflow hidden\n\nCSS ne nous permet pas vraiment de connaître les dimensions du tableau, donc on crée des [pseudo-éléments](/articles/combinateurs-et-pseudo-classes-css/#lespseudoelements) super grands avec une valeur de `top` négative de la moitié, comme ceci\u0026nbsp;:\n\n    //CSS\n    table {\n      overflow: hidden;\n    }\n\n    tr:hover {\n      background-color: #ffa;\n    }\n\n    td:hover::after,\n    th:hover::after {\n      content: \"\";\n      position: absolute;\n      background-color: #ffa;\n      left: 0;\n      top: -5000px;\n      height: 10000px;\n      width: 100%;\n      z-index: -1;\n    }\n\nLe `z-index` négatif le cache en-dessous du contenu. Un [z-index](/articles/comment-fonctionne-z-index/) négatif est une astuce sympa, mais prenez garde de ne pas imbriquer ce tableau à l’intérieur d’autres éléments comportant un background, sinon le surlignage se trouvera caché en-dessous.\n\nVous pouvez le voir en action (survolez le tableau)\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_pvwmaR\" src=\"//codepen.io/chriscoyier/embed/pvwmaR?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=pvwmaR\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"380\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/pvwmaR/\"\u003e\n  Row and Column Highlighting with CSS Only\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Fonctionnement avec touch\n\nLes [pseudo-classes](/articles/combinateurs-et-pseudo-classes-css/#lespseudoclasses) comme `:hover` fonctionnent plus ou moins sur les terminaux tactiles. Tout d’abord, l’élément doit être focusable, ce qui n’est pas le cas des cellules d’un tableau par défaut. On pourrait certainement ajouter un [event handler](http://en.wikipedia.org/wiki/Event_%28computing%29#Event_handler) pour les clics sur les cellules du tableau, et tout faire en JavaScript, mais voici une méthode qui permet de faire l’essentiel du travail en CSS\u0026nbsp;:\n\n    //jQuery\n\n    // Whatever kind of mobile test you wanna do.\n    if (screen.width \u003c 500) {\n\n      // :hover will trigger also once the cells are focusable\n      // you can use this class to separate things\n      $(\"body\").addClass(\"nohover\");\n\n      // Make all the cells focusable\n      $(\"td, th\")\n        .attr(\"tabindex\", \"1\")\n        // When they are tapped, focus them\n        .on(\"touchstart\", function() {\n          $(this).focus();\n        });\n\n    }\n\nPuis dans le CSS vous ajoutez des styles pour `:focus`.\n\n    //CSS\n\n    td:focus::after,\n    th:focus::after {\n      content: ’’;\n      background-color: lightblue;\n      position: absolute;\n      left: 0;\n      height: 10000px;\n      top: -5000px;\n      width: 100%;\n      z-index: -1;\n    }\n\n    td:focus::before {\n      background-color: lightblue;\n      content: ’’;\n      height: 100%;\n      top: 0;\n      left: -5000px;\n      position: absolute;\n      width: 10000px;\n      z-index: -1;\n    }\n\nDans la démo finale, je développe un peu les sélecteurs CSS pour m’assurer que les cellules vides ne déclenchent rien, que les titres de colonnes dans `\u003cthead\u003e` ne sélectionnent que les colonnes et que les titres de rangées dans `\u003ctbody\u003e` ne sélectionnent que les rangées.\n\nVous pouvez le voir dans la [démo finale](http://codepen.io/chriscoyier/pen/pvwmaR). Et ci-dessous un touch qui fonctionne\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/touch-cells-compressor.gif\" width=\"637\" height=\"483\" alt=\"\"/\u003e\u003c/figure\u003e\n"},{"slug":"le-morphing-en-svg","title":"Le morphing en SVG","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"24 octobre 2014","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/svg-shape-morphing-works/","copyright":"2014"},"dateCascade":"7 février 2015","dateMachine":"2O150207","tags":["css","svg","javascript","animation"],"about":[],"excerpt":"Certaines propriétés SVG ne sont pas animables avec CSS. Chris Coyier montre ici comment réaliser simplement un morphing avec SMIL et Javascript.","featured":false,"featuredImage":"/images/star.png","order":null,"content":"\nL’[animation d’un SVG au moyen de CSS](/articles/animer-un-svg-avec-css/) est facile, cependant CSS ne peut pas animer toutes les propriétés SVG animables. Par exemple, les propriétés qui définissent la forme présente d’un élément ne peuvent être modifiées ou animées en CSS. Il est toutefois possible de le faire grâce à SMIL. Sara Soueidan en parle dans son remarquable [Guide des animations SVG (SMIL)](/articles/guide-des-animations-svg/) ici-même, mais je voudrais éclairer ce point plus précisément ici.\n\n**Le plus important à retenir\u0026nbsp;: les formes doivent avoir le même nombre de points**  \nAutrement, l’animation ne marchera pas. La forme ne disparaîtra pas, rien de grave ne se produira, mais rien ne s’animera.\n\nIl n’est pas toujours évident de savoir combien de points constituent une forme en regardant l’attribut `d` (dans le cas d’un `path`) ou `point` (dans le cas d’un polygone), le mieux est parfois de commencer avec une forme simple dans un programme d’édition vectorielle.\n\n### 1. Commencer avec la forme la plus complexe\n\nDans cette démo, je vais partir d’une étoile, qui sera ma forme la plus compliquée, pour la morpher en _check_ de case à cocher (une “hirondelle”).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/star.png\" width=\"297\" height=\"291\" alt=\"\"/\u003e\u003c/figure\u003e\n\nGardez une copie de ce SVG, puis utilisez une autre version pour construire la forme suivante.\n\n### 2. Construire la forme suivante avec les mêmes points\n\nDéplacez les points pour obtenir la forme désirée.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/star-illustrator-gif-compressor.gif\" width=\"360\" height=\"304\" alt=\"dans illustrator, on déplace les points pour former une hirondelle\"/\u003e\u003c/figure\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/check-illustrator-gif.png\" width=\"320\" height=\"311\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### 3. Utiliser la forme de départ dans le SVG lui-même\n\n    //SVG\n    \u003csvg viewBox=\"0 0 194.6 185.1\"\u003e\n\n      \u003cpolygon fill=\"#FFD41D\" points=\" ... les points de la forme 1 ... \"\u003e\n\n      \u003c/polygon\u003e\n\n    \u003c/svg\u003e\n\n### 4. Ajouter un élément d’animation vers la forme suivante\n\n    //SVG\n    \u003csvg viewBox=\"0 0 194.6 185.1\"\u003e\n\n      \u003cpolygon fill=\"#FFD41D\" points=\" ... les points de la forme 1 ... \"\u003e\n\n        \u003canimate attributeName=\"points\" dur=\"500ms\" to=\" ... les points de la forme 2 ... \" /\u003e\n\n      \u003c/polygon\u003e\n\n    \u003c/svg\u003e\n\nCette animation sera lancée immédiatement, il nous faut corriger cela.\n\n### 5. Déclencher l’animation quand on le veut\n\nSMIL permet de traiter les interactions telles que clics et hovers, tant que tout se passe à l’intérieur de SVG. Par exemple, vous pourriez lancer l’animation lorsqu’elle est cliquée\u0026nbsp;:\n\n    //SVG\n    \u003cpolygon id=\"shape\" points=\" ... les points de la forme 1 ... \"\u003e\n\n      \u003canimate begin=\"shape.click\" attributeName=\"points\" dur=\"500ms\" to=\" ... les points de la forme 2 ... /\u003e\n\n    \u003c/polygon\u003e\n\nPas mal, mais un peu limité car il ne permet de traiter que les clics sur ce SVG précisément. Mais quid si cet élément fait partie d’un bouton et qu’on veut lancer l’animation lorsque c’est le bouton qui est cliqué\u0026nbsp;?\n\nTout d’abord, donnons un ID à notre animation, afin de permettre à JavaScript de la retrouver, puis empêchons tout déclenchement intempestif\u0026nbsp;:\n\n    //SVG\n    \u003canimate id=\"animation-to-check\" begin=\"indefinite\" ... /\u003e\n\nNous avons maintenant référencé cette animation et nous pouvons la déclencher comme nous l’entendons\u0026nbsp;:\n\n    //JavaScript\n    animationToCheck = document.getElementById(\"animation-to-check\");\n\n    // Lancez ceci sur un clic, ou de la façon que vous voulez\n    // (voir démo ci-dessous)\n    animationToCheck.beginElement();\n\n### Démo\n\nCette démo contient en fait quatre animations\u0026nbsp;: une pour morpher l’étoile en hirondelle, une pour modifier la couleur de la forme, et les mêmes dans l’animation inverse. Lorsqu’on \u003cspan itemprop=\"about\"\u003eclique sur le bouton\u003c/span\u003e, on vérifie d’abord l’état présent du bouton, puis on déclenche les animations appropriées.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_DpFfE\" src=\"//codepen.io/chriscoyier/embed/DpFfE?height=200\u0026amp;theme-id=light\u0026amp;slug-hash=DpFfE\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"200\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/DpFfE/\"\u003e\n  Shape Morph Button\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n"},{"slug":"shape-blobbing","title":"Shape Blobbing","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"28 octobre 2014","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/shape-blobbing-css/","copyright":"2014"},"dateCascade":"7 février 2015","dateMachine":"2O150207","tags":["css","animation"],"about":[],"excerpt":"Le shape blobbing c'est cet effet d'aspiration d'une goutte par une autre, réalisable en CSS à partir de filtres pour le flou et le contraste. Tutoriel clair de Chris Coyier.","featured":false,"featuredImage":"/images/blur-vs-contrast-compressor.png","order":null,"content":"\nNous avons vu récemment [le morphing en SVG](/articles/le-morphing-en-svg/), c’est à dire une forme qui se mue en une autre. Aujourd’hui, nous allons voir des formes qui se phagocytent entre elles\u0026nbsp;! C’est le _shape bobbling_, vous savez, cet effet d’aspiration qu’on peut voir par exemple dans [cette vidéo de gouttes de mercure](https://www.youtube.com/watch?v=31CE2BYicyU#t=45) ou, de manière inverse, dans les images de [division cellulaire](http://fr.wikipedia.org/wiki/Division_cellulaire).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/mercury-compressor.gif\" alt=\"une goutte de mercure en aspire une autre\"/\u003e\u003c/figure\u003e\n\nJe ne sais pas qui a découvert le premier que cet effet était réalisable sur le web, mais \u003ca href='http://codepen.io/lbebber/pen/lFdHu/'\u003ela première démo que j’en aie jamais vue\u003c/a\u003e était de Lucas Bebber. Puis celle-ci, de [Felix Hornoiu](http://codepen.io/felixhornoiu/pen/EjDwF/) (GIF ralenti pour mieux observer l’effet)\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/bubbles-compressor.gif\" alt=\"deux cercles fusionnent\"/\u003e\u003cfigcaption\u003e\u003ca href=\"http://codepen.io/chriscoyier/pen/lIBAg?editors=110\"\u003eDémo\u0026nbsp;visible\u0026nbsp;ici\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\n\n### Une astuce simple, à partir de filtres pour le flou et le contraste\n\nLe flou rend l’élément... flou, et le contraste lutte contre le flou. Si vous contrastez suffisamment, votre forme retrouve (à peu près) ses contours\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/blur-vs-contrast-compressor.png\" alt=\"tableau flou (en x) et contraste (en y)\"/\u003e\u003c/figure\u003e\n\nLà où ça devient intéressant, c’est que lorsque deux éléments floutés (mais forcés à ne pas apparaître comme tels) s’approchent l’un de l’autre, leurs flous “potentiels” créent suffisamment de contraste couleur “potentiel” pour que l’on ait l’impression que les formes se connectent et se mélangent.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/blur-shape.png\" alt=\"\"/\u003e\u003cfigcaption\u003e\u003ca href=\"http://codepen.io/chriscoyier/pen/lIBAg?editors=110\"\u003eDémo\u0026nbsp;visible\u0026nbsp;ici\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\n\nJe trouve qu’il est plus aisé de faire fonctionner l’effet en floutant la forme, mais en ajoutant le contraste sur le contexte, c’est à dire sur le container de l’effet (ci-dessous .stage).\n\n    //CSS\n\n    .stage {\n      /* doit être explicite, pour que le contraste fonctionne */\n      background: white;\n\n      /* des trucs bizarres arrivent au contact des bords, cachez\n      éventuellement l’overflow */\n      padding: 30px;\n\n      -webkit-filter: contrast(20);\n      filter: contrast(20);\n    }\n    .dot {\n      border-radius: 50%;\n      width: 50px;\n      height: 50px;\n\n      /* doit être une couleur très contrastante, p.ex. gris clair sur\n      blanc ne marchera pas */\n      background: black;\n\n      -webkit-filter: blur(15px);\n      filter: blur(15px);\n    }\n\nEt ça devient vraiment drôle quand on ajoute une animation pour déclencher la danse des phagocytes. Voici une démo dans laquelle vous pouvez jouer avec les valeurs de flou, de contraste et de luminosité (cette dernière a un effet sur le flou)\u0026nbsp;:\n\n\u003cp data-height=\"45\" data-theme-id=\"5394\" data-slug-hash=\"bopGc\" data-default-tab=\"result\" data-user=\"chriscoyier\" class='codepen'\u003eSee the Pen \u003ca href='http://codepen.io/chriscoyier/pen/bopGc/'\u003eBlobbing Playground\u003c/a\u003e by Chris Coyier (\u003ca href='http://codepen.io/chriscoyier'\u003e@chriscoyier\u003c/a\u003e) on \u003ca href='http://codepen.io'\u003eCodePen\u003c/a\u003e.\u003c/p\u003e\n\u003cscript async src=\"//assets.codepen.io/assets/embed/ei.js\"\u003e\u003c/script\u003e\n\n### Compatibilité navigateurs\n\nAujourd’hui, à peu près tout le monde, WebKit/Blink, Firefox à partir de FF35, donc\u0026nbsp;: Chrome / Safari / Opera / Firefox / iOS / Android. Pas mal. Le seul qui manque à l’appel est IE.\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : Pour voir une superbe application de cet effet, voyez_ [l’effet Gooey](https://la-cascade.io/leffet-gluant-avec-svg/) _de Lucas Bebber_.\n"},{"slug":"quest-ce-quun-element-remplace","title":"Qu'est-ce qu'un élément remplacé ?","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"24 novembre 2013","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"https://thenewcode.com/461/Whats-A-Replaced-Element","copyright":"2013"},"dateCascade":"13 janvier 2015","dateMachine":"2O150113","tags":["html"],"about":[],"excerpt":"Avez-vous déjà entendu parler des éléments HTML remplacés ? Vous les utilisez pourtant tous les jours sans le savoir, et connaître leur nature peut vous éviter quelques soucis.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":null,"content":"\nOn ne trouve pas beaucoup d’information en ligne sur les éléments remplacés HTML. Je n’ai rien trouvé à leur sujet dans les livres sur le développement web que je connais. C’est bien dommage... car si j’avais connu plus tôt les limites des éléments remplacés je me serais épargné bien du stress lorsque j’ai commencé mes expériences de CSS avancé.\n\nPour l’essentiel, les éléments remplacés sont _des éléments HTML ayant une largeur et une hauteur prédéterminées en l’absence de CSS précis_. Une autre façon de voir les choses est de penser aux éléments remplacés comme à _des balises ayant leur contenu remplacé par une source extérieure_. `\u003cimg\u003e` et `\u003cvideo\u003e` en sont deux exemples évidents, mais on peut y ajouter de nombreux éléments de formulaires tels que `\u003cinput\u003e`. Par exemple, lorsque vous insérez le code suivant dans une page\u0026nbsp;:\n\n    \u003cinput type=“text”\u003e\n\n...l’_input_ apparaît, sans que vous n’ayez rien à faire, aux dimensions qui conviennent à la saisie d’une ligne unique. Cela ne signifie pas que vous n’avez pas besoin d’ajouter des attributs et valeurs supplémentaires à l’élément, ou que vous ne pouvez pas lui appliquer de CSS, mais simplement que le navigateur _remplace_ cette balise par un objet ayant des dimensions prédéterminées par défaut. La même chose se produit avec `\u003cimg\u003e`\u0026nbsp;:\n\n    \u003cimg src=“bison.jpg” alt=“Plains bison”\u003e\n\nSans autre information, `bison.jpg` sera chargé dans la page et la balise `\u003cimg\u003e` remplacée par le contenu de ce fichier, aux dimensions originales de l’image.\n\n`\u003cbr\u003e`, `\u003chr\u003e` et `\u003cobject\u003e` sont des éléments remplacés, de même que `\u003cinput\u003e`, `\u003cbutton\u003e` et `\u003ctextarea\u003e`. En HTML5, `\u003cvideo\u003e` et `\u003ciframe\u003e` sont également des éléments remplacés, ainsi que (dans certaines circonstances) `\u003caudio\u003e` et `\u003ccanvas\u003e`.\n\nMais puisque l’apparence de ces éléments peut être modifiée via CSS, en quoi le fait que ce soit des _éléments remplacés_ pose-t-il problème\u0026nbsp;? En raison d’une règle essentielle\u0026nbsp;:\n\n\u003e 👉🏿 \u0026nbsp;On ne peut pas appliquer de contenu généré aux éléments remplacés. Autrement dit on ne peut pas leur appliquer les pseudo-éléments `:before` et `:after`.\n\nPensons-y un instant. Est-ce que ce ne serait pas génial de pouvoir auto-générer des légendes pour nos images en CSS\u0026nbsp;? On a l’information disponible, on a les attributs `alt` et `title`, tout est là et il nous suffirait de faire\u0026nbsp;:\n\n    img:after { content: attr(alt); }\n\nCe serait parfait ! On pourrait afficher la valeur `title` de l’image directement dans la page et on n’aurait pas à se soucier de `\u003cfigcaption\u003e` ou des [listes de définitions](https://demosthenes.info/blog/55/CSS-and-Images-Captioned-Images) (en XHTML)... Mais non, on ne peut pas. La balise `\u003cimg\u003e` est _déjà_ un contenu remplacé\u0026nbsp;: on ne peut pas générer plus de contenu.\n\nUn résultat utile en tout cas : si vous n’obtenez rien [en appliquant `:before` ou `:after` à un élément](/articles/les-pseudo-elements-css-before-et-after/), il y a des chances que ce soit parce qu’il s’agit d’un élément remplacé\u0026nbsp;!\n"},{"slug":"utiliser-css-object-fit","title":"Utiliser CSS object-fit","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"13 janvier 2015","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"https://thenewcode.com/967/The-Widescreen-Web-Using-CSS-object-fit","copyright":"2015"},"dateCascade":"13 janvier 2015","dateMachine":"2O150113","tags":["css"],"about":["object-fit"],"excerpt":"La propriété object-fit de CSS offre des options de redimensionnement et de présentation des images qui faciliteront la vie des designers.","featured":false,"featuredImage":"/images/1apex.jpeg","order":30,"content":"\nTout le monde sait que le format des films est redimensionné lorsqu’ils passent du cinéma à la télévision ou aux tablettes\u0026nbsp;: format _letterbox_, changement de dimensions, image rognée... En tant que développeur web, vous connaissez également les diverses façons dont les images de background peuvent être rendues responsives, s’étirer pour couvrir le viewport ou être recadrées à mesure que la fenêtre du navigateur est redimensionnée.\n\nIl manquait jusqu’à présent une règle intelligente de traitement du redimensionnement des images, similaire à celle qui existe pour la vidéo. C’est chose faite avec CSS `object-fit`.\n\nLes images en format vignette sont un bon cas d’utilisation. Actuellement, les images de produits d’une boutique en ligne sont généralement traitées par un éditeur bitmap de façon à avoir toutes la même taille et le même ratio d'aspect. Cependant, même avec des instructions précises et des vérifications côté-serveur, si le client peut uploader tout seul ses images sur son site il y a un risque d’avoir des images étirées ou des ratios d’aspect différents. Par exemple, vous avez décidé que les vignettes suivront ce style\u0026nbsp;:\n\n```\n.product-thumb img {\n  width: 150px;\n  height: 150px;\n  border: 1px solid;\n}\n```\n\n...ce qui impose que toutes les vignettes aient ces dimensions ou en tout cas qu’elles soient toutes carrées. Mais si le client uploade des images comme celle-ci\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/1apex.jpeg\" width=\"490\" height=\"636\" alt=\"image de robot\"/\u003e\u003cfigcaption\u003ePhotographie par \u003ca href=\"https://www.flickr.com/photos/tinkerbots\"\u003eTinkerbots\u003c/a\u003e, sous licence CC\u003c/figcaption\u003e\u003c/figure\u003e\n\n...ou celle-ci :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/2le-helicron.jpeg\" width=\"640\" height=\"494\" alt=\"image d'un autre robot\"/\u003e\u003cfigcaption\u003ePhotographie par \u003ca href=\"https://www.flickr.com/photos/tinkerbots\"\u003eTinkerbots\u003c/a\u003e, sous licence CC\u003c/figcaption\u003e\u003c/figure\u003e\n\n...lorsque les images sont affichées au \u003cspan itemprop=\"about\"\u003eformat vignette\u003c/span\u003e, elles apparaissent \"écrasées\" par les règles CSS, dans un sens ou dans l’autre\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/3thumbnails.jpeg\" width=\"316\" height=\"162\" alt=\"les images sont déformées\"/\u003e\u003c/figure\u003e\n\nÉvidemment, ce n’est pas idéal. Les solutions habituelles consistent à\u0026nbsp;:\n\n- obliger l’utilisateur à uploader des images à un format précis\n- traiter les images côté-serveur pour obtenir la taille souhaitée\n- afficher les images comme background, avec un positionnement soigné\n- utiliser des applications complexes de `position: fixed`.\n\nÀ présent, `object-fit` nous offre plusieurs options qui sont bien plus faciles à appliquer\u0026nbsp;:\n\n```\n.product-thumbs img {\n  width: 150px;\n  height: 150px;\n  border: 1px solid;\n  object-fit: contain;\n}\n```\n\nLe résultat avec les navigateurs compatibles (Chrome, Safari, et autres clients à base de Webkit/Blink)\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/4compliantBrowsers.jpeg\" width=\"318\" height=\"159\" alt=\"images non déformées\"/\u003e\u003c/figure\u003e\n\nOn obtient un format _letterbox_ qui préserve le ratio d’aspect en ajoutant un espace au-dessus ou au-dessous, ou bien à gauche ou à droite, pour leur donner la bonne taille sans les écraser ni les étirer.\n\nAttention : pour qu’`object-fit` fonctionne, il faut définir les largeur et hauteur de l’élément. De plus il doit s’appliquer à un [élément remplacé](/articles/quest-ce-quun-element-remplace/).\n\nUne autre possibilité est de donner la valeur `cover` à `object-fit`\u0026nbsp;:\n\n```\n.product-thumbs img {\n  width: 150px;\n  height: 150px;\n  border: 1px solid;\n  object-fit: cover;\n}\n```\n\nLe résultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/5cover.jpeg\" width=\"311\" height=\"158\" alt=\"image non déformées, mais tronquées\"/\u003e\u003c/figure\u003e\n\nComme vous pouvez le voir, cela fonctionne exactement comme `background-size: cover` pour les images de background. C’est l’équivalent du recadrage plein écran (_pan and scan_) d’un film originellement en écran large, où tout ce qui dépasse sur les côtés est éliminé.\n\nSi vous préférez le bon vieux comportement par défaut, vous pouvez donner à `object-fit` la valeur `fill`, ce qui sera l’équivalent d’un `background-size: 100% 100%` pour une image de background.\n\nEnfin, il y a `object-fit: none`, qui conserve à l’image ses dimensions originales et son ratio d’aspect, se focalise sur le centre de l’image et supprime tout ce qui dépasse\u0026nbsp;:\n\n```\n.product-thumbs img {\n  width: 150px;\n  height: 150px;\n  border: 1px solid;\n  object-fit: none;\n}\n```\n\nLe résultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/6none.jpeg\" width=\"314\" height=\"160\" alt=\"format original dans une vignette : on ne voit plus qu'un détail de l'image\"/\u003e\u003c/figure\u003e\n\nSi vous êtes en train de vous dire que ça pourrait être utile dans certains types de galeries d’images, vous avez raison. Des variations sur ce sujet peuvent également être utilisées pour corriger le ratio d’aspect de vidéos uploadées. Je vous montrerai tout cela dans des articles à venir.\n\n_NdT : Dudley Storey a ajouté un CodePen qui fait la synthèse de tout ce qui précède_\u0026nbsp;:\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/dudleystorey/pen/myPZwN/\"\u003e\n  CSS object-fit \u003c/a\u003e de Dudley Storey  dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Compatibilité\n\nPour connaître la compatibilité navigateurs, comme d'habitude il suffit de se reporter à [CanIUse](https://caniuse.com/#feat=object-fit), tous les navigateurs sont à ce jour compatibles, sauf... Internet Explorer, pour lequel la propriété est dans la liste des éléments “à l’étude”.\n\nSi vous voulez vous assurer du bon fonctionnement d’`object-fit` avec tous les navigateurs, voici ce que vous pouvez faire\u0026nbsp;:\n\n👉🏿 Ajouter `overflow: hidden` aux éléments auxquels vous appliquez `object-fit`, pour garantir que les navigateurs incompatibles recadreront l’image à la taille voulue.\n\n```\n.product-thumbs img {\n  width: 150px;\n  height: 150px;\n  border: 1px solid;\n  object-fit: cover;\n  overflow: hidden;\n}\n```\n\n👉🏿 Utiliser le polyfill développé par Anselm Hannemann et Christian Schaefer qui vous donnera une compatibilité avec les navigateurs récalcitrants. Attention toutefois, ce polyfill a quelques problèmes avec [CORS](https://developer.mozilla.org/fr/docs/HTTP/Access_control_CORS) dans Firefox qui interdisent son utilisation actuelle sur ce site.\n\n### Conclusion\n\nLes algorithmes de mise en page automatique d’`object-fit` facilitent grandement la présentation cohérente d’images et de vidéos de dimensions variées, en particulier lorsqu’on les combine avec [picture](https://la-cascade.io/images-responsives-cas-dutilisation-et-snippets/). Nous avons même des options supplémentaires de positionnement lorsque nous utilisons `object-fit` avec `object-position` que nous verrons dans un prochain article.\n\nToutes ces nouvelles possibilités ne devraient toutefois pas être une excuse pour une utilisation paresseuse des tailles de fichiers media (n’oubliez pas de les optimiser\u0026nbsp;!) mais `object-fit` nous permet de nous concentrer sur la création et la conception de contenu plutôt que sur le traitement des images.\n"},{"slug":"5-facons-danimer-de-maniere-responsable","title":"5 façons d'animer de manière responsable","author":{"name":"Rachel Nabors","lastname":"Nabors"},"original":{"date":"14 décembre 2014","site":"24 Ways","siteUrl":"https://24ways.org/","postUrl":"https://24ways.org/2014/five-ways-to-animate-responsibly/","copyright":"2014"},"dateCascade":"23 décembre 2014","dateMachine":"2O141223","tags":["css","animation","accessibilite"],"about":["CSS Transitions","CSS Transform"],"excerpt":"Nous vivons une époque formidable de l'animation web. Mais tout à notre excitation, nous oublions parfois de nous poser la question du pourquoi ?","featured":false,"featuredImage":"/images/Rachel_Nabors_-_Google_1-compressor.jpeg","order":3,"content":"\nCela fait maintenant deux ans que j’ai écrit ici (_NDT: sur_ [24Ways](http://24ways.org/)) un article sur [les animations dans un monde sans Flash](http://24ways.org/2012/flashless-animation/). Depuis, les animations ont surgi un peu partout, aussi bien sur des interfaces au design épuré que sur des grilles de type magazine. C’est une époque formidable pour tous les mordus d’animation et d’interaction, les passionnés d’expérience utilisateur (UX), les designers d’interface utilisateur (UI) et toute une troupe d’autres acronymes\u0026nbsp;!\n\nMais dans notre hâte à expérimenter toutes ces possibilités d’animation, il semble que nous nous posions de moins en moins la question de savoir si nous devrions vraiment les utiliser. Nous passons plus de temps à nous creuser les méninges sur la façon d’animer tous les éléments à 60fps qu’à réfléchir aux moyens d’éviter que les utilisateurs souffrant de [troubles vestibulaires](http://a11yproject.com/posts/understanding-vestibular-disorders/) ne puissent utiliser notre site.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Rachel_Nabors_-_Google_1-compressor.jpeg\" width=\"999\" height=\"561\" alt=\"vos designers ne se sont pas posé la question de savoir s'ils devaient utiliser des animations\"/\u003e\u003c/figure\u003e\n\nJ’aime l’animation web. Je la vis, et j'en fais [d’adorables petites choses stupides](http://rachelnabors.com/alice-in-videoland/book/) qui n’auraient pas leur place sur un site qui se respecte. Je sais qu’on peut en abuser. Nous nous sommes tous moqués de la _Flash-turbation_... mais comme nous oublions vite les leçons apprises de cette époque du design web\u0026nbsp;! Les effets de parallax scrolling sont peut-être le _skip intro_ de cette génération. Nous avons certainement appris des choses plus intéressantes dans la période de sobriété [entre Flash et l’API d’animation web](http://www.smashingmagazine.com/2014/11/18/the-state-of-animation-2014/).\n\nAlors voici cinq petits conseils pour nous permettre de prendre un peu de recul par rapport aux excès d’animations. Si nous les gardons bien à l’esprit, nous pouvons faire de 2015 l’année où l’animation web prendra son véritable essor.\n\n## Animez délibérément\n\nMalheureusement, l’animation est considérée par la majorité des designers comme un élément décoratif. Les designers d’interfaces utilisateurs et les développeurs d’interaction comprennent mieux ces choses. Mais lorsque je donne un atelier sur l’_animation pour l’interaction_, je sais que mes étudiants devront mener une rude bataille contre des décideurs qui considèrent cela très joli, mais rangent rapidement le sujet au dernier rang de leurs priorités, quand ils ne l’éliminent pas tout simplement.\n\nDifficile de se défaire de cette tare. Mais tout commence avec la qualité de nos choix\u0026nbsp;: animer de manière délibérée, ou de ne pas animer du tout. Les animations de raccroc causeront toujours plus de mal que de bien. Les utilisateurs risquent de se plaindre qu’elles sont trop lentes ou trop rapides, ou de râler parce qu’ils ne comprennent pas ce qui se passe.\n\nAu dernier Chrome Dev Summit cette année j’ai eu le privilège de m’entretenir avec [Roma Sha, responsable UX pour le design matériel de Polymer](https://www.youtube.com/watch?v=tfSiXRy1vEw) (et la merveilleuse [documentation d’animation](http://www.google.com/design/spec/animation/meaningful-transitions.html#)). Je lui ai demandé quel conseil elle donnerait aux personnes qui utilisent les animations et les transitions dans leur design. Elle m’a fait cette réponse très simple : **animez de manière délibérée**. Si vous ne pouvez pas vous poser un instant pour réfléchir à l’animation et pour prendre des décisions bien informées et bien articulées dans l’intérêt de l’utilisateur, alors mieux vaut ne même pas vous lancer là-dedans. Une animation prend de l’énergie, et une mauvaise animation est pire que pas d’animation du tout.\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/Rachel_Nabors_-_Google_2.jpeg\" width=\"994\" height=\"555\" alt=\"Oooh, quel rabat-joie ! Que pourrait-il arriver de mauvais ?\"/\u003e\u003c/figure\u003e\n\n## Il faut plus que 12 principes\n\nNous essayons toujours de faire des corrélations entre des choses disparates qui suscitent notre intérêt. Depuis peu, il semble que de plus en plus de gens mettent [The Illusion of Life](http://www.amazon.com/gp/product/0786860707) (_NDT: une histoire des animations Disney et des procédés utilisés_) dans leur bibliothèque à côté de [Understanding Comics](http://www.scottmccloud.com/2-print/1-uc/index.html) (_NDT: le manuel de base pour comprendre la bande dessinée_). Ces livres nous donnent des aperçus utiles d’autres industries. Cependant, nous ne devrions jamais confondre un site web et un livre de bandes dessinées ou un dessin animé. Certains de ces concepts, s’ils nous aident à considérer notre travail sous un jour nouveau, sont plus ou moins appropriés au domaine qui est le nôtre.\n\n\u003cfigure role=\"group\"\u003e\n\u003ciframe src=\"//player.vimeo.com/video/93206523?color=7d90ff\" width=\"500\" height=\"198\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cfigcaption\u003e\u003ca href=\"http://vimeo.com/93206523\"\u003eThe illusion of life\u003c/a\u003e from \u003ca href=\"http://vimeo.com/centodesign\"\u003ecento lodigiani\u003c/a\u003e on \u003ca href=\"https://vimeo.com\"\u003eVimeo\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\n\nJe pense en particulier aux _12 principes de l’animation_, mis en avant par les vétérans des studios Disney dans ce beau livre The Illusion of Life. Ces principes sont très utiles pour faire des animations réalistes et accrocheuses, comme une balle qui rebondit ou un écureuil qui trottine, mais ils ne nous orientent pas du tout pour savoir quand ou comment quelque chose doit être animé dans le cadre d’une expérience interactive améliorée, comme par exemple combien de temps un menu déroulant doit prendre pour se dérouler, ou bien si un groupe d’objets manipulables devrait être animé de manière séquentielle ou simultanée.\n\nLes douze principes sont un excellent point de départ, mais nous avons tellement plus à apprendre. J’ai listé au moins [six autres fonctions d’animation interactive](http://alistapart.com/article/web-animation-at-work) applicables à la conception web et d’applications. Lorsque nous pensons à l’animation, nous devrions envisager pourquoi et comment, et non pas seulement aux aspects esthétiques. Ceux-ci ne signifient rien si l’animation est superflue ou source de confusion.\n\n## Utile et nécessaire, _puis_ belle\n\nChez les Shakers, il y a un proverbe qui dit\u0026nbsp;: “Ne fais pas quelque chose si elle n’est pas à la fois nécessaire et utile; mais si elle est à la fois nécessaire et utile, n’hésite pas à la rendre belle”. S’agissant de l’animation et du web, il y a actuellement très peu de documentation sur ce qui la rend utile ou nécessaire. Nous avons tendance à nous concentrer davantage sur la beauté, l’agrément, l’esthétique. Mais même si l’esthétique est importante, elle occupe la banquette arrière par rapport à l’expérience globale de l’utilisateur.\n\n\u003cfigure role=\"group\"\u003e\n\u003ciframe width=\"480\" height=\"360\" src=\"//www.youtube.com/embed/m5MrbCGcaUI?rel=0\" allowfullscreen\u003e\u003c/iframe\u003e\u003cfigcaption\u003ePokemon Yellow\u003c/figcaption\u003e\u003c/figure\u003e\n\nLa première fois que j’ai vu l’écran de chargement de Pokemon Yellow sur ma GameBoy j’ai été captivée. À partir de la sixième fois, j’écrasais le bouton Start dès que le logo apparaissait à l’écran. Ce qui nous semble plein de charme et de sens lorsque nous travaillons sur un projet peut apparaître tout autrement à nos utilisateurs. Et même lorsqu’une animation adorable est très bien reçue, comme ce fut le cas de l’écran d’ouverture de Pokemon Yellow, trop de répétitions d’une animation jolie mais devenue inutile peut irriter l’utilisateur.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/animation-ui-illos2.jpeg\" width=\"530\" height=\"333\" alt=\"\"/\u003e\u003cfigcaption\u003eJ’ai trouvé ça mignon la première fois, mais à la 70ème... c’est chiant\u0026nbsp;!\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi une animation n’aide pas l’utilisateur d’une façon ou d’une autre, c’est une utilisation gratuite de la batterie et des cycles de processing. Plutôt que d’animer pour le seul plaisir d’animer, nous devrions être capables d’articuler deux choses que l’animation réalise pour l’utilisateur. Par exemple, prenons cette icône de menu de [Finethought.com](http://finethought.com/) (trouvée grâce à [Use Your Interface](http://useyourinterface.com/post/97576888941)). L’icône fait deux choses lorsqu’elle est cliquée\u0026nbsp;:\n\n1. Elle donne un feedback à l’utilisateur en s’animant, ce qui permet à l’utilisateur de savoir qu’elle a bien été cliquée.\n2. Elle montre que sa relation au contenu de la page a changé, en se transformant en bouton de fermeture.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/finethought-compressor.gif\" width=\"331\" height=\"199\" alt=\"le menu hamburger se transforme en croix et inversement\"/\u003e\u003cfigcaption\u003eNdT: Allez sur le site \u003ca href=\"http://finethought.com/\"\u003eFinethought.com\u003c/a\u003e, c’est plus parlant\u0026nbsp;!\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi nous avons deux bonnes raisons d’animer quelque chose, rien ne s’oppose à ce qu’une troisième raison soit l’agrément de l’utilisateur.\n\n## Aller 4 fois plus vite\n\nIl existe une règle générale dans le monde de l’animation traditionnelle qui s’applique très bien à l’animation web\u0026nbsp;: quelle que soit la durée de ton animation, divise-la en deux. Puis divise-la encore en deux. Lorsque nous travaillons sur une animation pendant des heures, notre notion du temps se dilate, ce qui nous paraît rapide est en réalité insupportablement lent pour la plupart des utilisateurs. En fait, la critique la plus courante actuellement de la part des utilisateurs d’interfaces animées est “c’est trop lent !” Une bonne animation est non bloquante, et pour cela, elle doit aller vite.\n\nLorsque vos animations sont prêtes à être intégrées au site, réduisez leur durée à 25% de leur vitesse originale\u0026nbsp;: un fade-out de 4 secondes sera parfait en 1 seconde.\n\n## Installer un bouton stop\n\nQuel que soit l’intérêt ou la nécessité de votre animation, il y aura toujours des gens qu’elle rendra physiquement malades. Pour eux, il est important de prévoir une façon de désactiver les animations sur le site.\n\nHeureusement, les designers web pensent déjà à divers moyens de permettre aux utilisateurs de choisir eux-mêmes leur expérience web. Par exemple, ce [site de présentation du film d’animation Little from the Fish Shop](http://www.malazrybarnyfilm.cz/en/index.html#section-1) permet aux utilisateurs de désactiver la plupart des effets de parallaxe. Même si cela n’annule pas toutes les animations, c’est suffisant pour vous éviter la nausée.\n\n\u003cfigure role=\"group\"\u003e\n\u003ciframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/2c3siLM1zlw?rel=0\" allowfullscreen\u003e\u003c/iframe\u003e\u003c/figure\u003e\n\nL’animation est un outil puissant dans l’arsenal du web design. Mais la prudence s’impose\u0026nbsp;: si nous abusons de l’animation, elle risque de finir par avoir mauvaise réputation. Si nous la sous-estimons, elle ne sera jamais une priorité. Mais si nous la manions avec sagacité, l’animation est un outil qui nous aidera à construire des sites et des applications plus faciles à utiliser et plus agréables, pour les années qui viennent.\n\n**Faisons de 2015 l’année où les animations web se seront mises au service des utilisateurs**.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Rachel_Nabors_-_Google_3-compressor.jpeg\" width=\"993\" height=\"553\" alt=\"\"/\u003e\u003c/figure\u003e\n"},{"slug":"guide-des-animations-svg","title":"Guide des animations SVG (SMIL)","author":{"name":"Sara Soueidan","lastname":"Soueidan"},"original":{"date":"13 octobre 2014","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/guide-svg-animations-smil/","copyright":"2014"},"dateCascade":"17 décembre 2014","dateMachine":"2O141217","tags":["css","svg","design","html","animation"],"about":[],"excerpt":"Pour tout savoir sur les animations SVG avec SMIL. Les animations SMIL permettent des choses impossibles avec CSS.","featured":false,"featuredImage":"/images/control-points-compressor.png","order":null,"content":"\n**Introduction de Chris Coyier** : Sara a le don de plonger au coeur des fonctionnalités du web et de nous les expliquer à nous autres, simples mortels. Ici, elle va creuser au plus profond de SMIL (et ses amis) et de la syntaxe d\u0026rsquo;animation de SVG pour nous donner ce guide _épique_.\n\n👉🏿 _Note du traducteur épuisé : guide épique s\u0026rsquo;il en est, et qui peut paraître ardu, surtout dans ses premiers paragraphes. Mon conseil\u0026nbsp;: regardez les animations (en commençant \u003ca href=\"#morphing\"\u003eici par exemple\u003c/a\u003e), lisez les paragraphes dans le désordre, puis relisez dans l\u0026rsquo;ordre_.\n\n## Généralités\n\nLes graphiques SVG peuvent être animés au moyen d’**éléments d’animation**. Les éléments d’animation ont été définis à l\u0026rsquo;origine dans la [spécification d\u0026rsquo;animation SMIL](http://www.w3.org/TR/2001/REC-smil-animation-20010904/) ([Synchronized Multimedia Integration Language](http://fr.wikipedia.org/wiki/Synchronized_Multimedia_Integration_Language)). Ces éléments comprennent\u0026nbsp;:\n\n- `\u003canimate\u003e` - qui vous permet d\u0026rsquo;animer des attributs et propriétés scalaires sur une période de temps donnée.\n- `\u003cset\u003e` - qui est un raccourci pratique d\u0026rsquo;`\u003canimate\u003e`, utile pour assigner des valeurs d\u0026rsquo;animation à des attributs et propriétés non numériques, telles que la propriété visibilité.\n- `\u003canimateMotion\u003e` - qui déplace un élément le long d\u0026rsquo;un chemin.\n- `\u003canimateColor\u003e` - qui modifie la valeur de couleur d\u0026rsquo;attributs ou de propriétés dans le temps. Notez que l\u0026rsquo;élément `\u003canimateColor\u003e` est désormais obsolète, on utilise simplement l\u0026rsquo;élément `\u003canimate\u003e` en ciblant les propriétés qui peuvent prendre des valeurs de couleurs. Il est toujours présent dans la spécification SVG\u0026nbsp;1.1, mais il est clairement indiqué qu\u0026rsquo;il est obsolète \u0026mdash;\u0026nbsp;et il est absent de la spécification SVG\u0026nbsp;2.\n\nEn plus des éléments d\u0026rsquo;animation définis dans la spec SMIL, SVG inclut des extensions compatibles avec ladite spécification. Ces extensions incluent les attributs étendant la fonctionnalité de l\u0026rsquo;élément `\u003canimateMotion\u003e` et des éléments d\u0026rsquo;animation supplémentaires. Les extensions SVG comprennent\u0026nbsp;:\n\n- `\u003canimateTransform\u003e` - vous permet d\u0026rsquo;animer l\u0026rsquo;un des attributs de transformation SVG dans le temps, comme l\u0026rsquo;attribut `\u003ctransform\u003e`.\n- `\u003cpath\u003e` (_attribut_) - permet à toute fonctionnalité de la syntaxe de chemin SVG d\u0026rsquo;être spécifiée dans un attribut de chemin de l\u0026rsquo;élément `\u003canimateMotion\u003e` (l\u0026rsquo;animation SMIL permet seulement un sous-ensemble de cette syntaxe à l\u0026rsquo;intérieur d\u0026rsquo;un attribut de chemin). Nous reviendrons sur `\u003canimateMotion\u003e` dans une section qui suit.\n- `\u003cmpath\u003e` - utilisé en conjonction avec l\u0026rsquo;élément `\u003canimateMotion\u003e` pour référencer un chemin et indiquer qu\u0026rsquo;il servira de... chemin à une animation.L\u0026rsquo;élément `\u003cmpath\u003e` est inclu à l\u0026rsquo;intéreur de l\u0026rsquo;élément `\u003canimateMotion\u003e` avant la balise fermante.\n- `\u003ckeypoints\u003e` (_attribut_) - utilisé comme attribut pour `\u003canimateMotion\u003e` afin de fournir un contrôle précis de la vitesse des animations sur les chemins.\n- `\u003crotate\u003e` (_attribut_) - utilisé comme attribut pour `\u003canimateMotion\u003e` afin de contrôler si un objet est automatiquement pivoté de façon à ce que son axe des x pointe dans la même direction (ou la direction opposée) au vecteur tangent directionnel du chemin. Cet attribut est essentiel pour que le mouvement le long d\u0026rsquo;un chemin fonctionne comme le souhaitez. Nous verrons cela plus en détail dans la section `\u003canimateMotion\u003e`.\n\nLes animations SVG peuvent être de nature similaire aux animations et transitions CSS. On crée des keyframes, les objets se déplacent, les couleurs changent etc. Cependant, elles peuvent faire certaines choses que les animations CSS ne permettent pas de réaliser, ce que nous allons voir tout à l\u0026rsquo;heure.\n\n## Pourquoi utiliser les animations SVG?\n\nLes SVG peuvent être [stylés et animés avec CSS (slides)](http://slides.com/sarasoueidan/styling-animating-svgs-with-css--2#/). À la base, toute animation de transformation ou de transition qui peut être appliquée à un élément HTML peut l\u0026rsquo;être à un élément SVG. Mais certaines propriétés SVG qui ne peuvent pas être animées avec CSS peuvent l\u0026rsquo;être avec SVG. Par exemple un chemin SVG vient avec un ensemble de **données** (un attribut `d=\"\"`) qui définit la forme de ce chemin. Cette donnée peut être modifiée et animée avec SMIL, mais pas avec CSS. C\u0026rsquo;est pourquoi les éléments SVG sont décrits au travers d\u0026rsquo;un ensemble d\u0026rsquo;attributs appelés les _attributs de présentation_ SVG. Certains d\u0026rsquo;entre eux peuvent être déterminés, modifiés et animés avec CSS, d\u0026rsquo;autres non.\n\nAutrement dit, de nombreux effets et animations ne peuvent pas être obtenus avec CSS. Pour combler ces manques, on peut utiliser JavaScript ou les déclarations dérivées de SMIL.\n\nSi vous préférez utiliser JavaScript, je recommande [snap.svg](http://snapsvg.io/) de Dmitry Baranovskiy qui est décrit comme le \u0026ldquo;jQuery du SVG\u0026rdquo;. Voici [quelques exemples](http://codepen.io/collection/edpyJ/) de ce qu\u0026rsquo;on peut faire.\n\nSi vous préférez une approche plus déclarative, vous pouvez utiliser les éléments d\u0026rsquo;animation SVG, nous allons les passer en revue dans ce guide\u0026nbsp;!\n\nUn autre avantage de SMIL sur les animations JavaScript est que les animations JS ne fonctionnent pas lorsque le SVG est embarqué (_embedded_) en tant qu\u0026rsquo;`img` ou utilisé comme `background-image` dans CSS. Les animations SMIL fonctionnent, elles, dans les deux cas (ou le devraient, il faut aussi tenir compte des limitations des navigateurs). C\u0026rsquo;est un grand avantage à mon sens et vous pourriez choisir SMIL pour cette bonne raison. Cet article est conçu comme un guide pour vous aider à vous lancer dans SMIL dès maintenant.\n\n## Compatibilité navigateurs et fallbacks\n\nLa compatibilité navigateur des animations SMIL est tout à fait convenable. Elles fonctionnent dans tous les navigateurs à l\u0026rsquo;exception d\u0026rsquo;Internet Explorer et Opera Mini. Pour une étude complète de la compatibilité, vous pouvez vous référer au tableau de [Can I Use](http://caniuse.com/#feat=svg-smil).\n\nSi vous avez besoin de solutions de repli (_fallback_) pour les animations SMIL, vous pouvez tester la compatibilité navigateurs à la volée avec [Modernizr](http://modernizr.com/). Lorsque SMIL n\u0026rsquo;est pas compatible, vous pouvez fournir une solution de repli (animations JavaScript, expérience utilisateur différente, etc.).\n\n## Spécifier la cible de l’animation avec xlink:href\n\nQuel que soit celui des quatre éléments d\u0026rsquo;animations que vous choisissez, il vous faut spécifier la cible de l\u0026rsquo;animation définie par cet élément.\n\nPour spécifier une cible, vous pouvez utiliser l\u0026rsquo;attribut `xlink:href`. L\u0026rsquo;attribut prend une référence URI de l\u0026rsquo;élément cible de l\u0026rsquo;animation. **L\u0026rsquo;élément cible doit faire partie du fragment de document SVG courant**.\n\n    //SVG\n    \u003crect id=\"cool_shape\" ... /\u003e\n\n    \u003canimation xlink:href=\"#cool_shape\" ... /\u003e\n\nSi vous avez déjà rencontré des éléments d\u0026rsquo;animation SVG, vous les avez probablement vus imbriqués à l\u0026rsquo;intérieur de l\u0026rsquo;élément qu\u0026rsquo;ils sont supposés animer. C\u0026rsquo;est également possible selon la spécification\u0026nbsp;:\n\n\u003e Si l\u0026rsquo;attribut `xlink:href` n\u0026rsquo;est pas fourni, l\u0026rsquo;élément cible sera l\u0026rsquo;élément immédiatement parent de l\u0026rsquo;élément d\u0026rsquo;animation courant\n\n    //SVG\n    \u003crect id=\"cool_shape\" ... \u003e\n\n      \u003canimation ... /\u003e\n\n    \u003c/rect\u003e\n\nDonc si vous voulez \u0026ldquo;encapsuler\u0026rdquo; l\u0026rsquo;animation à l\u0026rsquo;intérieur de l\u0026rsquo;élément auquel elle s\u0026rsquo;applique, vous le pouvez. Et si vous préférez spécifier les animations ailleurs dans votre document, vous pouvez également le faire, et spécifier la cible de chaque animation en utilisant `xlink:href` \u0026mdash;\u0026nbsp;les deux façons de faire fonctionnent.\n\n## Spécifier la propriété cible de l’animation avec attributeName et attributeType\n\nTous les éléments d\u0026rsquo;animation partagent un autre attribut\u0026nbsp;: `attributeName`, qu\u0026rsquo;on utilise pour spécifier le nom de l\u0026rsquo;attribut que vous animez.\n\nPar exemple, si vous voulez animer la position du centre d\u0026rsquo;un cercle `circle` sur l\u0026rsquo;axe des x, vous pouvez le faire en spécifiant `cx` comme valeur de l\u0026rsquo;attribut `attributeName`.\n\n`attributeName` prend une valeur unique, il ne prend pas de liste de valeurs, par conséquent vous ne pouvez animer qu\u0026rsquo;un seul atribut à la fois. Si vous voulez animer plus d\u0026rsquo;un attribut, vous devez définir plus d\u0026rsquo;une animation pour l\u0026rsquo;élément. Sur ce point au moins, CSS a un avantage sur SMIL. Mais là encore, en raison des valeurs possibles pour les autres attributs d\u0026rsquo;animation (que nous allons voir ensuite), il est logique de ne définir qu\u0026rsquo;un seul nom d\u0026rsquo;attribut à la fois, sans quoi les autres valeurs d\u0026rsquo;attributs pourraient devenir trop complexes à gérer.\n\nLorsque vous spécifiez le nom d\u0026rsquo;attribut, vous pouvez ajouter un préfixe XMLNS (espace de nom XML) pour indiquer l\u0026rsquo;espace de nom de l\u0026rsquo;attribut. L\u0026rsquo;espace de nom peut également être spécifié en utilisant l\u0026rsquo;attribut `attributeType`. Par exemple, certains attributs font partie de l\u0026rsquo;espace de nom CSS (ce qui signifie que l\u0026rsquo;attribut peut être trouvé comme propriété CSS) et d\u0026rsquo;autres sont uniquement XML. Vous pouvez consulter [une table de ces attributs ici](http://slides.com/sarasoueidan/styling-animating-svgs-with-css#/10). Tous les attributs SVG ne figurent pas dans cette table, seulement ceux avec lesquels CSS fonctionne. Certains d\u0026rsquo;entre eux sont déjà disponibles comme propriétés CSS.\n\nSi la valeur de `attributeType` n\u0026rsquo;est pas explicitement définie, ou si elle est définie comme `auto`, le navigateur doit d\u0026rsquo;abord chercher dans la liste des propriétés CSS un nom de propriété correspondant, et s\u0026rsquo;il n\u0026rsquo;en trouve pas, chercher le nom d\u0026rsquo;espace par défaut pour l\u0026rsquo;élément.\n\nPar exemple, le code suivant anime l\u0026rsquo;`opacity` d\u0026rsquo;un rectangle SVG. Puisque l\u0026rsquo;attribut `opacity` existe aussi en tant que propriété CSS, l\u0026rsquo;`attributeType` est défini à partir de l\u0026rsquo;espace de nom CSS\u0026nbsp;:\n\n    //SVG\n    \u003crect\u003e\n      \u003canimate attributeType=\"CSS\" attributeName=\"opacity\"\n               from=\"1\" to=\"0\" dur=\"5s\" repeatCount=\"indefinite\" /\u003e\n    \u003c/rect\u003e\n\nNous allons voir les autres attributs d\u0026rsquo;animation dans les exemples qui suivent. Sauf indication contraire, tous les attributs d\u0026rsquo;animation sont communs à tous les éléments d\u0026rsquo;animation.\n\n## Animer l’attribut d’un élément\n\nCommençons en déplaçant un cercle d\u0026rsquo;une position à une autre. Pour ce faire, nous allons modifier la valeur de son attribut `cx` qui spécifie la position de son centre sur l\u0026rsquo;axe des x.\n\nNous allons utiliser l\u0026rsquo;élément `animate`. Cet élément est utilisé pour animer un attribut à la fois. Les attributs peuvent prendre des valeurs numériques et les couleurs sont généralement animées avec `animate`. Pour une liste des attributs qui peuvent être animés, vous pouvez vous référer à [cette table](http://www.w3.org/TR/SVG2/animate.html#AnimationAttributesAndProperties).\n\nSi l\u0026rsquo;on veut modifier une valeur sur une période de temps donnée, on utilise les attributs `from`, `to` et `dur`. Par ailleurs, si vous avez besoin de spécifier quand l\u0026rsquo;animation doit démarrer, vous utiliserez l\u0026rsquo;attribut `begin`.\n\n    //SVG\n    \u003ccircle id=\"my-circle\" r=\"30\" cx=\"50\" cy=\"50\" fill=\"orange\" /\u003e\n\n      \u003canimate\n        xlink:href=\"#my-circle\"\n        attributeName=\"cx\"\n        from=\"50\"\n        to=\"450\"\n        dur=\"1s\"\n        begin=\"click\"\n        fill=\"freeze\" /\u003e\n\nDans l\u0026rsquo;exemple ci-dessus, nous avons défini un cercle, puis nous appelons une animation sur ce cercle. Le centre du cercle se déplace de sa position initiale (50 unités) vers sa position finale (450 unités) sur l\u0026rsquo;axe des x.\n\nLa valeur de `begin` est définie comme `click`. Cela signifie que le cercle se déplacera lorsqu\u0026rsquo;on cliquera dessus. Vous pouvez également définir cette valeur comme une unité de temps, par exemple `begin=\"0s\"` démarrera l\u0026rsquo;animation dès que la page est chargée. Vous pouvez **retarder l\u0026rsquo;animation** en donnant une valeur de temps positive \u0026mdash;\u0026nbsp;par exemple `begin=\"2s\"` qui démarrera l\u0026rsquo;animation deux secondes après le chargement de la page.\n\nCe qui est encore plus intéressant avec `begin`, c\u0026rsquo;est que vous pouvez définir des valeurs telles que `click + 1s` pour démarrer une animation **une seconde après que l\u0026rsquo;élément ait été cliqué**. De plus, vous pouvez utiliser d\u0026rsquo;autres valeurs qui vous permettent de synchroniser les animations sans avoir à calculer la durée et les retards des autres animations. Nous verrons cela tout à l\u0026rsquo;heure.\n\nL\u0026rsquo;attribut `dur` est similaire à son équivalent CSS `animation-duration`.\n\nLes attributs `from` et `to` sont similaires aux keyframes `from` et `to` dans un block d\u0026rsquo;animation CSS `@keyframe`\u0026nbsp;:\n\n    //CSS\n    @keyframes moveCircle {\n      from { /* valeur de départ */ }\n      to { /* valeur d’arrivée */ }\n    }\n\nL\u0026rsquo;attribut `fill` (qui porte malencontreusement le même nom que l\u0026rsquo;attribut `fill` définissant la couleur de remplissage d\u0026rsquo;un élément) est similaire à la propriété `animation-fill-mode` qui spécifie si l\u0026rsquo;élément devrait ou non revenir à son état initial à la fin de l\u0026rsquo;animation. Les valeurs en SVG sont similaires à leur équivalent CSS, à part deux noms\u0026nbsp;:\n\n- `freeze` : on indique que l\u0026rsquo;effet doit rester dans son état final, l\u0026rsquo;effet d\u0026rsquo;animation est \u0026ldquo;gelé\u0026rdquo; (_freeze_) pour la durée d\u0026rsquo;existence de la page, ou jusqu\u0026rsquo;au moment où l\u0026rsquo;on redémarre l\u0026rsquo;animation.\n- `remove` : l\u0026rsquo;effet d\u0026rsquo;animation est retiré (il ne s\u0026rsquo;applique plus) lorsque la durée de l\u0026rsquo;animation est passée. L\u0026rsquo;animation n\u0026rsquo;affecte plus la cible, sauf si elle est redémarrée.\n\nCliquez sur le disque orange pour déclencher l'animation. Essayez de modifier les valeurs dans cette [démo CodePen](http://codepen.io/SaraSoueidan/pen/e883265849147a0a4b712c5960c448a8) pour voir comment cela affecte l\u0026rsquo;animation (si vous ne pouvez le faire directement à l\u0026rsquo;écran, cliquez sur \u0026ldquo;Edit on CodePen\u0026rdquo;)\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_e883265849147a0a4b712c5960c448a8\" src=\"//codepen.io/SaraSoueidan/embed/e883265849147a0a4b712c5960c448a8?height=250\u0026amp;theme-id=light\u0026amp;slug-hash=e883265849147a0a4b712c5960c448a8\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/e883265849147a0a4b712c5960c448a8/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nL\u0026rsquo;attribut `by` est utilisé pour spécifier un décalage de l\u0026rsquo;animation. Comme son nom le suggère, vous pouvez spécifier le nombre ou la façon par (_by_) lequel vous voulez que l\u0026rsquo;animation progresse. L\u0026rsquo;effet de `by` est surtout visible lorsque vous progressez dans la durée de l\u0026rsquo;animation en étapes successives, un peu comme avec [la fonction CSS `steps()`](http://lea.verou.me/2011/09/pure-css3-typing-animation-with-steps/). L\u0026rsquo;équivalent SVG de la fonction `steps()` est `calcMode=\"discrete\"`. Nous verrons l\u0026rsquo;attribut `calcMode` un peu plus loin dans cet article.\n\nUn autre cas où l\u0026rsquo;effet de `by` est plus visible est quand vous spécifiez uniquement l\u0026rsquo;attribut `to`. Un exemple serait de l\u0026rsquo;utiliser ave l\u0026rsquo;élément `set` que nous allons également voir tout à l\u0026rsquo;heure.\n\nEt _last but not least_, `by` peut être utile quand vous travaillez avec des animations additives et accumulatives. Plus d\u0026rsquo;infos tout à l\u0026rsquo;heure.\n\n### Redémarrer les animations avec restart\n\nIl peut être utile d\u0026rsquo;empêcher une animation d\u0026rsquo;être redémarrée tant qu\u0026rsquo;elle est active. Pour ce faire, SVG propose l\u0026rsquo;attribut `restart`. Vous pouvez lui donner l\u0026rsquo;une des trois valeurs suivantes\u0026nbsp;:\n\n- `always` : l\u0026rsquo;animation peut être redémarrée n\u0026rsquo;importe quand. C\u0026rsquo;est la valeur par défaut.\n- `whenNotActive` : l\u0026rsquo;animation peut être redémarrée seulement quand elle n\u0026rsquo;est pas active (c\u0026rsquo;est à dire lorsqu\u0026rsquo;elle est arrivée à son terme). Les tentatives de redémarrage pendant sa durée d\u0026rsquo;activité sont ignorées.\n- `never` : l\u0026rsquo;élément ne peut pas être redémarré pour le reste de la durée courante du parent qui la contient. Dans le cas de SVG, puisque le conteneur de temps parent est le fragment de document, l\u0026rsquo;animation ne peut pas être redémarrée pour le reste de la durée du document.\n\n### Nommer les animations et les synchroniser\n\nSupposons que nous voulions animer la position _et_ la couleur du cercle, afin que le changement de couleur se produise à la fin de l\u0026rsquo;animation de déplacement. Nous pouvons le faire en donnant à la valeur de `begin` de l\u0026rsquo;animation de changement de couleur la même valeur que la `dur`ée de l\u0026rsquo;animation de déplacement. C\u0026rsquo;est ce que nous ferions normalement en CSS.\n\nCependant, SMIL offre une fonctionnalité intéressante de traitement des événements. Nous avons mentionné précédemment que l\u0026rsquo;attribut `begin` acceptait des valeurs telles que `click + 5s`. Cette valeur est appelée \u0026ldquo;valeur d\u0026rsquo;événement\u0026rdquo;, et elle est constituée dans cet exemple d\u0026rsquo;une référence à l\u0026rsquo;événement (le clic) suivie d\u0026rsquo;une \u0026ldquo;valeur d\u0026rsquo;horloge\u0026rdquo;. Ce qui est intéressant ici, c\u0026rsquo;est le nom de la seconde partie: la \u0026ldquo;valeur d\u0026rsquo;horloge\u0026rdquo;. Pourquoi pas simplement une \u0026ldquo;valeur de temps\u0026rdquo;\u0026nbsp;? Eh bien la réponse est que vous pouvez littéralement utiliser [une valeur d\u0026rsquo;horloge](http://www.w3.org/TR/SVG2/animate.html#ClockValueSyntax) comme \u0026ldquo;10min\u0026rdquo; ou \u0026ldquo;01:33\u0026rdquo; qui est l\u0026rsquo;équivalent de 1 minute et 33 secondes, ou même \u0026ldquo;02:30:03\u0026rdquo; (deux heures, trente minutes et trois secondes). À l\u0026rsquo;heure où nous écrivons, les valeurs d\u0026rsquo;horloge _ne sont implémentées complètement dans aucun navigateur_.\n\nDonc, si nous revenons à la démo précédente et utilisons `click + 01:30`, si un navigateur s\u0026rsquo;avérait compatible, l\u0026rsquo;animation serait déclenchée 1 minute 30 après qu\u0026rsquo;on ait cliqué sur le cercle.\n\nUn autre type de valeur acceptée est l\u0026rsquo;ID d\u0026rsquo;une autre animation suivi d\u0026rsquo;une référence d\u0026rsquo;événement. Si vous aviez deux animations (ou plus), qu\u0026rsquo;elles s\u0026rsquo;appliquent au même élément ou pas, et que vous vouliez les synchroniser de façon à ce que l\u0026rsquo;une démarre en fonction de l\u0026rsquo;autre, vous pourriez le faire sans avoir à connaître la durée de l\u0026rsquo;autre animation.\n\nPar exemple, dans la démo suivante, le rectangle bleu commence à bouger 1 seconde après que l\u0026rsquo;animation du cercle ait démarré. On donne pour cela une ID à chaque animation, puis on utilise cette ID avec l\u0026rsquo;événement `begin` comme on le voit dans le code suivant\u0026nbsp;:\n\n    //SVG\n    \u003ccircle id=\"orange-circle\" r=\"30\" cx=\"50\" cy=\"50\" fill=\"orange\" /\u003e\n\n    \u003crect id=\"blue-rectangle\" width=\"50\" height=\"50\" x=\"25\" y=\"200\" fill=\"#0099cc\"\u003e\u003c/rect\u003e\n\n      \u003canimate\n        xlink:href=\"#orange-circle\"\n        attributeName=\"cx\"\n        from=\"50\"\n        to=\"450\"\n        dur=\"5s\"\n        begin=\"click\"\n        fill=\"freeze\"\n        id=\"circ-anim\" /\u003e\n\n      \u003canimate\n        xlink:href=\"#blue-rectangle\"\n        attributeName=\"x\"\n        from=\"50\"\n        to=\"425\"\n        dur=\"5s\"\n        begin=\"circ-anim.begin + 1s\"\n        fill=\"freeze\"\n        id=\"rect-anim\" /\u003e\n\nLa partie `begin=\"circ-anim.begin + 1s\"` dit au navigateur de démarrer l\u0026rsquo;animation du rectangle 1 seconde après le début de celle du cercle. Vous pouvez voir l\u0026rsquo;effet dans cette démo\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_55195eee8647f438525b852000504c7a\" src=\"//codepen.io/SaraSoueidan/embed/55195eee8647f438525b852000504c7a?height=530\u0026amp;theme-id=light\u0026amp;slug-hash=55195eee8647f438525b852000504c7a\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"530\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/55195eee8647f438525b852000504c7a/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous pouvez également démarrer l\u0026rsquo;animation du rectangle après que celle du cercle soit arrivée à son terme, en utilisant l\u0026rsquo;\u003cspan itemprop=\"about\"\u003eévénement `end`\u003c/span\u003e\u0026nbsp;:\n\n    //SVG\n    \u003canimate\n      xlink:href=\"#blue-rectangle\"\n      attributeName=\"x\"\n      from=\"50\"\n      to=\"425\"\n      dur=\"5s\"\n      begin=\"circ-anim.end\"\n      fill=\"freeze\"\n      id=\"rect-anim\"/\u003e\n\nVous pourriez même la démarrer _avant_ la fin de l\u0026rsquo;animation du cercle\u0026nbsp;:\n\n    //SVG\n    \u003canimate\n      xlink:href=\"#blue-rectangle\"\n      attributeName=\"x\"\n      from=\"50\"\n      to=\"425\"\n      dur=\"5s\"\n      begin=\"circ-anim.end - 3s\"\n      fill=\"freeze\"\n      id=\"rect-anim\"/\u003e\n\n### Répéter les animations\n\nSi vous voulez qu\u0026rsquo;une animation se produise plus d\u0026rsquo;une fois, vous pouvez utiliser l\u0026rsquo;attribut `repeatCount` en spécifiant le nombre de fois que vous voulez répéter l\u0026rsquo;animation, ou bien utiliser le mot-clé `indefinite` pour qu\u0026rsquo;elle se répète indéfiniment. Ainsi, si nous voulions que l\u0026rsquo;animation du cercle se produise deux fois, le code serait\u0026nbsp;:\n\n    //SVG\n    \u003canimate\n      xlink:href=\"#orange-circle\"\n      attributeName=\"cx\"\n      from=\"50\"\n      to=\"450\"\n      dur=\"5s\"\n      begin=\"click\"\n      repeatCount=\"2\"\n      fill=\"freeze\"\n      id=\"circ-anim\" /\u003e\n\nDans la démo ci-dessous, j\u0026rsquo;ai donné une valeur de 2 à `repeatCount` sur le cercle, et `indefinite` sur le carré\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_d8e38406a5a90f4392a4bb85f6aadd78\" src=\"//codepen.io/SaraSoueidan/embed/d8e38406a5a90f4392a4bb85f6aadd78?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=d8e38406a5a90f4392a4bb85f6aadd78\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/d8e38406a5a90f4392a4bb85f6aadd78/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nRemarquez que l\u0026rsquo;animation redémarre à partir de la valeur initiale `from` plutôt qu\u0026rsquo;à partir du point où elle est arrivée. à la fin de l\u0026rsquo;animation. Malheureusement, SMIL n\u0026rsquo;offre pas de manière d\u0026rsquo;aller et venir entre les valeurs de départ et d\u0026rsquo;arrivée, contrairement à CSS. La propriété `animation-direction` de CSS spécifie si une animation doit repartir en sens inverse sur tous les cycles ou sur certains d\u0026rsquo;entre eux. La valeur `animate-direction: alternate` indique que les cycles d\u0026rsquo;animation impairs se produisent dans la direction normale et que les cycles pairs se produisent en sens inverse. Le premier cycle va du début à la fin, le second va de la fin au début, etc.\n\nDans SMIL, il faudrait utiliser JavaScript pour changer explicitement les valeurs des attributs `from` et `to`. Jon McPartland de Big bite Creative a écrit [un article](http://bigbitecreative.com/introduction-svg-animation/) à ce sujet pour expliquer comment il a créé [une animation d\u0026rsquo;icône de menu](http://jsfiddle.net/unhw/kk5CG/3/).\n\nUne autre façon de contourner le problème serait de spécifier la valeur d\u0026rsquo;arrivée comme étant une valeur intermédiaire et de faire que la valeur finale soit identique à la valeur initiale. Par exemple, vous pouvez définir une animation commençant `from` une certaine valeur et se terminant à la même valeur, mais en donnant comme valeur intermédiaire entre `from` et `to` la valeur que vous _auriez utilisé_ comme valeur finale.\n\nEn CSS, on ferait quelque chose comme cela\u0026nbsp;:\n\n    //CSS\n    @keyframes example {\n      from, to {\n        left: 0;\n      }\n\n      50% {\n        left: 300px;\n      }\n    }\n\nL\u0026rsquo;équivalent dans SMIL est d\u0026rsquo;utiliser l\u0026rsquo;attribut `values` que nous expliquerons sous peu.\n\nCeci étant dit, la solution contournée ci-dessus peut fonctionner ou non pour vous selon le type d\u0026rsquo;animation que vous cherchez et selon que vous enchaîniez ou non des animations, que vous les répétiez ou que vous les ajoutiez.\n\nVoci une jolie animation infinie qui utilise des retards dans les débuts d\u0026rsquo;animation, par Miles Elam\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_kprKm\" src=\"//codepen.io/mileselam/embed/kprKm?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=kprKm\u0026amp;user=mileselam\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/mileselam/pen/kprKm/\"\u003e\n  Hexagon Ripple\u003c/a\u003e de @mileselam dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Restreindre le temps de répétition avec `repeatDur`\n\nUne répétition indéfinie peut s\u0026rsquo;avérer ennuyeuse ou peu _user-friendly_ à la longue, réduire le temps de répétition est donc parfois une bonne solution. C\u0026rsquo;est ce qu\u0026rsquo;on appelle le _temps de présentation_.\n\nLe temps de présentation est spécifié à l\u0026rsquo;aide de l\u0026rsquo;attribut `repeatDur` dont la syntaxe est similaire à celle de la valeur d\u0026rsquo;horloge, à ceci près qu\u0026rsquo;au lieu d\u0026rsquo;être relatif à un autre événement d\u0026rsquo;animation ou d\u0026rsquo;interaction, il est relatif au début du document.\n\nPar exemple, le code suivant stoppera la répétition de l\u0026rsquo;animation 1 minute et 30 secondes après le début du document\u0026nbsp;:\n\n    //SVG\n    \u003canimate\n      xlink:href=\"#orange-circle\"\n      attributeName=\"cx\"\n      from=\"50\"\n      to=\"450\"\n      dur=\"2s\"\n      begin=\"0s\"\n      repeatCount=\"indefinite\"\n      repeatDur=\"01:30\"\n      fill=\"freeze\"\n      id=\"circ-anim\" /\u003e\n\net voici la démo\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_366b9fba478e7ac1de2188f5a2594c3c\" src=\"//codepen.io/SaraSoueidan/embed/366b9fba478e7ac1de2188f5a2594c3c?height=250\u0026amp;theme-id=light\u0026amp;slug-hash=366b9fba478e7ac1de2188f5a2594c3c\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/366b9fba478e7ac1de2188f5a2594c3c/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Synchroniser en fonction du nombre de répétitions\n\nRevenons un peu en arrière pour reprendre le sujet de la synchronisation de deux animations. Avec SMIL vous pouvez synchroniser des animations de manière à ce qu\u0026rsquo;une animation commence en fonction du nombre de répétitions d\u0026rsquo;une autre. Par exemple, vous pouvez commencer une animation après la n-ième répétition d\u0026rsquo;une autre animation, plus ou moins une durée que vous pouvez ajouter.\n\nL\u0026rsquo;exemple qui suit fait débuter l\u0026rsquo;animation du rectangle à la deuxième répétition de l\u0026rsquo;animation du cercle\u0026nbsp;:\n\n    //SVG\n    \u003canimate\n      xlink:href=\"#blue-rectangle\"\n      attributeName=\"x\"\n      from=\"50\"\n      to=\"425\"\n      dur=\"5s\"\n      begin=\"circ-anim.repeat(2)\"\n      fill=\"freeze\"\n      id=\"rect-anim\" /\u003e\n\nEt voici une démo dans laquelle l\u0026rsquo;animation du rectangle commence 1 seconde après la deuxième répétition de l\u0026rsquo;animation du cercle.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LEZbdz\" src=\"//codepen.io/pierrechoffe/embed/LEZbdz?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=LEZbdz\u0026amp;user=pierrechoffe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/pierrechoffe/pen/LEZbdz/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nEt voici [un autre exemple](http://oreillymedia.github.io/svg-essentials-examples/ch12/sync_repetition.html), que David Eisenberg a créé pour son livre [SVG Essentials, 2e édition](http://shop.oreilly.com/product/9780596002237.do?sortby=bestSellers).\n\n### Contrôler les valeurs de keyframe avec keyTimes et values\n\nEn CSS, nous pouvons spécifier les valeurs que nous voulons donner à notre propriété animée pendant le cours de l\u0026rsquo;animation. Par exemple, si nous animons le décalage à gauche d\u0026rsquo;un élément, au lieu de l\u0026rsquo;animer de 0 à 300 directement, nous pouvons l\u0026rsquo;animer de façon à ce qu\u0026rsquo;il prenne certaines valeurs pendant certaines périodes de temps\u0026nbsp;:\n\n    //CSS\n    @keyframes example {\n      0% {\n        left: 0;\n      }\n      50% {\n        left: 320px;\n      }\n      80% {\n        left: 270px;\n      }\n      100% {\n        left: 300px;\n      }\n    }\n\n0%, 50%, 80% et 100% sont les keyframes (étapes) de l\u0026rsquo;animation et les valeurs comprises dans chaque bloc sont celles de chaque keyframe. L\u0026rsquo;effet décrit ci-dessus est celui d\u0026rsquo;un élément qui rebondit contre un mur et revient à la position finale.\n\nDans SMIL, vous pouvez contrôler les valeurs par étape de la même façon, mais la syntaxe est différente.\n\nPour spécifier les keyframes, on utilise l\u0026rsquo;attribut `keyTimes`. Puis pour spécifier la valeur de la propriété animée à chaque étape, on utilise les attributs `values`. Les conventions de nommage de SMIL sont très pratiques.\n\nSi je reviens à notre cercle et que j\u0026rsquo;utilise des valeurs similaires à celles de l\u0026rsquo;exemple CSS précédent, le code ressemblera à ceci\u0026nbsp;:\n\n    //SVG\n    \u003canimate\n      xlink:href=\"#orange-circle\"\n      attributeName=\"cx\"\n      from=\"50\"\n      to=\"450\"\n      dur=\"2s\"\n      begin=\"click\"\n      values=\"50; 490; 350; 450\"\n      keyTimes=\"0; 0.5; 0.8; 1\"\n      fill=\"freeze\"\n      id=\"circ-anim\" /\u003e\n\nQu\u0026rsquo;avons-nous fait ici ?\n\nLa première chose à remarquer est que les temps et valeurs intermédiaires des keyframes sont spécifiés sous forme de liste. L\u0026rsquo;attribut `keyTimes` est une liste de valeurs temporelles séparées par des points-virgules, utilisée pour contrôler l\u0026rsquo;avancée de l\u0026rsquo;animation. Chaque temps dans la liste correspond à une valeur dans la liste de l\u0026rsquo;attribut `values` et définit le moment où la valeur est utilisée dans la fonction d\u0026rsquo;animation. Chaque valeur temporelle dans la liste `keyTimes` est comprise entre 0 et 1 (compris), la différence avec CSS est donc qu\u0026rsquo;au lieu d\u0026rsquo;être indiquée en pourcentage, elle l\u0026rsquo;est sous forme de fraction.\n\nVoici la démo du code précédent. Cliquez sur le cercle pour démarrer l\u0026rsquo;animation.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ab87fd834cdf0af7ec27850e81b1c08a\" src=\"//codepen.io/SaraSoueidan/embed/ab87fd834cdf0af7ec27850e81b1c08a?height=250\u0026amp;theme-id=light\u0026amp;slug-hash=ab87fd834cdf0af7ec27850e81b1c08a\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/ab87fd834cdf0af7ec27850e81b1c08a/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nRemarquez que si on utilise une liste de valeurs, l\u0026rsquo;animation appliquera les valeurs dans l\u0026rsquo;ordre pendant le cours de l\u0026rsquo;animation. De plus, si une liste de `values` est spécifiée, toute valeur d\u0026rsquo;attributs `from`, `to` et `by` est ignorée.\n\nAutre chose à savoir : vous pouvez utiliser l\u0026rsquo;attribut `values` sans l\u0026rsquo;attribut `keyTimes` \u0026mdash;\u0026nbsp;les valeurs sont automatiquement espacées de manière régulière dans le temps (pour chaque valeur `calcMode` différente de `paced`, voir section suivante).\n\n###Contrôler la vitesse d’animation avec un easing personnalisé, `calcMode` et `keySplines`\n\nJe vais comparer à nouveau SMIL et CSS parce qu\u0026rsquo;il est plus facile de comparer les syntaxes et les concepts lorsqu\u0026rsquo;on connaît déjà les animations CSS.\n\nEn CSS, vous pouvez choisir de modifier le rythme de l\u0026rsquo;animation, uniforme par défaut, et de spécifier une fonction d\u0026rsquo;easing personnalisée qui contrôle l\u0026rsquo;animation, grâce à la propriété `animation-timing-function`. La fonction timing peut être l\u0026rsquo;un des mots-clés prédéfinis ou une [courbe de Bézier](http://fr.wikipedia.org/wiki/Courbe_de_B%C3%A9zier) cubique. Cette dernière peut être créée via un outil tel que [celui proposé par Lea Verou](http://cubic-bezier.com/#.17,.67,.85,.06).\n\nDans SMIL, le rythme de l\u0026rsquo;animation est spécifié avec l\u0026rsquo;attribut `calcMode`. Par défaut, l\u0026rsquo;animation est linéaire pour tous les éléments, à l\u0026rsquo;exception de `animateMotion` (que nous verrons tout à l\u0026rsquo;heure). Outre la valeur `linear`, vous pouvez donner une valeur de `discrete`, `paced` ou `spline`.\n\n- `discrete` spécifie que l\u0026rsquo;animation sautera d\u0026rsquo;une valeur à l\u0026rsquo;autre sans interpolation. C\u0026rsquo;est la même chose que la fonction `steps()` en CSS.\n- `paced` est similaire à `linear`, mais il ignorera tout les temps intermédiaires définis par `keyTimes`. Il calcule la distance entre les valeurs consécutives et divise le temps en fonction. Si vos valeurs sont toutes en ordre linéaire, vous ne remarquerez pas la différence. Mais si elles vont en avant et en arrière, ou si ce sont des couleurs (qui sont traitées comme des valeurs vectorielles tri-dimensionnelles), vous verrez les valeurs intermédiaires. Ci-dessous, voici une animation créée par Amelia Bellamy-Royds qui montre la différence entre les trois valeurs `calcMode` mentionnées jusqu\u0026rsquo;ici.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_EzAju\" src=\"//codepen.io/AmeliaBR/embed/EzAju?height=600\u0026amp;theme-id=light\u0026amp;slug-hash=EzAju\u0026amp;user=AmeliaBR\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"600\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003e\u003ca href=\"http://codepen.io/AmeliaBR/pen/EzAju/\"\u003e\n  SVG/SMIL calcMode comparison\u003c/a\u003e de Amelia Bellamy-Royds dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n- La quatrième valeur acceptée par `calcMode` est `spline`. Elle interpole d\u0026rsquo;une valeur à l\u0026rsquo;autre de la liste des `values` selon une fonction temporelle définie par une courbe de bézier cubique. Les points sur la spline sont définis dans l\u0026rsquo;attribut `keyTimes` et les points de contrôle pour chaque intervalle sont définis dans l\u0026rsquo;attribut `keySplines`.\n\n👉🏿 _NdT : pour mieux comprendre les keysplines, vous pouvez consulter cette page sur l\u0026rsquo;[interpolation spline](http://books.google.fr/books?id=7MtkGjIgOxkC\u0026pg=PA323\u0026lpg=PA323\u0026dq=keysplines+courbes+de+b%C3%A9zier\u0026source=bl\u0026ots=TAmY4E6dq9\u0026sig=KSp_p_fQa2SxglCFOfSZPfie0Fk\u0026hl=fr\u0026sa=X\u0026ei=oKdeVOKdGMPaaIjUgFA\u0026ved=0CCsQ6AEwAg#v=onepage\u0026q=keysplines%20courbes%20de%20b%C3%A9zier\u0026f=false), ou celle-ci sur [keySplines](http://pilatinfo.org/learnsvg/html/chapitre09/page09-1.htm)._\n\nVous avez remarqué un nouvel attribut dans la dernière phrase\u0026nbsp;: `keySplines`. À quoi sert-il\u0026nbsp;?\n\nLà encore, reprenons les équivalences CSS.\n\nEn CSS, vous pouvez spécifier le rythme de l\u0026rsquo;animation _à l\u0026rsquo;intérieur_ de chaque keyframe, au lieu de le spécifier pour toute l\u0026rsquo;animation. Cela vous donne un meilleur contrôle de chaque keyframe. Un bon exemple de cette fonctionnalité est l\u0026rsquo;effet de la balle qui rebondit. Les keyframes ressembleraient à ceci\u0026nbsp;:\n\n    //CSS\n    @keyframes bounce {\n      0% {\n          top: 0;\n          animation-timing-function: ease-in;\n      }\n      15% {\n          top: 200px;\n          animation-timing-function: ease-out;\n      }\n      30% {\n          top: 70px;\n          animation-timing-function: ease-in;\n      }\n      45% {\n          top: 200px;\n          animation-timing-function: ease-out;\n      }\n      60% {\n          top: 120px;\n          animation-timing-function: ease-in;\n      }\n      75% {\n          top: 200px;\n          animation-timing-function: ease-out;\n      }\n      90% {\n          top: 170px;\n          animation-timing-function: ease-in;\n      }\n      100% {\n          top: 200px;\n          animation-timing-function: ease-out;\n      }\n\n}\n\nÀ la place des mots-clés définissant les fonctions d\u0026rsquo;easing, nous aurions pu utiliser les courbes de bézier correspondantes\u0026nbsp;:\n\n- `ease-in` = `cubic-bezier(0.47, 0, 0.745, 0.715)`\n- `ease-out` = `cubic-bezier(0.39, 0.575, 0.565, 1)`\n\nCommençons en spécifiant les keyTimes et la liste de `values` pour donner à notre cercle orange le même effet rebondissant.\n\n    //SVG\n    \u003canimate\n      xlink:href=\"#orange-circle\"\n      attributeName=\"cy\"\n      from=\"50\"\n      to=\"250\"\n      dur=\"3s\"\n      begin=\"click\"\n      values=\"50; 250; 120;250; 170; 250; 210; 250\"\n      keyTimes=\"0; 0.15; 0.3; 0.45; 0.6; 0.75; 0.9; 1\"\n      fill=\"freeze\"\n      id=\"circ-anim\" /\u003e\n\nL\u0026rsquo;animation commencera au clic et s\u0026rsquo;arrêtera une fois atteinte la valeur finale. Ensuite, pour spécifier le rythme de chaque keyframe, nous allons ajouter l\u0026rsquo;attribut `keySplines`.\n\nL\u0026rsquo;attribut `keySplines` accepte un ensemble de points de contrôle de Bézier associés avec la liste `keyTimes`, qui définissent une fonction cubique de Bézier contrôlant l\u0026rsquo;allure de chaque intervalle. La valeur de l\u0026rsquo;attribut est une liste de points de contrôles séparés par un point-virgule. Chaque point de contrôle est décrit par un ensemble de quatre valeurs\u0026nbsp;: x1 y1 x2 y2, représentant les points de contrôle Bézier pour un segment temporel. Les valeurs doivent être comprises entre 0 et 1 et l\u0026rsquo;attribut est ignoré si le `calcMode` n\u0026rsquo;est pas réglé sur `spline`.\n\nPlutôt que de prendre des fonctions de Bézier comme valeurs, les `keySplines` prennent les coordonnées des deux points de contrôle utilisés pour dessiner la courbe. Les points de contrôle peuvent être vus sur ces captures d\u0026rsquo;écran prises sur le site de Lea Verou. On peut voir les coordonnées de chaque point, coloriées de la même façon que le point lui-même. Ce sont ces valeurs que nous allons utiliser avec l\u0026rsquo;attribut `keySplines` pour définir l\u0026rsquo;allure des animations keyframe.\n\nDans SMIL ces valeurs peuvent être séparées par des virgules ou par un espace. Les valeurs `keyTimes` qui définissent le segment associé sont les “points d’ancrage” Bézier, et les valeurs `keySplines` sont les points de contrôle. Par conséquent, il doit y avoir un ensemble de points de contrôle _en moins_ par rapport au nombre de `keyTimes`.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/control-points-compressor.png\" width=\"585\" height=\"557\" alt=\"\"/\u003e\u003c/figure\u003e\n\nSi nous revenons à notre example de ballon qui rebondit, les coordonnées des points de contrôle pour les fonctions d’`ease-in` et `ease-out` apparaissent dans les images suivantes\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/ease-in-compressor.png\" width=\"479\" height=\"579\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"url\" src=\"/images/ease-out-compressor.png\" width=\"466\" height=\"570\" alt=\"\"/\u003e\u003c/figure\u003e\n\nPour traduire cela en élément d\u0026rsquo;animation SVG, nous utilisons le code suivant\u0026nbsp;:\n\n    //SVG\n    \u003canimate\n      xlink:href=\"#orange-circle\"\n      attributeName=\"cy\"\n      from=\"50\"\n      to=\"250\"\n      dur=\"3s\"\n      begin=\"click\"\n      values=\"50; 250; 120; 250; 170; 250; 210; 250\"\n      keyTimes=\"0; 0.15; 0.3; 0.45; 0.6; 0.75; 0.9; 1\"\n      keySplines=\".42 0 1 1;\n                  0 0 .59 1;\n                  .42 0 1 1;\n                  0 0 .59 1;\n                  .42 0 1 1;\n                  0 0 .59 1;\n                  .42 0 1 1;\"\n      fill=\"freeze\"\n      id=\"circ-anim\"/\u003e\n\nVoici la démo :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ecd0f3197b5fc0d7950ed94cc8afb97f\" src=\"//codepen.io/SaraSoueidan/embed/ecd0f3197b5fc0d7950ed94cc8afb97f?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=ecd0f3197b5fc0d7950ed94cc8afb97f\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/ecd0f3197b5fc0d7950ed94cc8afb97f/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi vous ne voulez spécifier qu\u0026rsquo;une fonction d\u0026rsquo;easing pour l\u0026rsquo;animation entière, sans valeurs intermédiaires, il vous faut quand même spécifier les keyframes en utilisant l\u0026rsquo;attribut `keyTimes`, mais vous n\u0026rsquo;indiquez que les keyframes de début et de fin, c\u0026rsquo;est à dire `0; 1` et aucune `values` intermédiaire.\n\n### Ajouter et accumuler des animations\n\nParfois il peut être utile de définir qu\u0026rsquo;une animation commence là où la précédente s\u0026rsquo;est achevée. Ou bien de définir qu’une animation utilise les valeurs accumulées des animations précédentes comme valeur à partir de laquelle poursuivre. Pour cela, SVG a deux attributs bien nommés\u0026nbsp;: `additive` et `accumulate`.\n\nSupposons que nous ayons un élément que nous voulons élargir, ou une ligne que nous souhaitons allonger, ou un élément que nous voulons faire évoluer pas à pas d\u0026rsquo;une position à une autre. Cette fonctionnalité est particulièrement utile pour les animations répétées.\n\nComme pour toute autre animation, nous allons spécifier les valeurs `from` et `to`. Cependant, lorsque nous réglons la valeur d\u0026rsquo;`additive` sur `sum`, les valeurs de `from` et `to` seront relatives à la valeur originale de l\u0026rsquo;attribut animé. Si nous revenons à notre cercle, la position initiale de `cx` est 50. Lorsque nous fixons `from=\"0\"` `to=\"100\"`, le point de départ est donc 50 et le point d\u0026rsquo;arrivée est 100+50, c\u0026rsquo;est donc en pratique comme nous écrivions \"`from=\"50\" to=\"150\"`\".\n\nNous obtenons le résultat suivant\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_77b1afdefe05eff8f1d538e0f3f8727e\" src=\"//codepen.io/SaraSoueidan/embed/77b1afdefe05eff8f1d538e0f3f8727e?height=250\u0026amp;theme-id=light\u0026amp;slug-hash=77b1afdefe05eff8f1d538e0f3f8727e\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/77b1afdefe05eff8f1d538e0f3f8727e/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nC\u0026rsquo;est tout ce que fait l\u0026rsquo;attribut `additive`. Il indique simplement si les valeurs `from` et `to` doivent être relatives à la valeur courante (ici, de `cx`) ou non. L\u0026rsquo;attribut prend l\u0026rsquo;une des deux valeurs suivantes\u0026nbsp;: `sum` ou `replace`. Cette dernière est la valeur par défaut et elle signifie que les valeurs de `from` et `to` remplaceront les valeurs courantes ou originales \u0026mdash;\u0026nbsp;ce qui peut causer un saut bizarre juste avant le début de l\u0026rsquo;animation (faites l\u0026rsquo;expérience en remplaçant `sum` par `replace` dans l\u0026rsquo;exemple précédent).\n\nMais comment faire si nous voulons que les valeurs soient additionnées de manière telle que la seconde animation débute au point d\u0026rsquo;arrivée de la première\u0026nbsp;? C\u0026rsquo;est ici qu\u0026rsquo;intervient l\u0026rsquo;attribut `accumulate`.\n\nL\u0026rsquo;attribut `accumulative` contrôle si l\u0026rsquo;animation est, ou non, cumulative. La valeur par défaut est `none`, ce qui signifie que par exemple lorsque l\u0026rsquo;animation est répétée elle recommence depuis le début. Vous pouvez la régler sur `sum`, qui spécifie que chaque répétition repart de la dernière valeur.\n\nSi nous reprenons notre animation, `accumulate=\"sum\"` donnera le résultat suivant\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_e21b7dd0af3d0a6db2828362bee24d48\" src=\"//codepen.io/SaraSoueidan/embed/e21b7dd0af3d0a6db2828362bee24d48?height=250\u0026amp;theme-id=light\u0026amp;slug-hash=e21b7dd0af3d0a6db2828362bee24d48\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/e21b7dd0af3d0a6db2828362bee24d48/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nL’attribut `accumulate` est ignoré si la valeur d'attribut cible n’est pas additionnable ou si l’élément d’animation ne se répète pas. Il sera également ignoré si la fonction d’animation est définie uniquement avec l’attribut `to`.\n\n### Spécifier la fin de l’animation avec `end`\n\nEn plus de définir le début d’une animation, on peut définir sa fin, avec l’attribut `end`. Par exemple, nous pouvons déterminer qu’une animation se répètera indéfiniment, puis la faire cesser lorsqu’un autre élément débute son animation. L’attribut `end` accepte des valeurs similaires à celles de `begin`. On peut spécifier des valeurs absolues ou relatives pour le temps, les répétitions, les événements, etc.\n\nPar exemple, dans la démo qui suit, le cercle orange se déplace lentement sur une période de 30 secondes. Le cercle vert s’animera quand on clique dessus, et l’animation du cercle orange cessera au moment où débutera celle du cercle vert. Cliquez sur le cercle vert pour voir le cercle orange s’arrêter\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_1a67cdf89a865d044e2993a81a4f26be\" src=\"//codepen.io/SaraSoueidan/embed/1a67cdf89a865d044e2993a81a4f26be?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=1a67cdf89a865d044e2993a81a4f26be\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/1a67cdf89a865d044e2993a81a4f26be/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nOn peut évidemment réaliser le même genre de synchronisation d’animations lorsqu’il s’agit de deux animations appliquées au même élément. Par exemple, supposons que nous réglions la couleur du cercle de façon à ce qu’elle s'anime indéfiniment en passant d’une valeur à une autre. Puis, lorsqu’on clique sur l’élément il se déplace vers l’autre côté. Nous voulons que l’animation couleur s’arrête dès qu’on clique sur l’élément et que l’animation de déplacement est lancée.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_71fa25f8bd43d55ca04fa2259cb7d5f5\" src=\"//codepen.io/SaraSoueidan/embed/71fa25f8bd43d55ca04fa2259cb7d5f5?height=250\u0026amp;theme-id=light\u0026amp;slug-hash=71fa25f8bd43d55ca04fa2259cb7d5f5\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/71fa25f8bd43d55ca04fa2259cb7d5f5/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Définir des intervalles d’animation avec plusieurs `begin` et `end`\n\nEn fait, les attributs `begin` et `end` acceptent tous les deux une liste de valeurs séparées par un point-virgule. Chaque valeur dans l’attribut `begin` correspondra à une valeur dans l’attribut `end`, formant ainsi des intervalles d’animation actifs et inactifs.\n\nOn peut le voir comme une voiture qui se déplace, avec les roues de la voiture qui seraient actives et inactives pendant certaines périodes de temps, selon que la voiture bouge ou pas. Vous pouvez même créer l’effet de la voiture animée en appliquant deux animations à la voiture\u0026nbsp;: l’une qui déplace la voiture le long d’un chemin qui est aussi une animation additive et accumulative, et l’autre animation qui fait tourner les roues de la voiture dans des intervalles synchronisés avec le déplacement.\n\nLa démo suivante est un exemple de débuts et fins multiples (c’est à dire d’intervalles multiples), avec un rectangle qui tourne sur lui-même à intervalles déterminés, passant d'un état actif à inactif (faites rerun si l’animation s’est terminée).\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_cb46822d292b7a542eba729c897ed046\" src=\"//codepen.io/SaraSoueidan/embed/cb46822d292b7a542eba729c897ed046?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=cb46822d292b7a542eba729c897ed046\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/cb46822d292b7a542eba729c897ed046/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nRemarquez que dans cet exemple j’ai utilisé l’élément `\u003canimateTransform\u003e` pour faire tourner le rectangle sur son centre. Nous allons revenir sur cet élément plus en détail tout à l’heure.\n\nRemarquez également que même si vous réglez `repeatCount` sur `indefinite` les valeurs `end` l’emporteront et l’animation ne se répètera pas indéfiniment.\n\n### Restreindre la durée d’activité d’un élément avec `min` et `max`\n\nDe même qu’on peut restreindre le nombre de répétitions d’une animation, on peut restreindre la **durée active** d’une animation. Les attributs `min` et `max` spécifient la valeur minimum et maximum de la durée active. On a ainsi un moyen de contrôler les limites inférieures et supérieures de la durée active de l’élément. Chacun de ces attributs prend une valeur de type valeur d’horloge.\n\nPour `min`, cela spécifie la longueur de la valeur minimum de la durée active. La valeur doit être supérieure ou égale à zéro, qui est la valeur par défaut et ne contraint pas la durée active.\n\nPour `max`, la valeur d’horloge spécifie la longueur de la valeur maximum de la durée active. Elle doit également être supérieure à zéro. La valeur par défaut de `max` est `indefinite`, elle ne contraint pas la durée active.\n\nSi les attributs `min` et `max` sont tous les deux spécifiés, la valeur de `max` doit être supérieure ou égale à la valeur de `min`, faute de quoi les deux attributs sont ignorés.\n\nMais qu’est-ce qui définit la durée active d’un élément\u0026nbsp;? Nous avons déjà mentionné la durée de répétition, en plus de la “simple durée” qui est la durée de l’animation sans répétition (spécifiée avec `dur`), alors comment toutes ces durées fonctionnent-elles ensemble\u0026nbsp;? Laquelle prend le dessus\u0026nbsp;? Et où intervient l’attribut `end` qui prendrait le pas sur tous les autres pour mettre fin à l’animation\u0026nbsp;?\n\nLes choses se passent de la manière suivante\u0026nbsp;: le navigateur va _d’abord_ calculer la durée active en fonction des valeurs `dur`, `repeatCount`, `repeatDur` et `end`. _Puis_, il compare cette durée calculée avec les valeurs `min` et `max`. Si le résultat est à l’intérieur des limites, cette première durée calculée est correcte et ne sera pas modifiée. Sinon, deux situations sont possibles\u0026nbsp;:\n\n- Si la première durée calculée est supérieure à la valeur `max`, la durée active de l’élément est définie comme égale à `max`.\n- Si la première durée calculée est inférieure à la valeur `min`, la durée active de l’élément est définie comme égale à `min` et l’élément se comporte comme suit\u0026nbsp;:\n  - Si la durée de répétitions (ou la durée simple, si l’élément ne se répète pas) de l’élément est supérieure à `min`, alors l’élément est animé normalement pendant la durée active (avec la contrainte `min`).\n    - Sinon, l’élément est animé normalement pour sa durée de répétition (ou sa durée simple s’il ne se répète pas) et il est arrêté (gelé) ou il n’est pas montré selon la valeur de l’attribut `fill`.\n\nIl nous reste maintenant à voir comment le navigateur calcule la durée active. Pour faire bref, je n’entrerai pas dans les détails ici. Mais vous pouvez trouver dans [la spécification](http://www.w3.org/TR/2001/REC-smil-animation-20010904/#ComputingActiveDur) un tableau complet détaillant les combinaisons de `dur`, `repeatCount`, `repeatDur` et `end` et ce que deviendra la durée active en fonction de la combinaison de ces attributs.\n\nEnfin, si on définit qu’un élément doit commencer avant son parent (par exemple avec une valeur de décalage négative), la durée minimum est mesurée à partir du temps calculé de départ, et non à partir du temps observé. Cela signifie que la valeur `min` peut n’avoir aucun effet observé.\n\n### Un exemple d'animate : morphing des chemins\n\nUn des attributs qu’on peut animer en SMIL (mais pas en CSS) est l’attribut `d` (raccourci pour _data_) d’un `\u003cpath\u003e` SVG. L’attribut `d` contient les données définissant le contour de la forme que nous dessinons. Elles sont constituées par un ensemble de commandes et de coordonnées qui indiquent au navigateur où et comment dessiner des points, des arcs, des lignes qui forment le chemin final.\n\nL’animation de cet attribut nous permet de _morpher_ les chemins SVG et de créer des effets d’interpolation de formes. Mais pour pouvoir réaliser ce morphing, les chemins de début, de fin et tous les chemins intermédiaires doivent avoir le même nombre de sommets et de points, qui doivent apparaître dans le même ordre. Si le nombre de sommets ne correspond pas, l’animation ne marchera pas. La raison est que les modifications de la forme sont produites par le déplacement des sommets et l’[interpolation](http://fr.wikipedia.org/wiki/Tweening) de leur positions.\n\nPour animer un chemin SVG, on spécifie que l’`attributeName` doit être `d`, et on fixe les valeurs de `from` et `to` qui indiquent les formes de début et de fin, et on peut utiliser l'attribut `values` pour indiquer toute valeur intermédiaire.\u003cspan id=\"morphing\"\u003e\u003c/span\u003e\n\nLà non plus je n’entrerai pas dans les détails. Vous pouvez lire [cet excellent article de Noah Blon](https://codepen.io/noahblon/post/an-intro-to-svg-animation-with-smil) dans lequel il explique comment il a créé une animation utilisant l’interpolation de formes avec `\u003canimate\u003e`. La démo live de l’article de [Noah](/auteurs/noah-blon) ressemble à ceci\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_IhLFK\" src=\"//codepen.io/noahblon/embed/IhLFK?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=IhLFK\u0026amp;user=noahblon\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/noahblon/pen/IhLFK/\"\u003e\n  cette démo\u003c/a\u003e de Noah Blon dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nEt voici un autre exemple de morphing par Felix Hornoiu\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_dovub\" src=\"//codepen.io/felixhornoiu/embed/dovub?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=dovub\u0026amp;user=felixhornoiu\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/felixhornoiu/pen/dovub/\"\u003e\n  cette démo\u003c/a\u003e de Felix Hornoiu dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous pouvez même morpher les valeurs d’un chemin utilisé comme masque de détourage\u0026nbsp;! En voici un exemple par Heather Buchel\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_qLxAB\" src=\"//codepen.io/hbuchel/embed/qLxAB?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=qLxAB\u0026amp;user=hbuchel\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/hbuchel/pen/qLxAB/\"\u003e\n  cette démo\u003c/a\u003e de Heather Buchel dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Animer le long de chemins arbitraires avec animateMotion\n\nL’élément `\u003canimateMotion\u003e` est mon élément SMIL préféré. Vous pouvez l’utiliser pour déplacer un élément le long d’un chemin. On peut spécifier le chemin de déplacement de deux façons possibles, que nous allons voir tout à l’heure.\n\nL’élément `\u003canimateMotion\u003e` accepte les mêmes attributs que mentionnés précédemment, plus trois autres\u0026nbsp;: `keyPoints`, `rotate` et `path`. Par ailleurs, concernant l’attribut `calcMode`, la valeur par défaut est `paced` et non `linear`.\n\n### Spécifier le chemin avec l’attribut path\n\nL’attribut `path` est utilisé pour spécifier le chemin de déplacement. Il est exprimé dans le même format et interprété de la même façon que l’attribut `d` sur l’élément `path`.\n\nNous allons animer notre cercle le long d’un chemin qui ressemble à ceci\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/path-compressor.png\" width=\"785\" height=\"403\" alt=\"ligne courbe descendante puis remontante\"/\u003e\u003c/figure\u003e\n\nVoici le code nécessaire pour déplacer le cercle le long de ce chemin\u0026nbsp;:\n\n    //SVG\n    \u003canimateMotion\n      xlink:href=\"#circle\"\n      dur=\"1s\"\n      begin=\"click\"\n      fill=\"freeze\"\n      path=\"M0,0c3.2-3.4,18.4-0.6,23.4-0.6c5.7,0.1,10.8,0.9,16.3,2.3    \t\t\tc13.5,3.5,26.1,9.6,38.5,16.2c12.3,6.5,21.3,16.8,31.9,25.4\n    \tc10.8,8.7,21,18.3,31.7,26.9c9.3,7.4,20.9,11.5,31.4,16.7\n    \tc13.7,6.8,26.8,9.7,41.8,9c21.4-1,40.8-3.7,61.3-10.4\n        c10.9-3.5,18.9-11.3,28.5-17.8c5.4-3.7,10.4-6.7,14.8-11.5\n    \tc1.9-2.1,3.7-5.5,6.5-6.5\" /\u003e\n\nJe voudrais attirer votre attention sur un point\u0026nbsp;: les coordonnées à l’intérieur de path. Le chemin commence en se mouvant(**M**) vers le point de coordonnées (0,0), avant de commencer à dessiner une courbe (**c**) vers un autre point. Il est important de noter que le point (0,0) est en fait la position du cercle, où qu’il se trouve, et non l’angle supérieur gauche du système de coordonnées. Les coordonnées à l’intérieur de l’attribut `path` sont relatives à la position _actuelle_ de l’élément\u0026nbsp;!\n\nLe résultat est le suivant\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_184082960ac3cc65d00b22f2551a330a\" src=\"//codepen.io/SaraSoueidan/embed/184082960ac3cc65d00b22f2551a330a?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=184082960ac3cc65d00b22f2551a330a\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/184082960ac3cc65d00b22f2551a330a/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi vous spécifiiez le chemin en partant d’un point autre que (0,0), le cercle sauterait brusquement de sa position actuelle à la position spécifiée. Imaginez que vous dessiniez un chemin dans Illustrator puis que vous exportiez ces données de chemin pour les utiliser comme chemin de déplacement (c’est ce que j’ai fait la première fois...) le chemin exporté pourrait ressembler à ceci\u0026nbsp;:\n\n    //SVG\n    \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M100.4,102.2c3.2-3.4,18.4-0.6,23.4-0.6c5.7,0.1,10.8,0.9,16.3,2.3\n    c13.5,3.5,26.1,9.6,38.5,16.2c12.3,6.5,21.3,16.8,31.9,25.4c10.8,8.7,21,18.3,31.7,26.9c9.3,7.4,20.9,11.5,31.4,16.7\n    c13.7,6.8,26.8,9.7,41.8,9c21.4-1,40.8-3.7,61.3-10.4c10.9-3.5,18.9-11.3,28.5-17.8c5.4-3.7,10.4-6.7,14.8-11.5\n    c1.9-2.1,3.7-5.5,6.5-6.5\"/\u003e\n\nDans ce cas, le point de départ est (100.4, 102.2) et si nous utilisions ces données dans le chemin, notre cercle sauterait de 100 unités vers la droite et de 102 unités vers le bas, _puis_ commencerait à se mouvoir le long du chemin relatif à sa nouvelle position. Donc gardez bien ceci à l’esprit lorsque vous préparerez le chemin de déplacement de vos animations.\n\nSi on les utilise, les attributs `from`, `by`, `to` et `values` spécifient une forme sur le canevas en cours qui représente le chemin de déplacement.\n\n### Spécifier le chemin avec l’élément mpath\n\nIl existe une autre façon de spécifier un chemin de déplacement. Au lieu d’utiliser l’attribut relatif `path`, on peut référencer un chemin externe grâce à l’\u003cspan itemprop=\"about\"\u003eélément `\u003cmpath\u003e`\u003c/span\u003e. Le `\u003cmpath\u003e`, qui est un enfant de l’élément `\u003canimateMotion\u003e` référence alors le chemin externe avec l’\u003cspan itemprop=\"about\"\u003eattribut `xlink:href`\u003c/span\u003e.\n\n    //SVG\n    \u003canimateMotion xlink:href=\"#circle\" dur=\"1s\" begin=\"click\" fill=\"freeze\"\u003e\n\n  \t\u003cmpath xlink:href=\"#motionPath\" /\u003e\n\t\u003c/animateMotion\u003e\n\nLe chemin de déplacement `\u003cpath\u003e` peut être défini n’importe où dans le document. Il peut même littéralement être défini dans un élément `\u003cdefs\u003e` et ne pas être rendu sur le canevas. Dans l’exemple suivant, le chemin est rendu parce que la plupart du temps vous voudrez montrer le chemin que suit l’élément.\n\nNotez que la position du cercle est “multipliée” ou “transformée” par les coordonnées dans les données du chemin.\n\nDans l’exemple suivant, nous avons un chemin situé au milieu du canevas. Le cercle est positionné au début du chemin. Cependant, lorsque le chemin de déplacement est appliqué, le cercle ne commence pas à se mouvoir depuis sa position courante. Regardez la démo pour une meilleure explication.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_0642931398bf1cf3ed1ff9b3e6b52398\" src=\"//codepen.io/SaraSoueidan/embed/0642931398bf1cf3ed1ff9b3e6b52398?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=0642931398bf1cf3ed1ff9b3e6b52398\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/0642931398bf1cf3ed1ff9b3e6b52398/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVous avez remarqué la façon dont le cercle suit la même forme que le chemin mais à partir d’une position différente\u0026nbsp;? Ceci est dû au fait que la position du cercle est transformée par les valeurs des données du chemin.\n\nPour éviter cela, on peut commencer avec un cercle positionné à (0,0).\n\nUne autre façon de faire est d’appliquer [une transformation](http://sarasoueidan.com/blog/svg-transformations/) qui “remet à zéro” les coordonnées du cercle.\n\nL’exemple qui suit est une version modifiée de la démo précédente, utilisant un chemin fermé et répétant l’animation de manière indéfinie.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ef9f0e1242263cf23067b09be894cfa9\" src=\"//codepen.io/SaraSoueidan/embed/ef9f0e1242263cf23067b09be894cfa9?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=ef9f0e1242263cf23067b09be894cfa9\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/ef9f0e1242263cf23067b09be894cfa9/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Prévalence de règles pour animateMotion\n\nPuisqu’il existe plus d’une façon de faire la même chose avec `animateMotion`, il est logique d’avoir une prévalence de certaines règles sur d’autres :\n\n- Concernant la définition du chemin de déplacement, l’élément `mpath` prévaut sur l’attribut `path`, qui lui même prévaut sur `values`, qui prévaut sur `from`, `by` et `to`.\n- Concernant la détermination des points correspondant aux attributs `keyTimes`, l’attribut `keyPoints` prévaut sur `path` qui lui même prévaut sur `values`, qui prévaut sur `from`, `by` et `to`.\n\n### Fixer l’orientation d’un élément le long d’un chemin avec rotate\n\nDans l’exemple précédent, l’élément que nous animions le long du chemin était un cercle. Mais que se passe-t-il si nous animons un élément qui a une certaine orientation, par exemple l’icône d’une voiture\u0026nbsp;? Nous nous servirons de l’icône [conçue par Freepik](http://www.freepik.com/free-vector/transport-icons-collection_753635.htm).\n\nDans cet exemple, j’ai remplacé le cercle par un groupe ayant un ID de “car”, qui contient l’élément constituant le groupe. Puis, afin d’éviter le problème de saut brusque rencontré précédemment, j’ai appliqué une transformation à la voiture qui la translate de façon telle qu’elle se retrouve en position initiale à (0,0). Les valeurs de la transformation correspondent aux coordonnées du point où le premier chemin de la voiture commence à être dessiné (juste après la commande move **M**).\n\nLa voiture se déplace le long du chemain mais... voici à quoi ça ressemble\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_3a300b8c4c0f9db4ff345f5d44992b74\" src=\"//codepen.io/SaraSoueidan/embed/3a300b8c4c0f9db4ff345f5d44992b74?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=3a300b8c4c0f9db4ff345f5d44992b74\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/3a300b8c4c0f9db4ff345f5d44992b74/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nL'orientation de la voiture est fixe, elle ne change pas pour s’adapter au chemin de déplacement. Pour modifier cela, nous allons utiliser l’attribut `rotate`.\n\nL’attribut `rotate` peut prendre l’une de ces trois valeurs\u0026nbsp;:\n\n- `auto` : indique que l’objet pivote dans le temps en fonction de l’angle de la direction (c’est à dire le vecteur directionnel tangent) du chemin de déplacement.\n- `auto-reverse` : indique que l’objet pivote selon l’angle de direction + 180 degrés.\n- un nombre : indique que l’élément se voit appliquer une transformation constante, où l’angle de rotation est le nombre de degrés spécifié.\n\nPour corriger l’orientation de la voiture, nous allons régler la valeur de rotation sur `auto`. Nous obtenons le résultat suivant\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_74af0bd0bbc7ca46d4d568ca0d473b40\" src=\"//codepen.io/SaraSoueidan/embed/74af0bd0bbc7ca46d4d568ca0d473b40?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=74af0bd0bbc7ca46d4d568ca0d473b40\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/74af0bd0bbc7ca46d4d568ca0d473b40/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi vous préférez que la voiture se retrouve en dehors du chemin plutôt qu’à l’intérieur, `auto-reverse` vous permet de le faire\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_1027d099f0e9cca94f8f8865d169c49f\" src=\"//codepen.io/SaraSoueidan/embed/1027d099f0e9cca94f8f8865d169c49f?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=1027d099f0e9cca94f8f8865d169c49f\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/1027d099f0e9cca94f8f8865d169c49f/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nC’est mieux, mais nous avons encore un petit problème\u0026nbsp;: la voiture a l’air de rouler en marche arrière le long du chemin\u0026nbsp;! Pour corriger cela, nous devons faire pivoter la voiture sur son axe des y. On y parvient avec scale. Donc si nous appliquons la transformation au groupe `g` ayant l’ID de `car`, la voiture avancera comme prévu. La transformation `scale` est enchaînée avec les autres translations\u0026nbsp;:\n\n    //SVG\n    \u003cg id=\"car\" transform=\"scale (-1, 1) translate(-234.4, -182.8)\"\u003e\n\nEt voici la démo finale :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_48caf2f5fa42a8c154fcb5dec0dbe4d5\" src=\"//codepen.io/SaraSoueidan/embed/48caf2f5fa42a8c154fcb5dec0dbe4d5?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=48caf2f5fa42a8c154fcb5dec0dbe4d5\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/48caf2f5fa42a8c154fcb5dec0dbe4d5/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Contrôler la distance d’animation le long du chemin\n\nL’attribut `keyPoints` nous offre la possibilité de spécifier la progression le long du chemin de déplacement pour chacune des valeurs de `keyTimes`. Si on utilise des `keyPoints`, `keyTimes` prendra les valeurs de `keyPoints` au lieu de celles spécifiées dans une liste de `values`.\n\n`keyPoints` accepte une liste de valeurs décimales entre 0 et 1, séparées par des points-virgules, et il indique à quel endroit l’objet doit se déplacer à un moment donné, spécifié par les valeurs `keyTimes` correspondantes. Les calculs de distances sont déterminés par les algorithmes du navigateur. Chaque valeur de progression dans la liste correspond à une valeur dans la liste de l’attribut `keyTimes`. Si une liste de `keyPoints` est spécifiée, il doit y avoir exactement autant de valeurs dans la liste `keyPoints` que dans la liste `keyTimes`.\n\nUne chose importante à noter ici est qu’il faut régler la valeur de `calcMode` sur `linear` pour que `keyPoints` fonctionne.\n\nL’exemple qui suit est d’Amelia Bellamy-Royds (dont vous devriez absolument visiter le [profil CodePen](http://codepen.io/AmeliaBR/)) il utilise `keyPoints` pour faire comme si on commençait un mouvement depuis un point en retrait, car nous n’avons pas cette possibilité par défaut actuellement dans SMIL.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ewvrC\" src=\"//codepen.io/AmeliaBR/embed/ewvrC?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=ewvrC\u0026amp;user=AmeliaBR\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/AmeliaBR/pen/ewvrC/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Déplacer un texte le long d’un chemin arbitraire\n\nLe déplacement d’un texte le long d’un chemin est différent du déplacement des autres éléments SVG le long d’un chemin. Pour animer du texte, vous devrez utiliser l’élément `\u003canimate\u003e` et non pas l’élément `\u003canimateMotion\u003e`.\n\nTout d’abord, positionnons le texte le long d’un chemin. On peut le faire en emboîtant un élément `\u003ctextPath\u003e` à l’intérieur de l’élément `\u003ctext\u003e`. Le texte qui sera positionné le long d’un chemin sera défini à l’intérieur de l’élément `\u003ctextPath\u003e` et non comme un enfant de l’élément `\u003ctext\u003e`.\n\nLe `textPath` va référencer le chemin que nous voulons utiliser, comme nous l’avons fait dans les exemples précédents. Le chemin référencé peut soit être rendu sur le canvas, soit défini à l’intérieur de `\u003cdefs\u003e`. Regardez le code de la démo suivante en cliquant sur html\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ebfc92e45e24b29c266f50e6f617cdf5\" src=\"//codepen.io/SaraSoueidan/embed/ebfc92e45e24b29c266f50e6f617cdf5?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=ebfc92e45e24b29c266f50e6f617cdf5\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/ebfc92e45e24b29c266f50e6f617cdf5/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nPour animer le texte le long de ce chemin, nous allons utiliser l’élément `\u003canimate\u003e` pour animer l’attribut `startOffset`.\n\nLe `startOffset` représente le décalage éventuel du texte sur le chemin. 0% représente le début du chemin, 100% la fin, donc si l’offset est réglé à 50% le texte commencera à mi-chemin .\n\nEn animant le `startOffset`, nous allons créer l’effet du texte qui se déplace sur le chemin. Regardez le code pour plus de détails.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_501308e154923359ed1cdbfa29eadcc0\" src=\"//codepen.io/SaraSoueidan/embed/501308e154923359ed1cdbfa29eadcc0?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=501308e154923359ed1cdbfa29eadcc0\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/501308e154923359ed1cdbfa29eadcc0/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Animer les transformations\n\nL’élément `\u003canimateTransform\u003e` anime un attribut de transformation sur un élément cible, permettant par là-même aux animations de contrôler la translation, le redimensionnement, la rotation et la déformation. Il prend les mêmes attributs que ceux mentionnés pour l’élément `\u003canimate\u003e`, plus un : `type`.\n\nL’attribut `type` est utilisé pour spécifier le type de transformation animé. Il prend l’une de ces cinq valeurs\u0026nbsp;: `translate`, `scale`, `rotate`, `skewX` et `skewY`.\n\nLes attributs `from`, `by` et `to` prennent une valeur exprimée avec la même syntaxe que celle qui est disponible pour le type de transformation concerné\u0026nbsp;:\n\n- Pour un `type=\"translate\"` chaque valeur individuelle est exprimée comme `\u003ctx\u003e [,\u003cty\u003e]`.\n- Pour un `type=\"scale\"` chaque valeur individuelle est exprimée comme `\u003csx\u003e [,\u003csy\u003e]`.\n- Pour un `type=\"rotate\"` chaque valeur individuelle est exprimée comme `\u003crotate-angle\u003e [\u003ccx\u003e \u003ccy\u003e]`.\n- Pour un `type=\"skewX\"` et `type=\"skewY\"` chaque valeur individuelle est exprimée comme `\u003cskew-angle\u003e`.\n\nSi vous n’êtes pas habitué à la syntaxe des fonctions de l'attribut `transform` de SVG, je vous recommande de lire l’article que j’ai écrit à ce sujet : [Understanding SVG Coordinate Systems and Transformations (Part 2): The Transform Attribute](http://sarasoueidan.com/blog/svg-transformations/), avant de continuer avec ce guide.\n\nRevenons à une démo précédente, celle où nous faisions tourner sur lui-même le rectangle rose en utilisant l’élément `\u003canimateTransform\u003e`. Le code de la rotation ressemble à ceci\u0026nbsp;:\n\n    //SVG\n    \u003crect id=\"deepPink-rectangle\" width=\"50\" height=\"50\" x=\"50\" y=\"50\" fill=\"deepPink\" /\u003e\n\n    \u003canimateTransform\n        xlink:href=\"#deepPink-rectangle\"\n        attributeName=\"transform\"\n        attributeType=\"XML\"\n        type=\"rotate\"\n        from=\"0 75 75\"\n        to=\"360 75 75\"\n        dur=\"2s\"\n        begin=\"0s\"\n        repeatCount=\"indefinite\"\n        fill=\"freeze\"\n        /\u003e\n\nLes attributs `from` et `to` spécifient l’angle de rotation (début et fin) et le centre de la rotation (75, 75). Dans les deux, le centre de la rotation reste inchangé bien sûr. Si l’on ne spécifie pas le centre, il sera par défaut le coin supérieur gauche du canevas SVG.\n\nLa démo live du code est la suivante\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_1bb859d4103d5e32b037f69e906319fb\" src=\"//codepen.io/SaraSoueidan/embed/1bb859d4103d5e32b037f69e906319fb?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=1bb859d4103d5e32b037f69e906319fb\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/1bb859d4103d5e32b037f69e906319fb/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nEt voici un exemple amusant par Gabriel, avec un simple `animateTransform`\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_obhzc\" src=\"//codepen.io/guerreiro/embed/obhzc?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=obhzc\u0026amp;user=guerreiro\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/guerreiro/pen/obhzc/\"\u003e\n  cette démo\u003c/a\u003e de Gabriel Guerreiro dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nAnimer une transformation unique est simple, toutefois les choses peuvent devenir compliquées lorsqu’on inclut des transformations multiples, en particulier du fait qu’une `animateTransform` peut en écraser une autre, ce qui fait qu’au lieu d’ajouter et d’enchaîner des effets, vous terminerez avec l’inverse. Ajoutez à cela la manière dont fonctionnent les systèmes de coordonnées SVG (cf. mon article cité plus haut). Pour transformer les SVG, je vous recommande d’utiliser les transformations CSS.\n\n## L’élément set\n\nL’élément `\u003cset\u003e` offre une manière simple de régler la valeur d’un attribut pour une durée donnée. Il accepte tous les types d’attributs, dont ceux qui ne peuvent pas être raisonnablement interpolés, tels que les chaînes de caractères et les valeurs booléennes. L’élément `set` n’est pas additif. Les attributs additifs et accumulatifs ne sont pas permis et seront ignorés si on les utilise.\n\nPuisque `\u003cset\u003e` est utilisé pour donner une valeur spécifique à un élément, pour une durée déterminée, il n’accepte pas tous les attributs mentionnés pour les éléments d'animation précédents. Par exemple, il n’a pas d’attribut `from` ou `by` car les valeurs ne changent pas progressivement sur la période de temps.\n\nPour `set`, vous pouvez spécifier l’élément que vous ciblez, le nom et le type d’attribut, la valeur `to`, et le timing d’animation peut être contrôlé via `begin`, `dur`, `end`, `min`, `max`, `restart`, `repeatCount`, `repeatDur` et `fill`.\n\nDans l’exemple qui suit, on fixe (`set`) la couleur du rectangle tournant au bleu lorsqu’on le clique. La couleur reste bleue pendant 3 secondes, puis revient à sa valeur d’origine. À chaque fois qu’on clique sur le rectangle, l’animation `set` est déclenchée et la couleur change pour 3 secondes.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_af159baaf57bc38eb40288db722e1245\" src=\"//codepen.io/SaraSoueidan/embed/af159baaf57bc38eb40288db722e1245?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=af159baaf57bc38eb40288db722e1245\u0026amp;user=SaraSoueidan\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003eVoir \u003ca href=\"http://codepen.io/SaraSoueidan/pen/af159baaf57bc38eb40288db722e1245/\"\u003e\n  cette démo\u003c/a\u003e de Sara Soueidan dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Éléments, attributs et propriétés peuvent être animés\n\nTous les attributs SVG ne peuvent pas être animés, et parmi ceux qui peuvent l’être, tous ne peuvent utiliser l’intégralité des éléments d’animation. Pour une liste complète des attributs animables, et un tableau montrant lesquels peuvent être animés par quels éléments, vous pouvez vous référer à [cette section de la spécification SVG Animation](http://www.w3.org/TR/SVG2/animate.html#AnimationAttributesAndProperties).\n\n### Pour conclure\n\nSMIL a un potentiel énorme, je n’ai fait qu’effleurer la surface et je n’ai abordé que les bases les plus simples. De nombreux effets très impressionnants peuvent être réalisés, en particulier ceux qui impliquent le morphing et la transformation des formes. _The sky is the limit_. Soyez fous\u0026nbsp;! et n’oubliez pas de partager ce que vous créez avec la communauté\u0026nbsp;! Merci de votre lecture.\n"},{"slug":"css-aider-la-veuve-et-lorphelin","title":"CSS, aider la veuve et l'orpheline","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"23 octobre 2014","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/946/CSS-last-line-Controlling-Widows-\u0026-Orphans","copyright":"2014"},"dateCascade":"14 décembre 2014","dateMachine":"2O141214","tags":["css","typographie"],"about":["Widows","Orphans"],"excerpt":"CSS nous permet de contrôler facilement la première ligne d'un texte, mais sa capacité à contrôler la dernière ligne reste limitée. Un rappel sur widows et orphans par Dudley Storey.","featured":false,"featuredImage":"/images/demosthenes_info_-_CSS_last-line__Controlling_Widows___Orphans-6.jpeg","order":5,"content":"\nAlors que CSS nous offre de nombreuses options pour [contrôler la :first-line](http://demosthenes.info/blog/226/Classic-typography-effects-in-CSS-first-line-run-in) d'un texte, sa capacité à contrôler la dernière ligne reste limitée. Ce serait pourtant parfois bien utile.\n\n## Vestiges \u0026 Fragments\n\n“[Widows](../widows/)” et “[orphans](../orphans/)” (veuves et orphelines) désignent un mot ou une ligne de texte mis en page d’une façon qui dérange le flux de la lecture et l’aspect de la page. Le plus souvent, ce sont des mots qui se retrouvent à pendouiller à la fin d’un paragraphe. Dans les media paginés, ce sont souvent des mots de fin de paragraphe qui se retrouvent sur une nouvelle page\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/demosthenes_info_-_CSS_last-line__Controlling_Widows___Orphans.jpeg\" alt=\"\" width=\"900\" height=\"574\"\u003e\u003cfigcaption\u003eExemple de “veuve” dans un texte imprimé\u003c/figcaption\u003e\u003c/figure\u003e\n\nLes navigateurs n’ont pas de concept de “page” pour l’écran, mais des veuves peuvent apparaître lorsque le texte est imprimé, et on peut le contrôler ainsi\u0026nbsp;:\n\n    p { widows: 3; }\n\nOn peut traduire cette instruction par “si un paragraphe est coupé dans la mise en page, la partie du paragraphe qui apparaît dans la page suivante doit comporter au moins trois lignes”. Un navigateur compatible avec la propriété espacera les éléments de manière à ce que ce soit possible\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/demosthenes_info_-_CSS_last-line__Controlling_Widows___Orphans-2.jpeg\" alt=\"\"  width=\"900\" height=\"568\"\u003e\u003cfigcaption\u003eUne page imprimée avec le problème de veuves résolu\u003c/figcaption\u003e\u003c/figure\u003e\n\nDe l’autre côté, les “orphelines” apparaissent en tête de paragraphe. L’exemple le plus courant est celui d’un paragraphe qui commence en bas de page\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/demosthenes_info_-_CSS_last-line__Controlling_Widows___Orphans-3-1.jpeg\" alt=\"\"  width=\"900\" height=\"572\"\u003e\u003cfigcaption\u003eUn exemple de texte avec orpheline\u003c/figcaption\u003e\u003c/figure\u003e\n\nLà encore, on peut contrôler la situation en donnant à la propriété `orphans` une valeur raisonnable\u0026nbsp;:\n\n    p { orphans: 3; }\n\nCe qui signifie : un paragraphe doit commencer avec au moins trois lignes sur une page avant de pouvoir être coupé. Sinon, le paragraphe doit commencer sur la page suivante.\n\nLe résultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/demosthenes_info_-_CSS_last-line__Controlling_Widows___Orphans-4.jpeg\" alt=\"\"  width=\"900\" height=\"570\"\u003e\u003cfigcaption\u003eUne page imprimée avec le problème d’orphelines résolu\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Suggestion d’utilisation\n\n`widows` et `orphans` devraient tous deux avoir des valeurs raisonnables par défaut dans vos feuilles de style\u0026nbsp;:\n\n    p { widows: 3; orphans: 3: }\n\nDes éléments comme les titres peuvent aussi connaître ce genre de problème, mais il est plus courant de traiter le problème avec un `page-break`.\n\n## Qui est qui ?\n\nUne manière commode (même si un peu _Dickensienne_) de mémoriser ces termes est de se dire\u0026nbsp;:\n\n- Les orphelines “se retrouvent seules au commencement”\n- Les veuves “se retrouvent seules à la fin”.\n\n## Veuves \u0026 orphelines à l’écran\n\nPar sa nature même, le design responsif crée d’innombrables fragments de texte veuf. Certains peuvent être traités par une utilisation intelligente de [hyphens](http://demosthenes.info/blog/429/Class-Typography-Effects-Hyphenation) et de la justification, mais les autres ne peuvent être évités.\n\nOn vous dira souvent que les propriétés `widows` et `orphans` ne peuvent être utilisées que pour l’imprimé, ce n’est pas vrai\u0026nbsp;: dans les navigateurs compatibles, ces propriétés peuvent également être appliquées aux [mises en page de type journal](http://demosthenes.info/blog/79/CSS-Layouts-Newspaper-Style-Columnar-Text), qui se heurtent souvent au même problème\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/demosthenes_info_-_CSS_last-line__Controlling_Widows___Orphans-5.jpeg\" alt=\"\"  width=\"900\" height=\"463\"\u003e\u003cfigcaption\u003eTexte orphelin dans une colonne\u003c/figcaption\u003e\u003c/figure\u003e\n\nLe CSS (sans préfixes) et une solution pour le texte orphelin\u0026nbsp;:\n\n    div { column-count: 2; column-gap: 2rem; }\n    p { line-height: 1.6; font-size: 1rem; orphans: 2; }\n\nLe résultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/demosthenes_info_-_CSS_last-line__Controlling_Widows___Orphans-6.jpeg\" alt=\"\"  width=\"900\" height=\"479\"\u003e\u003cfigcaption\u003eTexte orphelin dans une colonne\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Tout faire tenir sur une ligne\n\nLes cas les plus extrêmes de textes veufs se produisent dans les titres, où un mot final se retrouve tout seul sur une nouvelle ligne. Il existe des solutions pour cela\u0026nbsp;: [FitText](http://fittextjs.com/) est un plugin jQuery qui redimensionne le texte dynamiquement en fonction de la taille de la fenêtre navigateur. Il existe aussi des solutions SVG. Ma préférence personnelle va à l’utilisation d’[unités `vw`](http://demosthenes.info/blog/660/Using-vw-and-vh-Measurements-In-Modern-Site-Design) pour faire tenir un titre sur une ligne unique, bien que cela exige souvent un peu de calcul et d’expérimentation.\n\n### Compatibilité navigateurs\n\nLa compatibilité est _décente_ : Chrome et IE ont une très bonne compatibilité, mais Firefox et Safari les ignorent totalement. Il faut donc les considérer comme des éléments d’[amélioration progressive](http://s-jdm.developpez.com/tutoriels/web/traductions/comprendre-amelioration-progressive/)\u0026nbsp;: des touches finales appréciables mais non vitales pour le contenu de votre page.\n"},{"slug":"toi-seul-utiliser-only-child-de-css","title":"Toi seul : utiliser only-child de CSS","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"8 novembre 2014","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"https://thenewcode.com/954/Only-You-Using-only-child-in-CSS","copyright":"2014"},"dateCascade":"10 décembre 2014","dateMachine":"2O141210","tags":["css"],"about":[":only-child"],"excerpt":"Les cas d'utilisation de only-child sont nombreux. Comme souvent avec les pseudo-classes, il nous permet d'écrire un code concis et adapté au contenu généré dynamiquement.","featured":false,"featuredImage":"/images/demosthenes_info_-_Only_You__Using_only-child_in_CSS.jpeg","order":null,"content":"\nUne étape avant d’arriver au sélecteur [:empty](/articles/empty-une-pseudo-classe-pas-si-vide/), `:only-child` sélectionne les éléments qui sont entièrement seuls à l’intérieur de leur conteneur. On pourrait se demander comment diable utiliser ce sélecteur, mais les cas d’utilisation sont étonnamment nombreux.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/demosthenes_info_-_Only_You__Using_only-child_in_CSS.jpeg\" alt=\"Un tableau dans lequel les distances entre une ville et elle-même sont vides\"/\u003e\u003cfigcaption\u003ePhotographie CC \u003ca href=\"https://500px.com/photo/79871265/untitled-by-nesim-kurnaz\"\u003eNesim Kurnaz\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Only-child pour les images “héros”\n\nSur mon blog ([the new code](http://thenewcode.com)) on trouve une bonne utilisation d’`:only-child` où la plupart des articles ont une illustration dans le `\u003cheader\u003e`. La plupart de ces images sont entières, de bord à bord, mais _seulement_ si elles sont le seul occupant du `\u003cheader\u003e`. Habituellement, on utilise une classe ou même on utilise un style en ligne\u0026nbsp;:\n\n    \u003carticle\u003e\n      \u003cheader\u003e\n      \u003cimg src=\"sad-kid.jpg\" alt style=\"width: 100%; height: auto\"\u003e\n      \u003c/header\u003e\n      …\n    \u003c/article\u003e\n\nMais si on réfléchit à la logique de cette mise en page, on se rend compte qu’on pourrait faire beaucoup plus simple (et éviter le style en ligne) en utilisant `:only-child`\u0026nbsp;:\n\n    header img:only-child { width: 100%; height: auto; }\n\nCe qu’on pourrait traduire par “si une image est le seul élément à l’intérieur d'un header, lui donner la pleine largeur de son élément parent”.\n\nRemarquez que ça fonctionne même si l’image est enveloppée dans un élément `\u003cfigure\u003e` à l’intérieur du `\u003cheader\u003e`. Avec ce sélecteur, l’élément `\u003cfigure\u003e` n'est pas compté dans les autres enfants car il n’a aucune spécificité, l’image est donc toujours considérée comme le “seul enfant”. Par contre, si on ajoute une `\u003cfigcaption\u003e` qui serait donc un “frère” de l’image (immédiatement au-dessus ou au-dessous), le sélecteur ne s’applique plus. Pour obtenir le même résultat, nous pourrions alors utiliser le sélecteur `:only-of-type`.\n\n## Vérifier si un élément a un frère\n\nCSS n’a pas vraiment la capacité de dire combien d’éléments se trouvent sur une page (c’est JavaScript qui sait faire ça), mais on peut quand même s’assurer qu’un style est appliqué à un élément à la condition qu’il ne soit pas le seul élément à l’intérieur de son parent.\n\nPar exemple, supposons que nous voulions appliquer un style au dernier paragraphe d’une `\u003cdiv\u003e`, mais uniquement s’il n'est pas le seul élément de cette `\u003cdiv\u003e`. Notre contenu est généré dynamiquement, il n’y a donc pas moyen de savoir combien on aura de paragraphes dans notre `\u003cdiv\u003e`.\n\nMais si nous utilisons le sélecteur `:only-child` combiné avec le [sélecteur de négation](/articles/la-pseudo-classe-de-negation/) `:not`, nous pouvons déterminer si le paragraphe n’est pas seul avant de lui appliquer un style\u0026nbsp;:\n\n    div p:last-child:not(:only-child) { font-weight: bolder; }\n\nGrâce à cette sélection, le dernier paragraphe sera en gras, mais seulement s’il n’est pas le seul élément dans la `\u003cdiv\u003e`. Pour être encore plus précis, on pourrait utiliser `:last-of-type` et `:only-of-type` dans le même assemblage de sélecteurs.\n\n### Compatibilité\n\nLa compatibilité d’`:only-child` est excellente, tous les navigateurs modernes la supportent.\n\n### Alternatives\n\nD’autres sélecteurs accomplissent la même chose\u0026nbsp;: `:first-child:last-child` (qui signifie “le premier enfant de l’élément est aussi son dernier enfant”) et `:nth-child(1):nth-last-child(1)` (même signification), bien qu’avec une plus forte spécificité.\n"},{"slug":"video-en-background","title":"Créer un background vidéo fullscreen avec HTML5","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"6 octobre 2014","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"https://thenewcode.com/777/Create-Fullscreen-HTML5-Page-Background-Video","copyright":"2014"},"dateCascade":"10 décembre 2014","dateMachine":"2O141210","tags":["css","html","video"],"about":[],"excerpt":"Il n'est pas possible d'intégrer une vidéo avec les propriétés CSS background ou background-image, mais Dudley Storey nous montre comment forcer l'apparition d'une vidéo responsive fullscreen derrière les éléments HTML.","featured":false,"featuredImage":"/images/polina-1.jpeg","order":10,"content":"\nLes propriétés CSS `background` et `background-image` n’acceptent que des images [bitmap](http://thenewcode.com/64/Bitmap-Images-for-the-Web-Formats-and-Optimisation-Options) ou [SVG](/tags/svg) et des valeurs de [couleurs](/tags/couleur/) ou de [dégradés](/articles/les-degrades-css/), il n’est donc pas possible d’y intégrer une vidéo. Cependant, nous pouvons reproduire l’apparence d’une vidéo d'arrière-plan plein écran en forçant son apparition derrière d’autres éléments HTML. Le défi est d’avoir une vidéo plein écran et aussi responsive que nos images de background.\n\n👉🏿\u0026nbsp;_Note\u0026nbsp;: pour illustrer cet article, nous utiliserons une vidéo d'Alexandre Wagner_.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/polina-1.jpeg\" width=\"854\" height=\"480\" alt=\"\"/\u003e\u003cfigcaption\u003eNous utiliserons une vidéo d’\u003ca href=\"http://www.alexanderwagnerphoto.com/\"\u003eAlexander Wagner\u003c/a\u003e\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Quelques considérations préliminaires\n\nAvant de nous lancer dans la réalisation, voici quelques facteurs qu’il convient de garder à l’esprit\u0026nbsp;:\n\n- N’utilisez pas cette technique simplement parce que _vous le pouvez_\u0026nbsp;: **le contenu vidéo doit amplifier le message du site**, évitez les effets cosmétiques vides de sens.\n- La vidéo sera sans doute réglée par défaut sur `autoplay`, mais il est préférable de la régler sur mute, et même, idéalement, il vaudrait mieux qu’elle ne comporte **pas de son** du tout. Vous pouvez créer un bouton pour remettre le son avec JavaScript.\n- La vidéo devrait afficher une image de rechange pour les navigateurs incompatibles avec HTML5. L’image sera utilisée également comme arrière-plan pour les mobiles : la plupart des smartphones et tablettes ne supportent pas `autoplay`, pour des raisons évidentes.\n- La durée est importante\u0026nbsp;: Une vidéo **trop courte** semble répétitive (si elle est diffusée en boucle), et si elle est **trop longue** elle devient une histoire en elle-même, un contenu qui mérite d’être traité comme un élément séparé. Je suggèrerais une durée de 12 à 30 secondes.\n- **L’accessibilité** est importante\u0026nbsp;: tout texte placé sur la vidéo devrait offrir un contraste permettant sa lecture. Les utilisateurs doivent accéder facilement à une interface de contrôle pour mettre la vidéo en pause. Idéalement, la vidéo ne devrait passer qu’une seule fois.\n- **La bande passante** : la vidéo doit être courte et compressée aussi efficacement que possible. En même temps, elle doit pouvoir se redimensionner sur tous les terminaux. Dans les cas les plus complexes, vous pourriez envisager d'utiliser des [media queries en ligne](http://thenewcode.com/820/Make-HTML5-Video-Adaptive-With-Inline-Media-Queries), ou [matchmedia](http://thenewcode.com/702/matchMedia-Media-Queries-For-JavaScript) de JavaScript pour proposer des qualités différentes de la vidéo en fonction de l'écran. Essayez de ne pas dépasser 5Mb, idéalement restez en-dessous des 500K.\n\nEn gardant tous ces facteurs à l'esprit, passons maintenant aux techniques nous permettant de réaliser notre objectif. Nous utiliserons pour cela une courte vidéo d’[Alexander Wagner](http://www.alexanderwagnerphoto.com/), vous pouvez voir le résultat (et le code) sur ce CodePen\u0026nbsp;:\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/dudleystorey/pen/knqyK/\"\u003e\n  Fullscreen HTML5 Page Background Video\u003c/a\u003e de Dudley Storey dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cp\u003ePour voir la vidéo en plein écran, regardez \u003ca href=\"http://thenewcode.com/samples/polina.html\"\u003ecette démo\u003c/a\u003e.\u003c/p\u003e\n\n## Une approche purement CSS\n\nOn construit la vidéo HTML5 comme habituellement\u0026nbsp;:\n\n    \u003cvideo autoplay loop poster=\"polina.jpg\" id=\"bgvid\"\u003e\n      \u003csource src=\"polina.webm\" type=\"video/webm\"\u003e\n      \u003csource src=\"polina.mp4\" type=\"video/mp4\"\u003e\n    \u003c/video\u003e\n\nAttention\u0026nbsp;: l’ordre des fichiers vidéo est vital, Chrome a un bug actuellement qui fait qu’il ne jouera pas une vidéo .webm si le fichier n’est pas le premier dans la liste.\n\nL’image de fallback sera remplacée par la première image de la vidéo une fois celle-ci chargée, donc ce serait une bonne idée de prendre cette première image comme image de fallback.\n\nPour afficher la vidéo plein écran\u0026nbsp;:\n\n    video#bgvid {\n      position: fixed; right: 0; bottom: 0;\n      min-width: 100%; min-height: 100%;\n      width: auto; height: auto; z-index: -100;\n      background: url(polina.jpg) no-repeat;\n      background-size: cover;\n    }\n\nLes navigateurs anciens ne reconnaîtront pas les formats vidéo, mais ils devraient malgré tout reconnaître la balise `\u003cvideo\u003e` (à l'exception d'IE8, voir ci-dessous). Pour ces navigateurs, nous créons une `background-image` pour l’élément, en utilisant la même image de remplissage.\n\n### Note sur IE8\n\nNon seulement IE8 ne reconnaît pas la balise `\u003cvideo\u003e` mais il ne reconnaît aucun nouvel élément de HTML5. C’est un problème puisque nous voulons pouvoir, _a minima_, appliquer un style à l’élément et placer une image de background à l’intérieur. Pour y parvenir, il nous faut deux choses\u0026nbsp;: tout d’abord une ligne de JavaScript, dans une boucle conditionnelle\u0026nbsp;:\n\n    \u003c!--[if lt IE 9]\u003e\n    \u003cscript\u003e\n    document.createElement('video');\n    \u003c/script\u003e\n    \u003c![endif]--\u003e\n\nEnsuite, dans notre CSS, une déclaration qui permette à IE de comprendre qu’il s’agit d’un élément de niveau bloc\u0026nbsp;:\n\n    video { display: block; }\n\nAvec cela, IE8 peut au moins appliquer un style à l’élément `\u003cvideo\u003e` en y insérant une image de d’arrière-plan.\n\n## Quid des mobiles ?\n\nL’affichage plein écran d’une vidéo de background sur les terminaux mobiles pose plusieurs défis\u0026nbsp;:\n\n1. La plupart des plateformes mobiles (en particulier iOS) refusent l’autoplay des vidéos HTML5 pour éviter des chargements de données potentiellement ruineux.\n2. Dans ce cas, la vidéo sera affichée avec un bouton play embarqué, ce qui à son tour...\n3. ...peut empiéter sur le fonctionnement de touches du terminal, et rendre impossible le bon fonctionnement de liens présents dans le contenu figurant au-dessus de la vidéo.\n\nMême s’il est possible d’utiliser une détection de vidéo autoplay avec JavaScript, la solution la plus simple est d’utiliser une media query qui substitue complètement la vidéo par l’image de fallback pour les petits écrans. On ajoute à notre CSS précédent\u0026nbsp;:\n\n    @media screen and (max-device-width: 800px) {\n    html { background: url(polina.jpg) #000 no-repeat center center fixed; }\n    #bgvid { display: none; }\n    }\n\nLe plus important ici c'est la media query elle-même, elle devra être modifiée en fonction des attentes du site et de l’espace disponible. Actuellement, elle détecte si l’affichage écran est inférieur à 800px de large, auquel cas elle remplace la vidéo par une image statique d’arrière-plan. Remarquez qu’on ne tient pas compte de Rétina\u0026nbsp;: un iPad3 sera toujours considéré comme ayant 768px alors que sa résolution est bien plus élevée.\n\n## Intégrer l'accessibilité\n\nLes utilisateurs souffrant de [troubles vestibulaires](http://fr.wikipedia.org/wiki/Syst%C3%A8me_vestibulaire) peuvent être désorientés par le mouvement, en particulier lorsqu’ils essaient de lire un texte situé sur une image mouvante. Les utilisateurs souffrant d’autisme (pas nécessairement aigu) peuvent être dérangés par un changement rapide. Pour ces utilisateurs —\u0026nbsp;et pour tous les autres\u0026nbsp;— un bouton pause devrait être clairement visible. Idéalement, la vidéo devrait également s’arrêter et disparaître lorsqu’elle a été jouée entièrement. Pour cela, ajoutons un élément `\u003cbutton\u003e` à notre page\u0026nbsp;:\n\n    \u003cbutton id=\"vidpause\"\u003ePause\u003c/button\u003e\n\nPuis ce JavaScript en bas de notre page\u0026nbsp;:\n\n    var vid = document.getElementById(\"bgvid\");\n    var pauseButton = document.getElementById(\"vidpause\");\n    function vidFade() {\n      vid.classList.add(\"stopfade\");\n    }\n    vid.addEventListener('ended', function() {\n      // only functional if \"loop\" is removed\n      vid.pause();\n      // to capture IE10\n      vidFade();\n    });\n    pauseButton.addEventListener(\"click\", function() {\n      vid.classList.toggle(\"stopfade\");\n      if (vid.paused) {\n        vid.play();\n        pauseButton.innerHTML = \"Pause\";\n      } else {\n        vid.pause();\n        pauseButton.innerHTML = \"Paused\";\n      }\n    })\n\nLe JavaScript fait appel à du CSS ajouté à votre feuille de styles (les préfixes constructeurs sont omis pour la clarté, et NDT: vous pouvez les omettre dans votre code en utilisant Autoprefixer\u0026nbsp;:\n\n    video#bgvid { transition: 1s opacity; }\n    .stopfade { opacity: .5; }\n\nBien sûr, il convient également d’ajouter du CSS pour faire disparaître votre élément bouton des terminaux mobiles, selon la solution proposée plus haut, sinon votre utilisateur ne comprendra pas pourquoi il y a un bouton sur une image.\n\n## Alternatives purement JavaScript\n\nMême si à mon avis une solution HTML/CSS est plus intéressante qu’un [framework](http://thenewcode.com/195/Frameworks), sachez qu’il existe au moins [un plugin jQuery](http://syddev.com/jquery.videoBG/) et quelques codes JavaScript solides pour parvenir au même résultat.\n\n### Conclusion\n\nUne vidéo en arrière-plan peut avoir un fort impact sur votre site, mais rappelez-vous toujours qu’un grand pouvoir vous donne de grandes responsabilités\u0026nbsp;: utilisez ces fonctionnalités judicieusement.\n\n[Regardez la démo plein écran](http://thenewcode.com/samples/polina.html).\n\n👉🏿 Un autre article intéressant sur le sujet :\n\n[Une vidéo d’arrière-plan sur toute la page en HTML et CSS](http://www.alsacreations.com/tuto/lire/1620-une-video-arriere-plan-sur-toute-la-page.html), la traduction (légèrement adaptée) de l’article de Florent Verschelde par Victor Brito sur Alsacréations.\n"},{"slug":"rendre-svg-responsif","title":"Rendre un SVG responsif","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"8 octobre 2014","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"https://thenewcode.com/744/Make-SVG-Responsive","copyright":"2014"},"dateCascade":"9 décembre 2014","dateMachine":"2O141209","tags":["svg"],"about":["Responsive"],"excerpt":"Infiniment redimensionnable, le format SVG n'en est pas moins étonnamment difficile à rendre responsif. Dudley Storey montre comment y parvenir.","featured":false,"featuredImage":"/images/authors/dudley-storey.jpg","order":30,"content":"\nPour un format d’image infiniment redimensionnable, SVG peut être étonnament difficile à rendre responsif\u0026nbsp;: les images vectorielles ne s’ajustent pas par défaut à la taille du viewport.\n\n## Une image SVG responsive\n\n**En tant qu’image**, votre SVG peut se redimensionner avec le contenu de la page, comme tous les autres\u0026nbsp;:\n\n    \u003cimg src=\"monkey.svg\" alt=\"Monkey face\" style=\"width: 100%; height: auto;\"\u003e\n\nÇa fonctionne dans la plupart des cas, mais parfois ce n’est pas suffisant, surtout si vous embarquez votre SVG via une balise `\u003cobject\u003e` ou en insérant le code directement dans la page. Dans ce cas, la simple modification de `width` et `height` ne suffit pas.\n\n## Un SVG en ligne responsif\n\nLe code SVG embarqué, une fois collé dans le `\u003cbody\u003e` d’un document HTML, ressemblera à ceci\u0026nbsp;:\n\n    \u003cbody\u003e\n    \u003csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n    width=\"500px\" height=\"500px\" viewBox=\"0 0 500 500\" enable-background=\"new 0 0 500 500\" xml:space=\"preserve\"\u003e\n    \u003ccircle fill=\"#F7941E\" stroke=\"#231F20\" stroke-width=\"10\" cx=\"250\" cy=\"250\" r=\"200\" opacity=\"0.6\" /\u003e\n    \u003c/svg\u003e\n    \u003c/body\u003e\n\nUne fois l’élément racine `\u003csvg\u003e` nettoyé, le code est beaucoup plus présentable\u0026nbsp;:\n\n    \u003csvg version=\"1.1\" viewBox=\"0 0 500 500\"\u003e\n    \u003ccircle fill=\"#F7941E\" stroke=\"#231F20\" stroke-width=\"10\" cx=\"250\" cy=\"250\" r=\"200\" opacity=\"0.6\" /\u003e\n    \u003c/svg\u003e\n\nLa suppression des attributs redondants de l’élément `\u003csvg\u003e` rend l’illustration responsive, mais il y a un coût\u0026nbsp;: cela ajoute un espace au-dessus et en-dessous de l’image vectorielle. On pourrait supposer que le coupable est l’attribut `viewport`, qui est toujours présent, mais ce n’est pas le cas, laissons-le tranquille. Il nous reste trois étapes pour intégrer l’élément SVG responsif dans notre page\u0026nbsp;:\n\nTout d’abord, entourons le code SVG avec une `\u003cdiv\u003e` et ajoutons un attribut `preserveAspectRatio`, ainsi qu’une classe à l’élément racine `svg`\u0026nbsp;:\n\n    \u003cdiv class=\"svg-container\"\u003e\n    \u003csvg version=\"1.1\" viewBox=\"0 0 500 500\" preserveAspectRatio=\"xMinYMin meet\" class=\"svg-content\"\u003e\n    \u003ccircle fill=\"#F7941E\" stroke=\"#231F20\" stroke-width=\"10\" stroke-miterlimit=\"10\" cx=\"250\" cy=\"250\" r=\"200\" opacity=\"0.6\" /\u003e\n    \u003c/svg\u003e\n    \u003c/div\u003e\n\nCela déplace l’illustration SVG en haut de son conteneur. Pour terminer la présentation, nous utilisons une variante de la vieille astuce de l’élément-[absolument-positionné](/articles/le-positionnement-css/)-dans-un-conteneur-relatif avec un padding décalé\u0026nbsp;:\n\n    .svg-container {\n    display: inline-block;\n    position: relative;\n    width: 100%;\n    padding-bottom: 100%;\n    vertical-align: middle;\n    overflow: hidden;\n    }\n\n\u003cfigure class=\"svg-container\" role=\"group\"\u003e\n\u003csvg version=\"1.1\" preserveAspectRatio=\"xMinYMin meet\" viewbox=\"0 0 800 800\" class=\"svg-content\"\u003e\n\u003cpath style=\"fill:#000000\" d=\"M 507.79551,705.24881 C 446.18368,674.46103 384.50792,593.63642 374.65925,530.77703 C 371.74236,512.15979 373.09945,507.01943 383.48615,497.34273 C 393.86016,487.67788 402.25426,485.90802 437.71886,485.90802 C 487.81111,485.90802 514.93565,495.41753 519.76855,514.67362 C 525.02633,535.62206 518.43042,541.15048 493.35174,536.81543 C 481.22872,534.71987 464.08813,532.63935 455.26154,532.19197 C 446.43489,531.74465 437.28802,528.36955 434.93516,524.69179 C 429.08565,515.54839 404.44144,516.10555 404.44144,525.38118 C 404.44144,538.37464 476.72415,601.45736 511.55767,618.8639 C 530.08128,628.12021 548.46331,635.69358 552.40669,635.69358 C 558.02719,635.69358 559.56829,620.95522 559.53842,567.48766 C 559.51755,529.9744 557.95707,482.93869 556.07066,462.96386 L 552.64089,426.64598 L 528.02387,429.89971 C 486.58288,435.3771 414.42083,448.6066 375.70328,457.82468 C 340.38565,466.2333 338.65125,466.18113 331.57005,456.497 C 320.77983,441.7405 322.47728,429.93092 338.04842,411.42567 C 348.26693,399.28167 356.44254,394.96679 369.23382,394.96679 C 379.7071,394.96679 408.63728,383.59804 442.31369,366.24848 C 472.97265,350.4534 511.89922,331.95593 528.81687,325.14296 C 554.57715,314.76907 559.5764,310.61568 559.5764,299.58854 L 559.5764,286.42132 L 507.41898,289.44632 C 478.73232,291.11007 425.58526,297.72354 389.31427,304.14292 C 318.0656,316.75278 287.32354,315.53589 265.98736,299.26114 L 253.24615,289.54245 L 282.0358,285.82591 C 327.56994,279.94777 422.21309,260.57174 432.81248,254.95782 C 444.69024,248.66682 463.23868,219.08978 463.2657,206.39746 C 463.28117,199.16319 458.72721,197.00915 443.2252,196.91837 C 423.29742,196.80166 389.71449,183.96268 370.15402,168.98279 C 360.70643,161.74758 362.71518,160.51636 396.90145,152.5884 C 417.23063,147.87397 441.68722,142.51477 451.24942,140.67908 L 468.63518,137.34144 L 468.63518,90.691019 C 468.63518,60.670828 466.26745,41.672771 461.99303,37.398463 C 456.70327,32.1086 456.97546,29.729246 463.33041,25.711513 C 476.3221,17.497961 499.69963,19.758681 522.6038,31.44353 C 547.31841,44.051946 547.64404,44.65249 552.93605,87.371432 C 556.52601,116.35161 558.2102,119.62236 570.28052,121.0545 C 595.9276,124.09747 613.16338,134.02131 616.60291,147.72528 C 620.19257,162.02715 608.57894,175.33915 591.98829,175.93986 C 565.52899,176.89787 548.13317,189.57377 535.50676,217.09642 L 522.62226,245.18121 L 612.52637,245.18121 C 697.36517,245.18121 703.45438,245.87135 720.60728,257.43065 C 733.03177,265.80352 738.78423,273.84499 738.78423,282.8407 C 738.78423,295.21652 736.55117,296.2217 701.33781,299.69688 C 641.78398,305.57419 598.7088,319.22175 612.60519,327.81015 C 615.80375,329.78699 618.42086,339.38009 618.42086,349.12817 C 618.42086,365.55389 619.92909,367.09311 639.01419,370.14494 C 661.62335,373.7603 687.96404,391.51379 687.96404,403.13687 C 687.96404,410.45408 671.60534,414.892 634.46924,417.6493 L 615.7461,419.03946 L 613.07135,554.56234 L 610.39659,690.08516 L 592.92631,705.68528 C 570.19285,725.98518 549.076,725.8769 507.79551,705.24881 z M 495.38273,384.26781 C 529.21817,378.4224 557.50352,373.62383 558.23917,373.60431 C 560.41534,373.5466 559.76181,336.12245 557.5846,336.12245 C 549.60687,336.12245 468.23027,365.52909 440.84282,378.30888 C 398.92364,397.86952 409.78299,399.056 495.38273,384.26781 z M 610.39659,293.32658 C 619.31144,289.49573 618.14371,288.66637 603.39398,288.35307 C 592.87632,288.12968 587.03422,290.14808 588.9987,293.32658 C 592.8529,299.56289 595.88392,299.56289 610.39659,293.32658 z M 117.53274,663.65941 C 111.25713,658.57595 103.4335,649.15866 100.14693,642.73212 C 91.898965,626.60407 92.653469,584.65719 101.50514,567.222 C 114.1814,542.2535 126.29045,458.86648 126.27913,396.61986 C 126.27314,363.69356 124.21089,335.48236 121.69636,333.92829 C 119.18183,332.37422 111.35821,337.28462 104.31054,344.84028 C 97.262873,352.39593 76.127534,370.84105 57.343115,385.82943 L 23.189635,413.08101 L 13.209869,400.75651 C -1.7780675,382.2472 0.18258379,351.38652 17.714975,329.84604 C 35.747216,307.69143 127.23923,207.29319 154.67511,179.5536 C 186.19369,147.68611 206.51051,112.31703 206.51051,89.314547 C 206.51051,78.295356 204.10325,67.791883 201.16103,65.973482 C 191.94964,60.280529 195.31574,52.599782 207.02209,52.599782 C 231.66933,52.599782 270.39236,89.088118 270.58538,112.49487 C 270.7688,134.73719 233.27624,194.0176 157.44078,291.39067 C 154.41879,295.27094 157.60675,303.31137 166.23111,313.56084 C 179.31986,329.11593 179.7631,332.13575 179.7631,405.75563 C 179.7631,472.80504 180.71861,481.07555 187.78732,475.20904 C 194.61117,469.54576 195.81155,470.90732 195.81155,484.31076 C 195.81155,506.33122 180.49814,607.2116 173.23801,633.01884 C 162.25329,672.06574 141.79952,683.3163 117.53274,663.65941 z \"\u003e\u003c/path\u003e\u003c/svg\u003e\u003cfigcaption\u003eIllustration SVG responsive d’une calligraphie japonaise Shodô, à l’intérieur d'un conteneur\u003c/figcaption\u003e\u003c/figure\u003e\n\nRemarquez que la `width` utilisée dans le CSS suppose que vous voulez que votre image couvre toute la largeur de la page (ou tout au moins de son conteneur parent). Le `padding-bottom` a pour valeur le ratio entre la hauteur et la largeur de l’illustration SVG. En divisant la hauteur du `viewbox` de l’élément par sa largeur, on obtient ici un ratio de 1:1 (voir plus haut\u0026nbsp;: `viewBox=\"0 0 500 500\"`), et par conséquent le padding-bottom doit être fixé à 100%. Si l’image SVG était plus large que haute, par exemple dans un ratio 1:2, le `padding-bottom` serait fixé à 50%.\n\nEnfin, on positionne le SVG à l’intérieur du conteneur avec un petit CSS\u0026nbsp;:\n\n    .svg-content {\n    display: inline-block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    }\n\nAvec cette solution, notre illustration SVG peut se redimensionner gracieusement sur la page sans déranger les autres contenus. Le même code fonctionne sur une balise `\u003cobject\u003e` utilisée pour embarquer le dessin vectoriel\u0026nbsp;:\n\n    \u003cdiv class=\"svg-container\"\u003e\n    \u003cobject type=\"image/svg+xml\" data=\"samurai.svg\" width=\"100%\" height=\"100%\" class=\"svg-content\"\u003e\n    \u003c/object\u003e\n    \u003c/div\u003e\n\nAttention\u0026nbsp;: _tout_ le contenu situé à l’intérieur de sera redimensionné, y compris le texte.\n"},{"slug":"la-premiere-variable-css-currentcolor","title":"La première variable CSS : currentColor","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"22 septembre 2014","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"https://thenewcode.com/908/The-First-CSS-Variable-currentColor","copyright":"2015"},"dateCascade":"2 décembre 2014","dateMachine":"2O141202","tags":["css","couleur"],"about":["currentColor","CSS Variables"],"excerpt":"En attendant l'arrivée des variables CSS, Dudley Storey nous rappelle l'existence de currentColor et nous en montre quelques applications","featured":false,"featuredImage":"/images/CSS-currentColor.jpeg","order":55,"content":"\nLes variables CSS se fraient lentement leur chemin vers une mise en oeuvre prochaine dans les navigateurs. Une variable existe pourtant depuis des années\u0026nbsp;: `currentColor` ! Cette fonctionnalité CSS a une bonne compatibilité navigateurs et quelques applications pratiques intéressantes. Voyons comment nous pouvons l’utiliser.\n\n## Une règle héritée\n\nUne des caractéristiques les moins connues de CSS est que si vous réglez votre `color` dans une déclaration qui comporte également une `border` et que vous omettez de spécifier la couleur de cette dernière, la bordure héritera par défaut de la couleur du texte\u0026nbsp;:\n\n    h1 { color: hsl(0,0%,44%); padding: 1rem; border-bottom: 4px solid; }\n\nLe résultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/CSS-currentColor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\nC’est une astuce sympa\u0026nbsp;: si vous changez la couleur de votre titre, celle du soulignement sera automatiquement modifiée. La même chose s’applique à `outline` et `box-shadow`.\n\nEn utilisant currentColor, nous pouvons étendre cette fonctionnalité aux éléments enfants.\n\n## Un exemple pratique de currentColor\n\nNous avons dépassé depuis longtemps l’époque des liens bleus sur les pages web. Depuis une dizaine d’années, la pratique courante est de donner aux liens la même couleur que le texte dans lequel ils se trouvent. Bien sûr, il nous faut mettre en évidence le fait qu’il s’agit d'un lien. Une de mes techniques préférées est celle-ci\u0026nbsp;:\n\n    p { color: #333; }\n    p a {\n      text-decoration: none; color: #333;\n      font-weight: bolder;\n      display: inline-block;\n      padding-bottom: .5rem;\n      border-bottom: 1px dashed #333;\n    }\n\nCertes, ça marche, mais je pense que vous avez vu le problème\u0026nbsp;: nous indiquons que les liens doivent avoir la même couleur que le reste du texte, et nous utilisons encore une fois cette couleur pour la bordure inférieure. **Nous répétons trois fois la même valeur de couleur**. Si un jour nous décidions de changer notre design, il nous faudrait laborieusement passer en revue notre feuille de styles et appliquer les modifications une à une (👉🏿 _NdT : sauf si vous utilisiez Sass bien sûr, puisque vous auriez déjà utilisé des variables_).\n\nProcédons plutôt de la sorte\u0026nbsp;: nous allons définir la couleur du texte et laisser les autres propriétés à l’intérieur du lien hériter de la couleur via `currentColor` (👉🏿 _NdT : CSS n'est pas sensible à l'utilisation de majuscules, on peut écrire_ `currentcolor` _comme ci-dessous_).\n\n    p { color: #333; }\n    p a {\n      text-decoration: none;\n      color: currentcolor;\n      font-weight: bolder;\n      display: inline-block;\n      padding-bottom: .5rem;\n      border-bottom: 1px dashed currentcolor;\n    }\n\nIl y a certes d’autres façons de parvenir au même résultat, en particulier en utilisant `inherit`, mais un exemple comme celui-ci par contre est impossible sans `currentColor`\u0026nbsp;:\n\n    body { color: #f0f; }\n    hr { height: 10px; background: currentcolor; }\n\nOn peut utiliser `currentColor` de tas de façons inattendues, par exemple avec [les dégradés](/articles/les-degrades-css/) et les SVG. Ainsi, pour avoir des sprites SVG en ligne qui s’affichent plutôt comme des icônes fontes, on pourrait utiliser\u0026nbsp;:\n\n    svg { fill: currentcolor; }\n\nDe cette manière, chaque icône SVG prendra la `color` de son élément parent.\n\nCe qui serait _vraiment_ génial ce serait de pouvoir faire quelque chose comme `color: (currentColor) 10% lighter` mais ce genre de manipulation n'est pas possible dans le standard CSS, elles relèvent encore du domaine des préprocesseur, en tout cas jusqu'à présent.\n\n### Compatibilité\n\nLa compatibilité est excellente. Tous les navigateurs modernes et leurs équivalents mobiles, y compris IE9+, supportent le mot-clé.\n\n### Conclusion\n\nL'utilisation de `currentColor` dans vos feuilles de styles est une bonne façon de renforcer les [bonnes pratiques DRY](http://fr.wikipedia.org/wiki/Ne_vous_r%C3%A9p%C3%A9tez_pas), la cohérence de votre design, et éventuellement de vous préparer à migrer vers les préprocesseurs. Dans le web à venir, les variables joueront un plus grand rôle dans le développement et le design front-end.\n\n👉🏿 \\_NdT : Une autre utilisation possible de currentColor, que je viens de découvrir grâce à la [série de vidéos de Chris Coyier sur SVG](http://css-tricks.com/lodge/), concerne la résolution de certains problèmes spécifiques d'application de style CSS sur les SVG.\n"},{"slug":"empty-une-pseudo-classe-pas-si-vide","title":":empty, une pseudo-classe pas si vide","author":{"name":"Dudley Storey","lastname":"Storey"},"original":{"date":"8 novembre 2014","site":"the new code","siteUrl":"http://thenewcode.com/","postUrl":"http://thenewcode.com/692/Vanishing-Acts-The-CSS-empty-Selector","copyright":"2014"},"dateCascade":"29 novembre 2014","dateMachine":"2O141129","tags":["css","pseudo-classes"],"about":[":empty"],"excerpt":"Dudley Storey montre ici comment utiliser la pseudo-classe :empty, depuis l'application d'un style CSS aux tableaux et aux navigations dynamiques, jusqu'au nettoyage de votre balisage HTML.","featured":false,"featuredImage":"/images/The_CSS__empty_Selector.jpeg","order":null,"content":"\nLorsque nous écrivons notre CSS, nous sommes des [Zatoïchi](http://fr.wikipedia.org/wiki/Zatoichi) du développement web. Nous écrivons de belles déclarations et nous les envoyons vers des documents HTML dans l’espoir qu’ils se rencontrent, mais nous connaissons rarement le _contenu spécifique_ d’un élément sélectionné\u0026nbsp;: la question de savoir combien de mots figurent dans un paragraphe, ou si le paragraphe est vide, relève traditionnellement de la responsabilité de JavaScript ou PHP ou d’autres langages.\n\nSouvent on emploie des langages côté-serveur pour créer du contenu dynamique à l’intérieur d'un conteneur HTML. Lorsque l’opération échoue, c’est aux développeurs front-end qu’il revient de traiter le problème. Plutôt que d’ajouter du code avec JavaScript ou PHP, nous pouvons utiliser CSS pour nos conteneurs vides.\n\n## Le mystère de la cellule vide résolu\n\nLes tableaux sont souvent remplis avec des données dynamiques, mais certaines cellules peuvent ne pas contenir d’information. Habituellement, on laisse ces cellules telles quelles, mais on pourrait tout aussi bien mettre en valeur le fait qu’elles ne contiennent rien.\n\nVoici un bon exemple d’un tel cas, un tableau montrant les distances entre villes. Il n’y a évidemment pas de distance entre une ville et elle-même, ce qui produit un certain nombre de cellules vides.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/The_CSS__empty_Selector.jpeg\" alt=\"Un tableau dans lequel les distances entre une ville et elle-même sont vides\"/\u003e\u003cfigcaption\u003eTableau de distances entre villes.\u003c/figcaption\u003e\u003c/figure\u003e\n\nLe balisage de la table serait à peu près celui-ci (j’utilise des raccourcis HTML pour aller plus vite)\u0026nbsp;:\n\n    \u003ctable\u003e\n    \u003ccaption\u003eDistances Between Cities On The Pacific Rim (miles)\u003c/caption\u003e\n    \u003ccol\u003e\u003ccol\u003e\u003ccol\u003e\u003ccol\u003e\n    \u003ctr\u003e\u003cth\u003e\u003cth scope=col\u003eAuckland\u003cth scope=col\u003ePapeete\u003cth scope=col\u003eLos Angeles\n    \u003ctr\u003e\u003cth scope=row\u003eAuckland\u003ctd\u003e\u003ctd\u003e2542\u003ctd\u003e6518\n    \u003ctr\u003e\u003cth scope=row\u003ePapeete\u003ctd\u003e2542\u003ctd\u003e\u003ctd\u003e4114\n    \u003ctr\u003e\u003cth scope=row\u003eLos Angeles\u003ctd\u003e6518\u003ctd\u003e4114\u003ctd\u003e\u003c/table\u003e\n\nC’est un excellent cas d’utilisation de `:empty` puisque les cellules vides _doivent être_ incluses dans le tableau si l’on veut conserver son sens. Avec `:empty` il est très facile de cibler les cellules qui n’ont pas de contenu\u0026nbsp;:\n\n    td:empty { background: #777; }\n\nVous avez remarqué la structure du code à la toute fin du tableau, avec la balise fermante `\u003c/table\u003e` juste après le dernier élément `\u003ctd\u003e` vide. Si ce n’était _pas_ le cas, la balise `\u003ctd\u003e` isolée serait considérée comme étant \u0026ldquo;ouverte\u0026rdquo; et non pas vide. Une approche alternative serait d’utiliser `\u003ctd\u003e\u003c/td\u003e` sans espace entre les deux.\n\nMême si c’est un peu étrange, on peut combiner les sélecteurs :empty et `:not()` pour donner un style aux cellules non-vides.\n\n    td:not(:empty) { /* styles pour les cellules non vides */ }\n\nCe serait une approche inhabituelle, puisque notre présupposé est que la majorité des cellules ont du contenu et peuvent être ciblées à l’aide d’un simple sélecteur `\u003ctd\u003e`, mais c’est une approche valide en CSS.\n\n## Réhabiliter le lien manquant\n\nSur un site, la navigation est souvent générée de façon dynamique, mais parfois incomplète. Il est possible qu’un espace soit réservé pour un lien qui n’apparaît jamais, ou seulement de manière sporadique. Même si cela implique généralement un travail supplémentaire côté serveur, dans l’intervalle il y a une solution CSS simple pour éviter que votre navigation ne ressemble à un sourire aux dents écartées\u0026nbsp;:\n\n    nav[role=\"navigation\"] a:empty { display: none; pointer-events: none; }\n\nUn lien comportant un attribut `href` mais sans contenu ne sera pas rendu par le navigateur. Donc si nous prenons ce HTML\u0026nbsp;:\n\n    \u003cnav role=\"navigation\"\u003e\n        \u003ca href=\"index.html\"\u003eHome\u003c/a\u003e\n        \u003ca href=\"contact.html\"\u003eContact\u003c/a\u003e\n        \u003ca href=\"tools.html\"\u003eTools\u003c/a\u003e\n        \u003ca href=\"classes.html\"\u003e\u003c/a\u003e\n    \u003c/nav\u003e\n\n...et que nous ajoutons le CSS qui précède, le résultat sera que le dernier lien, qui est vide, n’apparaîtra pas (dans ce cas d'ailleurs, le `pointer-events` est redondant puisque le lien n'apparaîtra pas, et ne peut donc pas être cliqué).\n\n## Exceptions\n\nAttention : l’espace entre les balises ouvrante et fermante est considéré comme une information, de même que des balises (même sans contenu) à l’intérieur de l’élément ciblé, par conséquent les deux éléments suivants ne sont pas considérés comme vides\u0026nbsp;:\n\n    \u003ca href=\"classes.html\"\u003e  \u003c/a\u003e\n\n    \u003ca href=\"classes.html\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/a\u003e\n\nComme déjà évoqué, les balises qui ne sont pas refermées (même si leur fermeture est optionnelle en HTML) ne sont pas considérées comme vides, même si elles n’ont pas de contenu. Une balise paragraphe isolée est \u0026ldquo;ouverte\u0026rdquo; et donc n’est pas vide\u0026nbsp;:\n\n    \u003cp\u003e\n\nalors même qu’on aurait certainement (s’il n’y a pas de retour à la ligne)\u0026nbsp;:\n\n    \u003cp\u003e\u003cp\u003e\n\nDans ce dernier cas, le premier paragraphe est vide, mais le second (en supposant que rien ne s’ajoute immédiatement après) ne l’est pas.\n\nLes éléments \u0026ldquo;auto-fermants\u0026rdquo; sont considérés comme vides\u0026nbsp;: `\u003cbr\u003e`, `\u003chr\u003e`, `\u003cimg\u003e`, etc. répondent à `:empty`.\n\nLes éléments sont considérés comme vides si leur seul contenu est un commentaire\u0026nbsp;:\n\n    \u003cp\u003e\u003c!-- ce paragraphe est vide --\u003e\u003c/p\u003e\n\n## Utiliser :empty comme testeur de qualité du code\n\nInévitablement, les développeurs se laissent aller à la paresse. \u0026ldquo;Hé, j’ai besoin d’un peu d’espace en-dessous de cet élément. OK, je sais, je vais ajouter un paragraphe vide\u0026rdquo;.\n\n    \u003cp\u003eun contenu réel…\u003c/p\u003e\n    \u003cp\u003e\u003c/p\u003e\n\nOu pire encore, une balise `\u003cbr\u003e`. Ce balisage vide, de remplissage, va à l’encontre des bonnes règles d’écriture de CSS et il est difficile à retrouver. Nous pouvons utiliser `:empty` pour obtenir une visualisation rapide du balisage faible\u0026nbsp;:\n\n    *:empty, br { border: 2px solid red; }\n\n### Compatibilité navigateurs et conclusion\n\nLa compatibilité de `:empty` est excellente, tous les navigateurs modernes, IE9+ y compris, le reconnaissent.\n\nIl existe bien d'autres usages de `:empty`, vous en verrez un le mois prochain, dans le redesign de ce blog.\n"},{"slug":"la-pseudo-classe-de-negation","title":"La pseudo-classe de négation","author":{"name":"Shay Howe","lastname":"Howe"},"original":{"date":"06 novembre 2014","site":"Belly","siteUrl":"https://tech.bellycard.com","postUrl":"https://tech.bellycard.com/blog/the-negation-pseudo-class/","copyright":"2011"},"dateCascade":"07 novembre 2014","dateMachine":"2O141107","tags":["css","pseudo-classes"],"about":[":not"],"excerpt":"Parmi les pseudo-classes, il en est une qu'on oublie souvent, c'est :not(). La pseudo-classe de négation peut pourtant s'avérer très utile dans bien des situations, comme l'explique ici Shay Howe.","featured":false,"featuredImage":"/images/authors/shay-howe.jpeg","order":null,"content":"\nIl y a quelques semaines, j'ai [tweeté](https://twitter.com/shayhowe/status/502525269992046594) un petit bout de CSS que j\u0026rsquo;utilise fréquemment et j\u0026rsquo;ai été surpris du retour qu\u0026rsquo;il a eu \u0026mdash;\u0026nbsp;ce qui m\u0026rsquo;a donné envie de le partager ici aussi. Quel était ce CSS\u0026nbsp;? Le sélecteur suivant, tout simple\u0026nbsp;:\n\n    li:not(:last-child)\n\nSouvent, lorsqu\u0026rsquo;on travaille sur des listes on souhaite appliquer un style spécifique à tous les éléments `li` de la liste sauf un, en général le premier ou le dernier. Autrefois j\u0026rsquo;utilisais le CSS suivant\u0026nbsp;:\n\n    li {\n      border-bottom: 1px solid #ccc;\n    }\n    li:last-child {\n      border: none;\n    }\n\nLe problème avec cette méthode c\u0026rsquo;est que nous définissons des styles pour finalement les écraser avec un sélecteur de spécificité supérieure \u0026mdash;\u0026nbsp;dans notre cas en ajoutant la pseudo\u0026ndash;classe `:last-child`. Ce faisant, nous donnons du travail supplémentaire à notre navigateur et nous ralentissons le rendu de ces styles.\n\nPlutôt que de se donner du travail inutile et d\u0026rsquo;écraser nos styles, nous pouvons utiliser la [pseudo\u0026ndash;classe de négation](https://developer.mozilla.org/fr/docs/Web/CSS/:not) `:not()` en association avec une autre pseudo-classe structurelle ou basée sur la position, le plus fréquemment ce sera `:first-child` ou `:last-child` pour cibler plus précisément l\u0026rsquo;application de nos styles. Notre CSS plus performant ressemblerait à ceci\u0026nbsp;:\n\n    li:not(:last-child) {\n      border-bottom: 1px solid #ccc;\n    }\n\nVoici le code en action sur CodePen\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_gKGsn\" src=\"//codepen.io/shayhowe/embed/gKGsn?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=gKGsn\u0026amp;user=shayhowe\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/shayhowe/pen/gKGsn/\"\u003e\n  La pseudo-classe de négation\u003c/a\u003e par Shay Howe \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIci, nous n\u0026rsquo;écrasons pas de styles précédents puisque nous n\u0026rsquo;appliquons de styles qu\u0026rsquo;aux éléments voulus. De plus, la compatibilité navigateurs est la même puisque `:not()`, `:first-child` et `:last-child` ont la même compatibilité.\n\nSi vous utilisez une classe `.dernier` ou des pseudo\u0026ndash;classes structurelles ou de position, je vous recommande de passer à la pseudo\u0026ndash;classe de négation `:not()`. Je l\u0026rsquo;utilise depuis un certain temps maintenant et je me rends compte qu\u0026rsquo;elle m\u0026rsquo;a servi dans des situations compliquées et m\u0026rsquo;a aidé à écrire un CSS plus performant.\n\nSi vous avez des commentaires ou des questions, n\u0026rsquo;hésitez pas à me contacter par [Twitter](https://twitter.com/intent/tweet?text=The%20Negation%20Pseudo-class%20%E2%80%93%20http%3A%2F%2Fbit.ly%2F1x6SGFj%20%E2%80%93%20by%20%40shayhowe%20of%20%40bellycardtech\u0026source=webclient), je serais ravi de connaître votre façon d\u0026rsquo;utiliser la pseudo\u0026ndash;classe de négation.\n"},{"slug":"portal-css","title":"Portal CSS","author":{"name":"Donovan Hutchinson","lastname":"Hutchinson"},"original":{"date":"2 juin 2013","site":"CSS Animation","siteUrl":"https://cssanimation.rocks/","postUrl":"https://cssanimation.rocks/portal/","copyright":"2014"},"dateCascade":"1er novembre 2014","dateMachine":"2O141101","tags":["css","html","animation"],"about":[],"excerpt":"Ce projet de Donovan Hutchinson est une excellente introduction aux transformations et animations CSS, ludique et claire.","featured":false,"featuredImage":"/images/portal1.jpeg","order":null,"content":"\nVous n'avez pas nécessairement besoin de JavaScript pour créer des projets 3D impressionnants dans le navigateur web. Dans cet article, je vais vous montrer comment créer et animer une scène inspirée de [Portal](\u003chttp://fr.wikipedia.org/wiki/Portal_(jeu_vid%C3%A9o)\u003e), uniquement à l'aide de CSS.\n\nVous pouvez regarder la [démo Portal CSS](http://hop.ie/portal/) en ligne et télécharger le [projet sur Github](https://github.com/donovanh/portal).\n\n## Vidéo d'explication Portal\n\nPour vous montrer les étapes de création, stylisation et animation d'une scène 3D, j'ai choisi de recréer une scène de la vidéo d'entraînement de Portal. En particulier, le look stylisé, façon bande dessinée, de la première partie de la vidéo dans laquelle une silhouette passe à travers un portail et réapparaît de l'autre côté. Voici la vidéo originale\u0026nbsp;:\n\n\u003ciframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/V5paXrfkYmI?rel=0\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\n\nCette vidéo m'a époustouflé lorsqu'elle est sortie. [Portal](\u003chttp://en.wikipedia.org/wiki/Portal_(video_game)\u003e) (développé à partir de [Narbacular Drop](http://fr.wikipedia.org/wiki/Narbacular_Drop)) a introduit un peu de _fun_ dans les plateformes 3D.\n\nLes graphiques isométriques de la vidéo d'introduction sont très différents du jeu, mais ils arrivent à reproduire son style. Dans cet article, je vais essayer de reproduire ce style bande dessinée en utilisant seulement HTML et CSS.\n\nVoici en particulier le décor que nous allons créer\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/portal1.jpeg\" width=\"720\" height=\"414\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Un mot rapide sur les préfixes\n\nJ'ai supprimé toutes les versions préfixées des règles CSS dans le code qui suit. Je vous recommande d'utiliser quelque chose comme [prefix free](http://leaverou.github.io/prefixfree/)\u003c/span\u003e ou [Sass](http://sass-lang.com/) pour les gérer à votre place. Vous pourrez trouver les versions préfixées de CSS et Sass sur [Github](https://github.com/donovanh/portal).\n\nLe projet qui suit a été développé et testé sur Chrome. Il utilise un CSS qui ne fonctionnera pas comme il faut avec Internet Explorer. Il couvre quelques techniques intéressantes de CSS 3D qui, même si elles ne sont pas toujours d'usage courant peuvent s'avérer intéressantes dans certains projets front-end.\n\n## On commence\n\nNous allons d'abord planter le décor dans lequel construire notre création 3D. Pour cela, nous avons besoin d'un élément HTML auquel nous allons donner des propriétés indiquant au navigateur qu'il doit s'attendre à trouver du contenu 3D. Commençons avec un HTML simple\u0026nbsp;:\n\n    //HTML\n    \u003carticle class=\"container\"\u003e...\u003c/article\u003e\n\nNotre conteneur est une balise `\u003carticle\u003e`. En HTML5,\u003e _article_ représente un contenu autonome qui pourrait être reproduit ailleurs tout en gardant du sens.\n\nLa première propriété à appliquer est [perspective](https://docs.webplatform.org/wiki/css/properties/perspective). Cette propriété prend une valeur en pixels et représente la profondeur de la scène 3D. Plus la valeur est petite, moins l'effet est dramatique, et il est habituel de la fixer quelque part entre 800 et 1.200px.\n\n\u003cfigure\u003e\n    \n![image](/images/portal2.gif)\n\u003c/figure\u003e\n\nPour donner l'impression que ce décor est une grande pièce, nous allons donner une valeur élevée à cette perspective, à 2.600px. Comme déjà indiqué, nous ne tenons pas compte des préfixes vendeurs et nous écrivons simplement\u0026nbsp;:\n\n    //CSS\n    article.container {\n        perspective: 2600px;\n    }\n\n### Point de fuite\n\nLe conteneur a une profondeur, l'étape suivante consiste à déterminer un angle de vue. En ajustant la propriété [perspective-origin](https://docs.webplatform.org/wiki/css/properties/perspective-origin), nous pouvons établir [le point de fuite](http://fr.wikipedia.org/wiki/Point_de_fuite) et déterminer si nous regardons du dessus ou de côté.\n\n    //CSS\n    .container {\n      perspective-origin: 50% -1400px;\n    }\n\nLa propriété `perspective-origin` prend deux valeurs, correspondant au décalage horizontal et vertical. Dans notre cas, nous le plaçons à mi-chemin en travers du décor et 1.400px au-dessus. Il en résultera un point de vue placé au-dessus de l'objet, regardant vers le bas.\n\nJ'ai déterminé ces valeurs en les ajustant manuellement dans le panneau Chrome web inspector et en jugeant à l'oeil. Lorsque vous créerez votre scène, vos valeurs seront peut-être plus ou moins élevées, cela dépendra de l'effet que vous voulez faire passer. N'oubliez pas que ces valeurs peuvent être animées et on peut créer des effets intéressants de déplacement de perspective.\n\n### Pas de vecteurs, Victor\n\nLes objets que nous positionnons en HTML sont des éléments HTML normaux. Ils ont une largeur, une hauteur, et ils sont rectangulaires. Lorsque vous construisez un objet en 3D, vous mettez chaque rectangle en place. D'autres méthodes, différentes, décrivent des points et des lignes pour créer des formes, mais ce n'est pas le cas ici. Cela signifie aussi qu'il n'y a pas beaucoup de formes simples à partir desquelles dessiner.\n\nLes éléments HTML sont placés dans le décor 3D grâce à la propriété `transform`.\n\n### Transformer\n\nLa propriété `transform` consiste en une série d'ajustements de l'élément HTML. Ces ajustements peuvent prendre la forme de `translate` pour déplacer l'élément, `rotate` pour ajuster son angle, `skew` et même `scale`. On peut accumuler ces ajustements pour créer des transformations complexes, par exemple\u0026nbsp;:\n\n    //CSS\n    .example {\n        transform: rotateY(45deg) translateZ(-100px);\n    }\n\nCette règle fait tourner un élément de 45 degrés sur l'axe des Y, puis le déplace en arrière (en profondeur) de 100px sur l'axe des Z. L'effet donnerait ceci\u0026nbsp;:\n\n\u003cfigure\u003e\n    \n![image](/images/portal3.png)\n\u003c/figure\u003e\n\n### La propriété transform-origin\n\nLorsqu'on fait tourner les éléments, il faut garder à l'esprit que les transformations ont une origine que nous pouvons fixer. [Transform-origin](https://docs.webplatform.org/wiki/css/properties/transform-origin) est un point auquel se réfèrent les valeurs X, Y et Z. Voici sa valeur par défaut\u0026nbsp;:\n\n    //CSS\n    .default-origin {\n        transform-origin: 50% 50% 0;\n    }\n\nEn réalisant cet exemple, j'ai conservé les valeurs par défaut, mais il est intéressant de savoir qu'elles sont là et qu'on peut les modifier.\n\n## Construisons\n\nNotre décor est planté, nous pouvons maintenant assembler notre chef-d'oeuvre en 3D. Quand on commence à construire des objets en 3D à l'aide de HTML et CSS, il est utile de prendre un petit moment pour bien comprendre comment cette approche diffère de celle des logiciels de 3D.\n\n    //HTML\n    \u003csection class=\"stage\"\u003e\n        \u003cdiv class=\"shadow\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"back-left\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"back-right\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"platform-left\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/div\u003e\n        \u003cdiv class=\"platform-right\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/div\u003e\n        \u003cdiv class=\"pit-left\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"pit-right\"\u003e\u003c/div\u003e\n        \u003cdiv class=\"pit-back\"\u003e\u003c/div\u003e\n    \u003c/section\u003e\n\nC-dessus, nous avons une section _stage_, qui contiendra tous nos éléments. Un ensemble de div forme la partie principale de la structure. Ce sont les deux plateformes, un puits, des murs, et une ombre.\n\nLorsque j'ai commencé à construire ce décor, j'ai essayé de placer les murs directement sur la scène, en la tournant et en ajustant sa position. Cependant, comme le décor est vu depuis un angle isométrique, une approche plus simple était de placer les parties du décor puis de faire tourner le tout de 45 degrés en une seule fois.\n\nGardons ceci à l'esprit et plaçons nos éléments HTML à partir du schéma suivant\u0026nbsp;:\n\n\u003cfigure\u003e\n    \n![image](/images/portal4.png)\n\u003c/figure\u003e\n\nComme on peut le voir, le fond gauche est aligné sur la gauche, mais le fond droit fait face à l'observateur. Pour ajuster ceci, nous ferons tourner le tout de 45 degrés tout à l'heure.\n\nAvant d'appliquer les transformations, nous devons donner à nos div quelques propriétés partagées\u0026nbsp;:\n\n    //CSS\n    .stage div {\n        position: absolute;\n        transform-style: preserve-3d;\n    }\n\nChaque div sera positionnée absolument et la propriété `transform-style` indique au navigateur que des transformations 3D doivent être appliquées en fonction de la perspective que nous avons fixée plus tôt.\n\nNous pouvons maintenant commencer à positionner les div\u0026nbsp;:\n\n    //CSS\n    .stage .back-left {\n        width: 500px;\n        height: 120px;\n        background-color: #6b522b;\n        transform: rotateY(90deg) translateX(-256px);\n        border-top: 6px solid #8a683d;\n        border-left: 6px solid #574625;\n    }\n\nLes règles ci-dessus donnent une largeur de 500px, qui est la longueur du côté gauche de notre décor 3D, une hauteur de 120px et une couleur de background marron clair. La div est ensuite pivotée de 90 degrés et repoussée le long de l'axe des X. La div a une bordure de 6 px pour donner l'illusion de la profondeur.\n\nUne transformation similaire est appliquée au fond droit\u0026nbsp;:\n\n    //CSS\n    .stage .back-right {\n        width: 446px;\n        height: 120px;\n        background-color: #9c7442;\n        transform: translateX(253px) translateZ(3px);\n        border-top: 6px solid #b5854a;\n        border-right: 6px solid #78552c;\n    }\n\nLa div est un peu plus petite, car la pièce originale dans la vidéo de Portal n'est pas tout à fait carrée.\n\nEnsuite, ajoutons les plateformes et les côtés du puits\u0026nbsp;:\n\n    //CSS\n    .stage .platform-left {\n        width: 446px;\n        height: 220px;\n        background-color: #bcb3a8;\n        transform: rotateX(90deg) translateY(396px) translateX(253px) translateZ(-13px);\n        border-bottom: 6px solid #857964;\n    }\n    .stage .platform-right {\n        width: 446px;\n        height: 164px;\n        background-color: #bcb3a8;\n        transform: rotateX(90deg) translateY(88px) translateX(253px) translateZ(-41px);\n        border-right: 6px solid #554c3d;\n        border-bottom: 6px solid #847660;\n    }\n    .stage .pit-left {\n        width: 447px;\n        height: 800px;\n        background-color: #4d4233;\n        transform: translate3D(254px, 125px, 285px);\n    }\n    .stage .pit-right {\n        width: 451px;\n        height: 800px;\n        top: -1400px;\n        background-color: #847660;\n        transform: translate3D(254px, 125px, 173px);\n    }\n    .stage .pit-back {\n        width: 170px;\n        height: 220px;\n        background-color: #6b522b;\n        transform: rotateY(90deg) translate3D(-200px, 87px, 168px);\n    }\n\nLe résultat final est un décor qui devrait ressembler à ceci\u0026nbsp;:\n\n\u003cfigure\u003e\n    \n![image](/images/portal5.png)\n\u003c/figure\u003e\n\nCe n'est pas encore ça. Nous devons faire pivoter tout ce décor pour le voir comme il faut. Ajoutons un `transform` à la section\u0026nbsp;:\n\n    //CSS\n    .stage {\n        width: 460px;\n        margin: 0 auto;\n        transform-style: preserve-3d;\n        transform: rotateY(-45deg);\n    }\n\nLe résultat devrait maintenant être celui-ci\u0026nbsp;:\n\n\u003cfigure\u003e\n    \n![image](/images/portal6.png)\n\u003c/figure\u003e\n\nVos pouvez remarquer que les bordures créent un joli effet de profondeur, en particulier sur les coins, là où les différentes bordures colorées se rencontrent en formant un angle de 45 degrés. Comme ce décor doit être vu à 45 degrés, cet effet marche très bien dans la plupart des cas. Certains coins ne sont pas aussi réussis, mais si l'on considère la simplicité du procédé et l'absence d'images, je trouve que c'est un compromis acceptable.\n\n### Dans l'ombre\n\nDans la vidéo, il y a une belle ombre sous les plateformes. Nous pouvons reproduire cet effet avec la propriété CSS `box-shadow`.\n\n    //CSS\n    .stage .shadow {\n        width: 550px;\n        height: 550px;\n        background-color: transparent;\n        transform: rotateX(90deg) translateZ(-166px) translateX(550px);\n        box-shadow: -600px 0 50px #afa79f;\n    }\n\nLes règles ci-dessus ajoutent une `box-shadow` à la div _shadow_, qui est elle-même transparente. La `box-shadow` est décalée de 600px de façon à ce que la div shadow n'empiète pas sur l'ombre. Le tout est pivoté et positionné en dehors du décor, afin que seule une partie de l'ombre soit visible. Le résultat devrait ressembler à ceci\u0026nbsp;:\n\n\u003cfigure\u003e\n    \n![image](/images/portal7-1.png)\n\u003c/figure\u003e\n\n## Rouge et Bleu\n\nEnsuite, il nous faut ajouter un peu de décoration et les portails étincelants.\n\n\u003cfigure\u003e\n    \n![image](/images/portal8.png)\n\u003c/figure\u003e\n\nLe HTML dont nous avons besoin est assez simple\u0026nbsp;:\n\n    //HTML\n    \u003cdiv class=\"portal red\"\u003e\u003c/div\u003e\n    \u003cdiv class=\"portal blue\"\u003e\u003c/div\u003e\n\nIl y a une div pour chaque portail, une rouge et une bleue. Elles ont toutes les deux un style similaire, avec des dégradés utilisés pour donner l'effet brillant. Comme il s'agit d'un élément HTML simple, le CSS comprend un pseudo-élément auquel nous pouvons appliquer un style pour obtenir l'effet désiré.\n\nLa première étape est de donner sa forme générale au portail\u0026nbsp;:\n\n    //CSS\n    .stage .portal {\n        width: 48px;\n        height: 72px;\n        background-color: black;\n        border-radius: 44px/62px;\n        box-shadow: 0 0 15px 4px white;\n    }\n\nOn crée ainsi le portail, en utilisant la propriété `border-radius` pour obtenir une forme ovale, et une `box-shadow` blanche pour la brillance. Un pseudo-élément est ensuite ajouté, avec les mêmes dimensions, et la bordure blanche\u0026nbsp;:\n\n    //CSS\n    .stage .portal:before {\n        content: \"\";\n        display: block;\n        width: 48px;\n        height: 72px;\n        border: 4px solid white;\n        border-radius: 44px/62px;\n        margin-top: -4px;\n        margin-left: -4px\n    }\n\nJusqu'à présent les mêmes styles s'appliquent aux deux portails. Mais puisque l'un est rouge et l'autre bleu, nous allons utiliser des ensembles de règles CSS séparés pour décrire les caractéristiques propres à chacun. D'abord le portail rouge, puis le bleu\u0026nbsp;:\n\n    //CSS\n    .stage .portal.red {\n        background: radial-gradient(#000000, #000000 50%, #ff4640 70%);\n        border: 7px solid #ff4640;\n        transform: translate3D(223px, 25px, 385px) rotateY(90deg) skewX(5deg);\n    }\n    .stage .portal.blue {\n      background: radial-gradient(#000000, #000000 50%, #258aff 70%);\n      border: 7px solid #258aff;\n      transform: translate3D(586px, 25px, 4px) skewX(-5deg);   }\n\nOn donne au portail rouge un background [dégradé radial](/les-degrades-css/#radial) et une bordure rouge. Dans ce cas, le `transform` le fait pivoter et le place sur le mur gauche. Même chose pour le portail bleu, mais avec un dégradé bleu et un positionnement sur le mur de droite. Dans mon test, ils étaient tous les deux un peu de travers, alors j'ai ajouté un effet de déformation (_skew_) qui leur donne meilleure allure.\n\n### Un portail étincelant\n\nLe HTML que nous avons créé initialement comprenait une balise `span` sur chaque plateforme. Ces spans ont été ajoutés de façon à être stylisés avec un dégradé radial pour donner un effet de luminosité éclatante sous chacun des portails.\n\n    //CSS\n    .stage .platform-left span {\n        display: block;\n        position: absolute;\n        width: 120px;\n        height: 200px;\n        left: 0;\n        background: radial-gradient(left, #f3cac8, #c8b8ad 70px, #bcb3a8 90px);\n    }\n    .stage .platform-right span {\n        display: block;\n        position: absolute;\n        width: 150px;\n        height: 60px;\n        left: 280px;\n        background: radial-gradient(top, #cdebe8, #c2cbc1 40px, #bcb3a8 60px);\n    }\n\nLes deux spans sont positionnés absolument et on leur donne un dégradé rouge et bleu, positionné sous chacun des portails. On aurait pu utiliser un pseudo-élément pour obtenir cet effet, mais comme l'animation des pseudo-élements n'est pas très bien supportée (même dans des versions de Webkit), un span séparé les remplace.\n\n### La porte\n\nUn succès inattendu a été l'utilisation des bordures pour créer ce qui ressemble à une ouverture dans le mur de droite, représentant la sortie. Pour créer cette porte, j'ai utilisé une simple div et quelques bordures colorées qui donnent l'illusion de la profondeur.\n\n\u003cfigure\u003e\n    \n![image](/images/portal9.png)\n\u003c/figure\u003e\n\nLe HTML de la porte est très simple. Ajoutez le code suivant à l'intérieur de la section _stage_.\n\n    //HTML\n    \u003cdiv class=\"door\"\u003e\u003c/div\u003e\n\nPour donner un style à la porte, il nous faut quelques bordures et un `transform` qui la positionne dans le mur de droite\u0026nbsp;:\n\n    //CSS\n    .stage .door {\n        width: 65px;\n        height: 85px;\n        background: #efe8dd;\n        border-bottom: 6px solid #bcb3a8;\n        border-left: 7px solid #78552e;\n        transform: translate3D(450px, 34px, 4px);\n    }\n\nDeux bordures sont utilisées pour créer cet effet. Les bordures _bottom_ et _left_ correspondent à la plateforme et à un côté du mur. Comme il n'y a pas de bordure spécifiée pour le haut de la porte, la bordure de gauche est coupée par le haut de la div, ce qui fonctionne bien.\n\n## Les personnages\n\nLes portails et la porte sont en place, il nous faut maintenant un personnage pour sauter dans l'un et réapparaître par l'autre. La première étape consiste à créer la persone.\n\nDans mes premiers tests, j'ai essayé d'utiliser un personnage et d'arrêter l'animation au premier portail puis de continuer immédiatement de l'autre côté. Mais quand j'animais un seul personnage, il y avait un scintillement pendant son transfert de l'autre côté. Pour éviter ce problème, j'utilise deux personnages et je les anime séparément.\n\n### Construire le personnage\n\n\u003cfigure\u003e\n    \n![image](/images/portal10.png)\n\u003c/figure\u003e\n\nLa forme du premier personnage est constituée de deux parties principales, la tête et le corps. Les jambes sont ajoutées en utilisant des pseudo éléments sur le corps. Une structure similaire est aussi intégrée pour créer l'ombre\u0026nbsp;:\n\n    //HTML\n    \u003cdiv class=\"dude one\"\u003e\n      \u003cfigure class=\"head\"\u003e\u003c/figure\u003e\n      \u003cfigure class=\"body\"\u003e\u003c/figure\u003e\n      \u003cdiv class=\"dude-shadow one\"\u003e\n        \u003cfigure class=\"head\"\u003e\u003c/figure\u003e\n        \u003cfigure class=\"body\"\u003e\u003c/figure\u003e\n      \u003c/div\u003e\n    \u003c/div\u003e\n\nComme l'ombre (_dude-shadow_) est incluse dans la div contenant le personnage, elle peut être animée simultanément. Voici le CSS\u0026nbsp;:\n\n    //CSS\n    .dude, .dude-shadow {\n        width: 30px;\n        height: 100px;\n    }\n    .dude figure, .dude-shadow figure {\n      display: block;\n      background-color: black;\n      position: absolute;\n    }\n    .dude figure.head, .dude-shadow figure.head {\n        top: 0;\n        left: 3px;\n        width: 20px;\n        height: 20px;\n        border-radius: 22px;\n    }\n    .dude figure.body, .dude-shadow figure.body {\n        top: 21px;\n        width: 26px;\n        height: 30px;\n        border-radius: 30px 30px 0 0;\n    }\n    .dude figure.body:before, .dude figure.body:after, .dude-shadow figure.body:before, .dude-shadow figure.body:after {\n      content: \"\";\n      position: absolute;\n      width: 9px;\n      height: 15px;\n      background-color: black;\n      top: 30px;\n    }\n    .dude figure.body:before, .dude-shadow figure.body:before {\n      left: 3px;\n    }\n    .dude figure.body:after, .dude-shadow figure.body:after {\n      left: 14px;\n    }\n\nCes règles sont dédoublées dans chaque cas, pour décrire à la fois le personnage et son ombre. Chaque partie est positionnée absolument et on utilise `border-radius` pour créer des formes arrondies. Les pseudo-éléments représentant les jambes sont décrits puis positionnés dans des règles séparées.\n\n### le personnage 1\n\nUne fois la forme du personnage réalisée, positionnons celui-ci sur son point de départ\u0026nbsp;:\n\n    //CSS\n    .stage .dude.one {\n        transform: translate3D(514px, 50px, 375px) rotateY(78deg);\n    }\n    .stage .dude-shadow.one {\n        transform: translateX(-12px) rotateX(90deg) translateY(8px);\n        opacity: 0.1;\n    }\n\nLes `transform` CSS positionnent à la fois le personnage et son ombre. Plutôt que de donner une couleur grise à l'ombre, on utilise la propriété opacité, réglée à 0.1, ce qui permet à des détails de background d'être vus en-dessous de l'ombre.\n\nLe premier personnage est maintenant sur son point de départ et pivoté selon un angle similaire à celui de la vidéo. Nous allons ajouter l'animation plus tard, pour le faire sauter à travers le portail.\n\n### Des bras\n\n\u003cfigure\u003e\n    \n![image](/images/portal11.png)\n\u003c/figure\u003e\n\nLe deuxième personnage a quelques détails supplémentaires, des bras, l'idée étant que lorsque le personnage passe à travers le portail, il lève les bras en signe de victoire. Voici le HTML\u0026nbsp;:\n\n    //HTML\n    \u003cdiv class=\"dude two\"\u003e\n        \u003cfigure class=\"head\"\u003e\u003c/figure\u003e\n        \u003cfigure class=\"body\"\u003e\u003c/figure\u003e\n        \u003cfigure class=\"arm left\"\u003e\u003c/figure\u003e\n        \u003cfigure class=\"arm right\"\u003e\u003c/figure\u003e\n        \u003cdiv class=\"dude-shadow two\"\u003e\n            \u003cfigure class=\"head\"\u003e\u003c/figure\u003e\n            \u003cfigure class=\"body\"\u003e\u003c/figure\u003e\n            \u003cfigure class=\"arm left\"\u003e\u003c/figure\u003e\n            \u003cfigure class=\"arm right\"\u003e\u003c/figure\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\nLe second personnage sera invisible au début de l'animation, puis il saute à travers le portail à mi-chemin de l'animation (après que le premier personnage ait sauté). Pour mettre ceci en place, le deuxième personnage est positionné sur le portail.\n\n    //CSS\n    .stage .dude.two {\n        transform: translate3D(610px, 40px, 10px) rotateY(15deg);\n    }\n    .stage .dude.two figure.arm {\n        position: absolute;\n        width: 20px;\n        height: 8px;\n        background: black;\n        top: 20px;\n    }\n    .stage .dude.two figure.arm.left {\n        left: -13px;\n        transform: rotateZ(40deg);\n    }\n    .stage .dude.two figure.arm.right {\n        right: -10px;\n        transform: rotateZ(-40deg);\n    }\n    .stage .dude-shadow.two {\n        transform: translateY(12px) translateX(-16px) translateZ(-6px) rotateZ(-90deg) rotateY(90deg) rotateZ(50deg) skewX(30deg) scaleX(0.8);\n        opacity: 0.1;\n    }\n\nUne deuxième animation sera appliquée aux bras, dans laquelle ceux-ci seront d'abord invisibles pour apparaître ensuite.\n\n## Le décor est planté\n\nLes personnages sont là dans leur décor, nous sommes prêts pour l'animation.\n\n\u003cfigure\u003e\n    \n![image](/images/portal12.png)\n\u003c/figure\u003e\n\nVoyons comment nous pouvons donner l'illusion que le personnage saute dans le premier portail et réapparaît dans le second.\n\n## Animation\n\nSi vous regardez [la démo](http://hop.ie/portal/), vous verrez plusieurs animations. Plutôt que de passer en revue toutes les animations, je vais me concentrer sur l'animation du personnage passant d'un portail à l'autre.\n\n### Keyframe animation\n\nL'animation des éléments HTML dans le temps est réalisée en utilisant des [keyframes](https://docs.webplatform.org/wiki/css/atrules/@keyframeshttps://docs.webplatform.org/wiki/css/atrules/@keyframes), et en attachant un ensemble de keyframes à un élément au moyen d'une propriété [animation](https://docs.webplatform.org/wiki/css/properties/animation). Nous allons commencer en animant le premier personnage, qui s'approchera du portail de gauche et sautera au travers. Voici un ensemble de keyframes qui permettent de réaliser cette animation\u0026nbsp;:\n\n    //CSS\n    @keyframes move-dude-one {\n        /* Le personnage entre en scène */\n        0% {\n            transform: translate3D(514px, -10px, 375px) rotateY(78deg) scaleY(2);\n        }\n        /* Il attend un moment */\n        1%, 18% {\n            transform: translate3D(514px, 50px, 375px) rotateY(78deg) scaleY(1);\n            opacity: 1;\n        }\n        /* Il se dirige vers le portail */\n        34%, 39% {\n            transform: translate3D(284px, 40px, 375px) rotateY(78deg);\n            opacity: 1;\n        }\n        /* Il fait une pause, puis saute */\n        41%, 42% {\n            transform: translate3D(234px, 40px, 375px) rotateY(78deg);\n            opacity: 1;\n        }\n        /* Il disparaît */\n        43%, 100% {\n            transform: translate3D(234px, 40px, 375px) rotateY(78deg);\n            opacity: 0;\n        }\n    }\n\nLes keyframes sont une série d'étapes, décrites à l'aide de pourcentages. Les pourcentages sont relatifs au timing de l'animation, c'est à dire que si l'animation dure 10 secondes, 10% représenteraient une étape d'une durée de 1 seconde.\n\nAfin de voir nos personnages sauter à travers les portails dans une belle continuité, nous allons créer deux animations de 10 secondes chacune qui fonctionneront de manière simultanée. J'ai mis quelques commentaires dans le code pour décrire chaque étape de l'animation. La propriété `transform` est utilisée à chaque étape pour régler la position et l'angle des personnages.\n\nÀ 43% de l'animation, l'`opacity` du personnage est fixée à 0. C'est le moment où le personnage disparaît dans le portail. Le second personnage devrait donc apparaître vers 43% grâce à son animation.\n\nAvant cela, appliquons cette première animation au premier personnage\u0026nbsp;:\n\n    //CSS\n    .dude.one {\n        animation: move-dude-one 10s linear infinite;\n        opacity: 0;\n    }\n\nLa propriété `animation` ci-dessus applique l'animation à l'élément _dude one_. Il l'attache au moyen du nom de l'animation (_move-dude-one_), lui assigne une durée de 10 secondes et une répétition à l'infini.\n\nUne opacité de 0 permet de garantir que le personnage est invisible avant le début de l'animation.\n\nPassons maintenant à l'animation du second personnage.\n\n    //CSS\n    @keyframes move-dude-two {\n        /* Le personnage est d'abord invisible */\n        0%, 42% {\n            transform: translate3D(610px, 40px, 10px) rotateY(15deg);\n            opacity: 0;\n        }\n        /* Il apparaît */\n        42.5% {\n            transform: translate3D(610px, 40px, 10px) rotateY(15deg);\n            display: block;\n            opacity: 1;\n        }\n        /* Il s'avance sur la plateforme */\n        46%, 75% {\n            transform: translate3D(610px, 40px, 120px) rotateY(15deg);\n            opacity: 1;\n        }\n        /* Il reste là un moment */\n        76%, 97% {\n            transform: translate3D(610px, -10px, 120px) rotateY(15deg) scaleY(2);\n            opacity: 0;\n        }\n        /* Il s'envole dans les airs ! */\n        98%, 100% {\n            transform: translate3D(610px, -10px, 120px) rotateY(15deg) scaleY(2);\n            opacity: 0;\n        }\n    }\n\n    @keyframes arms {\n        /* Pas de bras */\n        0%, 53% {\n            opacity: 0;\n        }\n        /* Il a des bras ! */\n        54%, 100% {\n            opacity: 1;\n        }\n    }\n\nComme prévu, cette animation commence autour de 42%. Le personnage saute par le portail, il reste immobile quelques instants, puis il s'envole dans les airs. Un deuxième ensemble de keyframes décrit l'animation des bras. Ils sont invisibles au départ, puis apparaissent à mi-chemin de l'animation.\n\nNous pouvons appliquer ces keyframes au deuxième personnage de la façon suivante\u0026nbsp;:\n\n    //CSS\n    .dude.two {\n        animation: move-dude-two 10s linear infinite;\n        opacity: 0;\n    }\n\n    .dude.two figure.arm {\n        animation: arms 10s linear infinite;\n        opacity: 0;\n    }\n\nDe cette manière, les deux animations sont appliquées. Comme elles ont toutes les deux une durée identique de 10 secondes, et qu'elles se reproduisent à l'infini, elles sont parfaitement coordonnées.\n\nSi ce n'est déjà fait, vous pouvez vérifier [le résultat final](http://hop.ie/portal/) dans un navigateur moderne, de préférence pas Internet Explorer.\n\n## Précautions\n\nPuisque nous parlons des navigateurs, je dois dire que tout ceci ne fonctionnera pas dans IE... Firefox est un peu bof, mais pas mal. Safari y est presque et Chrome est bon à 100%. Mais on va y arriver. (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : l'article date de juin 2013, on y est_).\n\nÇa marche bien aussi sur la plupart des terminaux (toute question de navigateur mise à part), un test sur iPhone montre une performance meilleure encore que sur un laptop avec Chrome, parce que les règles CSS utilisées (transformations 3D) utilisent la carte graphique.\n\n### Demo et contact\n\nRegardez [la démo](http://hop.ie/portal/) ou téléchargez le code sur [Github](https://github.com/donovanh/portal).\n\nJe serais ravi de connaître votre avis, vous pouvez me joindre sur [Twitter](https://twitter.com/donovanh).\n"},{"slug":"centrer-en-css-un-guide-complet","title":"Centrer en CSS, un guide complet","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"2 septembre 2014","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/centering-css-complete-guide/","copyright":"2014"},"dateCascade":"6 septembre 2014","dateMachine":"2O140906","tags":["css","flexbox"],"about":["Élément block","Centrer"],"excerpt":"Le centrage en CSS est souvent un véritable casse-tête, car il existe plusieurs techniques différentes selon les cas d'utilisation. Chris Coyier les a listées et nous donne toutes les solutions.","featured":true,"featuredImage":"/images/authors/chris-coyier.jpg","order":9,"content":"\nLe centrage en CSS est souvent un casse-tête. _Pourquoi faut-il que ce soit si difficile ?_ En fait, la difficulté ne vient pas du centrage lui-même mais de la multiplicité des techniques disponibles pour centrer en CSS et qui dépendent chacune de la situation. La vraie difficulté est donc de savoir quelle technique utiliser dans une situation donnée.\n\nNous allons lister toutes ces situations et en principe vous serez équipé pour la route.\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : Chris Coyier s'intéresse ici au **centrage en général**, pour une introduction complète au **centrage d'une div**, consultez l'article_ [Centrer un bloc Div, guide complet](/articles/centrer-une-div-guide-complet), _de Steve Pear_.\n\nSi je veux centrer...\n\n## Centrer horizontalement\n\n### Éléments inline ou inline-\\* (p.ex. texte ou lien)?\n\nVous pouvez centrer horizontalement des [éléments inline](/articles/la-difference-entre-block-et-inline/) à l'intérieur d'un élément parent de niveau bloc avec cette ligne simple\u0026nbsp;:\n\n    //CSS\n    .center-children {\n      text-align: center;\n    }\n\nVoici ce que ça donne sur Code Pen (_comme toujours, vous pouvez cliquer sur HTML et CSS pour voir le code, sur Result pour voir le résultat, et sur Edit si vous voulez voir l'original sur Code Pen et jouer avec_)\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_HulzB\" src=\"//codepen.io/chriscoyier/embed/HulzB?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=HulzB\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/HulzB/\"\u003e\n  Centering Inline Elements\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nÇa fonctionnera très bien avec inline, inline-block, inline-table, inline-flex, etc.\n\n### Éléments block ?\n\nVous pouvez centrer un élément [de niveau bloc](/articles/la-difference-entre-block-et-inline/) en lui donnant une marge gauche et droite automatique, ce qui se traduit par\u0026nbsp;:\n\n    //CSS\n    .center-me {\n      margin: 0 auto;\n    }\n\nNB : Il va de soi que l'élément en question a une largeur déterminée, sinon il prendrait toute la largeur de l'élément parent et n'aurait pas besoin d'être centré.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_eszon\" src=\"//codepen.io/chriscoyier/embed/eszon?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=eszon\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"250\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/eszon/\"\u003e\n  Centering Single Block Level Element\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nÇa marchera quelle que soit la largeur de l'élement bloc que vous voulez centrer ou celle de son élément parent.\n\n### Y a-t-il plus d'un élément block ?\n\nSi vous avez deux éléments blocs, ou plus, à centrer dans une rangée, une bonne solution consistera souvent à changer le type de `display`. Voici deux exemples, le premier utilise `display: inline-block`, le second utilise [Flexbox](/articles/flexbox-guide-complet/)\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ebing\" src=\"//codepen.io/chriscoyier/embed/ebing?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=ebing\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"470\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/ebing/\"\u003e\n  Centering Row of Blocks\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVoilà pour les rangées. Et si vous avez plusieurs éléments blocks empilés les uns sur les autres, la technique de marge automatique fonctionne parfaitement\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_haCGt\" src=\"//codepen.io/chriscoyier/embed/haCGt?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=haCGt\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"380\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/haCGt/\"\u003e\n  Centering Blocks on Top of Each Other\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Centrer verticalement\n\nLe centrage vertical est un peu plus délicat en CSS.\n\n### Éléments inline ou inline-\\* (p.ex. texte ou lien)?\n\n#### Est-ce une ligne unique ?\n\nDes éléments inline ou texte peuvent apparaître centrés verticalement parfois simplement parce qu'il y a un padding top et bottom égal\u0026nbsp;:\n\n    //CSS\n    .link {\n      padding-top: 30px;\n      padding-bottom: 30px;\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ldcwq\" src=\"//codepen.io/chriscoyier/embed/ldcwq?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=ldcwq\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"240\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/ldcwq/\"\u003e\n  Centering text (kinda) with Padding\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nSi vous ne pouvez pas utiliser le padding et que vous cherchez à centrer un texte qui doit rester sur une ligne unique, le truc est de donner à la propriété `line-height` la même valeur qu'à `height`.\n\n    //CSS\n    .center-text-trick {\n      height: 100px;\n      line-height: 100px;\n      white-space: nowrap;\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LxHmK\" src=\"//codepen.io/chriscoyier/embed/LxHmK?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=LxHmK\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"340\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/LxHmK/\"\u003e\n  Centering a line with line-height\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n#### Ou des lignes multiples ?\n\nLà aussi on peut obtenir le centrage avec des padding top et bottom égaux.\n\nSi pour une raison quelconque vous ne pouvez pas utiliser cette technique, peut-être l'élément dans lequel est situé le texte est-il une cellule de tableau, ou bien on peut forcer cet élément à se comporter comme s'il était une cellule. La propriété `vertical-align` gère cette situation, puisqu'elle sert habituellement à aligner des contenus situés sur une rangée.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ekoFx\" src=\"//codepen.io/chriscoyier/embed/ekoFx?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=ekoFx\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/ekoFx/\"\u003e\n  Centering text (kinda) with Padding\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nUne autre solution consiste à [utiliser flexbox](/articles/flexbox-guide-complet/). Centrer un flex-child dans un flex-parent est assez facile\u0026nbsp;:\n\n    //CSS\n    .flex-center-vertically {\n      display: flex;\n      justify-content: center;\n      flex-direction: column;\n      height: 400px;\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_uHygv\" src=\"//codepen.io/chriscoyier/embed/uHygv?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=uHygv\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"380\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/uHygv/\"\u003e\n  Vertical Center Multi Lines of Text with Flexbox\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nN'oubliez pas que cela fonctionne uniquement si le container parent a une hauteur fixe (en px, en % ou ce que vous voulez), c'est pourquoi le container ici a une hauteur.\n\nSi vous ne pouvez utiliser aucune de ces techniques, il vous reste encore celle du \u0026ldquo;ghost-element\u0026rdquo;, l'élément fantôme, dans lequel un pseudo-élément prenant toute la hauteur est placé à l'intérieur du container et le texte est aligné verticalement sur lui\u0026nbsp;:\n\n    //CSS\n    .ghost-center {\n      position: relative;\n    }\n    .ghost-center::before {\n      content: \" \";\n      display: inline-block;\n      height: 100%;\n      width: 1%;\n      vertical-align: middle;\n    }\n    .ghost-center p {\n      display: inline-block;\n      vertical-align: middle;\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ofwgD\" src=\"//codepen.io/chriscoyier/embed/ofwgD?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=ofwgD\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/ofwgD/\"\u003e\n  Ghost Centering Multi Line Text\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Élements block\n\n#### Connaissez-vous la hauteur de l'élément ?\n\nIl est assez courant de ne pas connaître la hauteur d'un élément, pour des tas de raisons\u0026nbsp;: Si la largeur change, la réorganisation du texte peut changer la hauteur, une modification du style du texte peut également changer la hauteur, de même qu'un ajout de texte... Idem si le \u003cspan itemprop=\"about\"\u003eratio d'aspect\u003c/span\u003e de votre image est fixe, tout redimensionnement entraînera une modification de sa hauteur.\n\nMais si vous connaissez sa hauteur, vous pouvez le centrer avec\u0026nbsp;:\n\n    //CSS\n    .parent {\n      position: relative;\n    }\n    .child {\n      position: absolute;\n      top: 50%;\n      height: 100px;\n      margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_HiydJ\" src=\"//codepen.io/chriscoyier/embed/HiydJ?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=HiydJ\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"440\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/HiydJ/\"\u003e\n  Center Block with Fixed Height\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n#### La hauteur de l'élément est-elle inconnue ?\n\nSi vous ne connaissez pas la hauteur de l'élément, vous pouvez le centrer en le remontant de la moitié de sa hauteur après l'avoir fait descendre de la moitié de la hauteur du contenant\u0026nbsp;:\n\n    //CSS\n    .parent {\n      position: relative;\n    }\n    .child {\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_lpema\" src=\"//codepen.io/chriscoyier/embed/lpema?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=lpema\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"440\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/lpema/\"\u003e\n  Center Block with Unknown Height\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n#### Pouvez-vous utiliser Flexbox ?\n\nSans surprise, c'est bien plus facile avec [flexbox](http://css-tricks.com/snippets/css/a-guide-to-flexbox/).\n\n    //CSS\n    .parent {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_FqDyi\" src=\"//codepen.io/chriscoyier/embed/FqDyi?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=FqDyi\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"460\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/FqDyi/\"\u003e\n  Center Block with Unknown Height with Flexbox\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Horizontalement et verticalement\n\nVous pouvez combiner les techniques qui précèdent pour obtenir des éléments parfaitement centrés. Mais il me semble qu'elles peuvent se regrouper en trois catégories\u0026nbsp;:\n\n###Éléments de hauteur et largeur fixes\n\nVous pouvez utiliser des marges négatives égales à la moitié de cette hauteur et de cette largeur, un positionnement absolu à 50%/50% centrera l'élément\u0026nbsp;:\n\n    //CSS\n    .parent {\n      position: relative;\n    }\n\n    .child {\n      width: 300px;\n      height: 100px;\n      padding: 20px;\n\n      position: absolute;\n      top: 50%;\n      left: 50%;\n\n      margin: -70px 0 0 -170px;\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_JGofm\" src=\"//codepen.io/chriscoyier/embed/JGofm?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=JGofm\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"360\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/JGofm/\"\u003e\n  Center Block with Fixed Height and Width\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Éléments de hauteur et largeur inconnues\n\nSi vous ne connaissez pas la largeur ou la hauteur, vous pouvez utiliser la propriété `transform` et une translation négative de 50% dans les deux directions (elle sera basée sur les largeur et hauteur actuelles de l'élément)\u0026nbsp;:\n\n    //CSS\n    .parent {\n      position: relative;\n    }\n    .child {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_lgFiq\" src=\"//codepen.io/chriscoyier/embed/lgFiq?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=lgFiq\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"360\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/lgFiq/\"\u003e\n  Center Block with Unknown Height and Width\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Pouvez-vous utiliser Flexbox ?\n\nPour centrer dans les deux directions avec flexbox, vous devez utiliser deux propriétés de centrage\u0026nbsp;:\n\n    //CSS\n    .parent {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_msItD\" src=\"//codepen.io/chriscoyier/embed/msItD?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=msItD\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"360\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/msItD/\"\u003e\n  Center Block with Unknown Height and Width with Flexbox\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Conclusion\n\nCentrer horizontalement, centrer verticalement, vous pouvez tout \u003cspan itemprop=\"about\"\u003ecentrer sans problème\u003c/span\u003e en CSS\u0026nbsp;!\n"},{"slug":"une-liste-de-raccourcis-emmet","title":"Raccourcis et astuces Emmet","author":{"name":"Jordan Moore","lastname":"Moore"},"original":{"date":"1er juin 2014","site":"le blog de Jordan Moore","siteUrl":"http://jordanm.co.uk","postUrl":"http://jordanm.co.uk/2014/07/10/emmets-hidden-power-features.html","copyright":"2014"},"dateCascade":"28 juillet 2014","dateMachine":"2O140728","tags":["css","html"],"about":["Emmet"],"excerpt":"Emmet est un plugin pour éditeurs de textes qui vous aide à créer HTML et CSS à la vitesse de l'éclair. Rappel des raccourcis principaux et quelques fonctionnalités moins connues.","featured":true,"featuredImage":"/images/em13-compressor.png","order":65,"content":"\n_NdT : Deux articles de la Cascade ont déjà présenté [Emmet](http://emmet.io/), l'un de manière globale ([Goodbye Zen Coding, Hello Emmet !](/articles/goodbye-zen-coding-hello-emmet/)), l'autre plus spécifiquement pour CSS ([Emmet, un turbo dans votre CSS](/articles/emmet-un-turbo-dans-votre-css/)). Inutile de vanter à nouveau les mérites d'Emmet pour vous faciliter le travail. Cet article recense les **raccourcis d'Emmet** et rafraîchira notre mémoire\u0026nbsp;!_\n\n_Pour compléter cet article de Matt McFadyen, vous trouverez un article de Jordan Moore (Astuces Emmet) à la suite, à propos de quelques fonctionnalités d'Emmet moins connues_.\n\n## Raccourcis Emmet\n\n(par \u003csmall\u003eMatt McFadyen\u003c/small\u003e)\n\nEmmet est un plugin pour éditeurs de texte, utile pour accroître votre productivité grâce à de nombreux raccourcis vous épargnant la saisie de code répétitif et ennuyeux. J'utilise Emmet pour automatiser la création de listes, pour la numérotation incrémentée de classes, pour CSS etc. Voici quelques-uns des raccourcis les plus utiles, au cas où vous les auriez oubliés.\n\nDans les exemples qui suivent, la syntaxe en blanc correspond à Emmet, en tapant la touche tabulation on obtient la syntaxe colorée HTML.\n\n## HTML\n\n### Utiliser \u003e pour ajouter un élément enfant (child)\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/em1-compressor.png\" alt=\"\"/\u003e\u003c/figure\u003e --\u003e\n\n```\n//CSS\n\n  li\u003ep\n\n  \u003cli\u003e\n    \u003cp\u003e/p\u003e\n  \u003c/li\u003e\n\n  ul\u003eli\u003ep\n\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cp\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n```\n\n### Utiliser + pour ajouter un élément frère (sibling)\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/em2-compressor.png\" alt=\"\"/\u003e\u003c/figure\u003e --\u003e\n\n```\n//CSS\n\n  ul\u003eli\u003ep+a\n\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cp\u003e\u003c/p\u003e\n      \u003ca href=\"\"\u003e\u003c/a\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n```\n\n### Utiliser \\* pour multiplier les éléments\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em3-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n//CSS\n\n  ul\u003eli*3\u003ep+img\n\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cp\u003e\u003c/p\u003e\n      \u003cimg src=\"\" alt=\"\"\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cp\u003e\u003c/p\u003e\n      \u003cimg src=\"\" alt=\"\"\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cp\u003e\u003c/p\u003e\n      \u003cimg src=\"\" alt=\"\"\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n```\n\n### Utiliser . pour ajouter un nom de classe\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em4-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n//CSS\n\n  ul.wrapper\n\n  \u003cul class=\"wrapper\"\u003e\u003c/ul\u003e\n\n  .container\n\n  \u003cdiv class=\"container\"\u003e\u003c/div\u003e\n```\n\n### Utiliser () pour grouper des éléments multiples\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em5-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n//CSS\n\n  ul\u003e(header\u003eul\u003eli*2\u003ea)+footer\u003ep\n\n  \u003cul\u003e\n    \u003cheader\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"\"\u003e\u003c/a\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca href=\"\"\u003e\u003c/a\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/header\u003e\n    \u003cfooter\u003e\n      \u003cp\u003e\u003c/p\u003e\n    \u003c/footer\u003e\n  \u003c/ul\u003e\n```\n\nou encore :\n\n```\n//CSS\n\n  ul\u003e(li\u003ep+img+a)+li*2\u003ep+img\n\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003cp\u003e\u003c/p\u003e\n      \u003cimg src=\"\" alt=\"\"\u003e\n      \u003ca href=\"\"\u003e\u003c/a\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cp\u003e\u003c/p\u003e\n      \u003cimg src=\"\" alt=\"\"\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n      \u003cp\u003e\u003c/p\u003e\n      \u003cimg src=\"\" alt=\"\"\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n```\n\n### Utiliser {} pour insérer du texte dans un élément\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em6-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n  a{clique moi}\n\n    \u003ca href=\"\"\u003eclique moi\u003c/a\u003e\n\n  p\u003e{Clique }+a{ici}+{ pour continuer}\n\n    \u003cp\u003eClique \u003ca href=\"\"\u003eici\u003c/a\u003e pour continuer\u003c/p\u003e\n```\n\n### Ajouter une numérotation avec $\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em7-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n  ul\u003eli.item$*5\n\n  \u003cul\u003e\n    \u003cli class=\"item1\"\u003e\u003c/li\u003e\n    \u003cli class=\"item2\"\u003e\u003c/li\u003e\n    \u003cli class=\"item3\"\u003e\u003c/li\u003e\n    \u003cli class=\"item4\"\u003e\u003c/li\u003e\n    \u003cli class=\"item5\"\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n```\n\n### Commencer la numérotation à X avec $@X\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em8-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n  ul\u003eli.item$@3*5\n\n  \u003cul\u003e\n    \u003cli class=\"item3\"\u003e\u003c/li\u003e\n    \u003cli class=\"item4\"\u003e\u003c/li\u003e\n    \u003cli class=\"item5\"\u003e\u003c/li\u003e\n    \u003cli class=\"item6\"\u003e\u003c/li\u003e\n    \u003cli class=\"item7\"\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n```\n\n### Ordre décroissant avec $@-\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em9-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n  ul\u003eli.item$@-{pizza $@-}*5\n\n  \u003cul\u003e\n    \u003cli class=\"item5\"\u003epizza 5\u003c/li\u003e\n    \u003cli class=\"item4\"\u003epizza 4\u003c/li\u003e\n    \u003cli class=\"item3\"\u003epizza 3\u003c/li\u003e\n    \u003cli class=\"item2\"\u003epizza 2\u003c/li\u003e\n    \u003cli class=\"item1\"\u003epizza 1\u003c/li\u003e\n  \u003c/ul\u003e\n```\n\n### Remonter d'un élément enfant avec ^\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em10-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n  div\u003ep\u003eem{hello}^a\n\n  \u003cdiv\u003e\n    \u003cp\u003e\u003cem\u003ehello\u003c/em\u003e\u003c/p\u003e\n    \u003ca href=\"\"\u003e\u003c/a\u003e\n  \u003c/div\u003e\n```\n\n#### Ajouter un attribut avec [attr_name=\"valeur\"]\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em11-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n  img[src=\"http://placage.com/300/300\" alt=\"nicCage\"]\n\n  \u003cimg src=\"http://placage.com/300/300\" alt=\"nicCage\"\u003e\n```\n\n#### En résumé\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cspan itemprop=\"image\" itemscope itemtype=\"https://schema.org/ImageObject\"\u003e\u003cimg itemprop=\"url\" src=\"https://la-cascade.io/content/images/2017/03/em12-compressor.png\" alt=\"\"/\u003e\u003c/span\u003e\u003c/figure\u003e --\u003e\n\n```\n  div.list\u003eul\u003e(li.item$\u003ep{paragraph $}\n  +img[src=\"http://placage.com/300/300\"])\n  +li.item$@2*4\u003ep{paragraph $@2}\n  +img[src=\"http://placage.com/$@1$$/$@5$$\"]+a\n  ^^^footer\u003ep{Place cage vrs placesheen}\n\n  \u003cdiv class=\"list\"\u003e\n    \u003cul\u003e\n      \u003cli class=\"item1\"\u003e\n        \u003cp\u003eparagraph 1\u003c/p\u003e\n        \u003cimg src=\"http://placecage.com/300/300\" alt=\"\"\u003e\n      \u003c/li\u003e\n      \u003cli class=\"item2\"\u003e\n        \u003cp\u003eparagraph 2\u003c/p\u003e\n        \u003cimg src=\"http://placecage.com/105/505\" alt=\"\"\u003e\n        \u003ca href=\"\"\u003e\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli class=\"item3\"\u003e\n        \u003cp\u003eparagraph 3\u003c/p\u003e\n        \u003cimg src=\"http://placecage.com/202/606\" alt=\"\"\u003e\n        \u003ca href=\"\"\u003e\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli class=\"item4\"\u003e\n        \u003cp\u003eparagraph 4\u003c/p\u003e\n        \u003cimg src=\"http://placecage.com/303/707\" alt=\"\"\u003e\n        \u003ca href=\"\"\u003e\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli class=\"item5\"\u003e\n        \u003cp\u003eparagraph 5\u003c/p\u003e\n        \u003cimg src=\"http://placecage.com/404/808\" alt=\"\"\u003e\n        \u003ca href=\"\"\u003e\u003c/a\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/div\u003e\n  \u003cfooter\u003e\n    \u003cp\u003ePlace cage vrs placesheen\u003c/p\u003e\n  \u003c/footer\u003e\n```\n\nLe premier regroupement contient une `\u003cli\u003e` qui a deux éléments enfants\u0026nbsp;: `\u003cp\u003e` qui contient du texte et `\u003cimg\u003e` qui contient un attribut `src`.\n\nLe regroupement suivant contient les `\u003cli\u003e` 2 à 5, en multipliant des listes dont les noms de classe, le contenu de paragraphe, les valeurs d'attributs `src` s'incrémentent selon diverses syntaxes. Chaque `\u003cli\u003e` contient également une ancre, invariable.\n\nEnfin, nous utilisons 3 fois ^ de façon à sortir de `\u003cli\u003e`, puis de `\u003cul\u003e`, puis de `\u003cdiv\u003e`, afin d'ajouter notre footer final.\n\n## CSS\n\nVoici une liste de raccourcis courants\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/em13-compressor.png\" alt=\"\"/\u003e\u003c/figure\u003e\n\nN'oubliez pas que CodePen est compatible avec Emmet !\n\n## Astuces Emmet\n\n(par \u003csmall\u003eJordan Moore\u003c/small\u003e)  \n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : Pour compléter ce petit rappel, voici un autre article, de_ **Jordan Moore**, _sur quelques fonctionnalités mal connues d'Emmet, qui montrent sa puissance incroyable_.\n\n### Calcul en ligne\n\nEmmet contient un calculateur intégré qui vous permet de résoudre des équations directement à l'intérieur de votre code. Je l'utilise quotidiennement pour convertir des valeurs _px_ en _em_, en particulier pour les valeurs _em_ imbriquées, simplement en tapant `Cmd` `Shift` `Y` sur une équation comme 24/16 (valeur souhaitée en pixels / valeur de base en pixels).\n\nVous pouvez enchaîner le calcul et les abréviations, par exemple en tapant `mb24/16` et en faisant `Cmd` `Shift` `Y`, puis tabulation, vous obtenez\u0026nbsp;:\n\n    margin-bottom: 1.5em;\n\n### Retrouver une balise\n\nQuelquefois lorsque j'écris mon HTML je cherche une balise fermante que je n'arrive pas à retrouver rapidement. En faisant `Ctrl` `Shift` `T` avec le curseur sur la balise ouvrante (ou fermante), je saute directement à la balise fermante (ou ouvrante) correspondante.\n\n### Commentaires\n\nPour éviter de me retrouver dans la situation précédente, je recommande d'insérer un commentaire sous vos balises fermantes. Mais écrire le nom de la classe d'un élément encore une fois, et l'intégrer dans les commentaires, est une perte de temps et d'énergie qui n'a de sens que si vous devez revoir votre code - c'est pourquoi on l'oublie souvent.\n\nEmmet rend toutefois cette tâche extrêmement simple, en ajoutant juste un petit snippet à la fin d'une abréviation. Si vous tapez : `.container\u003eul\u003eli*5\u003ea|c`, vous obtiendrez\u0026nbsp;:\n\n    \u003cdiv class=\"container\"\u003e\n        \u003cul\u003e\n            \u003cli\u003e\u003ca href=\"\"\u003e\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"\"\u003e\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"\"\u003e\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"\"\u003e\u003c/a\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ca href=\"\"\u003e\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/div\u003e\n    \u003c!-- /.container --\u003e\n\nBref, pour obtenir le commentaire (et tout le bénéfice qui vient avec), il vous a suffi d'écrire `|c`.\n\n### Convertir une image en Data URI\n\nUne des fonctionnalités les moins utilisées d'Emmet est sa capacité à convertir les images en Data URI. L'utilisation de Data URI en lieu et place d'une image externe vous permet d'économiser une requête HTTP, ce qui améliore la performance de votre site en réduisant le temps de latence.\n\nPour convertir une image en Data URI, placez le curseur à l'intérieur de la balise image et faites `Ctrl` `Shift` `D`.\n\n---\n\n### Liens complémentaires\n\n[Documentation Emmet](http://docs.emmet.io/css-abbreviations/)  \n[Anti-sèche Emmet (syntaxe, HTML, CSS)](http://docs.emmet.io/cheat-sheet/)  \n[Bootstrap en quelques minutes avec Emmet](http://webdesign.tutsplus.com/tutorials/applications/build-bootstrap-in-minutes-using-emmet/) (en anglais)  \n[tutoriel vidéo sur Emmet](http://www.grafikart.fr/tutoriels/sublime-text-2/emmet-376), par Grafikart\n\nNote sur les **Raccourcis Emmet** :  \nLa première partie de cette traduction, l'article de Matt McFadyen, n'est plus disponible en ligne. Il a été traduit avec l'aimable autorisation de l'auteur.  \nCopyright Matt McFadyen \u0026copy; 2014.\n"},{"slug":"creer-des-spheres-en-css","title":"Créer des sphères en CSS","author":{"name":"Donovan Hutchinson","lastname":"Hutchinson"},"original":{"date":"2 juillet 2014","site":"Medium","siteUrl":"https://medium.com/","postUrl":"https://medium.com/css-tutorials/css-spheres-aab1a341deb2","copyright":"2014"},"dateCascade":"26 juillet 2014","dateMachine":"2O140726","tags":["css","html","animation"],"about":["Dégradés radiaux"],"excerpt":"Nous aussi nous pouvons faire des bulles, grâce à Donovan Hutchinson, maître des sphères.","featured":false,"featuredImage":"/images/flat2.png","order":null,"content":"\nJ'ai parlé récemment de la création de triangles CSS qui utilisent les `border-radius` pour les angles. Essayons maintenant les sphères.\n\n## Flat design\n\nNous pouvons utiliser deux approches pour réaliser des sphères en CSS.\n\nL'une d'elles consiste à créer une sphère en 3D, en utilisant de nombreux éléments. Il en existe de nombreux [exemples](http://www.cssplay.co.uk/menu/cssplay-3D-sphere.html) [remarquables](http://codepen.io/peterwestendorp/pen/wGECk). L'inconvénient est qu'elles requièrent du navigateur l'affichage de nombreux éléments, ce qui peut avoir un impact sur la performance. Par ailleurs, elles ont souvent un aspect un peu brut, du fait que l'affichage d'une sphère lisse et parfaite ferait appel à encore plus d'éléments.\n\nJe vais donc tenter une autre approche, en utilisant les dégradés CSS pour créer un effet 3D sur un élément simple.\n\n## Démo et code source\n\nTous les exemples qui suivent sont accessibles via [mon compte CodePen](http://codepen.io/donovanh/), ou en sélectionnant les liens \u0026ldquo;Edit on Codepen\u0026rdquo; de chaque exemple.\n\nDans les exemples de code, j'ai omis les préfixes constructeurs, mais je recommande l'utilisation d'un outil comme [Autoprefixer](https://github.com/postcss/autoprefixer), ou l'ajout manuel des préfixes.\n\n## Forme de base\n\nAvant d'entrer dans les détails, nous allons créer un cercle, en commençant par le balisage HTML\u0026nbsp;:\n\n    \u003cfigure class=\"circle\"\u003e\u003c/figure\u003e\n\nNous faisons appel à l'élément `figure` ici, mais on pourrait utiliser n'importe quel élément. `figure` est un élément utilisé en HTML pour représenter une image ou un diagramme faisant partie d'un contenu, mais dont la suppression n'aurait pas d'incidence sur la signification du contenu.\n\nPour créer un cercle à partir de cet élément, je vais lui donner une largeur et une hauteur, et un `border-radius` de 50%. Toute valeur supérieure à 50% aura pour résultat un coin parfaitement arrondi.\n\n    //CSS\n\n    .circle {\n     display: block;\n     background: black;\n     border-radius: 50%;\n     height: 300px;\n     width: 300px;\n     margin: 0;\n    }\n\nEt voilà, un superbe disque :\n\n\u003cfigure class=\"circle\"\u003e\u003c/figure\u003e\u003cbr/\u003e\n\nMaintenant que nous avons notre cercle de base, nous pouvons commencer à lui ajouter quelques styles pour lui donner une allure sphérique.\n\n## Ombrages, notions de base\n\nLa première chose que les tutoriels de sphères en 3D vous montrent c'est l'ajout d'un dégradé radial simple, légèrement décalé vers le haut à gauche.\n\nNous pouvons le faire avec ce CSS :\n\n    .circle {\n     display: block;\n     background: black;\n     border-radius: 50%;\n     height: 300px;\n     width: 300px;\n     margin: 0;\n     background: radial-gradient(circle at 100px 100px, #5cabff, #000);\n    }\n\nVous devriez obtenir ceci :\n\n\u003cfigure class=\"circle_rad_grad\"\u003e\u003c/figure\u003e\n\n### Dégradés radiaux\n\nLa propriété [dégradé radial](/articles/les-degrades-css/#radial) prend quelques arguments. Le premier est la position du point d'où partira le dégradé. La syntaxe est \u0026ldquo;_forme_ at _position_\u0026rdquo;, soit dans notre exemple `circle at 100px 100px`, un cercle dont le point central est situé à 100px à partir de la gauche et 100px à partir du haut.\n\nEnsuite, on spécifie une série de couleurs. Vous pouvez en spécifier plus de deux, mais dans ce cas il est nécessaire de préciser la position de chacune, afin que le dégradé sache où les couleurs se mélangent.\n\nDans notre exemple, nous n'utilisons que deux couleurs. Le navigateur supposera donc que la première est à 0% et la deuxième à 100%, et il réalisera un dégradé entre ces deux couleurs. Si nous voulions d'autres étapes dans le dégradé, nous pourrions spécifier les distances en pixels ou en pourcentages, comme nous le verrons tout à l'heure.\n\nBon, nous avons déjà quelque chose qui à une allure de 3D, ce n'est pas si mal mais essayons de faire mieux.\n\n## Ombres \u0026 3D\n\nSelon les ombres que vous appliquez à votre surface, vous pouvez donner un aspect différent à vos sphères. Mais pour commencer, plantons un décor pour installer la nôtre.\n\nLe HTML s'enrichit un peu :\n\n    //HTML\n\n    \u003csection class=”stage”\u003e\n     \u003cfigure class=”ball”\u003e\u003cspan class=”shadow”\u003e\u003c/span\u003e\u003c/figure\u003e\n    \u003c/section\u003e\n\nL'élément \u0026ldquo;ball\u0026rdquo; contient un `span` que nous allons utiliser pour créer une ombre, et il est enveloppé dans une `div` \u0026ldquo;stage\u0026rdquo;. Celle-ci nous servira a créer la perspective et à positionner l'ombre, pour obtenir un effet 3D.\n\nAppliquons maintenant quelques styles à _stage_ et positionnons notre ombre\u0026nbsp;:\n\n    //CSS\n\n    .stage {\n     width: 300px;\n     height: 300px;\n     perspective: 1200px;\n     perspective-origin: 50% 50%;\n    }\n\n    .ball .shadow {\n     position: absolute;\n     width: 100%;\n     height: 100%;\n     background: radial-gradient(circle at 50% 50%, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.1) 40%, rgba(0, 0, 0, 0) 50%);\n     transform: rotateX(90deg) translateZ(-150px);\n     z-index: -1;\n    }\n\nJe n'ai pas intégré les préfixes dans cet exemple, mais ceux de CodePen sont entièrement préfixés. Je donne à la div _stage_ une perspective de 1200px. La propriété `perspective` est similaire au point de fuite en 3D.\n\nL'ombre est ensuite placée sous la balle, on lui donne un dégradé puis on la positionne en utilisant `transform`. Les transformations CSS nous permettent de faire tourner des objets, de les agrandir, de les déplacer ou de les étirer dans un espace en 3D. Nous faisons tourner l'ombre de 90° sur l'axe des x, puis nous la déplaçons de 150px vers le bas pour la mettre sous la balle. Comme nous avons établi une perspective, nous la regardons légèrement de haut en bas et nous voyons une forme ovale étirée.\n\n\u003csection class=\"stage\"\u003e\n  \u003cfigure class=\"ball\"\u003e\u003cspan class=\"shadow\"\u003e\u003c/span\u003e\u003c/figure\u003e\n\u003c/section\u003e\u003cbr/\u003e\n\nC'est un peu mieux maintenant. Ajoutons encore quelques ombres à la balle elle-même.\n\n## Ombrages multiples\n\nDans le monde réel, il est rare qu'un objet soit illuminé d'un seul côté. Les surfaces renvoient la lumière vers d'autres surfaces et l'objet est éclairé de plusieurs côtés à la fois. Pour donner plus de réalisme à notre balle, nous allons faire comme s'il y avait deux sources de lumière, en utilisant [un pseudo-élément](/articles/combinateurs-et-pseudo-classes-css/#pseudo-elements) pour ajouter deux dégradés.\n\n    .ball {\n     display: inline-block;\n     width: 100%;\n     height: 100%;\n     margin: 0;\n     border-radius: 50%;\n     position: relative;\n     background: radial-gradient(circle at 50% 120%, #81e8f6, #76deef 10%, #055194 80%, #062745 100%);\n    }\n\n    .ball:before {\n     content: “”;\n     position: absolute;\n     top: 1%;\n     left: 5%;\n     width: 90%;\n     height: 90%;\n     border-radius: 50%;\n     background: radial-gradient(circle at 50% 0px, #ffffff, rgba(255, 255, 255, 0) 58%);\n     filter: blur(5px);\n     z-index: 2;\n    }\n\nIci nous avons deux dégradés un peu plus complexes.\n\nLe premier est un effet subtil de réflexion de lumière par le bas, et nous l'appliquons à l'élément `ball`. Le centre du dégradé est positionné à mi-chemin de la largeur de la balle, et à 120% de sa hauteur. Le centre est donc situé hors de la surface de la balle. Cela évite que la couleur finale, qui est nette, ne soit visible et cela nous donne un dégradé plus doux.\n\nLe second dégradé est le reflet d'un éclairage placé sur le dessus. Il est réglé à 90% de la largeur de la balle et à 90% de sa hauteur. Il est centré au sommet et se dégrade jusqu'à disparaître à peu près à mi-hauteur de la balle.\n\nJ'ai utilisé [le pseudo-élément `:before`](/articles/les-pseudo-elements-css-before-et-after/) plutôt que de créer un nouvel élément pour contenir l'ombrage.\n\nComme ce dégradé est assez cru, j'ai utilisé le filtres CSS `blur` pour adoucir la lumière. Actuellement [cet effet](/articles/les-filtres-css/) est disponible uniquement pour Chrome et Safari (webkit) mais il sera sans doute compatible avec d'autres navigateurs bientôt.\n\nL'association de nos deux dégradés produit un effet bien plus intéressant\u0026nbsp;:\n\n\u003csection class=\"stage_mult\"\u003e\n  \u003cfigure class=\"ball_mult\"\u003e\u003cspan class=\"shadow_mult\"\u003e\u003c/span\u003e\u003c/figure\u003e\n\u003c/section\u003e\n\n## Plus brillant\n\nNotre effet est encore assez doux, nous allons lui ajouter un peu de brillant en créant quelque chose comme une boule de billard.\n\nPour réaliser cet effet, nous allons utiliser comme précédemment un reflet léger par en-dessous, mais nous allons ajuster la lumière du dessus, qui sera plus petite et plus précise. Nous allons devoir utiliser deux pseudo-éléments pour contenir la couleur de la boule, la lumière venue du dessous et le reflet.\n\n    .ball {\n     display: inline-block;\n     width: 100%;\n     height: 100%;\n     margin: 0;\n     border-radius: 50%;\n     position: relative;\n     background: radial-gradient(circle at 50% 120%, #323232, #0a0a0a 80%, #000000 100%);\n    }\n\n    .ball:before {\n     content: “”;\n     position: absolute;\n     background: radial-gradient(circle at 50% 120%, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0) 70%);\n     border-radius: 50%;\n     bottom: 2.5%;\n     left: 5%;\n     opacity: 0.6;\n     height: 100%;\n     width: 90%;\n     filter: blur(5px);\n     z-index: 2;\n    }\n\n    .ball:after {\n     content: “”;\n     width: 100%;\n     height: 100%;\n     position: absolute;\n     top: 5%;\n     left: 10%;\n     border-radius: 50%;\n     background: radial-gradient(circle at 50% 50%, rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.8) 14%, rgba(255, 255, 255, 0) 24%);\n     transform: translateX(-80px) translateY(-90px) skewX(-20deg);\n     filter: blur(10px);\n    }\n\nIci, nous avons appliqué la couleur initiale en subtil dégradé sur la boule elle-même (`.ball`).\n\nLe pseudo-élément `:before` contient une lumière un peu plus claire, qui commence à la base de la boule et crée un effet de reflet venu de la surface sur laquelle elle repose.\n\nLa nouveauté ici est l'ajout du pseudo-élément `:after`. Il contient un dégradé radial qui part d'un blanc quasi opaque au centre et devient transparent à environ 24%. Cela crée un effet blanc brillant auquel, pour lui donner plus de réalisme, nous appliquons une transformation CSS.\n\nLa transformation consiste à déplacer le reflet vers la gauche de 80px et vers le haut de 90px et à étirer la forme. L'effet `skew` étire le cercle selon l'axe des x, pour qu'il ressemble à l'éclat qu'on verrait sur une boule.\n\n\u003csection class=\"stage_black\"\u003e\n  \u003cfigure class=\"ball_black\"\u003e\u003cspan class=\"shadow_black\"\u003e\u003c/span\u003e\u003c/figure\u003e\n\u003c/section\u003e\n\n## Boule n°8\n\nEt pendant que nous y sommes, ajoutons-lui le numéro 8.\n\nNous avons besoin d'un élément supplémentaire pour contenir le 8, et de quelques styles pour le placer sur la boule.\n\n    //HTML\n\n    \u003csection class=”stage”\u003e\n     \u003cfigure class=”ball”\u003e\n     \u003cspan class=”shadow”\u003e\u003c/span\u003e\n     \u003cspan class=”eight”\u003e\u003c/span\u003e\n     \u003c/figure\u003e\n    \u003c/section\u003e\n\n    //CSS\n\n    .ball .eight {\n     width: 110px;\n     height: 110px;\n     margin: 30%;\n     background: white;\n     border-radius: 50%;\n     transform: translateX(68px) translateY(-60px) skewX(15deg) skewY(2deg);\n     position: absolute;\n    }\n\n    .ball .eight:before {\n     content: “8\";\n     display: block;\n     position: absolute;\n     text-align: center;\n     height: 80px;\n     width: 100px;\n     left: 50px;\n     margin-left: -40px;\n     top: 44px;\n     margin-top: -40px;\n     color: black;\n     font-family: Arial;\n     font-size: 90px;\n     line-height: 104px;\n    }\n\nNous utilisons à nouveau le `border-radius` de 50% pour créer un cercle, et ce cercle est ensuite positionné en haut à droite en utilisant la propriété `transform`. Plutôt que de mettre le chiffre 8 en contenu, j'utilise le pseudo-sélecteur pour ajouter le contenu via CSS, puis pour étirer le chiffre de la même manière que le cercle qui le contient.\n\nEt voilà une boule n°8 éclatante.\n\n\u003csection class=\"stage_black\"\u003e\n  \u003cfigure class=\"ball_black\"\u003e\n    \u003cspan class=\"shadow_black\"\u003e\u003c/span\u003e\n    \u003cspan class=\"eight\"\u003e\u003c/span\u003e\n  \u003c/figure\u003e\n\u003c/section\u003e\n\n\u003c!-- \u003cfigure role=\"group\"\u003e\u003cimg src=\"https://la-cascade.io/content/images/2017/03/sph6-1-compressor.png\" alt=\"\"/\u003e\u003c/figure\u003e --\u003e\n\n## Je t'ai à l'oeil\n\nUn truc sympa avec les transformations CSS, c'est qu'on peut les animer. Grâce aux `keyframes` CSS, vous pouvez décrire une série de transformations formant une animation, et les appliquer à un élément. Pour le démontrer, je vais créer et animer un oeil.\n\nPremière étape, nous allons modifier les couleurs utilisées dans notre exemple précédent. Quelques petits ajustements et nous aurons notre oeil. Tout d'abord le HTML\u0026nbsp;:\n\n    \u003csection class=”stage”\u003e\n     \u003cfigure class=”ball”\u003e\n     \u003cspan class=”shadow”\u003e\u003c/span\u003e\n     \u003cspan class=”iris”\u003e\u003c/span\u003e\n     \u003c/figure\u003e\n    \u003c/section\u003e\n\nLe CSS est similaire, pour l'essentiel, à notre boule de billard, à l'exception de l'iris et de la pupille.\n\n    .iris {\n     width: 40%;\n     height: 40%;\n     margin: 30%;\n     border-radius: 50%;\n     background: radial-gradient(circle at 50% 50%, #208ab4 0%, #6fbfff 30%, #4381b2 100%);\n     transform: translateX(68px) translateY(-60px) skewX(15deg) skewY(2deg);\n     position: absolute;\n     animation: move-eye-skew 5s ease-out infinite;\n    }\n\n    .iris:before {\n     content: “”;\n     display: block;\n     position: absolute;\n     width: 37.5%;\n     height: 37.5%;\n     border-radius: 50%;\n     top: 31.25%;\n     left: 31.25%;\n     background: black;\n    }\n\n    .iris:after {\n     content: “”;\n     display: block;\n     position: absolute;\n     width: 31.25%;\n     height: 31.25%;\n     border-radius: 50%;\n     top: 18.75%;\n     left: 18.75%;\n     background: rgba(255, 255, 255, 0.2);\n    }\n\nUn dégradé bleu forme la partie colorée de l'iris, puis on crée la pupille et un reflet avec des pseudo-éléments. J'ai également ajouté la propriété `animation` à l'élément `.iris`. Pour attacher une animation à un élément, on utilise la syntaxe suivante\u0026nbsp;:\n\n    animation: animation-name 5s ease-out infinite;\n\nDans cet exemple, on appliquerait une animation intitulée \u0026ldquo;animation-name\u0026rdquo;, qui aurait une durée de 5 secondes, tournerait en boucle indéfiniment, et aurait une valeur d'introduction/sortie (_easing_) de `ease-out`. _Ease-out_ est le fait pour l'animation de ralentir lorsqu'elle arrive à la fin, ce qui crée un effet plus naturel. _NdT : Pour plus d'infos sur les animations et sur l'utilisation du timing, vous pouvez consulter [cet article](http://www.alsacreations.com/tuto/lire/1299-timing-des-animations-et-des-transitions-en-css3.html) d'alsacréations ou [celui-ci](http://letrainde13h37.fr/17/transitions-et-animations-css/) de Vincent de Oliveira_.\n\nTant que nous n'avons pas créé notre animation, notre oeil est bien statique.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_nwsqa\" src=\"//codepen.io/donovanh/embed/nwsqa?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=nwsqa\u0026amp;user=donovanh\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/donovanh/pen/nwsqa/\"\u003e\n  Spheres tutorial: 5 Eyeball\u003c/a\u003e de Donovan hutchinson dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nCréons quelques `keyframes` pour décrire la façon dont notre globe oculaire devrait se mouvoir.\n\n    //CSS\n\n    @keyframes move-eye-skew {\n     0% {\n     transform: none;\n     }\n     20% {\n     transform: translateX(-68px) translateY(30px) skewX(15deg) skewY(-10deg) scale(0.95);\n     }\n     25%, 44% {\n     transform: none;\n     }\n     50%, 60% {\n     transform: translateX(68px) translateY(-40px) skewX(5deg) skewY(2deg) scaleX(0.95);\n     }\n     66%, 100% {\n     transform: none;\n     }\n    }\n\nLes keyframes peuvent paraître un peu compliquées au début. Elles consistent à décrire l'état d'un élément au cours d'une série d'étapes. Chaque étape est exprimée par un pourcentage. Dans notre exemple, l'iris commencera sans aucune transformation appliquée. On est à 0%. Puis, à 20% de la durée de l'animation (la nôtre fait 5 secondes, donc la première étape se situe à 1 seconde), une transformation est appliquée : l'objet est déplacé et étiré vers la gauche. Comme il s'agit d'une animation, et non d'une suite d'états fixes, le navigateur calcule ce qui se passe entre ces deux points (0% et 20%) et crée une transition en douceur.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_iBolr\" src=\"//codepen.io/donovanh/embed/iBolr?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=iBolr\u0026amp;user=donovanh\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/donovanh/pen/iBolr/\"\u003e\n  Spheres tutorial: 5b Eyeball (animated)\u003c/a\u003e de Donovan hutchinson dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nIl en va de même avec chaque `keyframes`, et l'animation tout entière dure 5 secondes.\n\n## Bulles\n\nL'association des ombrages et des animations peut produire des effets intéressants. C'est l'été, on fait des bulles?\n\nPour fabriquer des bulles, on fait comme précédemment mais avec plus de transparence pour la couleur principale et deux pseudo-éléments pour ajouter la brillance.\n\nJ'ai créé un CodePen pour que vous voyiez le CSS\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_pvrzK\" src=\"//codepen.io/donovanh/embed/pvrzK?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=pvrzK\u0026amp;user=donovanh\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/donovanh/pen/pvrzK/\"\u003e\n  Spheres tutorial: 6 Bubble (animated)\u003c/a\u003e de Donovan hutchinson dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cbr\u003e\n\nL'animation utilise \u003cspan itemprop=\"about\"\u003ela valeur `scale` de `transform`\u003c/span\u003e pour faire se dandiner notre petite bulle.\n\n    @keyframes bubble-anim {\n     0% {\n     transform: scale(1);\n     }\n     20% {\n     transform: scaleY(0.95) scaleX(1.05);\n     }\n     48% {\n     transform: scaleY(1.1) scaleX(0.9);\n     }\n     68% {\n     transform: scaleY(0.98) scaleX(1.02);\n     }\n     80% {\n     transform: scaleY(1.02) scaleX(0.98);\n     }\n     97%, 100% {\n     transform: scale(1);\n     }\n    }\n\nL'animation s'applique à la bulle tout entière et à ses pseudo-éléments.\n\n## Utiliser des images\n\nJusqu'à présent, nos sphères ont été créées sans recourir à des images. L'utilisation d'une image de background peut ajouter des détails, tout en permettant l'application des effets que nous avons vus grâce aux pseudo-éléments. Par exemple, nous pouvons prendre une balle de tennis _flat_ et créer une illusion de profondeur avec des dégradés.\n\nLa texture _flat_ :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flat2.png\" width='300' height='300' alt=\"\"/\u003e\u003c/figure\u003e\n\nLa sphère après ombrages :\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vsEIK\" src=\"//codepen.io/donovanh/embed/vsEIK?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=vsEIK\u0026amp;user=donovanh\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/donovanh/pen/vsEIK/\"\u003e\n  Spheres tutorial: 7 Tennis ball\u003c/a\u003e de Donovan hutchinson dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cbr\u003e\n\n## Le tour du monde\n\nOn peut aussi appliquer une animation à la position des images de background. Nous pouvons ainsi créer une mappemonde.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/mappemonde.png\" alt=\"image plate du monde\" width=\"900\" height=\"159\" /\u003e\u003c/figure\u003e\n\nCette image plate a été légèrement étirée en haut et en bas pour être utilisée comme image de background.\n\nAvec un peu d'ombrages et d'animations, nous pouvons créer un globe qui a des allures de 3D.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_GBIiv\" src=\"//codepen.io/donovanh/embed/GBIiv?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=GBIiv\u0026amp;user=donovanh\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/donovanh/pen/GBIiv/\"\u003e\n  Globe\u003c/a\u003e de Donovan hutchinson dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n_NdT : Du même auteur, vous pouvez consulter_ [Portal CSS](/articles/portal-css/) _sur La Cascade, une intro ludique aux transformations 3D et aux animations CSS_\u003c/span\u003e.\n"},{"slug":"les-filtres-css","title":"Les filtres CSS","author":{"name":"Paula Borowska","lastname":"Borowska"},"original":{"date":"16 juin 2014","site":"Web Design Views","siteUrl":"https://webdesignviews.com/","postUrl":"https://webdesignviews.com/what-are-css-filters-and-how-do-they-work/","copyright":"2014"},"dateCascade":"26 juillet 2014","dateMachine":"2O140726","tags":["css"],"about":["Filtres CSS"],"excerpt":"En été, il n'y a pas que les filtres solaires, c'est aussi le moment idéal pour se pencher sur une propriété qui peut être utile... par Paula Borowska.","featured":false,"featuredImage":"/images/filter1-compressor.jpeg","order":null,"content":"\n## Qu'est-ce que les filtres CSS\u0026nbsp;?\n\nHonnêtement, il y a des propriétés CSS stupéfiantes, et CSS filters en fait partie. Les filtres ont une capacité étonnante de transformer des images et des pages web tout entières. C'est incroyablement fort quand on y pense, alors même que certains navigateurs ne peuvent toujours pas traiter les `border-radius` ou les `@font-face` correctement.\n\n## Comment utiliser les filtres CSS\u0026nbsp;?\n\nL'utilisation des filtres CSS\u003c/span\u003e est extrêmement simple, toutefois il faut noter que la syntaxe n'est pas tout à fait habituelle. De nombreuses valeurs prennent des paramètres, et pour de bonnes raisons. Prenons l'exemple d'une échelle de gris (grayscale) et de sa syntaxe.\n\n    img {\n    \t-webkit-filter: grayscale(50%);\n    }\n\nTout d'abord, il y a un préfixe webkit. Puis la valeur est définie avec des parenthèses et un paramètre. À peu près tous les filtres CSS ont des paramètres, qui définissent la quantité de changement à appliquer. Dans l'exemple qui précède, l'image sera seulement transformée pour 50% en noir et blanc. Si l'on avait 100%, la transformation serait totale (voir l'exemple `grayscale` plus bas). Une bonne façon de comprendre la logique est de se dire \u0026ldquo;quel niveau de gris est-ce que je veux atteindre\u0026rdquo;\u0026nbsp;? En gros, quelle intensité du filtre est-ce que je veux appliquer.\n\n## Les différents types de filtres\n\nIl existe de nombreux filtres, certains plus habituels que d'autres, certains plus utiles que d'autres aussi. Mais dans cet article, nous allons essayer d'en passer en revue le plus possible, pour vous donner une bonne idée des possibilités des filtres CSS. Notre image de démo aujourd'hui est cette magnifique photo de voiture que j'ai prise il y a peu...\n\n\u003cfigure \u003e\u003cimg itemprop=\"image\" src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Grayscale\n\nJe viens de mentionner grayscale. Il transforme une image en noir et blanc, selon un pourcentage qui va de 0% à 100% où 0% correspond à aucun filtre et 100% à un filtre total - il ne reste plus que du noir, du gris et du blanc.\n\n    img { -webkit-filter: grayscale(100%); }\n    img { -webkit-filter: grayscale(50%); }\n\n\u003cfigure style=\"filter:grayscale(100%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:grayscale(50%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Sepia\n\nJe ne sais pas si on applique encore beaucoup ce type d'effet, mais si vous le voulez, il est là. Son utilisation est identique à celle de grayscale.\n\n    img { -webkit-filter: sepia(100%); }\n    img { -webkit-filter: sepia(50%); }\n\n\u003cfigure style=\"filter:sepia(100%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:sepia(50%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Blur\n\nLe filtre `blur` (floutage) fonctionne d'une manière assez similaire au filtre Gaussien de Photoshop. Le nombre de pixels définit l'intensité du floutage, plus le nombre de pixels est grand, plus l'image sera floue.\n\n    img { -webkit-filter: blur(5px); }\n    img { -webkit-filter: blur(50px); }\n\n\u003cfigure style=\"filter:blur(5px);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:blur(50px);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Saturation\n\nSi vous connaissez [la théorie des couleurs](https://99designs.fr/blog/conseils-design/la-theorie-des-couleurs/), vous savez que la saturation définit l'intensité de la couleur. Contrairement aux filtres précédents, celui-ci n'a pas de limite, vous pouvez spécifier ce que vous voulez, par exemple 200% ou 2000%, plus le pourcentage sera élevé, plus la couleur sera vive. Entre 0% et 100%, la couleur devient plus terne, et à 100% l'image est inchangée.\n\n    img { -webkit-filter: saturate(20%); }\n    img { -webkit-filter: saturate(200%); }\n    img { -webkit-filter: saturate(2000%); }\n\n\u003cfigure style=\"filter:saturate(20%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:saturate(200%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:saturate(2000%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Contrast\n\nCe filtre fonctionne un peu comme la saturation, il n'y a pas de limite au pourcentage appliqué. Entre 0% et 100% vous choisissez un contraste faible, vous donne l'image inchangée et au-delà vous passez à un contraste fort.\n\n    img { -webkit-filter: contrast(50%); }\n    img { -webkit-filter: contrast(500%); }\n\n\u003cfigure style=\"filter:contrast(50%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:contrast(500%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Brightness\n\nCe filtre est le dernier de cette série de trois. Il fonctionne comme `saturation` et `contrast`, entre 0% et 100% l'image est moins lumineuse, au-delà elle l'est plus, et la valeur par défaut est 100%.\n\n    img { -webkit-filter: brightness(50%); }\n    img { -webkit-filter: brightness(500%); }\n\n\u003cfigure style=\"filter:brightness(50%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:brightness(500%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Hue-rotation\n\nCelui-ci est intéressant, il prend la roue des couleurs (voir l'article [utiliser HSL](/articles/utiliser-hsl-pour-vos-couleurs)) et la fait tourner du nombre de degrés que vous indiquez, en modifiant chacune des couleurs en fonction. Les valeurs vont de 0° à 360°.\n\n    img { -webkit-filter: hue-rotate(45deg); }\n    img { -webkit-filter: hue-rotate(120deg); }\n    img { -webkit-filter: hue-rotate(240deg); }\n\n\u003cfigure style=\"filter:hue-rotate(45deg);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:hue-rotate(120deg);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n\u003cfigure style=\"filter:hue-rotate(240deg);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Invert\n\nComme son nom le suggère, ce filtre inverse les couleurs de l'image. Il fonctionne comme grayscale avec des valeurs comprises entre 0% et 100%. Il faut donc juste indiquer le niveau de l'effet que vous souhaitez appliquer à votre image.\n\n    img { -webkit-filter: -webkit-filter: invert(100%); }\n\n\u003cfigure style=\"filter:invert(100%);\"\u003e\u003cimg src=\"/images/filter1-compressor.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n## Les limites des filtres CSS\n\n👉🏾 _NdT : Pour vérifier la compatibilité, il suffit comme toujours de consulter [Can I Use](http://caniuse.com/css-filters). À la date de traduction, IE est totalement incompatible, Firefox est partiellement compatible, mais la compatibilité de Chrome, Safari et Opera, y compris pour les versions mobiles, est excellente. Aujourd'hui elle est excellente chez tous_.\n\n### Vitesse de chargement\n\nDeuxième point auquel il faut être attentif, le temps de chargement de votre page peut être affecté. Les filtres CSS peuvent être appliqués à de nombreux éléments, pas seulement aux images. Plus vous en ajoutez, plus votre site risque d'être ralenti - c'est compréhensible dans la mesure où la manipulation des éléments est plus complexe que les opérations habituelles de CSS.\n\n### Utilité\n\nDernier point, et au vu de ce qui précède, on peut se poser la question de savoir s'il ne vaut pas mieux ouvrir Photoshop et faire le travail en amont. Cela dit, la possibilité d'éditer les images dans le navigateur est géniale alors pourquoi pas\u0026nbsp;?\n\n👉🏾 _NdT : Oui les filtres sont utiles : ils s'appliquent à toutes sortes d'images, y compris celles produites en CSS, où Photoshop ne vous sera d'aucun secours. Voyez l'article de Donovan Hutchinson sur la [création de sphères en CSS](https://la-cascade.io/creer-des-spheres-en-css/) pour une utilisation (simple) du filtre CSS `blur`._\n\n### Plus vous en savez\n\nMaintenant que vous savez de quoi il s'agit, j'espère que vous appréciez leurs capacités étonnantes. C'est un grand progrès en termes de ce que HTML, CSS et nos navigateurs peuvent faire pour nous.\n"},{"slug":"les-degrades-svg","title":"Les dégradés SVG","author":{"name":"Joni Trythall","lastname":"Trythall"},"original":{"date":"3 juin 2014","site":"Sitepoint","siteUrl":"https://www.sitepoint.com/","postUrl":"https://www.sitepoint.com/getting-started-svg-gradients/","copyright":"2014"},"dateCascade":"6 juin 2014","dateMachine":"2O140606","tags":["svg"],"about":["Dégradés SVG"],"excerpt":"Les dégradés SVG permettent de remplir quasiment sans effort une forme complexe, et par rapport aux dégradés CSS ils présentent l'avantage d'être présents dans le DOM","featured":false,"featuredImage":"/images/simplegradient.webp","order":null,"content":"\nPourquoi utiliser les dégradés SVG plutôt que les dégradés CSS, c'est une longue discussion, mais dans cet article nous nous allons simplement nous concentrer sur l'utilisation pratique des dégradés SVG, si vous choisissez cette solution. (👉🏾 _NdT\u0026nbsp;: si vous voulez plus d'information sur les dégradés CSS, vous pouvez consulter [cet article](/articles/les-degrades-css/).)_.\n\nLes dégradés [SVG](/tags/svg/) permettent de remplir quasiment sans effort une forme complexe, et par rapport aux dégradés CSS ils présentent l'avantage d'être présents dans le DOM. Cette approche est pratique en particulier quand un dégradé est une partie permanente de votre design. Nos styles CSS peuvent évoluer au fil du temps, mais le coeur de notre création artistique restera souvent inchangé, et du coup il est préférable que cette création réside dans le SVG lui-même, dans le DOM.\n\nDe plus, si vous décidez plus tard d'animer votre dégradé, vous pouvez ajouter cette animation directement dans l'élément SVG.\n\n## Les bases\n\nSVG propose deux types de dégradés, linéaire et radial. Les détails [sont définis](https://developer.mozilla.org/fr/docs/Web/SVG/Element/defs) à l'intérieur d'un élément `\u003cdefs\u003e`. L'élément `\u003cdefs\u003e` contient des instructions qui peuvent être réutilisées tout au long du document, mais qui ne donneront pas lieu à affichage tant qu'il n'est pas appelé. Le fait de définir les éléments du dégradé à l'intérieur d'un élément `\u003cdefs\u003e` nous permet de mieux comprendre le contenu du SVG et offre une meilleure accessibilité.\n\nSVG utilise la notion générale de _paint server_ (\u0026ldquo;serveur de peinture\u0026rdquo;) qui est une méthode permettant au remplissage (_fill_) et au traçé (_stroke_) d'un objet d'être défini par une ressource disponible ailleurs. Les dégradés sont une des nombreuses options _paint_ que l'on peut appeler pour remplir le background et les bordures de formes et de textes.\n\nPour illustrer cette notion, voici à quoi ressemblera la structure d'un dégradé linéaire simple\u0026nbsp;:\n\n    \u003csvg\u003e\n        \u003cdefs\u003e\n            \u003clinearGradient id=\"gradientName\"\u003e\n                \u003cstop offset=\"\u003c%\u003e\" stop-color=\"\u003ccolor\u003e\" /\u003e\n                \u003cstop offset=\"\u003c%\u003e\" stop-color=\"\u003ccolor\u003e\" /\u003e\n            \u003c/linearGradient\u003e\n        \u003c/defs\u003e\n    \u003c/svg\u003e\n\nUne fois que vous avez donné un ID à votre dégradé (dans notre exemple\u0026nbsp;: `gradientName`\u0026nbsp;), il peut être appelé à travers les attributs _fill_ et/ou _stroke_ dans le SVG qui l'utilisera, par exemple en écrivant `fill= \"url(#gradientName)\"`.\n\n## Les Dégradés linéaires\n\nLes dégradés linéaires passent d'une couleur à une autre de façon régulière le long d'une ligne. Le dégradé est défini par un axe et éventuellement par un angle.\n\nChaque _stop_ défini sur cette ligne représentera la couleur à l'intérieur de l'élément `\u003clinearGradient\u003e`. À chaque _stop_ la couleur est à 100% de saturation et l'espace entre deux stops est le lieu où s'effectue la transition d'une couleur à la suivante. Il est possible d'utiliser des couleurs supplémentaires, comme nous le verrons tout à l'heure.\n\nRegardons à quoi ressemble le code SVG pour un dégradé linéaire simple, comportant deux stops couleur, puis nous passerons en revue les options d'attributs disponibles.\n\n\u003cfigure role='group'\u003e\n\u003cimg itemprop=\"image\" src=\"/images/simplegradient.webp\" alt=\"un dégradé simple, de bleu à rouge\" width='410' height='121'/\u003e\u003c/figure\u003e\n\n    \u003csvg\u003e\n        \u003cdefs\u003e\n            \u003clinearGradient id=\"Gradient-1\"\n                 x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"0\"\u003e\n                \u003cstop offset=\"0%\" stop-color=\"lightblue\" /\u003e\n                \u003cstop offset=\"100%\" stop-color=\"#ef5b2b\" /\u003e\n            \u003c/linearGradient\u003e\n        \u003c/defs\u003e\n        \u003crect x=\"450\" y=\"10\" width=\"200\" height=\"100\" fill= \"url(#Gradient-1)\" stroke=\"#333333\" stroke-width=\"4px\" /\u003e\n    \u003c/svg\u003e\n\n### Attributs des dégradés linéaires\n\nComme nous l'avons vu, les détails du dégradé sont définis à l'intérieur d'un élément `\u003clinearGradient\u003e`. À l'intérieur de celui-ci, nous pouvons utiliser tout un tas d'attributs pour le personnaliser.\n\n#### ID\n\nLes dégradés doivent avoir un ID unique de façon à pouvoir être appliqués à nos formes ou textes SVG.\n\n#### x1, y1, x2, y2\n\nLes valeurs d'attributs x1, y1, x2 et y2 représentent les points de départ et d'arrivée qui définissent les stops (les changements de couleurs). Ces pourcentages s'appliquent sur l'axe choisi. S'ils ne sont pas spécifiés, toutes les valeurs seront égales à 0 par défaut, sauf x2 qui prendra la valeur 100% par défaut.\n\nCe sont aussi ces valeurs qui définiront si notre axe est horizontal ou vertical, ou quelque part entre les deux. Par exemple une valeur y de 100% et une valeur x de 0 produiront un axe horizontal, et l'inverse donnera un axe vertical. Si les deux ont une valeur de 100% (ou n'importe quelle valeur différente de 0), l'axe sera oblique.\n\n#### gradientUnits\n\nL'attribut gradientUnits définit le système de coordonnées pour les valeurs x1, x2, y1 et y2. Les deux options possibles sont \"userSpaceOnUse\" ou \"objectBoundingBox\". `userSpaceOnUse` définit le système de coordonnées en unités absolues, alors que `objectBoundingBox` établit ce système à l'intérieur des limites de la forme SVG elle-même. Par défaut, la valeur de l'attribut est `objectBoundingBox`.\n\n#### spreadMethod\n\nLa valeur de l'attribut `spreadMethod` spécifie la façon dont le dégradé va se répandre à travers la forme, s'il commence ou se termine à l'intérieur des limites du SVG. En gros, si le dégradé est défini d'une façon telle qu'il ne remplit pas toute la forme, qu'advient-il de l'espace vide\u0026nbsp;? Il y a trois options ici\u0026nbsp;: `pad`, `repeat` ou `reflect`.\n\nUne valeur de `pad` indique que la première et la dernière couleur du dégradé doivent couvrir le reste de la forme (voir l'exemple ci-dessous). Une valeur `repeat` indique que le dégradé doit répéter le motif depuis le début jusqu'à couvrir toute la surface. L'utilisation de `reflect` aura pour résultat de faire se refléter de manière continue le motif de dégradé, du début à la fin et de la fin au début, jusqu'à couvrir toute la forme (voir l'exemple ci-dessous).\n\nSans autre indication, la valeur par défaut est `pad`.\n\n\u003cfigure role=\"group\"\u003e\u003cimg itemprop=\"image\" src=\"/images/svggradient2-compressor.png\" width=\"600\" height=\"190\" alt=\"les trois effets spreadmethod\"/\u003e\u003c/figure\u003e\n\nL'image ci-dessus montre comment les différentes valeurs de `spreadMethod` impactent visuellement _le même dégradé_. Il est important de se rappeler que ces valeurs d'attribut n'auraient aucun effet sur un dégradé remplissant déjà l'intégralité de la forme.\n\nLes points de départ et d'arrivée du dégradé ci-dessus sont (voir le code complet plus bas)\u0026nbsp;:\n\n    x1=\"20%\" y1=\"30%\" x2=\"40%\" y2=\"80%\"\n\n#### gradientTransform\n\nL'attribut `gradientTransform` est optionnel, il nous permet de transformer plus encore le dégradé avant de l'appliquer, comme avec CSS Transforms.\n\n#### xlink:href\n\nAvec cet attribut, vous pouvez appeler l'ID d'un autre dégradé, duquel le dégradé en cours devrait \"hériter\". Dans les images ci-dessus, il y a trois rectangles. Ces rectangles appellent tous les mêmes stops couleurs mais ils appellent également des valeurs `spreadMethod` qui résident dans un ID spécial à l'intérieur d'élément `\u003clinearGradient\u003e` additionnels.\n\nVoici le code pour ces éléments\u0026nbsp;:\n\n    \u003cdefs\u003e\n        \u003clinearGradient id=\"Gradient-1\"\n        x1=\"20%\" y1=\"30%\" x2=\"40%\" y2=\"80%\"\u003e\n            \u003cstop offset=\"0%\" stop-color= \"#1cb98f\" /\u003e\n            \u003cstop offset=\"50%\" stop-color= \"#f99450\" /\u003e\n            \u003cstop offset=\"100%\" stop-color= \"#876fc3\" /\u003e\n        \u003c/linearGradient\u003e\n\n        \u003clinearGradient id=\"pad\"\n                        xlink:href=\"#Gradient-1\"\n                        spreadMethod=\"pad\" /\u003e\n\n        \u003clinearGradient id=\"repeat\"\n                        xlink:href=\"#Gradient-1\"\n                        spreadMethod=\"repeat\" /\u003e\n\n        \u003clinearGradient id=\"reflect\"\n                        xlink:href=\"#Gradient-1\"\n                        spreadMethod=\"reflect\" /\u003e\n    \u003c/defs\u003e\n\nChaque rectangle appelle un ID spécifique décrivant une `spreadMethod` différente à chaque fois, mais ils héritent tous des stops couleur définis dans \"#Gradient-1\".\n\nVoici comment ces dégradés sont appelés à l'intérieur de trois rectangles\u0026nbsp;:\n\n    \u003crect x=\"10\" y=\"10\"\n          width=\"200\" height=\"100\"\n          fill= \"url(#pad)\"\n          stroke=\"#333333\"\n          stroke-width=\"4px\" /\u003e\n\n    \u003crect x=\"230\" y=\"10\"\n          width=\"200\" height=\"100\"\n          fill= \"url(#repeat)\"\n          stroke=\"#333333\"\n          stroke-width=\"4px\" /\u003e\n\n    \u003crect x=\"450\" y=\"10\"\n          width=\"200\" height=\"100\"\n          fill= \"url(#reflect)\"\n          stroke=\"#333333\"\n          stroke-width=\"4px\" /\u003e\n\n### Les stops\n\nMaintenant que nous comprenons les bases des attributs de `\u003clinearGradient\u003e`, nous pouvons passer aux attributs de `\u003cstop\u003e` que nous avons aperçus dans l'exemple de code précédent.\n\nComme on l'a vu, les stops couleur sont définis à l'intérieur de l'élément `\u003clinearGradient\u003e`. Quelle couleur voulons-nous voir à un certain endroit\u0026nbsp;? Nous disposons de trois attributs ici\u0026nbsp;: _offset_, _stop-color_ et _stop-opacity_. L'_offset_ indique à quel endroit fixer le stop couleur. Le _stop-color_ définit la couleur. Vous pouvez également inclure une valeur _stop-opacity_ qui appliquerait une opacité sur la couleur située au point stop.\n\n    \u003cdefs\u003e\n        \u003clinearGradient id=\"Gradient-2\"\u003e\n            \u003cstop offset=\"0%\"\n                  stop-color=\"purple\"\n                  stop-opacity=\".3\" /\u003e\n            \u003cstop offset=\"100%\"\n                  stop-color=\"blue\"\n                  stop-opacity=\".5\" /\u003e\n        \u003c/linearGradient\u003e\n    \u003c/defs\u003e\n\nLe dégradé est maintenant complété et peut être appelé sur les attributs _fill_ ou _stroke_ dans l'élément SVG, à partir de son ID, par exemple en faisant `fill= \"url(#Gradient-2)\"`.\n\n### Autres exemples de dégradés linéaires\n\nVoici quelques démos qui mettent en action toutes ces notions.\n\nPour la démo sur le texte \u0026ldquo;Apple\u0026rdquo; il y a un élément `\u003ctext\u003e` à l'intérieur de notre élément `\u003csvg\u003e`. Les définitions de dégradés sont situées dans un élément `\u003cdefs\u003e` qui se trouve aussi à l'intérieur de `\u003csvg\u003e` (cliquez sur HTML, CSS et Result pour voir les détails).\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_nCeiJ\" src=\"//codepen.io/SitePoint/embed/nCeiJ?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=nCeiJ\u0026amp;user=SitePoint\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/SitePoint/pen/nCeiJ/\"\u003e\n  SVG Linear Gradient Example\u003c/a\u003e by SitePoint \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nPour avoir une autre perspective, regardons ces quelques icônes dans la démo qui suit. Chaque fruit SVG a sa propre définition de `\u003clinearGradient\u003e`. Les remplissages et les traits peuvent être constitués des mêmes dégradés ou de dégradés différents, ou peuvent être une couleur solide...\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_Kmhpd\" src=\"//codepen.io/SitePoint/embed/Kmhpd?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=Kmhpd\u0026amp;user=SitePoint\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/SitePoint/pen/Kmhpd/\"\u003e\n  SVG Linear Gradient Icons\u003c/a\u003e by SitePoint \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Les dégradés radiaux\n\nLes dégradés radiaux sont à la fois très similaires et très différents des dégradés linéaires. Le dégradé, au lieu de se propager sur une ligne suit une expansion concentrique. Les stops commencent au centre du cercle et suivent le mouvement d'expansion.\n\n### Attributs des dégradés radiaux\n\nLa plupart des attributs sont les mêmes que ceux que nous avons vus, sauf le système de coordonnées qui est différent.\n\n#### cx, cy, r\n\nLes attributs cx, cy, r définissent le plus grand cercle (c'est à dire le plus externe) pour le dégradé radial. Le dégradé sera dessiné de telle façon que la limite de dégradé de 100% corresponde au périmètre de ce plus grand cercle. Si non spécifiées, les valeurs sont par défaut 50%. cx et cy sont les coordonnées du centre, r représente le rayon, en d'autres termes la longueur du dégradé. Une valeur r égale à 0 donnera une couleur unique jusqu'au dernier stop couleur.\n\n#### fx, fy\n\nCes attributs représentent les coordonnées du foyer du dégradé, le cercle situé le plus à l'intérieur. Le dégradé sera dessiné de telle manière que la limite de dégradé de 0% corresponde au point (fx,fy).\nSi l'attribut fx n'est pas spécifié, la valeur de fx coïncidera avec celle de cx.\n\nLa démo ci-dessous montre un dégradé radial à l'intérieur d'un texte SVG. Ce premier exemple a un foyer de `fx= \"45%\" fy= \"45%\"`.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_ECbAa\" src=\"//codepen.io/SitePoint/embed/ECbAa?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=ECbAa\u0026amp;user=SitePoint\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/SitePoint/pen/ECbAa/\"\u003e\n  SVG Radial Gradient example\u003c/a\u003e de SitePoint dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nL'exemple suivant a un foyer de `fx=\"90%\" fy=\"70%\"`\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_yeLnJ\" src=\"//codepen.io/SitePoint/embed/yeLnJ?height=500\u0026amp;theme-id=light\u0026amp;slug-hash=yeLnJ\u0026amp;user=SitePoint\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"500\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/SitePoint/pen/yeLnJ/\"\u003e\n  SVG Radial Gradient with different focal point\u003c/a\u003e de SitePoint dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLe foyer (un bleu-vert) s'est déplacé vers la droite. Pour rééquilibrer la répartition des stops, nous pourrions changer les valeurs de cx et cy.\n\n### Exemple de dégradé radial\n\nVoici à nouveau les icônes repésentant des fruits, cette fois-ci avec des dégradés radiaux.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_KDdlo\" src=\"//codepen.io/SitePoint/embed/KDdlo?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=KDdlo\u0026amp;user=SitePoint\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/SitePoint/pen/KDdlo/\"\u003e\n  Icons with Various SVG Radial Gradients\u003c/a\u003e de SitePoint dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## Compatibilité navigateurs\n\nLa compatibilité navigateurs de SVG est excellente, aussi bien pour les ordinateurs de bureau que pour les appareils mobiles.\n\nToutefois, Firefox et Safari semblent avoir des problèmes avec `spreadMethod` qui n'est pas réglée par défaut sur la valeur `pad`. Pour éviter cela, il suffit de faire en sorte que votre dégradé remplisse entièrement la forme, sauf évidemment si votre intention est d'avoir un remplissage partiel.\n\n---\n\n\u003ch3\u003eRessources complémentaires en anglais\u003c/h3\u003e\n\n- [Gradients and patterns SVG 1.1](http://www.w3.org/TR/SVG/pservers.html), 2e édition de la spécification.\n- [linearGradient](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient), par Mozilla\n- [radialGradient](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient), par Mozilla\n\n\u003ch3\u003eRessources complémentaires en français\u003c/h3\u003e\n\n- [Les dégradés et les motifs SVG 1.0](http://www.yoyodesign.org/doc/w3c/svg1/pservers.html), par yoyodesign, la spécification complète (et assez claire et concise pour une fois)\n- [Les dégradés de couleur](http://svground.fr/degrades.php), par SVGround, la bible du SVG\n"},{"slug":"subtilites-de-css3-transitions","title":"Subtilités de CSS3 Transitions","author":{"name":"Louis Lazaris","lastname":"Lazaris"},"original":{"date":"3 août 2011","site":"Impressive Webs","siteUrl":"https://www.impressivewebs.com/","postUrl":"https://www.impressivewebs.com/css3-transitions-without-hover/","copyright":"2011"},"dateCascade":"30 mai 2014","dateMachine":"2O140530","tags":["animation"],"about":[],"excerpt":"Louis Lazaris montre quelques utilisations inattendues des transitions CSS3 et un piège à éviter. Animez vos pages en pur CSS.","featured":false,"featuredImage":"/images/authors/louis-lazaris.jpeg","order":null,"content":"\n_Cet article est la réunion de deux articles de Louis Lazaris sur les transitions CSS3_.\n\nLa façon la plus courante d'utiliser les transitions CSS3 est en association avec la pseudo-classe `:hover`.\n\nVoici une transition typique, en pur CSS, qui modifie la couleur d'un lien lorsqu'on passe la souris\u0026nbsp;:\n\n    a, a:link, a:visited {\n        color: lightblue;\n        transition: color .4s linear;\n    }\n\n    a:hover {\n        color: white;\n    }\n\nOn anime la propriété `color` quand on passe la souris sur un lien, c'est très simple et vous l'avez sans doute déjà vu ou utilisé. Mais l'utilisation des transitions n'est pas limitée à `:hover`.\n\nVous pouvez animer les propriétés CSS grâce à des transitions qui utilisent d'autres techniques CSS, dont voici quelques-unes.\n\n## Transition avec :active\n\nLa pseudo-classe `:active` cible [tout élément qui est en cours d'activation](http://reference.sitepoint.com/css/pseudoclass-active). La façon la plus simple d'activer un élément est de cliquer dessus, c'est le _mouse down_.\n\nLe CSS qui suit et la démo qui l'accompagne montrent l'utilisation de `:active` avec une transition CSS3 qui imitent un événement `mousedown`\u0026nbsp;:\n\n    .box {\n        width: 300px;\n        height: 300px;\n        background: #222;\n        transition: width 2s ease, height 2s ease;\n    }\n\n    .box:active {\n        width: 500px;\n        height: 500px;\n    }\n\nAvec ce code, la largeur et la hauteur de la boîte sont animées lorsque vous maintenez le bouton de votre souris enfoncé. Lorsque vous relâchez le bouton, la boîte s'anime pour revenir à ses dimensions d'origine. Voici [la démo](http://www.impressivewebs.com/demo-files/transition-active/).\n\n## Transition avec :focus\n\nVous pouvez utiliser la pseudo-classe `:focus` pour réaliser une animation similaire. Cette fois-ci, nous allons utiliser un formulaire dans lequel nous animerons la largeur de tout élément qui reçoit le focus\u0026nbsp;:\n\n    input, textarea {\n        width: 280px;\n        transition: width 1s ease;\n    }\n\n    input:focus, textarea:focus {\n        width: 340px;\n    }\n\nEt voici [la démo](http://www.impressivewebs.com/demo-files/transition-focus/).\n\n## Transition avec :checked\n\nVous pouvez animer des checkboxes et des boutons radio lorsqu'ils sont \u0026ldquo;checkés\u0026rdquo; - même si l'impossibilité de changer réellement leur style impose des limitations.\n\nNous changerons simplement la largeur, comme si nous appliquions une indentation à la checkbox sélectionnée\u0026nbsp;:\n\n    input[type=\"checkbox\"]:checked {\n        height: 20px;\n        transition: width 1s ease;\n    }\n\n    input[type=\"checkbox\"]:checked {\n        width: 30px;\n    }\n\nEt voici [la démo](http://www.impressivewebs.com/demo-files/transition-checked/).\n\n## Transition avec :disabled\n\nContinuons avec nos formulaires, cette fois nous allons mélanger des transitions CSS3 et un peu de jQuery pour animer la couleur de background d'éléments du formulaire à chaque fois qu'ils sont désactivés via l'attribut `disabled`\u0026nbsp;:\n\n    input[type=\"text\"], textarea {\n        background: #e2e2e2;\n        transition: background 1s ease;\n    }\n\n    input:disabled, textarea:disabled {\n        background: #666666;\n    }\n\nEt le jQuery, vite fait, qui ajoute/supprime l'attribut `disabled`\u0026nbsp;:\n\n    $(function() {\n        $('input[type=\"radio\"]').click(function() {\n            if ($(':checked').val() === \"other\") {\n                $('input[type=\"text\"]').removeAttr(\"disabled\");\n            } else {\n                $('input[type=\"text\"]').attr(\"disabled\", \"disabled\");\n            }\n        });\n    });\n\nLorsque le dernier bouton radio est sélectionné (celui qui a une valeur de `other`), l'attribut de la boîte de texte est supprimé (`removeAttr`). Si une autre option est sélectionnée, l'attribut `disabled` est ajouté à nouveau au dernier bouton.\n\nLa pseudo-classe `:disabled` dépend de l'existence de cet attribut, donc l'animation ne se produira que lorsque l'attribut est ajouté ou supprimé. Voici [la démo](http://www.impressivewebs.com/demo-files/transition-disabled/).\n\n## Transitions avec les media queries\n\nCette dernière animation est sans doute la moins susceptible d'être utilisée en pratique, parce que les seuls à modifier la taille de la fenêtre pour voir ce qui se passe sont les développeurs web.\n\nCela dit, c'est une autre façon d'utiliser les animations CSS3. La page d'accueil de [Modernizr](http://modernizr.com) s'en sert.\n\nVoici le code\u0026nbsp;:\n\n    .box {\n        width: 440px;\n        height: 440px;\n        background: #222;\n        margin: 0 auto;\n        transition: width 2s ease, height 2s ease;\n    }\n\n    @media only screen and (max-width : 960px) {\n        .box {\n            width: 300px;\n            height: 300px;\n        }\n    }\n\nDans cet exemple nous animons deux propriétés différentes simultanément, en séparant les deux par une virgule. Le media query diminue la taille de la boîte lorsque la largeur de l'écran est inférieure à 961px. Vous pouvez modifier la largeur de votre écran pour voir [la démo en action](http://www.impressivewebs.com/demo-files/transition-media-queries/).\n\n## Un piège à éviter\n\nComme on vient de le voir, les transitions peuvent être déclenchées de multiples façons, et même via JavaScript. La transition en elle-même ne dépend d'aucun événement. Bien que ce soit l'événement qui déclenche la transition, elle en est totalement indépendante (comme il se doit dans une bonne séparation présentation / comportement).\n\nC'est pourquoi vous remarquerez un comportement inattendu si vous placez la transition dans la partie de votre CSS qui déclenche l'événement.\n\nEn voici une illustration avec cette transition simple qui utilise la pseudo-classe `:hover`\u0026nbsp;:\n\n    a:link, a:visited {\n        font-size: 40px;\n        transition: font-size 1s ease;\n    }\n\n    a:hover {\n        font-size: 100px;\n    }\n\nVous pouvez voir l'effet dans [cette démo](http://jsbin.com/aweruj/334/edit). Très simple, non\u0026nbsp;? Vous passez le curseur sur le lien, et la `font-size` s'anime (transitionne) de 40px à 100px. Vous sortez du lien, et elle transitionne de 100px à 40px.\n\nEssayons maintenant ceci\u0026nbsp;:\n\n    a:link, a:visited {\n        font-size: 40px;\n    }\n\n    a:hover {\n        font-size: 100px;\n        transition: font-size 1s ease;\n    }\n\nQu'y a-t-il de différent\u0026nbsp;? Eh bien au lieu de mettre la propriété transition sur l'état naturel du lien, je l'ai mise sur son état hover. Et le résultat\u0026nbsp;? Vous l'avez sans doute deviné, mais voici [la démo](http://jsbin.com/umaliy/46/edit). La transition étant maintenant sur l'état hover, elle ne se produit que sur cet état, c'est à dire lorsque hover se produit. Quand vous sortez du lien (c'est à dire quand vous revenez à l'état naturel du lien), la propriété change instantanément de 100px à 40px, comme s'il n'y avait pas de transition, ce qui est le cas.\n\nCe n'est pas grand chose, mais il faut le garder à l'esprit si vous placez vos transitions sur l'état de l'événement plutôt que sur l'état naturel de l'élément. Dans certains cas, ça peut être l'effet souhaité, comme nous allons le voir maintenant.\n\n## Un cas d'utilisation\n\nOn pourrait imaginer que la transition sur hover soit beaucoup plus longue que la transition sur la sortie du hover, voici ce que ça pourrait donner\u0026nbsp;:\n\n    a:link, a:visited {\n        font-size: 40px;\n        transition: font-size 1s ease;\n    }\n\n    a:hover {\n        font-size: 100px;\n        transition: font-size 3s ease;\n    }\n\nEt [la démo](http://jsbin.com/itihoc/70/edit). Dans cet exemple, la transition sur hover dure trois secondes alors que la sortie ne dure qu'une seconde (changement de la partie transition-duration de la notation raccourcie). Ça peut être pratique dans les situations où vous souhaitez que la partie déclenchée par l'utilisateur se déroule d'une certaine façon alors que le \u0026ldquo;retour à la normale\u0026rdquo; peut se faire rapidement.\n"},{"slug":"animer-un-svg-avec-css","title":"Animer un SVG avec CSS","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"1è avril 2014","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/animating-svg-css/","copyright":"2014"},"dateCascade":"23 avril 2014","dateMachine":"2O140423","tags":["css","svg","animation"],"about":["CSS Transform","Keyframes"],"excerpt":"Chris Coyier s'est amusé à créer une petite animation SVG en CSS, sans passer par des bibliothèques compliquées. C'est fait maison, simple, efficace et expliqué de façon claire comme toujours.","featured":false,"featuredImage":"/images/ansvg1-compressor.jpeg","order":null,"content":"\nIl existe plusieurs façons d'animer une image svg, depuis la balise `animate` jusqu'aux bibliothèques comme [Snap.svg](http://snapsvg.io) ou [SVG.js](http://www.svgjs.com). Nous allons essayer autre chose ici, en utilisant SVG à l'intérieur de notre HTML et en animant les parties de l'image avec CSS.\n\nJe me suis amusé avec ça dernièrement, [Wufoo](http://www.wufoo.com/landing/1/?utm_source=csstricks\u0026utm_medium=ppc\u0026cmpid=brand\u0026utm_network=d) souhaitant rafraîchir le graphisme de ses pubs sur [CSS-Tricks](http://css-tricks.com). Voici une idée de ce que nous allons réaliser\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_dvjhn\" src=\"//codepen.io/chriscoyier/embed/dvjhn?height=400\u0026amp;theme-id=light\u0026amp;slug-hash=dvjhn\u0026amp;user=chriscoyier\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/chriscoyier/pen/dvjhn/\"\u003e\n  Wufoo SVG Ad\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n## 1. Concevoir la pub\n\nÇa va ressembler à une [leçon de dessin sommaire](http://cdn.css-tricks.com/wp-content/uploads/2014/04/How_to_Draw_Owl.jpg), mais notre objectif étant l'animation, nous allons passer sur le reste vite fait. Je souhaitais une pub super simple à partir de leur logo classique, de leurs couleurs etc., auquels j'ajouterais une touche personnelle.\n\n1. Faire sauter les lettres dans la page. Wufoo est un mot marrant, les lettres peuvent s'amuser un peu.\n2. Dans le bon vieux temps, on faisait des T-Shirts avec un dinosaure devant, et derrière il y avait \"Fast. Smart. Formidable\", des caractéristiques que Wufoo partage avec les dinosaures, sans parler du jeu de mots sur FORMidable… (NdT: Wufoo est un outil permettant d'élaborer des formulaires, _form_ en anglais). Faisons apparaître et disparaître ce slogan.\n3. Pour aller au bout de notre idée, faisons apparaître la tête d'un dinosaure qui surgit, intrigué, des profondeurs, et disparaît à la vitesse de l'éclair, laissant le mot \"fast\" s'afficher.\n\nJ'ai mis tout ça sur Illustrator\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/ansvg1-compressor.jpeg\" width=\"800\" height=\"780\" alt=\"des images conçues sur illustrator\"/\u003e\u003c/figure\u003e\n\nRemarquez que le logo et le texte du slogan sont des formes vectorielles, leur rendu en `\u003cpath\u003e` (chemins) SVG sera très simple.\n\nLe texte \"Fast.\" est laissé en tant que texte dans Illustrator. Quand je le sauvegarderai, il sera conservé sous la forme d'élément `\u003ctext\u003e`.\n\n## 2. Sauvegarder en format SVG\n\nIllustrator peut le sauvegarder directement en \u003cspan itemprop=\"about\"\u003eformat SVG\u003c/span\u003e\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/ansvg2-compressor.png\" width=\"714\" height=\"466\" alt=\"comment sauvegarder sur illustrator\"/\u003e\u003c/figure\u003e\n\nVous pouvez ouvrir ce fichier SVG dans votre éditeur de texte et voir le \u003cspan itemprop=\"about\"\u003ecode SVG\u003c/span\u003e\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/ansvg3-compressor.png\" width=\"999\" height=\"644\" alt=\"le contenu complexe du fichier svg\"/\u003e\u003c/figure\u003e\n\n## 3. Nettoyer le SVG, lui ajouter des classes\n\nPour le nettoyage, vous pouvez utiliser [SVGO](https://github.com/svg/svgo) qui optimisera le fichier, retirera le DOCTYPE et toutes les choses inutiles. Mais ce qui est plus important ici, c'est de donner des classes aux différentes formes, afin que nous puissions les sélectionner dans notre CSS.\n\n    //CSS\n\n    \u003csvg version=\"1.1\" id=\"wufoo-ad\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 400 400\" enable-background=\"new 0 0 400 400\" xml:space=\"preserve\"\u003e\n\n      \u003c!-- background --\u003e\n      \u003crect class=\"wufoo-background\" fill=\"#D03E27\" width=\"400\" height=\"400\" /\u003e\n\n      \u003c!-- logo letters --\u003e\n      \u003cpath class=\"wufoo-letter\" fill=\"#F4F4F4\" d=\"M60.858,129....\" /\u003e\n      \u003cpath class=\"wufoo-letter\" fill=\"#F4F4F4\" d=\"...\" /\u003e\n         \u003c!-- etc --\u003e\n\n      \u003c!-- dinosaur --\u003e\n      \u003cg class=\"trex\"\u003e\n         \u003cpath ... /\u003e\n         \u003cpath ... /\u003e\n      \u003c/g\u003e\n\n    \u003c/svg\u003e\n\n## 4. Insérer le SVG\n\nVous pouvez copier-coller ce SVG dans votre HTML, à l'endroit où vous voulez que la pub apparaisse. Si vous ne voulez pas que ça embrouille votre template, vous pouvez aussi faire quelque chose comme\u0026nbsp;:\n\n    //HTML\n\n    \u003caside class=\"sidebar\"\u003e\n\n       \u003cdiv class=\"module module-ad\"\u003e\n\n           \u003c?php include(\"ads/wufoo.svg\"); ?\u003e\n\n       \u003c/div\u003e\n\n       ...\n\n## 5. Animer !\n\nNos formes sont maintenant dans le [DOM](/articles/le-dom-cest-quoi-exactement), nous pouvons les cibler et leur appliquer un style comme à n'importe quel autre élément HTML. Allons-y.\n\nPour commencer, disons que cette animation doit avoir une durée totale de 10\u0026nbsp;secondes.\n\n#### Fade in/out des mots\n\nLe premier événement est l'apparition des mots Fast. Smart. Formidable. Chaque mot sera affiché pendant une seconde. Nous allons donc réaliser une animation dans laquelle chaque mot apparaît pour une durée égale à 10% du temps total\u0026nbsp;:\n\n    //CSS\n\n    @keyframes hideshow {\n      0% { opacity: 1; }\n      10% { opacity: 1; }\n      15% { opacity: 0; }\n      100% { opacity: 0; }\n    }\n\nPuis ciblons le premier mot et fixons la durée de l'animation à 10 secondes (10% de cette durée = 1 seconde)\u0026nbsp;:\n\n    //CSS\n\n    .text-1 {\n      animation: hideshow 10s ease infinite;\n    }\n\nLes deux mots suivants seront d'abord cachés (`opacity: 0;`) puis utiliseront exactement la même animation mais avec un délai, pour les faire partir successivement\u0026nbsp;:\n\n    //CSS\n\n    .text-2 {\n      opacity: 0;\n      animation: hideshow 10s 1.5s ease infinite;\n    }\n    .text-3 {\n      opacity: 0;\n      animation: hideshow 10s 3s ease infinite;\n    }\n\nLa demie seconde supplémentaire entre chaque mot permet un fade out en douceur avant l'apparition du mot suivant.\n\n#### Lettres bondissantes\n\nPassons maintenant aux lettres de WUFOO et à leur petite danse\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/ansvg4-compressor.gif\" width=\"248\" height=\"111\" alt=\"les lettres de wufoo s'animent\"/\u003e\u003c/figure\u003e\n\nL'astuce ici est de donner une durée de 5 secondes à notre animation, mais de la faire fonctionner dans un sens puis dans l'autre. De cette façon, elle correspond bien à notre durée totale de 10 secondes, elle se produit au milieu comme nous le souhaitons, et nous n'avons besoin de paramétrer qu'un seul sens.\n\nChaque lettre a un petit délai, décalé par rapport aux autres\u0026nbsp;:\n\n    //SCSS\n\n    .wufoo-letter {\n      animation: kaboom 5s ease alternate infinite;\n      \u0026:nth-child(2) {\n        animation-delay: 0.1s;\n      }\n      \u0026:nth-child(3) {\n        animation-delay: 0.2s;\n      }\n      \u0026:nth-child(4) {\n        animation-delay: 0.3s;\n      }\n      \u0026:nth-child(5) {\n        animation-delay: 0.4s;\n      }\n    }\n    @keyframes kaboom {\n      90% {\n        transform: scale(1.0);\n      }\n      100% {\n        transform: scale(1.1);\n      }\n    }\n\nPour abréger, j'ai écrit ce code en SCSS et sans y mettre les préfixes constructeurs.\n\nJe trouve que la propriété `animation-delay` devrait pouvoir supporter de façon native une valeur aléatoire, ce serait sympa de voir un délai différent à chaque apparition.\n\n#### Le dinosaure, enfin\n\nDès que les mots ont disparu, le dinosaure lève la tête. L'animal est construit avec de nombreux `path`, mais nous pouvons le cibler globalement grâce à l'attribut groupe `\u003cg\u003e` qui enveloppe tous ces chemins.\n\nPour animer une position, [il est préférable d'utiliser translate](http://css-tricks.com/tale-of-animation-performance/) et c'est ce que nous allons faire\u0026nbsp;:\n\n    //CSS\n\n    @keyframes popup {\n      0% {\n        transform: translateY(150px);\n      }\n      34% {\n        transform: translateY(20px);\n      }\n      37% {\n        transform: translateY(150px);\n      }\n      100% {\n        transform: translateY(150px);\n      }\n    }\n\nNous voulons que cette animation \"dure\" 3 secondes, en fait elle dure 10 secondes mais vous n'en verrez que 3 secondes, car lorsque `translateY(150px)` se déclenche, le dinosaure est enfoui si profond que vous ne voyez rien. Aux alentours de 37% de cette animation (vers 3 secondes) vous le verrez apparaître lentement puis disparaître rapidement vers le bas.\n\nPour appliquer cette animation, nous devons nous assurer que\u0026nbsp;:\n\n- Le dinosaure est invisible au départ.\n- L'animation comporte un délai, de façon à ce que la danse des lettres soit achevée.\n\n        //CSS\n\n        .trex {\n          transform: translateY(150px);\n          animation: popup 10s 6.5s ease infinite;\n        }\n\nLe dinosaure se cache à la dernière seconde lorsque le mot \"Fast.\" revient à l'écran (parce que toutes les animations sont définies comme `infinite` ce qui les relance dès qu'elles sont terminées).\n\n## 6. Une pub responsive et cliquable\n\nUn avantage considérable de SVG est que la qualité de l'image est toujours impeccable quelle que soit la taille. Pour obtenir une image flexible qui conserve son ratio (même équilibre global des proportions), nous pouvons utiliser la bonne vieille technique de la boîte avec padding.\n\n    //HTML\n\n    \u003cdiv class=\"wufoo-ad-wrap\"\u003e\n      \u003csvg class=\"wufoo-ad\"\u003e\n         ...\n      \u003c/svg\u003e\n    \u003c/div\u003e\n\n    //CSS\n\n    .wufoo-ad-wrap {\n      height: 0;\n      padding-top: 100%;\n      position: relative;\n    }\n    .wufoo-ad {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n    }\n\nL'idée ici est que le \"wrap\" sera toujours un carré parfait, aux dimensions calculées à partir de sa largeur. Nous positionnons ensuite le SVG de façon absolue à l'intérieur de ce carré parfait, qui se redimensionnera avec bonheur.\n\nPuisqu'il s'agit d'une pub, qui doit évidemment être cliquable, on pourrait utiliser `\u003ca href=\"\"\u003e` à la place de `\u003cdiv\u003e` pour le contenant wrap, dans ce cas n'oubliez pas d'ajouter `display: block`.\n\nLa [démo finale](http://codepen.io/chriscoyier/pen/dvjhn/) est ici.\n"},{"slug":"combinateurs-et-pseudo-classes-css","title":"Combinateurs et pseudo-classes CSS","author":{"name":"Steven Bradley","lastname":"Bradley"},"original":{"date":"19 septembre 2011","site":"Vanseo Design","siteUrl":"http://www.vanseodesign.com/","postUrl":"http://www.vanseodesign.com/css/combinators-pseudo-classes/","copyright":"2011"},"dateCascade":"13 avril 2014","dateMachine":"2O140413","tags":["css","pseudo-elements","pseudo-classes"],"about":["Combinators"],"excerpt":"Nous poursuivons notre introduction aux basiques de CSS avec un article de Steven Bradley sur les combinateurs et les pseudo-classes. La maîtrise de cette syntaxe vous aidera à mieux coder.","featured":false,"featuredImage":"/images/combination-lock-3.jpeg","order":null,"content":"\n## Les combinateurs\n\nComme leur nom le suggère, les combinateurs aident à combiner différents sélecteurs pour former de nouveaux sélecteurs, plus spécifiques.\n\nIl existe quatre types de combinateurs ciblant les relations parent/enfants et frères existant entre les éléments.\n\n### Combinateur descendant E F\n\nCe premier combinateur est représenté par un _espace_ entre deux éléments, par exemple ul / espace / li\u0026nbsp;:\n\n    ul li\n\nCe combinateur cible un élément F qui est un descendant de l'élément E. Les combinateurs de descendants ne se limitent pas aux enfants, ils ciblent tous les descendants.\n\n    //HTML\n\n    \u003cul\u003e\n      \u003cli\u003eList Item 1\u003c/li\u003e\n      \u003cli\u003eList Item 2\n        \u003col\u003e\n          \u003cli\u003eList Item 2-1\u003c/li\u003e\n          \u003cli\u003eList Item 2-2\u003c/li\u003e\n        \u003c/ol\u003e\n      \u003c/li\u003e\n      \u003cli\u003eList Item 3\u003c/li\u003e\n    \u003c/ul\u003e\n\n    //CSS\n\n    ul li {background: red;}\n\nToutes les listes auront un background rouge, car chacune est un descendant (enfant ou petit-enfant) de la liste non-ordonnée.\n\n\u003cfigure  role=\"group\"\u003e\u003cimg src=\"/images/combination-lock-3.jpeg\" alt=\"Un cadenas à code\"/\u003e\u003c/figure\u003e\n\n### Combinateur enfant E \u003e F\n\nCible un élément F qui est l'enfant d'un élément E. À la différence du combinateur précédent, F doit être un enfant direct de E.\n\nAvec le même HTML que ci-dessus et le CSS\u0026nbsp;:\n\n    ul\u003eli {background: red;}\n\nseuls les List Item 1, 2 et 3 auront un background rouge, car ils sont les enfants de ul, alors que les items 2-1 et 2-2 sont ses petits-enfants.\n\n### Combinateur adjacent E + F\n\nCible un élément F immédiatement précédé par un élément E. Le mot adjacent est important\u0026nbsp;: seul le **premier** élément après E sera ciblé.\n\n    //HTML\n\n    \u003ch1\u003eHeading\u003c/h1\u003e\n    \u003cp\u003eParagraph 1\u003c/p\u003e\n    \u003cp\u003eParagraph 2\u003c/p\u003e\n    \u003cp\u003eParagraph 3\u003c/p\u003e\n\n    //CSS\n\n    h1+p {font-size: 1.5em;}\n\nSeul le paragraphe 1 aura le style spécifié.\n\n### Combinateur général siblings E ~ F\n\nCible un élément F précédé par un élément E. À la différence du combinateur adjacent qui cible uniquement le premier frère, celui-ci cible tous les frères (siblings).\n\nAvec le même HTML que ci-dessus et le CSS\u0026nbsp;:\n\n    h1~p {font-size: 1.5em;}\n\ntous les paragraphes auront le même style défini ci-dessus.\n\n### Au-delà des sélecteurs simples\n\nRemarquez bien que vous n'êtes pas limités aux sélecteurs simples. Tous les sélecteurs, y compris les sélecteurs d'attributs, peuvent être employés d'un côté ou de l'autre du combinateur\u0026nbsp;:\n\n    ul a[title]\n    li#first\u003ea[rel=\"external\"]\n    h1+p.intro\n    h2.myclass~p[class=\"intro\"]\n\n\u003cspan id=\"pseudo\"\u003e\u003c/span\u003e\n\n## Les pseudo-classes\n\nIl existe beaucoup de pseudo-classes, le W3C les a regroupées ainsi\u0026nbsp;:\n\n- pseudo-classes dynamiques\n- pseudo-classes cibles\n- pseudo-classes de langage\n- pseudo-classes d'éléments UI (interface utilisateur)\n- pseudo-classes de négation\n- pseudo-classes structurelles\n\nVous en connaissez (et utilisez) certaines.\n\n\u003cfigure  role=\"group\"\u003e\u003cimg src=\"/images/css-selectors.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n### Pseudo-classes dynamiques\n\nCe groupe-ci, je suis certain que vous le connaissez déjà. Il s'agit des pseudo-classes relatives aux liens et aux actions utilisateurs.\n\n#### Pseudo-classes de liens\n\n**E:link** cible un élément E qui est la source d'un lien non encore visité.  \n**E:visited\u003e** cible un élément E qui est la source d'un lien ayant été visité.\n\n#### Pseudo-classes d'action utilisateur\n\nCiblent un élément E lors de certaines actions utilisateurs.\n\n**E:active** lorsque le lien est actif (c.à.d lorsqu'on a cliqué dessus)  \n**E:hover** lorsque le visiteur passe la souris sur le lien  \n**E:focus** lorsque le lien a un focus actif\n\nJe suppose que vous les connaissez suffisamment pour que je n'aie pas besoin d'approfondir. Une chose à garder en mémoire toutefois\u0026nbsp;: lorsque vous utilisez :link, :visited, :hover et :active sur un même élément, rappelez-vous qu'ils doivent être listés dans cet ordre, et pour cela rappelez-vous LoVeHAte\u0026nbsp;!\n\n#### Pseudo-classe de cible\n\nSi vous avez déjà créé une ancre en ajoutant un # à une url, alors vous avez déjà créé une pseudo-classe de cible dans votre html.\n\n**E:target** cible un élément E qui est la cible (appelée ancre) de l'url à laquelle on se réfère.\n\n    //HTML\n\n    \u003ca href=\"domaine.com/cette-page.html#un-endroit-dans-la-page\"\u003e...\u003c/a\u003e\n\n    \u003c!-- et plus loin dans la page : --\u003e\n\n    \u003cspan id=\"un-endroit-dans-la-page\"\u003e\u003c/span\u003e\n\n    //CSS\n\n    span:target {background: yellow;}\n\nLe code ci-dessus place un background jaune derrière le span.\n\nUn cas d'usage intéressant est lorsqu'on veut aider notre lecteur qui a cliqué sur un lien à trouver tout de suite le contenu (le mot, le paragraphe…) correspondant à ce lien.\n\n#### Pseudo-classes de langage\n\n**E:lang(fr)** cible un élément E dans le langage spécifié (ici \"fr\" = français)\n\n//HTML\n\n    \u003cbody lang=fr\u003e\n      \u003cp\u003eJe suis français.\u003c/p\u003e\n    \u003c/body\u003e\n\n    //CSS\n\n    p:lang(fr) {color: red;}\n\nSi vous utilisez des langues multiples dans une page, vous avez la possibilité de cibler spécifiquement un texte dans telle ou telle langue.\n\n#### Pseudo-classes d'UI\n\nPour améliorer l'usabilité des formulaires, on ajoute souvent des contraintes comme permettre ou interdire l'affichage de certains champs en fonction de ce que le visiteur a déjà rempli. Par défaut, les éléments html ne sont ni activés (enabled) ni désactivés (disabled). JavaScript sert typiquement à cela, mais on peut aussi le faire manuellement (quitte à les modifier dynamiquement ensuite).\n\n**E:enabled** cible un élément d'interface utilisateur E qui est activé.\n\n**E:disabled** cible un élément d'interface utilisateur E qui est désactivé.\n\n**E:checked** cible un élément d'interface utilisateur E qui est \"checké\", comme un bouton-radio ou une checkbox.\n\n//HTML\n\n    \u003cform\u003e\n      Preferred Contact:\n        \u003cinput type=\"radio\" id=\"prefer\" value=\"email\" checked=\"checked\" /\u003e Email\n        \u003cinput type=\"radio\" id=\"prefer\" value=\"phone\" /\u003e Phone\n      Email: \u003cinput type=\"text\" id=\"email\" enabled=\"enabled\" /\u003e\n      Phone: \u003cinput type=\"text\" id=\"phone\" disabled=\"disabled\" /\u003e\n    \u003c/form\u003e\n\n    //CSS\n\n    :enabled {color: green;}\n    :disabled {color: red;}\n    :checked {background: yellow;}\n\nIci, le rouge et le vert sont utilisés pour signaler aux visiteurs les éléments du formulaire disponibles. Les items checkés ont un background jaune, pour rendre plus visible leur statut de \"déjà fait\".\n\nIl est probable que nous utiliserions Javascript pour changer les attributs enabled et disabled, selon la méthode choisie par l'utilisateur.\n\n#### Pseudo-classe de négation\n\nLa [pseudo-classe de négation](/articles/la-pseudo-classe-de-negation/) fait exactement ce à quoi on peut s'attendre. Avec elle, on cible tout ce qui n'est pas le sélecteur nié.\n\n**[E:not(S)](../not/)** cible un élément E qui n'est pas égal au sélecteur S spécifié entre parenthèses.\n\n    //HTML\n    \u003cdiv class=\"one\"\u003e\u003c/div\u003e\n    \u003cdiv class=\"two\"\u003e\u003c/div\u003e\n    \u003cdiv class=\"three\"\u003e\u003c/div\u003e\n\n    //CSS\n    div:not(.two) {color: orange;}\n\nLe CSS appliquera une couleur orange au texte des première et troisième div, qui n'ont pas la classe \"two\". C'est simple, mais ça peut devenir rapidement complexe, attention.\n\nVous trouverez certainement d'autres façons de cibler les éléments que vous voulez sans utiliser le sélection de négation, mais une négation peut remplacer beaucoup de sélecteurs à elle toute seule, elle peut donc être appropriée dans certains cas.\n\u003cspan id=\"pseudo-classes\"\u003e\u003c/span\u003e\n\n## Les pseudo-classes structurelles\n\nLes pseudo-classes structurelles ont été introduites afin de pouvoir cibler des éléments html à partir d'informations tirées du [DOM](/articles/le-dom-cest-quoi-exactement/) qui ne peuvent être facilement représentées par de simples sélecteurs ou combinateurs.\n\nVous en utilisez peut-être déjà certaines. Elles vous éviteront souvent d'ajouter des id ou classes inutiles.\n\n**E:root** cible un élément E qui est la racine du document. En html il s'agit toujours de l'élément html.\n\n    :root {background: blue;}\n    html {background: blue;}\n\nCes lignes de CSS sont fonctionnellement équivalentes. Ok, ce n'est peut-être pas la plus utile des pseudo-classes structurelles, en tout cas c'est la plus simple à expliquer\u0026nbsp;!\n\n**E:nth-child(n)** cible un élément E qui est le n-ième enfant de son parent.\n\nSupposons que nous ayons une table comportant de nombreuses lignes.\n\n    tr:nth-child(4) {background: #ccc;}\n\nLe CSS ci-dessus indique qu'il faut trouver la quatrième ligne et lui donner un background gris clair.\n\nOn utilise souvent la pseudo-classe nth-child pour colorer alternativement les lignes d'une table.\n\n    tr:nth-child(2n+1) {background: #ccc;}\n    tr:nth-child(2n) {background: #eee;}\n\n2n+1 représente les lignes impaires et 2n les lignes paires. On peut aussi utiliser les valeurs impaire (odd) et paire (even).\n\n    tr:nth-child(odd) {background: #ccc;}\n    tr:nth-child(even) {background: #eee;}\n\nBien entendu vous n'est pas limité à 2\u0026nbsp;:\n\n    tr:nth-child(10n+1) {background: #ccc;}\n\nIci, les 11e, 21e, 31e, etc lignes auront un background gris clair.\n\n**E:nth-last-child(n)** cible un élément E qui est le n-ième enfant de son parent, en comptant à partir du dernier enfant.\n\nnth-last-child fonctionne comme nth-child, mais en commençant par le dernier élément de la liste. Reprenons notre exemple de table\u0026nbsp;:\n\n    tr:nth-last-child(1) {background: #ccc;}\n\nIci, c'est la dernière ligne qui aura un background gris clair,\n\n    tr:nth-last-child(4) {background: #ccc;}\n\net ici c'est la 4ème ligne en partant du bas qui aura ce background.\n\nOn peut utiliser les même valeurs\u0026nbsp;:\n\n    tr:nth-last-child(2n+1) {background: #ccc;}\n    tr:nth-last-child(2n) {background: #eee;}\n\n    tr:nth-last-child(odd) {background: #ccc;}\n    tr:nth-last-child(even) {background: #eee;}\n\nCes deux façons d'écrire ont le même résultat, des lignes paires et impaires avec un background différent. Il n'est pas sûr que nth-last-child soit la meilleure pseudo-classe pour cet effet, mais vous pouvez l'utiliser.\n\nUne utilisation plus spécifique à nth-last-child est de cibler un ou plusieurs éléments à la fin d'une liste.\n\n\u003cfigure  role=\"group\"\u003e\u003cimg src=\"/images/ps3numbers-4.jpeg\" alt=\"\"/\u003e\u003c/figure\u003e\n\n**:nth-of-type et :nth-last-of-type**  \nLes autres pseudo-classes structurelles sont des variations de ce qui précède, donc nous allons simplement voir leurs applications spécifiques.\n\n**E:nth-of-type(n)** cible un élément E qui est le n-ième frère du même type.\n\n**E:nth-last-of-type(n)** cible un élément E qui est le n-ième frère du même type, en partant du dernier.\n\nnth-of-type et nth-last-of-type fonctionnent de la même façon que nth-child et nth-last-child, la différence étant qui nous ciblons un type d'élément spécifique et non pas n'importe quel enfant.\n\nOn utilise les pseudo-classes \"of-type\" lorsque le parent de l'élément qu'on cible a plusieurs types d'éléments enfants\u0026nbsp;:\n\n    \u003cdiv\u003e\n     \u003cp\u003e\u003c/p\u003e\n    \u003c img src=\"\" alt=\"\" / \u003e\n     \u003cp\u003e\u003c/p\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003c/li\u003e\n        \u003cli\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n     \u003cp\u003e\u003c/p\u003e\n    \u003c/div\u003e\n\n    //CSS\n    p:nth-of-type(2) {font-size: 1.2em;}\n    p:nth-last-of-type(1) {font-size: 1.2em;}\n\nJe suis sûr que vous voyez quels paragraphes sont ciblés par le CSS ci-dessus. Et la raison pour laquelle on utilise ici les \"of-type\" est que les éléments situés dans la div sont de types différents.\n\n**:first-child et :last-child**  \nCe sont en fait des raccourcis pour nth-child(1) et nth-last-child(1), et comme ces deux pseudo-classes, ils sous-entendent que les enfants sont de même type.\n\n**E:first-child** cible un élément E qui est le premier enfant de son parent.\n\n**E:last-child** cible un élément E qui est le dernier enfant de son parent.\n\nOn utilise souvent ces pseudo-classes dans les barres de navigation lorsqu'on veut donner un style au premier ou au dernier élément du menu pour les différencier des autres. Ou bien, il arrive fréquemment qu'on ajoute une bordure gauche ou droite aux éléments du menu pour les séparer, mais il faut du coup en ajouter (ou retirer) une d'un côté ou de l'autre. li:last-child ou li:first-child sont pratiques pour y arriver.\n\n**:first-of-type et :last-of-type**  \nCe sont les équivalents fonctionnels de nth-of-type(1) et nth-last-of-type(1). Ils fonctionnent de la même façon que first-child et last-child, sauf qu'ils ciblent des éléments d'un type particulier.\n\n**E:first-of-type** cible un élément E qui est le premier frère de son type.\n\n**E:last-of-type** cible un élément E qui est le dernier frère de son type.\n\nUtilisation typique pour ces pseudo-classes : appliquer un style au premier paragraphe à l'intérieur d'une div, d'un article ou d'une section.\n\n**:only-child et :only-of-type**  \nCiblent des éléments qui n'ont qu'un enfant.\n\n**E:only-child** cible un élément E qui est le seul enfant de son parent.\n\n**E:only-of-type** cible un élément E qui est le seul de son type dans sa fratrie.\n\n**:empty**\n\n**E:empty** cible un élément E qui n'a pas d'enfants, ni de texte. C'est une façon de cibler les attributs vides. Par exemple, il ne ciblerait pas\u0026nbsp;:\n\n    \u003cp\u003eVoici un texte\u003c/p\u003e\n\nmais il ciblerait\u0026nbsp;:\n\n    \u003cp\u003e\u003c/p\u003e\n\nPour finir, si l'anglais n'est pas un problème voici une vidéo de Chris Coyier présentant les pseudo-classes et pseudo-éléments.\n\n\u003ciframe width=\"640\" height=\"360\" src=\"//www.youtube.com/embed/Konn2NMmSXw\" frameborder=\"0\" allowfullscreen\u003e\u003c/iframe\u003e\n\u003cspan id=\"pseudo-elements\"\u003e\u003c/span\u003e\n\n\u003cspan id=\"lespseudoelements\"\u003e\u003c/span\u003e\n\n## Les pseudo-éléments\n\nParfois nous aimerions appliquer un style à des **éléments** mais nous ne pouvons le faire à partir d'informations tirée du [DOM](/articles/le-dom-cest-quoi-exactement). Nous résolvons le problème en ajoutant un élément (un span par exemple) auquel nous donnons une classe. Dans certains cas, le recours aux **pseudo-éléments** s'avère plus simple.\n\nNous en avons quatre :\n\n- **:first-line**\n- **:first-letter**\n- **:before**\n- **:after**\n\n**E:first-line** cible la première ligne formatée d'un élément E.\n\n    p:first-line {text-transform: uppercase;}\n\nLe CSS ci-dessus change la première ligne de tous les paragraphes, et bien sûr la _première ligne de texte_ est dynamique si votre mise en page est flexible.\n\n**E:first-letter** cible la première lettre d'un élément E.\n\nUne utilisation évidente serait la création de [lettrines](http://fr.wikipedia.org/wiki/Lettrine)\u0026nbsp;:\n\n    \u003cp class=\"intro\"\u003eThis is the first paragraph\u003c/p\u003e\n\n    //CSS\n    p.intro:first-letter {\n        font-size:4em;\n        font-weight:bold;\n        color: #f00;\n        float:left;\n    }\n\n**E:before et E:after** ciblent un contenu généré avant ou après un élément E.\n\nUne utilisation courante est l'ajout de guillemets stylisés avant et après une citation\u0026nbsp;:\n\n    \u003cblockquote\u003e\u003c/blockquote\u003e\n\n    //CSS\n    blockquote::before {content: \"\\2018\";}\n    blockquote::after {content: \"\\2019;;\";}\n\nPour une approche détaillée de **:before** et **:after**, vous pouvez lire [l'article de Louis Lazaris](/articles/les-pseudo-elements-css-before-et-after/) ici-même.\n"},{"slug":"les-pseudo-elements-css-before-et-after","title":"Pseudo-éléments :before \u0026 :after","author":{"name":"Louis Lazaris","lastname":"Lazaris"},"original":{"date":"13 juillet 2011","site":"Smashing Magazine","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2011/07/learning-to-use-the-before-and-after-pseudo-elements-in-css/","copyright":"2011"},"dateCascade":"5 avril 2014","dateMachine":"2O140405","tags":["css","pseudo-elements","accessibilite"],"about":[":Before",":After"],"excerpt":"Cet article de Louis Lazaris s'adresse à ceux qui ont découvert avec émerveillement les trucs sympas qu'on peut faire avec les pseudo-éléments et veulent mieux connaître cette technique très utilisée. On commence par :before et :after.","featured":true,"featuredImage":"/images/styles-pseudo-elements-compressor.jpeg","order":10,"content":"\nCet article s'adresse à ceux qui ont découvert les trucs cools qu'on peut faire avec les pseudo-éléments et veulent mieux connaître cette technique. La spécification CSS contient [d'autres pseudo-éléments](http://reference.sitepoint.com/css/pseudoelements), mais je me concentrerai ici sur `:before` et `:after` et pour la simplicité je parlerai de \"pseudo-éléments\" en me référant spécifiquement à ces deux-là. (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e\u0026nbsp;_NdT\u0026nbsp;: pour plus d'infos sur les pseudo-éléments et pseudo-classes, vous pouvez consulter [cet article](/articles/combinateurs-et-pseudo-classes-css/) ici-même_).\n\n## Que fait un pseudo-élément ?\n\nIl fait exactement ce que son nom implique\u0026nbsp;: il crée un élément factice et l'insère avant ou après le contenu de l'élément que vous avez ciblé.\n\nUn pseudo-élément ne change rien dans le document lui-même, en fait il insère des éléments \"fantômes\" qui sont visibles par l'utilisateur et auxquels on peut appliquer un style CSS.\n\n## Syntaxe basique\n\nLes pseudo-éléments `:before` et `:after` sont très simples à coder, en voici un exemple\u0026nbsp;:\n\n    #exemple:before {\n       content: \"#\";\n    }\n\n    #exemple:after {\n       content: \".\";\n    }\n\nIl y a deux choses à noter à propos de cet exemple. D'abord, nous ciblons ici le même élément en utilisant `#exemple:before` et `#exemple:after`. À proprement parler, ce sont les pseudo-éléments dans ce code.\n\nEnsuite, sans la propriété `content` , les pseudo-éléments ne servent à rien. Si le sélecteur pseudo-élément est nécessaire pour cibler l'élément, il n'est pas pour autant suffisant, vous n'insérerez rien tant que vous n'aurez pas ajouté la propriété `content`.\n\nDans l'exemple que nous venons de voir, on insère un symbole # avant le contenu de l'élément ayant l'id `exemple` et un point après.\n\n## À propos de la syntaxe\n\nVous pourriez tout aussi bien laisser la propriété `content` vide et traiter le pseudo-élément comme une boîte vide\u0026nbsp;:\n\n    #example:before {\n       content: \"\";\n       display: block;\n       width: 100px;\n       height: 100px;\n    }\n\nToutefois, vous ne pouvez pas supprimer la propriété `content`, le pseudo-élément ne fonctionnerait pas. A minima, la propriété `content` doit contenir des \"\" vides.\n\nVous avez peut-être remarqué qu'on peut aussi utiliser la syntaxe `::before` et `::after`. Pour faire bref, il n'y a pas de différence entre les deux syntaxes, c'est juste une façon de différencier les pseudo-éléments et les pseudo-classes en CSS3 mais vous pouvez oublier cette syntaxe.\n\n## Caractéristiques du contenu inséré\n\nComme déjà mentionné, le contenu inséré n'est pas visible dans les sources de la page (si vous cherchez sur DevTools), il n'est visible que dans le CSS.\n\nDe plus, l'élément inséré est par défaut [un élément inline](/articles/la-difference-entre-block-et-inline/). Pour lui donner une hauteur, un padding, des marges, etc, vous devrez le définir explicitement comme un élément block.\n\nCela nous amène à une brève description de la façon d'appliquer un style à nos pseudo-éléments. Regardons ce graphique tiré de mon éditeur de texte\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/styles-pseudo-elements-compressor.jpeg\" width=\"500\" height=\"324\" alt=\"display, width, height sont les styles qui affectent le pseudo élément\"/\u003e\u003c/figure\u003e\n\nDans cet exemple, j'ai surligné les styles qui seront appliqués aux éléments insérés avant et après le contenu de l'élément cible. Les pseudo-éléments ont ceci d'unique qu'on insère le contenu _et_ le style dans le même bloc de déclaration.\n\nNotez également que les règles d'héritage CSS s'appliquent aux éléments insérés. Si par exemple vous avez défini une police de caractères `Helvetica, Arial, sans-serif` pour l'élément `body` de votre document, le pseudo-élément héritera de cette police comme n'importe quel autre élément.\n\nDe la même façon, les pseudo-éléments n'héritent pas de styles qui ne sont pas naturellement hérités de leurs parents, tels que les paddings et les marges.\n\n## Avant ou après quoi ?\n\nNotre intuition nous dit que le contenu sera inséré avant et après l'élément cible. Mais comme je l'ai déjà suggéré, ce n'est pas le cas.\n\nLe contenu injecté sera un enfant de l'élément cible, mais il sera placé \"avant\" ou \"après\" tout autre contenu dans cet élément.\n\nPour mieux comprendre, prenons un exemple. Tout d'abord le HTML\u0026nbsp;:\n\n    \u003cp class=\"box\"\u003eOther content.\u003c/p\u003e\n\nEt maintenant le CSS qui insère le pseudo-élément\u0026nbsp;:\n\n    p.box {\n       width: 300px;\n       border: solid 1px white;\n       padding: 20px;\n    }\n\n    p.box:before {\n       content: \"#\";\n       border: solid 1px white;\n       padding: 2px;\n       margin: 0 10px 0 0;\n    }\n\nDans le HTML, tout ce qu'on voit est un paragraphe avec une classe `box`, et les mots \"Other content\" à l'intérieur (c'est ce que vous verriez si vous inspectiez la source). Dans le CSS, le paragraphe a une largeur, un padding et une bordure visible.\n\nPuis nous avons le pseudo-élément. Il insère un symbole # \"avant\" le contenu du paragraphe. Le CSS qui suit lui donne une bordure, un padding, des marges.\n\nEt voici le résultat dans notre navigateur\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/autre-contenu-compressor.jpeg\" width=\"500\" height=\"175\" alt=\"symbole inséré avant le paragraphe, le symbole comporte une bordure, un padding et des marges\"/\u003e\u003c/figure\u003e\n\nLa boîte extérieure est notre paragraphe. La bordure qui entoure le symbole # représente les limites de notre pseudo-élément. Autrement dit, celui-ci n'est pas inséré \"avant\" le paragraphe, il est placé avant \"Other content\" à l'intérieur du paragraphe.\n\n## Insérer du contenu non-textuel\n\nNous avons vu que nous pouvions donner à la propriété `content` une valeur textuelle - y compris éventuellement une chaîne de caractères vide (\"\"). Mais nous avons encore deux options possibles.\n\nTout d'abord, nous pouvons inclure une URL qui pointe vers une image, exactement comme nous le ferions pour inclure une image de background dans le CSS\u0026nbsp;:\n\n    p:before {\n       content: url(image.jpg);\n    }\n\nRemarquez qu'il n'y a pas de guillemets. Si c'était le cas, cela deviendrait une chaîne de caractères et on insèrerait le texte \"url(image.jpg)\" comme contenu au lieu d'insérer l'image elle-même.\n\nBien entendu, nous pouvons inclure une [Data URI](https://www.alsacreations.com/article/lire/1439-data-uri-schema.html) à la place de la référence de l'image, tout comme pour un background CSS.\n\nNous avons également la possibilité d'inclure une fonction sous la forme `attr(X)`. Selon [les termes de la spécification](http://www.w3.org/TR/CSS2/generate.html#propdef-content), \"cette fonction retourne sous forme de chaîne de caractères la valeur de l'attribut X pour le sujet du sélecteur\".\n\nPar exemple :\n\n    a:after {\n       content: attr(href);\n    }\n\nQue fait cette fonction `attr()` ? Elle prend la valeur de l'attribut spécifié (href) et la retourne sous forme de texte, qui sera inséré par le pseudo-élément.\n\nLe code ci-dessus aura pour effet d'afficher sur la page la valeur de `href` de chaque élément `\u003ca\u003e` et de le placer immédiatement après chaque élément `\u003ca\u003e`. Un cas d'usage classique concerne la feuille de style \"impression\", puisque cela permet d'inscrire en clair l'URL après chaque lien sur les documents imprimés.\n\nNous pourrions aussi utiliser cette fonction pour aller chercher la valeur de l'attribut `title` d'un élément, ou même les valeurs des [microdonnées](http://fr.wikipedia.org/wiki/Microdonnée). Toutefois, s'il serait pratique d'aller chercher le `title` ou le texte `alt` d'une image pour l'afficher sur la page avec un pseudo-élément, ce n'est pas possible. Rappelez-vous que le pseudo-élément doit être un enfant de l'élément auquel il est appliqué. Les images, qui sont des [éléments vides](http://www.w3.org/TR/html-markup/syntax.html#syntax-elements) (void elements), n'ont pas l'éléments enfants, par conséquent cela ne marche pas. Même chose pour tous les éléments vides, tels que `\u003cinput\u003e` (NdT\u0026nbsp;: à part ces deux là, les autres ne sont pas très intéressants).\n\n## Accessibilité\n\nLes pseudo-éléments, on l'a vu, n'apparaissent pas dans le DOM, ils ne sont pas réels. De ce fait, les appareils ou logiciels d'assistance pour les personnes ayant des déficiences ne peuvent pas y accéder. Veillez à ne pas utiliser de pseudo-éléments pour générer un contenu indispensable à l'usabilité ou à l'accessibilité de vos pages.\n\n**Ressources intéressantes sur :before et :after**\n\n[A Single Div](http://a.singlediv.com/), des exemples d'illustrations réalisées à partir d'une simple div et de CSS utilisant `:before` et `:after`, très impressionnant\u0026nbsp;!\n"},{"slug":"centrer-une-div-guide-complet","title":"Centrer un bloc div, guide complet","author":{"name":"Steve Pear","lastname":"Pear"},"original":{"date":"2 février 2014","site":"Tipue","siteUrl":"https://www.tipue.com/","postUrl":"https://www.tipue.com/blog/center-a-div/","copyright":"2021"},"dateCascade":"28 mars 2014","dateMachine":"2O140328","tags":["css","flexbox"],"about":["CSS Transform","Centrer"],"excerpt":"Un guide complet pour centrer une div. Steve Pear fait le tour de la question du centrage de div en CSS et propose des solutions pour tous les cas de figure.","featured":true,"featuredImage":"/images/Big_Lewbowski_World_Of_Pain_New_Brown_Shirt-compressor.jpeg","order":1,"content":"\nTout développeur a eu un jour des problèmes pour centrer un bloc div… Centrer le _contenu d'une div_ est assez simple, il suffit de donner à la propriété `text-align` la valeur `center`, mais lorsqu'on parle de centrer _la div elle-même_ les choses deviennent plus délicates, et quand il s'agit de centrer une div verticalement vous entrez dans un monde de douleur.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/Big_Lewbowski_World_Of_Pain_New_Brown_Shirt-compressor.jpeg\" width=\"386\" height=\"386\" alt=\"citation du film The Big Lebowski, you are entering a world of pain\"/\u003e\u003c/figure\u003e\n\nL'objectif de cet article est de montrer comment, avec quelques astuces CSS, on peut centrer n'importe quelle div, horizontalement, verticalement ou les deux à la fois, à l'intérieur d'une page ou d'une div.\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT : Steve Pear s'intéresse ici spécifiquement au **centrage d'une div**, pour une introduction complète au **centrage du contenu** d'une div, consultez l'article_ [Centrer en CSS, un guide complet](/articles/centrer-en-css-un-guide-complet), _de Chris Coyier\u0026nbsp;: le centrage du contenu d'une div n'est pas aussi simple que le dit Steve Pear\u0026nbsp;!_\n\n## Centrer une div dans une page, les bases\n\nCette méthode fonctionne avec n'importe quel navigateur.\n\n    .center-div {\n         margin: 0 auto;\n         width: 100px;\n    }\n\nLe résultat dans CodePen (vous pouvez cliquer sur HTML et CSS pour en voir le contenu ou sur _edit on CodePen_ pour le modifier)\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_voseD\" src=\"//codepen.io/Tipue/embed/voseD?height=270\u0026amp;theme-id=light\u0026amp;slug-hash=voseD\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"270\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/Tipue/pen/voseD/\"\u003e\n  Centering a div in a page, basic\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa valeur `auto` de la propriété `margin` donne aux marges gauche et droite l'espace restant disponible dans la page. Il faut bien se rappeler de donner une propriété `width` à votre div.\n\n## Centrer une div dans une div, à l'ancienne\n\nCela fonctionne avec à peu près tous les navigateurs.\n\n    .outer-div {\n         padding: 30px;\n    }\n    .inner-div {\n         margin: 0 auto;\n         width: 100px;\n    }\n\n    //HTML\n\n    \u003cdiv class=\"outer-div\"\u003e\n    \t\u003cdiv class=\"inner-div\"\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\nLe résultat dans CodePen\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_apDLG\" src=\"//codepen.io/Tipue/embed/apDLG?height=320\u0026amp;theme-id=light\u0026amp;slug-hash=apDLG\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"320\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/Tipue/pen/apDLG/\"\u003e\n  Centering a div within a div, old-school\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa marge `auto` frappe encore, et la div intérieure doit avoir une propriété `width`.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/world-of-pain-1.jpeg\" width=\"610\" height=\"343\" alt=\"image tirée du film The Big Lebowski\"/\u003e\u003cfigcaption\u003e“On vous l'avait bien dit les gars...”\u003c/figcaption\u003e\u003c/figure\u003e\n\n## Centrer une div dans une div avec inline-block\n\nAvec la méthode [inline-block](/articles/la-difference-entre-block-et-inline/), la div intérieure n'a pas besoin de propriété `width`. Fonctionne avec tous les navigateurs raisonnablement modernes.\n\n    .outer-div {\n         padding: 30px;\n         text-align: center;\n    }\n    .inner-div {\n         display: inline-block;\n         padding: 50px;\n    }\n\n    //HTML\n\n    \u003cdiv class=\"outer-div\"\u003e\n    \t\u003cdiv class=\"inner-div\"\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_Ednlt\" src=\"//codepen.io/Tipue/embed/Ednlt?height=320\u0026amp;theme-id=light\u0026amp;slug-hash=Ednlt\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"320\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/Tipue/pen/Ednlt/\"\u003e\n  Centering a div within a div with inline-block\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa propriété `text-align` ne fonctionne qu'avec les éléments inline. La valeur `inline-block` affiche la div intérieure comme un élément inline _et_ block, ce qui permet à la propriété `text-align` de la div extérieure de centrer la div intérieure.\n\n## Centrer une div dans une div, horizontalement et verticalement\n\nOn utilise l'astuce `margin auto` pour centrer une div dans le sens horizontal et vertical, et cela fonctionne avec tous les navigateurs modernes.\n\n    .outer-div {\n         padding: 30px;\n    }\n    .inner-div {\n         margin: auto;\n         width: 100px;\n         height: 100px;\n    }\n\n    //HTML\n\n    \u003cdiv class=\"outer-div\"\u003e\n    \t\u003cdiv class=\"inner-div\"\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\nLe résultat dans CodePen\u0026nbsp;:\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_vsKif\" src=\"//codepen.io/Tipue/embed/vsKif?height=320\u0026amp;theme-id=light\u0026amp;slug-hash=vsKif\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"320\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/Tipue/pen/vsKif/\"\u003e\n  Centering a div within a div, horizontally and vertically\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa div intérieure doit avoir des propriétés `width` et `height`. Cette méthode ne fonctionne pas si la div extérieure a une hauteur fixe.\n\n## Centrer verticalement une div avec transform\n\nCette méthode utilise `transform` pour centrer verticalement tout contenu à l'intérieur d'une div. On fait appel à un élément HTML vide qui sert de conteneur, ici j'ai choisi `\u003cp\u003e`.\n\n```\n.center-div p\n{\n     position: relative;\n     top: 50%;\n     transform: perspective(1px) translateY(-50%);\n}\n\n// HTML\n    \u003cdiv class=\"center-div\"\u003e\n    \t\u003cp\u003eEsse augue dolor\u003c/p\u003e\n    \u003c/div\u003e\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_NXwGqB\" src=\"//codepen.io/Tipue/embed/NXwGqB?height=350\u0026amp;theme-id=light\u0026amp;slug-hash=NXwGqB\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"350\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/Tipue/pen/NXwGqB\"\u003e\n  Vertical center in a div with transform\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa valeur `perspective` réduit le flou (_blurring_) sur un affichage haute-définition. Pour une meilleure compatibilité avec les navigateurs anciens, vous pouvez utiliser les préfixes constructeurs comme `-webkit-transform` et `-ms-transform`. Ce dernier remonte jusqu'à IE9.\n\n## Centrer une div en bas de page\n\nIci, on utilise `margin auto` et une div externe [positionnée absolument](/articles/le-positionnement-css). Fonctionne avec tous les navigateurs modernes.\n\n    .outer-div {\n         position: absolute;\n         bottom: 30px;\n         width: 100%;\n    }\n    .inner-div {\n         margin: 0 auto;\n         width: 100px;\n         height: 100px;\n         background-color: #ccc;\n    }\n\n    //HTML\n\n    \u003cdiv class=\"outer-div\"\u003e\n    \t\u003cdiv class=\"inner-div\"\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_bwLDh\" src=\"//codepen.io/Tipue/embed/bwLDh?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=bwLDh\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/Tipue/pen/bwLDh/\"\u003e\n  Centering a div at the bottom of a page\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa div intérieure doit avoir une propriété `width`. La distance la séparant du bas de page est définie grâce à la propriété `bottom` de la div extérieure.\n\nPour centrer une div en haut de page, remplacez la propriété `bottom` par `top`.\n\n## Centrer une div dans une page, horizontalement et verticalement\n\nOn utilise là encore `margin auto`, et une div extérieure positionnée absolument. Fonctionne avec tous les navigateurs modernes.\n\n    .center-div {\n         position: absolute;\n         margin: auto;\n         top: 0;\n         right: 0;\n         bottom: 0;\n         left: 0;\n         width: 100px;\n         height: 100px;\n         background-color: #ccc;\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_CBbna\" src=\"//codepen.io/Tipue/embed/CBbna?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=CBbna\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"http://codepen.io/Tipue/pen/CBbna/\"\u003e\n  Centering a div in a page, horizontally and vertically\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa div doit avoir les propriétés `width` et `height`.\n\n## Centrer une div dans une page, responsive\n\nLa largeur de la div est responsive, elle s'adapte à la largeur du viewport. Fonctionne sur tous les navigateurs.\n\n```\n.center-div\n{\n     margin: 0 auto;\n     max-width: 700px;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_sGHuI\" src=\"//codepen.io/Tipue/embed/sGHuI?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=sGHuI\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/Tipue/pen/sGHuI\"\u003e\n  Centering a div in a page, responsive\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa div centrée doit avoir une propriété `max-width`.\n\n## Centrer une div dans une div responsive\n\nLa div intérieure est responsive. Fonctionne avec tous les navigateurs.\n\n```\n.outer-div\n{\n     padding: 30px;\n}\n.inner-div\n{\n     margin: 0 auto;\n     max-width: 700px;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_yAbdC\" src=\"//codepen.io/Tipue/embed/yAbdC?height=320\u0026amp;theme-id=light\u0026amp;slug-hash=yAbdC\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"320\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/Tipue/pen/yAbdC\"\u003e\n  Centering a div within a div, inner div responsive\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa div intérieure doit avoir une propriété `max-width`.\n\n## Centrer deux divs responsives, côte à côte\n\nDeux divs côte à côte, toutes les deux sont responsives. Fonctionne avec tous les navigateurs.\n\n```\n.container\n{\n     text-align: center;\n}\n.left-div\n{\n     display: inline-block;\n     max-width: 300px;\n     vertical-align: top;\n}\n.right-div\n{\n     display: inline-block;\n     max-width: 150px;\n}\n@media screen and (max-width: 600px)\n{\n     .left-div, .right-div\n     {\n          max-width: 100%;\n     }\n}\n\n//HTML\n\n\u003cdiv class=\"container\"\u003e\n    \u003cdiv class=\"left-div\"\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"right-div\"\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_pjdgad\" src=\"//codepen.io/Tipue/embed/pjdgad?height=320\u0026amp;theme-id=light\u0026amp;slug-hash=pjdgad\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"320\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/Tipue/pen/pjdgad\"\u003e\n  Centering two responsive divs, side by side\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nPour cela on utilise juste deux éléments `inline-block` dans un conteneur centré. Notez qu'on fait également appel à la media query de CSS. Lorsque la taille d'écran est inférieure à 600px, la propriété `max-width` de chacune des divs est fixée à 100%.\n\n## Flexbox et le centrage de div\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/dudeism-compressor.jpeg\" width=\"500\" height=\"250\" alt=\"image tirée du film The Big Lebowski\"/\u003e\u003c/figure\u003e\n\nLe nouveau modèle de mise en page Flexbox simplifie le centrage. L'exemple ci-dessous centre une div horizontalement et verticalement.\n\n```\n.container\n{\n     display: flex;\n     align-items: center;\n     justify-content: center;\n     height: 100vh;\n}\n.item\n{\n     background-color: #f3f2ef;\n     border-radius: 3px;\n     width: 200px;\n     height: 100px;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_QbrvYe\" src=\"//codepen.io/Tipue/embed/QbrvYe?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=QbrvYe\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/Tipue/pen/QbrvYe\"\u003e\n  Flexbox, div centered\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLa propriété `height` du conteneur peut être ce qu'on veut, du moment qu'elle est plus large que la div centrée. Dans cet exemple, nous utilisons `vh`, qui est la hauteur de la fenêtre du navigateur, le viewport, plutôt que la hauteur de la page.\n\n## Centrer une div dynamique, horizontalement et verticalement\n\nCette méthode utilise la propriété `display` avec une valeur de `table`, ce qui lui donne le comportement d'un élément `table` et centre la div horizontalement et verticalement. La div centrée peut avoir un contenu dynamique, et donc une hauteur ou une largeur variable. Elle peut être responsive.\n\n```\n.outer-div\n{\n     display: table;\n     position: absolute;\n     height: 100%;\n     width: 100%;\n}\n.mid-div\n{\n     display: table-cell;\n     vertical-align: middle;\n}\n.center-div\n{\n     margin: 0 auto;\n     width: 300px;\n     height: 100px;\n}\n```\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_PEEOYp\" src=\"//codepen.io/Tipue/embed/PEEOYp?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=PEEOYp\u0026amp;user=Tipue\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/Tipue/pen/PEEOYp\"\u003e\n  Centering a dynamic div, horizontally and vertically\u003c/a\u003e de Steve Pear dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nLes propriétés `width` et `height` de la div centrée peuvent être ce que vous voulez.\n\n---\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires\u003c/h2\u003e\n\nConsultez également dans La Cascade :\n\n- [Alignement en CSS, guide complet](/articles/alignement-en-css-guide-complet)\n- [Centrer en CSS, guide complet](/articles/centrer-en-css-un-guide-complet)\n- [CSS Flexbox et l'alignement, guide complet](/articles/css-flexbox-et-lalignement-guide-complet)\n"},{"slug":"les-degrades-css","title":"Les dégradés CSS","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"3 mars 2014","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/css3-gradients/","copyright":"2014"},"dateCascade":"09 mars 2014","dateMachine":"2O140309","tags":["css"],"about":["Dégradés CSS"],"excerpt":"Surligner les rangées d'un tableau en CSS est très facile, mais les colonnes ? Les pseudo-éléments sont mis à contribution dans ce tutoriel court, facile et astucieux de l'indispensable Chris Coyier.","featured":false,"featuredImage":"/images/gradients1.png","order":null,"content":"\nEn CSS, vous pouvez choisir de déclarer le background d'un élément comme une couleur solide, ou comme un dégradé. L'utilisation de dégradés CSS à la place d'images est préférable en termes de contrôle et de performance.\n\nQu'est-ce qu'un dégradé ? Typiquement, c'est le passage d'une couleur vers une autre, mais avec CSS vous pouvez contrôler exactement la façon dont ça se passe, depuis la direction jusqu'aux couleurs (aussi nombreuses que vous désirez) et jusqu'à l'endroit où vous voulez que ça se produise. Voyons ça en détail.\n\n## Les dégradés comme background-image\n\nEn CSS, la déclaration d'une couleur solide se fait en utilisant la propriété `background-color`, mais pour les dégradés on utilise `background-image`. C'est pratique, comme nous allons le voir tout à l'heure. Le raccourci `background` saura ce que vous voulez dire si vous déclarez l'un ou l'autre.\n\n    //CSS\n\n    .gradient {\n\n      /* pour une éventuelle solution de rechange */\n    background-color: red;\n\n    /* sera \"au-dessus\", si le navigateur est compatible */\n    background-image: linear-gradient(red, orange);\n\n    /* remet à zéro les autres propriétés, comme background-position, mais le navigateur ne sait pas ce que vous voulez */\n    background: red;\n    background: linear-gradient(red, orange);\n    }\n\n## Dégradés linéaires\n\nLe type de dégradés le plus courant et le plus utile est `linear-gradient()`. L'axe du dégradé peut être de gauche à droite, du haut vers le bas ou selon un angle que vous choisissez.\n\nSi vous ne déclarez rien, la direction sera par défaut de haut en bas\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients1.png\" width=799 height=128 alt=\"dégradé de haut en bas\"/\u003e\u003c/figure\u003e\n\nLes couleurs sont séparées par une virgule et peuvent être de tous les types que vous utilisez habituellement\u0026nbsp;: hexadécimales, couleurs nommées, RGBA, HSLA, etc.\n\nPour rendre votre dégradé horizontal, vous devez passer un paramètre supplémentaire commençant par le mot \"to\" (vers) qui indique la direction\u0026nbsp;:\n\n    //CSS\n\n    .gradient {\n      background-image:\n        linear-gradient(\n          to right,\n          red, #f06d06\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients2.png\" width=799 height=128 alt=\"dégradé de gauche à droite\"/\u003e\u003c/figure\u003e\n\nCette syntaxe \"to\" fonctionne aussi pour les coins. Par exemple si vous voulez que l'axe du dégradé commence au coin inférieur gauche pour aller au coin supérieur droit, vous pouvez indiquer \"to top right\"\u0026nbsp;:\n\n    .gradient {\n      background-image:\n        linear-gradient(\n          to top right,\n          red, #f06d06\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients3.png\" width=799 height=128 alt=\"dégradé du coin inférieur gauche au coin supérieur droit\"/\u003e\u003c/figure\u003e\n\nSi cette boîte était carrée, l'angle du dégradé serait de 45°, mais ce n'est pas le cas ici. Si vous voulez être sûr que l'angle soit de 45°, vous pouvez déclarer\u0026nbsp;:\n\n    //CSS\n\n    .gradient {\n      background-image:\n        linear-gradient(\n          45deg,\n          red, #f06d06\n        );\n    }\n\nVous n'êtes pas non plus limités à deux couleurs. En fait, vous pouvez intégrer autant de couleurs que vous le souhaitez, séparées par des virgules. En voici quatre\u0026nbsp;:\n\n    //CSS\n\n    .gradient {\n      background-image:\n        linear-gradient(\n          to right,\n          red,\n          #f06d06,\n          rgb(255, 255, 0),\n          green\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients4.png\" width=799 height=128 alt=\"dégradé avec stops multiples\"/\u003e\u003c/figure\u003e\n\nVous pouvez également déclarer l'endroit où vous voulez qu'une couleur s'arrête. C'est ce qu'on appelle le color-stop. Si par exemple vous voulez que le jaune occupe l'essentiel de l'espace et le rouge une toute petite partie au début, vous pouvez déclarer un color-stop assez tôt\u0026nbsp;:\n\n    //CSS\n\n    .gradient {\n      height: 100px;\n      background-color: red;\n      background-image:\n        linear-gradient(\n          to right,\n          red,\n          yellow 10%\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients5.png\" width=799 height=128 alt=\"dégradé avec très peu de rouge et très peu de dégradé, tout se passe dans les 10% initiaux, le reste est du jaune pur\"/\u003e\u003c/figure\u003e\n\nQuand on parle de dégradés on pense à des couleurs qui se mélangent graduellement mais si vous utilisez deux color-stop identiques, vous passez instantanément d'une couleur à l'autre, ce qui peut être utile pour créer des backgrounds qui simulent des colonnes.\n\n    //CSS\n\n    .columns-bg {\n      background-image:\n        linear-gradient(\n          to right,\n          #fffdc2,\n          #fffdc2 15%,\n          #d7f0a2 15%,\n          #d7f0a2 85%,\n          #fffdc2 85%\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients6.png\" width=799 height=128 alt=\"3 colonnes\"/\u003e\u003c/figure\u003e\n\n**Compatibilité navigateurs / préfixes**  \nJusqu'à présent, nous n'avons vu que la **nouvelle syntaxe**, mais les dégradés CSS existent depuis un bon bout de temps. La compatibilité navigateurs est bonne, là où ça devient complexe, c'est au niveau de la syntaxe et des préfixes. Il y a **trois** syntaxes différentes, qu'on peut voir ainsi\u0026nbsp;:\n\n1. **Ancienne** : la syntaxe originale, Webkit, avec des choses du genre `from()` et `color-stop()`.\n2. **Intermédiaire** : nouveautés du genre \"left\".\n3. **Nouvelle** : nouveau changement avec \"to right\".\n\nEt bien sûr les préfixes.\n\nEssayons de mettre tout ça dans un tableau\u0026nbsp;:\n\n    CHROME\t \t1-9: Ancienne, préfixée\n    \t\t\t10-25: Intermédiaire, préfixée\n    \t\t\t26: Nouvelle, non préfixée\n    SAFARI\t \t3-: Incompatible\n    \t\t\t4-5.0: Ancienne, préfixée\n    \t\t\t5.1-6.0: Intermédiaire, préfixée\n    \t\t\t6.1: Nouvelle, non préfixée\n    FIREFOX\t \t3.5-: Incompatible\n    \t\t\t3.6-15: Intermédiaire, préfixée\n    \t\t\t16: Nouvelle, non préfixée\n    OPERA\t \t11.0-: Incompatible\n    \t\t\t11.1-11.5: Intermédiaire, préfixée, linéaire seulement\n    \t\t\t11.6-12: Intermédiaire, préfixée, radial ajouté\n    \t\t\t12.1: Intermédiaire, non préfixée\n    \t\t\t15: Nouvelle, non préfixée\n    IE\t \t\t8-: Incompatible\n    \t\t\t9: filtres seulement\n    \t\t\t10+: Nouvelle, non préfixée (+ Intermédiaire, préfixée)\n    ANDROID\t \t2.0-: Incompatible\n    \t\t\t2.1-3.0: Intermédiaire, préfixée\n    \t\t\t4.0-4.3: Nouvelle, préfixée\n    \t\t\t4.4+: Nouvelle, non préfixée\n    iOS\t 3-: \tIncompatible\n    \t\t\t3.2-4.3: Intermédiaire, préfixée\n    \t\t\t5.0-6.1: Nouvelle, préfixée\n    \t\t\t7.0: Nouvelle, non préfixée\n\nIl y a des tuilages, par exemple lorsqu'un navigateur supporte la nouvelle syntaxe, il supportera probablement les syntaxes anciennes, avec préfixe. Quoi qu'il en soit, la meilleure pratique reste\u0026nbsp;: Si votre navigateur est compatible avec la nouvelle syntaxe, utilisez la.\n\nSi vous vouliez avoir la compatibilité support la plus parfaite, un dégradé linéaire pourrait ressembler à ceci\u0026nbsp;:\n\n    //CSS\n\n    .gradient {\n\n      /* Fallback (ou bien .jpg/.png) */\n      background-color: red;\n\n      /* SVG fallback pour IE 9 (avec data URI, ou avec filtre) */\n      background-image: url(fallback-gradient.svg);\n\n      /* Safari 4, Chrome 1-9, iOS 3.2-4.3, Android 2.1-3.0 */\n      background-image:\n        -webkit-gradient(linear, left top, right top, from(red), to(#f06d06));\n\n      /* Safari 5.1, iOS 5.0-6.1, Chrome 10-25, Android 4.0-4.3 */\n      background-image:\n        -webkit-linear-gradient(left, red, #f06d06);\n\n      /* Firefox 3.6 - 15 */\n      background-image:\n        -moz-linear-gradient(left, red, #f06d06);\n\n      /* Opera 11.1 - 12 */\n      background-image:\n        -o-linear-gradient(left, red, #f06d06);\n\n      /* Opera 15+, Chrome 25+, IE 10+, Firefox 16+, Safari 6.1+, iOS 7+, Android 4.4+ */\n      background-image:\n        linear-gradient(to right, red, #f06d06);\n\n    }\n\nÇa en fait du code ! Écrire tout ça à la main serait source d'erreurs et très ennuyeux. [Autoprefixer](https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6612156-utilisez-autoprefixer-pour-creer-du-code-adapte-a-tous-les-navigateurs) s'en occupera très bien.\n\u003cspan id=\"radial\"\u003e\u003c/span\u003e\n\n## Dégradés radiaux\n\nÀ la différence des dégradés linéaires qui vont d'un point à un autre sur une ligne, les dégradés radiaux irradient à partir d'un point. Ils sont souvent utilisés pour simuler une lumière.\n\nPar défaut, la première couleur part du centre (center center) de l'élément et se dégrade progressivement vers les contours. Le dégradé est réparti de manière égale dans toutes les directions.\n\n    //CSS\n\n    .gradient {\n      background-image:\n        radial-gradient(\n          yellow,\n          #f06d06\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients7.png\" width=799 height=128 alt=\"irradiation depuis le centre, en forme d'ellipse\"/\u003e\u003c/figure\u003e\n\nVous voyez comment ce dégradé prend par défaut une forme d'ellipse, du fait que l'élément contenant n'est pas un carré. Si nous voulons un cercle, nous pouvons le déclarer ainsi\u0026nbsp;:\n\n    //CSS\n\n    .gradient {\n      background-image:\n        radial-gradient(\n          circle,\n          yellow,\n          #f06d06\n        );\n    }\n\nNotez qu'avec cette déclaration le dégradé est circulaire et que le dégradé va par défaut jusqu'au côté le plus éloigné. Si nous voulons que le cercle soit entièrement compris dans notre élément, nous pourrions nous en assurer en spécifiant que le dégradé doit s'arrêter au côté le plus proche (\"closest-side\")\u0026nbsp;:\n\n    //CSS\n\n    .gradient {\n      background-image:\n        radial-gradient(\n          circle closest-side,\n          yellow,\n          #f06d06\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients8-1.png\" width=799 height=128 alt=\"irradiation circulaire depuis le centre, comprise intégralement dans les limites du plus petit côté\"/\u003e\u003c/figure\u003e\n\nLes valeurs possibles sont `closest-corner`(coin le plus proche), `closest-side` (côté le plus proche), `farthest-corner` (coin le plus éloigné) et `farthest-side` (côté le plus éloigné). En pratique, on peut se dire\u0026nbsp;: \"je veux que ce dégradé radial s'étende depuis le point central jusqu'à ...... , et qu'il se dégrade partout entre les deux, de la façon que j'indique\".\n\nUn dégradé radial ne part pas nécessairement du centre, vous pouvez spécifier un point de départ en utilisant \"at ...\" avec le premier paramètre\u0026nbsp;:\n\n    //CSS\n\n    .gradient {\n      background-image:\n        radial-gradient(\n          circle at top right,\n          yellow,\n          #f06d06\n        );\n    }\n\nPour que ce soit plus évident, j'ai fait un carré et ajouté un color-stop\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients9.png\" width=\"500\" height=\"500\" alt=\"irradiation depuis le coin supérieur droit\"/\u003e\u003c/figure\u003e\n\n**Compatibilité navigateurs**  \nC'est à peu près la même que pour les dégradés linéaires, à l'exception d'une très vieille version d'Opera. Mais tout comme pour les dégradés linéaires, la syntaxe a connu des changements. Là encore, il y a l'ancienne, l'intermédiaire et la nouvelle\u0026nbsp;:\n\n    //CSS\n\n    /* Exemple d'ancienne */\n    background-image:\n      -webkit-gradient(radial, center center, 0, center center, 141, from(black), to(white), color-stop(25%, blue), color-stop(40%, green), color-stop(60%, red), color-stop(80%, purple));\n\n    /* Exemple d'intermédiaire */\n    background-image:\n      -webkit-radial-gradient(45px 45px, farthest-corner, #F00 0%, #00F 100%) repeat scroll 0% 0% rgba(0, 0, 0, 0);\n\n    /* Exemple de nouvelle */\n    background-image:\n      radial-gradient(circle farthest-side at right, #00F, #FFF);\n\nLes caractéristiques à retenir étant\u0026nbsp;:\n\n- **Ancienne** : préfixée avec Webkit, comporte des choses comme `from()` et `color-stop()`.\n- **Intermédiaire** : le premier paramètre était la localisation du centre. Attention, ça ne fonctionne plus du tout avec les navigateurs qui supportent la nouvelle syntaxe non préfixée, donc si utilisez cette syntaxe intermédiaire elle doit absolument être préfixée.\n- **Nouvelle** : le premier paramètre peut être \"verbeux\", genre \"circle closest-corner at top right\".\n\nLà encore, je laisserais Autoprefixer s'en occuper. Vous écrivez avec la syntaxe nouvelle, il se charge des fallbacks. Les dégradés radiaux sont un peu plus compliqués que les linéaires, donc ma recommendation est de bien s'habituer à la nouvelle syntaxe et de n'utiliser qu'elle.\n\n## Dégradés répétés\n\nLes \"repeating gradients\" sont [légèrement moins compatibles](http://caniuse.com/#feat=css-repeating-gradients). Ils existent en versions linéaires et radiales.\n\nAvec les dégradés non-répétés, il existe [une astuce](https://la-cascade.io/les-motifs-css3/#colonnes) pour créer un dégradé de manière à répéter un motif. Pour cela on crée un petit rectangle qu'on aligne avec d'autres petits rectangles en utilisant `background-size`.\n\nPas besoin de cette astuce avec les dégradés répétés. La taille du dégradé est déterminée par le color-stop final. Si c'est 20px, la taille du dégradé (qui se répètera ensuite) est un carré de 20px de côté.\n\n    //CSS\n\n    .repeat {\n      background-image:\n        repeating-linear-gradient(\n          45deg,\n          yellow,\n          yellow 10px,\n          red 10px,\n          red 20px /* determines size */\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients10.png\" width=\"500\" height=\"500\" alt=\"motif répété diagonal, lignes jaunes et rouges\"/\u003e\u003c/figure\u003e\n\nMême chose avec les dégradés radiaux\u0026nbsp;:\n\n    //CSS\n\n    .repeat {\n      background:\n        repeating-radial-gradient(\n          circle at 0 0,\n          #eee,\n          #ccc 50px\n        );\n    }\n\nRésultat :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/gradients11.png\" width=\"500\" height=\"500\" alt=\"motif répété irradié depuis le coin supérieur gauche, répétition du même dégradé\"/\u003e\u003c/figure\u003e\n\n---\n\n\u003cspan class=\"ressourcesComplementaires\"\u003e**Ressources complémentaires en anglais**\u003c/span\u003e\n\n- Jouez avec ce que nous avons vu en utilisant [CSS3, please!](http://css3please.com)\n- [Can I Use](http://caniuse.com/#search=gradients) pour les dégradés\n- Les ressources de Mozilla sur les dégradés [linéaires](https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient), [linéaires répétés](https://developer.mozilla.org/en-US/docs/Web/CSS/repeating-linear-gradient), [radiaux](https://developer.mozilla.org/en-US/docs/Web/CSS/radial-gradient) et [radiaux répétés](https://developer.mozilla.org/en-US/docs/Web/CSS/repeating-radial-gradient).\n- Une [galerie de dégradés](http://lea.verou.me/css3patterns/) (vous pouvez construire des motifs incroyables avec les dégradés).\n\n\u003cspan class=\"ressourcesComplementaires\"\u003e**Ressources complémentaires en français**\u003c/span\u003e\n\n- [Utilisation de dégradés CSS](https://developer.mozilla.org/fr/docs/CSS/Utilisation_de_d%C3%A9grad%C3%A9s_CSS), par Mozilla\n- [Les dégradés de couleur en CSS3 avec gradient](http://www.html5-css3.fr/css3/degrades-couleurs-css3-gradient), par HTML5-CSS3.fr\n\n\u003cspan class=\"ressourcesComplementaires\"\u003e**Outils**\u003c/span\u003e\n\n- [CSS Gradient Generator](http://www.virtuosoft.eu/tools/css-gradient-generator/?t=radial\u0026s=farthest-corner\u0026r=on\u0026sh=ellipse\u0026h=left\u0026v=top\u0026sp=c5e3ef_0_%25__4badd2_50_%25__278fba_73.5_%25__8ed4f1_100_%25) , comme son nom l’indique, un outil en ligne pour s’amuser avec les dégradés et comprendre comment ça marche.\n- [Blend](http://colinkeany.com/blend/), un autre outil intuitif pour générer facilement des dégradés CSS\n"},{"slug":"flexbox-guide-complet","title":"Flexbox, guide complet","author":{"name":"Chris Coyier","lastname":"Coyier"},"original":{"date":"8 avril 2013","site":"CSS-Tricks","siteUrl":"https://css-tricks.com/","postUrl":"https://css-tricks.com/snippets/css/a-guide-to-flexbox/","copyright":"2014"},"dateCascade":"1er février 2014","dateMachine":"2O140201","tags":["css","flexbox"],"about":[],"excerpt":"Le module Flexbox Layout fournit une façon plus efficace de disposer, aligner et distribuer l'espace entre les éléments de votre page. 4 riches articles de Chris Coyier sont réunis ici.","featured":true,"featuredImage":"/images/flex01-1-compressor.png","order":4,"content":"\n_NdT\u0026nbsp;: Ce tutoriel est la réunion de quatre articles de Chris Coyier formant une introduction à Flexbox. Vous pouvez ensuite consulter [tous les articles sur Flexbox traduits dans la Cascade](/tags/flexbox/) notamment les exemples concrets d'implémentation et les astuces techniques_.\n\nLe module CSS3 `Flexbox Layout` fournit une façon efficace de disposer, aligner et distribuer l'espace entre les items d'un container, même lorsque leurs dimensions sont inconnues et/ou dynamiques - d'où le terme \"flex\".\n\nL'idée principale est de donner à un élément contenant (container) la possibilité de changer les largeur et hauteur des éléments contenus (items), afin de remplir au mieux l'espace disponible, et de s'adapter à tous les terminaux et toutes les tailles d'écrans. Un container flexible permet aux items de s'étendre pour occuper la place disponible ou au contraire les réduit pour leur éviter de déborder.\n\nLe plus important à retenir c'est qu'avec Flexbox la disposition n'est pas rigidement directionnelle, contrairement à ce que nous connaissons habituellement en CSS —\u0026nbsp;où Block est basé sur un schéma vertical et Inline sur un schéma horizontal. Cela fonctionne bien pour les pages, mais ça manque de... flexibilité lorsqu'il s'agit d'applications complexes, en particulier lorsqu'il faut s'adapter aux changements d'orientation de device, redimensionner, étendre ou réduire l'espace, etc.\n\n**Note importante** : Flexbox est plutôt adapté aux composants d'une application, de petite échelle, alors que les grilles conviennent à des mises en page complexes et à grande échelle. [CSS Grid](/articles/css-grid-layout-guide-complet/) et Flexbox ont des usages différents mais [sont faits pour travailler ensemble](/articles/grid-et-flexbox-le-duo-gagnant/)\u0026nbsp;!\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e Nous allons commencer par décrire la mécanique, mais vous pouvez souhaiter regarder d'abord les [exemples d'usage de flexbox](#exemples).\n\n## Les bases\n\nFlexbox est un module, pas une propriété, cela entraîne pas mal de conséquences, entre autres que Flexbox a des propriétés bien à lui. Certaines concernent le container (l'élément parent, qu'on appelle \"flex container\"), d'autres concernent le ou les enfants (les \"flex items\").\n\nAlors que le positionnement CSS habituel est basé sur les directions de flux [block et inline](/articles/la-difference-entre-block-et-inline/), le positionnement flex, lui, est basé sur les directions \"flex-flow\". L'illustration ci-dessous, tirée des spécifications, explique l'idée qui est à la base du positionnement flex\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex01-1-compressor.png\" width=\"659\" height=\"281\" alt=\"schéma du système de positionnement flexbox\"/\u003e\u003c/figure\u003e\n\nLes items seront disposés soit sur l'axe principal (`main axis`) depuis `main-start` ou `main-end`, ou sur l'axe perpendiculaire (`cross axis`) en partant de `cross-start` ou de `cross-end`. Le flex-flow suit donc l'axe principal ou l'axe perpendiculaire.\n\n- **main axis** - L'axe principal d'un container flex est l'axe primaire sur lequel les items sont disposés. Attention, il n'est pas forcément horizontal, tout dépendra de la propriété `justify-content` (voir ci-dessous).\n- **main-start | main-end** - À l'intérieur du container, les items flex sont placés entre un point de départ (main-start) et un point d'arrivée (main-end).\n- **main size** - La taille d'un item flex qui se trouve dans l'axe principal, qu'il s'agisse de la hauteur ou de la largeur, est la taille principale (main size). La propriété main size est soit \"width\", soit \"height\", selon l'orientation.\n- **cross axis** - L'axe perpendiculaire à l'axe principal est appelé cross axis. Sa direction dépend de la direction de l'axe principal.\n- **cross-start | cross-end** - Les lignes sont remplies avec les items et sont placées dans le container en partant du côté cross-start\u003c et en allant vers cross-end.\n- **cross-size** - La largeur ou la hauteur d'un item, selon la dimension dans laquelle on se trouve (même principe que main size).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex01css_flexbox_axis4-1-compressor.jpeg\" width=\"390\" height=\"392\" alt=\"autre version du schéma, main axis et cross axis\"/\u003e\u003c/figure\u003e\n\nLe schéma ci-dessus montre bien que l'axe principal peut être horizontal ou vertical. Dans le premier cas (éléments disposés horizontalement), on pourrait penser par exemple à des articles disposés en colonnes sur une page, ou à un groupe de photos (voir un [exemple](#horiz) plus bas), ou encore à une barre de navigation horizontale. Dans le deuxième cas (éléments disposés verticalement), on peut imaginer une sidebar, des liens de navigation (voir un [exemple](#nav) plus bas), etc.\n\n## Propriétés\n\n\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e **Commençons par les propriétés qui s'appliquent à l'élément parent, le container**.\n\nLa première chose à faire est de définir un contexte général d'affichage. Le module flexbox fontionne à l'intérieur de ce contexte.\n\n### display: flex|inline-flex;\n\nC'est ainsi qu'on définit un container flex, il est block par défaut ou inline selon la valeur donnée. Cela cée un contexte flex pour tous les descendants directs.\n\n    display: flex | inline-flex;\n\n- `flex` : Cette valeur génère un container flex, de niveau block, à l'intérieur de l'élément.\n- `inline-flex` : Cette valeur génère un container flex, de niveau inline, à l'intérieur de l'élément.\n\nNotez que :\n\n- les propriétés `columns-` du [module multi-colonnes](https://developer.mozilla.org/fr/docs/CSS/Colonnes_CSS3) n'ont pas d'effet sur un container flex\n- `float`, `clear` et `vertical-align` n'ont pas d'effet sur un item flex.\n\nPour comprendre en se divertissant, le mieux est de jouer avec ces valeurs sur des outils en ligne tels que [flexplorer](http://bennettfeely.com/flexplorer/) (voir liste en fin d'article).\n\n### flex-direction\n\n[La propriété flex-direction établit l'axe principal.\n\n    flex-direction: row | row-reverse | column | column-reverse\n\n- `row` (valeur par défaut): de gauche à droite si la lecture se fait dans ce sens, de droite à gauche dans le cas inverse \u003csup id=\"backto1\"\u003e\u003ca href=\"#1\"\u003e(1)\u003c/a\u003e\u003c/sup\u003e.\n- `row-reverse` : inverse le sens\n- `column` : comme `row` mais du haut vers le bas\n- `column-reverse` : comme `row-reverse` mais du bas vers le haut\n\n### flex-wrap\n\nCette propriété définit si le container comprend une seule ligne ou plusieurs et la direction sur l'axe perpendiculaire (cross-axis), qui détermine la direction dans laquelle les nouvelles lignes seront empilées.\n\n    flex-wrap: nowrap | wrap | wrap-reverse\n\n- `nowrap` : (valeur par défaut) sur une seule ligne, de gauche à droite dans un système `ltr`, sinon l'inverse. La ligne peut déborder de son contenant.\n- `wrap` : multiligne, de gauche à droite dans un système `ltr`, sinon l'inverse. Pas de débordement, on passe à la ligne.\n- `wrap-reverse` : multiligne, de droite à gauche dans un système `ltr`, sinon l'inverse.\n\n### flex-flow\n\nCette propriété est un raccourci des propriétés \"flex-direction\" et \"flex-wrap\" qui ensemble définissent les axes \"main\" et \"cross\" du container flex. La valeur par défaut est `row nowrap`.\n\n    flex-flow: \u003c‘flex-direction’\u003e || \u003c‘flex-wrap’\u003e\n\n### justify-content\n\nLa propriété justify-content définit l'alignement le long de l'axe principal. Elle permet de distribuer l'espace excédentaire lorsque tous les items flex sur une ligne sont inflexibles ou lorsqu'ils ont atteint leur taille maximale. Elle contrôle aussi l'alignement des items lorsqu'ils débordent.\n\n    justify-content: flex-start | flex-end | center | space-between | space-around\n\n- `flex-start` (par défaut) : les items sont regroupés en début de ligne\n- `flex-end` : les items sont regroupés en fin de ligne\n- `center` : les items sont centrés le long de la ligne\n- `space-between` : les items sont répartis sur la ligne; le premier est collé du côté start, le dernier du côté end.\n- `space-around` : les items sont répartis sur la ligne avec un espacement égal autour de chacun.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex02justify-compressor.png\" width=\"511\" height=\"279\" alt=\"exemples de justify-content\"/\u003e\u003c/figure\u003e\n\n_NdT\u0026nbsp;: pour plus de détails sur space-between, vous pouvez lire l'article [Guide de Flexbox : space-between, l'oublié](/articles/guide-de-flexbox-space-between-loublie/) dans la Cascade_.\n\n### align-items\n\nLa propriété align-items définit la façon dont les items d'une ligne sont disposés le long de l'axe \"cross\". On peut le voir comme la version de `justify-content` pour \"cross axis\".\n\n    align-items: flex-start | flex-end | center | baseline | stretch\n\n- `flex-start` : l'item est placé au début de la ligne cross-start.\n- `flex-end` : la marge \"cross-end\" de l'item est placée sur la ligne cross-end\n- `center` : les items sont centrés sur l'axe cross\n- `baseline` : les items sont alignés sur leur ligne de base\n- `stretch` (par défaut) : les items sont étirés jusqu'à remplir le container (tout en respectant min-width/max-width)\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex03align_items-compressor.png\" width=\"515\" height=\"385\" alt=\"exemples d'align-items\"/\u003e\u003c/figure\u003e\n\n### align-content\n\nLa propriété align-content aligne les lignes d'un container flex à l'intérieur de l'espace où il reste de l'espace sur l'axe cross, un peu comme `justify-content` aligne les items sur l'axe principal.\n\nNote : cette propriété n'a pas d'effet quand la flexbox n'a qu'une seule ligne.\n\n    align-content: flex-start | flex-end | center | space-between | space-around | stretch\n\n- `flex-start` : lignes regroupées au début du container\n- `flex-end` : lignes regroupées à la fin du container\n- `center` : lignes regroupées au centre du container\n- `space-between` : les lignes sont réparties, la première est collée du côté start, la dernière du côté end.\n- `space-around` : les lignes sont réparties avec un espacement égal autour de chacune.\n- `stretch` (par défaut) : les lignes s'étirent pour remplir tout l'espace.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex04align_content-compressor.png\" width=\"619\" height=\"515\" alt=\"exemples de align-content\"/\u003e\u003cmeta itemprop=\"width\" content=\"619\"\u003e\u003c/figure\u003e\n\n**Passons maintenant aux propriétés qui s'appliquent aux éléments enfants, les items flex**.\n\n### order\n\nPar défaut, les items flex sont disposés par ordre d'arrivée. Cependant, la propriété `order` permet de contrôler l'ordre dans lequel ils apparaissent dans le container.\n\n    order: \u003cnombre entier\u003e\n\n### flex-grow\n\nLa propriété flex-grow définit la possibilité pour un item de grandir, si nécessaire. Elle accepte une valeur sans unité qui sert de proportion. Elle dicte l'espace que peut prendre l'item à l'intérieur de l'espace disponible dans le flex container.\n\nSi tous les items ont `flex-grow` défini à 1, chaque enfant aura le même espace dans le container. Si vous donnez à l'un des enfants une valeur de 2, cet enfant prendra deux fois plus de place que les autres.\n\n    flex-grow: \u003cnombre entier\u003e (par défaut = 0)\n\nLes chiffres négatifs ne sont pas valides.\n\n### flex-shrink\n\nLa propriété flex-shrink définit la possibilité pour un item flex de rétrécir si nécessaire.\n\n    flex-shrink: \u003cnombre entier\u003e (par défaut = 1)\n\nLes chiffres négatifs ne sont pas valides.\n\n### flex-basis\n\nLa propriété flex-basis définit la taille par défaut d'un élément avant que l'espace restant soit réparti.\n\n    flex-basis: \u003clongueur\u003e | auto (par défaut = auto)\n\n_NdT\u0026nbsp;: pour plonger dans le menu détail de `flex-grow`, `flex-shrink`et `flex-basis`, vous pouvez consulter le passionnant article [CSS Flexbox et la dimension des boîtes](/articles/css-flexbox-et-la-dimension-des-boites/) dans La Cascade_.\n\n### flex\n\nCette propriété est le raccourci de `flex-grow`\u0026nbsp;, `flex-shrink` et `flex-basis`\u0026nbsp;. Les deuxième et troisième paramètres sont optionels. La valeur par défaut est `0 1 auto`.\n\n    flex: none | [ \u003c'flex-grow'\u003e \u003c'flex-shrink'\u003e? || \u003c'flex-basis'\u003e ]\n\n### align-self\n\nLa propriété align-self permet à des items flex de passer outre aux alignement par défaut ou à ceux spécifiés par `align-items`. Les valeurs sont les mêmes que pour ce dernier.\n\n    align-self: auto | flex-start | flex-end | center | baseline | stretch\n\n## \u003cspan id=\"exemples\"\u003eExemples\u003c/span\u003e\n\nCommençons avec un exemple extrêmement simple, qui résout un problème que nous rencontrons tous les jours\u0026nbsp;: [le centrage parfait](/articles/centrer-en-css-un-guide-complet/). Rien de plus simple avec Flexbox.\n\n    .parent {\n      display: flex;\n      height: 300px; /_ Ou ce que vous voulez _/\n    }\n\n    .child {\n      width: 100px; /_ Ou ce que vous voulez _/\n      height: 100px; /_ Ou ce que vous voulez _/\n      margin: auto; /_ Magique ! _/\n    }\n\nTout vient de ce qu'une marge réglée sur \"auto\" dans un container flex absorbe l'espace supplémentaire. Une marge verticale \"auto\" centrera l'item parfaitement sur les deux axes.\n\n\u003cspan id=\"horiz\"\u003eUtilisons\u003c/span\u003e maintenant quelques propriétés supplémentaires. Prenons une liste de 6 items, de dimension fixe, mais ils pourraient tout aussi bien être ajustables. Nous voulons qu'ils soient disposés de manière régulière sur l'axe horizontal, de façon à ce que lorsque nous modifions la taille de l'écran les items se répartissent sans avoir recours à des media queries.\n\n    .flex-container {\n      /_ On crée d'abord un contexte flex _/\n      display: flex;\n\n      /_ Puis on définit la direction du flux et le wrap\n      _ Rappelez-vous que c'est la même chose que :\n        _ flex-direction: row;\n        _ flex-wrap: wrap;\n      */\n      flex-flow: row wrap;\n\n      /_ Puis on définit la façon dont se répartit l'espace restant _/\n      justify-content: space-around;\n    }\n\nEt voilà. Le reste n'est plus qu'une question de style. Ci-dessous un exemple de cette répartition. Le mieux est de le regarder sur [CodePen](https://codepen.io/HugoGiraudel/pen/LklCv) et de faire varier la taille de l'écran pour voir ce qui se passe.\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_LklCv\" src=\"//codepen.io/HugoGiraudel/embed/LklCv?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=LklCv\u0026amp;user=HugoGiraudel\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"480\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/HugoGiraudel/pen/LklCv\"\u003e\n  Demo Flexbox 1\u003c/a\u003e de Hugo Giraudel dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n\u003cspan id=\"nav\"\u003eEssayons\u003c/span\u003e quelque chose d'autre. Admettons que nous ayons une barre de navigation alignée en haut à droite de notre page, mais nous souhaiterions qu'elle soit centrée pour les écrans de taille moyenne et sur une colonne pour des petits écrans. [Facile](https://codepen.io/HugoGiraudel/pen/pkwqH) :\n\n    /* Grand écran */\n    .navigation {\n      display: flex;\n      flex-flow: row wrap;\n      /_ Aligne les items à end line sur main-axis _/\n      justify-content: flex-end;\n    }\n\n    /* Écrans moyens */\n    @media all and (max-width: 800px) {\n      .navigation {\n        /_ on centre en répartissant l'espace entre les items _/\n        justify-content: space-around;\n      }\n    }\n\n    /* Petit écran */\n    @media all and (max-width: 500px) {\n      .navigation {\n        /_ On n'utilise plus row mais column _/\n        flex-direction: column;\n      }\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_pkwqH\" src=\"//codepen.io/HugoGiraudel/embed/pkwqH?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=pkwqH\u0026amp;user=HugoGiraudel\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"200\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/HugoGiraudel/pen/pkwqH\"\u003e\n  Demo Flexbox 2\u003c/a\u003e de Hugo Giraudel dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nEssayons encore mieux, en jouant avec la flexibilité des items flex ! Par exemple un [layout mobile-first](https://codepen.io/HugoGiraudel/pen/qIAwr) sur 3 colonnes, avec un header et un footer pleine largeur. Le tout indépendamment de l'ordre des sources.\n\n    .wrapper {\n      display: flex;\n      flex-flow: row wrap;\n    }\n\n    /* Tous les items sont à 100% width */\n    .header, .main, .nav, .aside, .footer {\n      flex: 1 100%;\n    }\n\n    /* We rely on source order for mobile-first approach\n    - in this case:\n    - 1. header\n    - 2. nav\n    - 3. main\n    - 4. aside\n    - 5. footer\n    */\n\n    /_ Écrans moyens _/\n    @media all and (min-width: 600px) {\n      /_ Les 2 sidebars partagent une rangée _/\n      .aside { flex: 1 auto; }\n    }\n\n    /* Grands écrans */\n    @media all and (min-width: 800px) {\n      /_ on intervertit l'ordre de la 1ère sidebar et de main\n      _ et on dit à l'élément de prendre 2 fois plus de place en largeur que les 2 sidebars\n      */\n      .main { flex: 2 0px; }\n\n      .aside-1 { order: 1; }\n      .main { order: 2; }\n      .aside-2 { order: 3; }\n      .footer { order: 4; }\n    }\n\n\u003cfigure class=\"break-out\"\u003e\n\t\u003cdiv\u003e\u003ciframe loading=\"lazy\" decoding=\"async\" id=\"cp_embed_qIAwr\" src=\"//codepen.io/HugoGiraudel/embed/qIAwr?height=300\u0026amp;theme-id=light\u0026amp;slug-hash=qIAwr\u0026amp;user=HugoGiraudel\u0026amp;default-tab=result\" scrolling=\"no\" frameborder=\"0\" height=\"400\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/figure\u003e\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/HugoGiraudel/pen/qIAwr\"\u003e\n  Demo Flexbox 3\u003c/a\u003e de Hugo Giraudel dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\nVoyons maintenant la façon dont flexbox résout le problème suivant\u0026nbsp;: comment faire pour qu'un nombre arbitraire de boîtes remplissent l'espace disponible dans la boîte parent et si nécessaire s'étendent au-delà (c'est à dire\u0026nbsp;: ne s'écrasent pas pour tenir dans la boîte). Vous pouvez regarder [cette vidéo](http://css-tricks.com/video-screencasts/131-tinkering-flexbox/) (en anglais) qui illustre ce que je veux dire par là.\n\nPar \"boîte\", j'entends simplement un élément de niveau block. Div, section, article, ce que vous voulez.\n\nLa hauteur par défaut d'une boîte est déterminée par son contenu. Les boîtes s'empilent les unes sur les autres. La hauteur de leur boîte parent pourrait également être déterminée par la somme de leurs hauteurs, mais il pourait en être autrement, par exemple si elle est définie explicitement ou si elle est soumise à quelque chose de variable, comme la taille de la fenêtre du navigateur. Si la boîte parent a une hauteur plus importante, il y aura simplement de l'espace vide en bas.\n\nPouvons-nous forcer les boîtes à se répartir l'espace disponible de façon égale\u0026nbsp;? Avec flexbox, oui.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex05fill_height-compressor.svg\" width=\"562\" height=\"392\" alt=\"à gauche il reste de l'espace, à droite les éléments occupent harmonieusement la page\"/\u003e\u003cfigcaption\u003eÀ gauche, par défaut. À droite, ce que nous voulons\u003c/figcaption\u003e\u003c/figure\u003e\n\nAdmettons que le HTML soit\u0026nbsp;:\n\n    \u003csection class=\"fill-height-or-more\"\u003e\n\n  \t\t\u003cdiv\u003e\n    \t\t\u003c!-- stuff --\u003e\n  \t\t\u003c/div\u003e\n  \t\t\u003cdiv\u003e\n    \t\t\u003c!-- stuff --\u003e\n  \t\t\u003c/div\u003e\n  \t\t\u003cdiv\u003e\n   \t\t\t\u003c!-- stuff --\u003e\n  \t\t\u003c/div\u003e\n\t\u003c/section\u003e\n\nOn démarre flexbox dans l'élément parent\u0026nbsp;:\n\n    // dans CSS\n\n    .fill-height-or-more {\n      display: flex;\n    }\n\net on empile les boîtes sur un axe vertical (column) plutôt qu'horizontal (row) qui est la valeur par défaut\u0026nbsp;:\n\n    .fill-height-or-more {\n      display: flex;\n      flex-direction: column;\n    }\n\nAvec cela, le rendu sera le même que si nous n'avions rien fait. Mais maintenant nous allons appliquer la propriété flex aux enfants, et ils vont remplir l'espace\u0026nbsp;:\n\n    .fill-height-or-more \u003e div {\n      /_ ce sont les items flex _/\n      flex: 1;\n    }\n\nEt c'est fait =)\n\nPour détailler : `flex: 1` est l'équivalent de `flex: 1 1 auto`\u0026nbsp;, c'est le raccourci de trois propriétés différentes\u0026nbsp;:\n\n    flex-grow: 1;\n    flex-shrink: 1;\n    flex-basis: auto;\n\nCe qui est sympa avec flexbox c'est que tout ça marcherait avec n'importe quel nombre de boîte, ça pourrait être une boîte unique ou 100 boîtes. S'il reste de l'espace, il sera partagé, sinon, pas de problème.\n\nDans un monde antérieur à flexbox, nous aurions sans doute essayé de savoir combien de boîtes il y avait, puis nous aurions fixé leur hauteur en poucentage. Ça fonctionne pour remplir l'espace, mais s'il y avait trop de boîtes elles seraient écrasées. Voilà encore un truc sympa avec flexbox, il ne va pas écraser nos boîtes au point qu'elles n'affichent plus leur contenu :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex06no_squish1-compressor.svg\" width=\"683\" height=\"267\" alt=\"pourcentages: les items sont écrasés. flexbox, ils dépassent, on y accède en scrollant\"/\u003e\u003c/span\u003e\u003cfigcaption\u003eÀ gauche, utilisation de pourcentages. À droite, le comportement souhaité\u003c/figcaption\u003e\u003c/figure\u003e\n\nSi nous voulons aller encore un peu plus loin, nous pouvons utiliser flexbox pour centrer le contenu à l'intérieur des boîtes. C'est là qu'on devient fou avec CSS. Le centrage vertical est difficile. Même avec flexbox ici, il va nous falloir transformer chacun de nos items en containers, puis utiliser un contenant interne qui devient l'item flex que nous centrons. Donc, oui, un élément de plus.\n\n    // dans HTML\n\n    \u003csection class=\"fill-height-or-more\"\u003e\n\n  \t\t\u003cdiv\u003e\n    \t\t\u003cdiv\u003e\n      \t\t\t\u003c!-- stuff --\u003e\n    \t\t\u003c/div\u003e\n  \t\t\u003c/div\u003e\n        ...\n        \n    // dans CSS\n     \n\t.fill-height-or-more \u003e div {\n  \t\t/* un flex item... */\n  \t\tflex: 1;\n      /_ ...qui est aussi un flex container _/\n      display: flex;\n    }\n\nPuis pour le centrer nous définissons la direction verticale à nouveau (column) et nous utilisons une autre propriété flexbox, `justify-content`\u0026nbsp;:\n\n    .fill-height-or-more \u003e div {\n      flex: 1;\n      display: flex\n      justify-content: center;\n      flex-direction: column;\n    }\n\nVoici ce que ça donne :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex07vertically_centered-compressor.svg\" width=\"272\" height=\"408\" alt=\"les items bien disposés\"/\u003e\u003c/figure\u003e\n\nD'un côté, c'est logique. Pour centrer quelque chose, il faut bien un élément dans lequel le centrer. D'un autre côté, avec une table et des cellules, on n'aurait pas eu besoin d'un élément supplémentaire... Bon enfin, voici la démo\u0026nbsp;!\n\n\u003cdiv class=\"pen\"\u003e\n\u003cimg src=\"/images/codepen.png\" alt=\"\" class=\"codepen-icon\"\u003e\u003cspan\u003evoir \u003ca href=\"https://codepen.io/chriscoyier/pen/Jeryz\"\u003e\n  Demo Flexbox 3\u003c/a\u003e de Chris Coyier dans \u003ca href=\"https://codepen.io\"\u003eCodePen\u003c/a\u003e\u003c/span\u003e\n\u003c/div\u003e\n\n### Compatibilité navigateurs\n\nJ'ai utilisé uniquement la dernière syntaxe ici. Les versions actuelles de Chrome, Opera sont compatibles. Les prochaines versions de Firefox et Android le seront aussi. Safari et iOS supportent la nouvelle syntaxe, avec des préfixes -webkit-. [Can I Use](http://caniuse.com/flexbox) vous racontera toute l'histoire.\n\nIE est bizarre. IE 10 est compatible avec l'ancienne version de flexbox, IE 11 avec la nouvelle. Pour cette démo pourtant il y a quelque chose qui ne fonctionne pas. La hauteur de `.fill-height-or-more` est bien rendue en utlisant `min-height`, mais les boîtes sont écrasées.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/flex08ie11_bug-compressor.png\" width=\"939\" height=\"722\" alt=\"problème avec IE 11\"/\u003e\u003c/figure\u003e\n \n\u003cspan id=\"ap\"\u003eVoici\u003c/span\u003e à quoi ressemble notre petit exemple lorsqu'on lui ajoute les préfixes constructeurs\u0026nbsp;:\n\n    .fill-height-or-more {\n      display: -webkit-box;\n      display: -webkit-flex;\n      display: -moz-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n      -webkit-flex-direction: column;\n      -moz-box-orient: vertical;\n      -moz-box-direction: normal;\n      -ms-flex-direction: column;\n      flex-direction: column;\n    }\n\n    .fill-height-or-more \u003e div {\n      -webkit-box-flex: 1;\n      -webkit-flex: 1;\n      -moz-box-flex: 1;\n      -ms-flex: 1;\n      flex: 1;\n      display: -webkit-box;\n      display: -webkit-flex;\n      display: -moz-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-pack: center;\n      -webkit-justify-content: center;\n      -moz-box-pack: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n      -webkit-box-orient: vertical;\n      -webkit-box-direction: normal;\n      -webkit-flex-direction: column;\n      -moz-box-orient: vertical;\n      -moz-box-direction: normal;\n      -ms-flex-direction: column;\n      flex-direction: column;\n    }\n\n\u003cspan id=\"syntaxes\"\u003e\u003c/span\u003eMon conseil : utilisez une syntaxe moderne, comme je l'ai fait précédemment, puis laissez [Autoprefixer](https://la-cascade.io/autoprefixer-un-postprocesseur-pour-les-prefixes-vendeurs/) s'occuper du reste, il règlera non seulement le problème des préfixes constructeurs mais aussi celui de l'ancienne syntaxe.\n\n## Flexbox ancien et nouveau\n\nLe flexbox que nous connaissons a subi de nombreux changements. Si vous cherchez flexbox dans Google, vous trouverez beaucoup d'informations dépassées. Si vous trouvez quelque chose comme `display: box;` ou une propriété `box-{*}`\u0026nbsp;, c'est la vieille version de 2009. Si vous trouvez `display: flexbox;` ou la fonction `flex()`\u0026nbsp;, c'est une phase bizarre de flexbox en 2011. Si vous voyez `display: flex` et `flex-{*}`\u0026nbsp;, vous êtes sur la spécification actuelle.\n\u003cspan id=\"1\"\u003e\u003c/span\u003e\n\n---\n\nNotes du Traducteur :\n\n(1) Pour rappel, vous pouvez définir le sens de lecture dans CSS avec la propriété `direction` qui accepte les valeurs `ltr` - de gauche à droite (_left to right_) - et `rtl` - de droite à gauche\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003ca href=\"#backto1\" style=\"text-decoration:none\"\u003e↩︎\u003c/a\u003e\n"},{"slug":"la-difference-entre-block-et-inline","title":"CSS Block, Inline et Inline-Block","author":{"name":"Louis Lazaris","lastname":"Lazaris"},"original":{"date":"30 novembre 2011","site":"Impressive Webs","siteUrl":"https://www.impressivewebs.com/","postUrl":"https://www.impressivewebs.com/difference-block-inline-css/","copyright":"2011"},"dateCascade":"18 janvier 2014","dateMachine":"2O140118","tags":["css"],"about":["Élément block","Élément inline"],"excerpt":"Le premier d'une série de 3 articles de Louis Lazaris sur des notions de base de CSS. Nous commençons aujourd'hui avec les notions parfois confuses de Block, Inline et Inline-Block.","featured":true,"featuredImage":"/images/b_i1_block-compressor.jpeg","order":41,"content":"\nCet article est la traduction de deux articles de Louis Lazaris parus sur son blog \u003ca href=\"https://www.impressivewebs.com\"\u003eImpressive Webs\u003c/a\u003e.\n\nEn CSS, les éléments peuvent être divisés en quelques catégories. Deux d'entre elles sont les éléments de niveau \"block\" et de niveau \"inline\". C'est un de ces domaines qui, lorsqu'on l'a bien compris, peut aider les débutants à passer au niveau supérieur.\n\n## Éléments de niveau Block\n\nUn élément block a les caractéristiques suivantes, non limitatives\u0026nbsp;:\n\n- Si aucune largeur n'est définie, il prendra toute la largeur de son élément parent.\n- Il peut avoir des marges et des paddings.\n- Si aucune hauteur n'est définie, il prendra la hauteur de ses éléments enfants (en supposant qu'il n'y a pas de \"float\" ou de positionnement sur des éléments environnants).\n- Il ignore la propriété `vertical-align`.\n\nIl est donc inutile pour un élément block de définir une largeur ou de lui donner une `width: 100%` si vous voulez qu'il s'étende sur la largeur de son élément parent. Cela pourrait même avoir des effets indésirables.\n\nEt comme l'indique le quatrième point de la liste ci-dessus, il n'est pas nécessaire non plus de \"clearer\" un élément block. S'il ne comprend aucun float, le clear sera automatique et il commencera à la \"ligne\" suivante dans l'affichage de la page.\n\n**Exemples d'éléments block**\u0026nbsp;:\n\n`p`, `div`, `form`, `header`, `nav`, `ul`, `li`, et `h1`.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/b_i1_block-compressor.jpeg\" width=\"680\" height=\"383\" alt=\"Comportement des éléments block\"/\u003e\u003c/figure\u003e\n\n## Éléments de niveau Inline\n\nUn élément inline a les caractéristiques suivantes, non limitatives\u0026nbsp;:\n\n- Il s'inscrit dans le flux du texte\n- et donc ne 'saute' pas à la ligne comme le ferait un élément block\n- Il accepte la propriété `white-space`.\n- Il ignore les marges top et bottom mais applique les marges left et right, ainsi que tout padding.\n- Il ignore les propriétés `width` et `height`.\n- S'il est flotté à gauche ou à droite, il devient automatiquement un élément de niveau block, et prend toutes ses caractéristiques.\n- Il accepte la propriété `vertical-align`.\n\nPour se faire une bonne idée de l'élément inline, on peut l'imaginer comme une **boîte qui se comporte comme du texte**. Un texte qui n'est pas interrompu par d'autres éléments s'écoule, lettre après lettre, et si vous ajoutez un élément inline dans le texte, il suivra le flux comme tout autre élément du texte.\n\n**Exemples d'éléments inline**\u0026nbsp;:\n\n`a`, `span`, `b`, `em`, `i`, `cite`, `mark`, et `code`.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/b_i2_inline-compressor.jpeg\" width=\"680\" height=\"383\" alt=\"comportement d'un élément inline\"/\u003e\u003c/figure\u003e\n\n## Notes complémentaires\n\nVous aurez remarqué que ces exemples d'éléments block et inline sont très révélateurs\u0026nbsp;: les éléments block sont structurels alors que les éléments inline sont relatifs au texte. C'est une bonne façon de se rappeler qui est qui, même si au commencement cela peut vous paraître confus.\n\nD'une manière générale, vous pouvez inclure n'importe quel élément block à l'intérieur d'un autre élément block. Vous pouvez également inclure n'importe quel élément inline dans un élément block et n'importe quel élément inline dans un autre élément inline. La seule chose qu'on ne puisse pas faire, c'est inclure un élément block à l'intérieur d'un élément inline, à une exception près\u0026nbsp;: l'élément `a` peut envelopper n'importe quel type de contenu, block comme inline ou les deux.\n\nVous pouvez changer tout élément block en inline et vice-versa, en utilisant la propriété CSS display.\n\nDernière chose à noter, block et inline existent dans une perspective CSS, du point de vue de HTML5 les divers éléments ont été re-catégorisés pour être plus spécifiques.\n\n### Astuce rapide: éléments remplacés\n\nAu tout début, j'ai dit que block et inline étaient simplement deux types de contenu. D'une manière générale, ce sont en effet les deux types principaux et il n'y a pas besoin de se soucier trop des autres.\n\nMais il y a ce qu'on appelle [les éléments remplacés](/articles/quest-ce-quun-element-remplace/). Ce sont des éléments dont l'apparence et les dimensions de base sont définies par une ressource extérieure, par exemple des images, des plugins, des éléments d'un formulaire... Ils ne sont ni blocks, ni inline, on pourrait les considérer comme plus proches d'inline, mais avec une structure proche de block...\n\nQuelques exemples d'éléments remplacés\u0026nbsp;: `img`, `object`, `input`, `select`.\n\n## Inline-Block\n\nVoici quelques définitions de la valeur `inline-block` pour la propriété `display`, relevées dans quelques sites de référence\u0026nbsp;:\n\nPour [Sitepoint](http://reference.sitepoint.com/css/display) : \"Avec Inline-block, l'élément génère une boîte block qui est mise en forme comme s'il s'agissait d'une boîte inline\".\n\nPour [QuirksMode](http://quirksmode.org/css/css2/display.html) : \"Un inline-block est placé inline (c'est à dire sur la même ligne que le contenu adjacent), mais il se comporte comme un block\".\n\nPour [Robert Nyman](http://robertnyman.com/2010/02/24/css-display-inline-block-why-it-rocks-and-why-it-sucks/) : \"En gros, c'est une manière de mettre les éléments inline tout en préservant leurs capacités d'éléments block, tels que la possibilité de définir une largeur et une hauteur, des marges et paddings top et bottom, etc.\"\n\n### Démonstration\n\nVoici une image d'`inline-block` à l'oeuvre, qui montre exactement comment il se comporte\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/b_i3_inline_block_demo-compressor.jpeg\" width=\"550\" height=\"221\" alt=\"démonstration d'inline-block, notamment de hauteur et padding\"/\u003e\u003c/figure\u003e\n\n### Comment l'utiliser ?\n\nVoici quelques cas où inline-block serait utile\u0026nbsp;:\n\n- Pour placer plusieurs éléments de type block sur la même ligne horizontale sans les flotter.\n- Pour permettre à un élément de type inline d'avoir une hauteur et une largeur tout en conservant sa nature inline.\n- Pour permettre à un élément inline d'avoir des marges ou des paddings.\n\n### Quelques notes complémentaires\n\nL'utilisation de `inline-block` ne va pas sans quelques petits inconvénients. Un élément inline-block est dépendant du `white-space` donc si vous affichez des listes en utilisant inline-block (dans une barre de navigation par exemple), les items de votre liste comporteront des espaces indésirés entre eux. Cela peut ne pas être gênant, auquel cas pas de problème. Sinon, pour retirer cet espace il vous faudra retirer de votre code HTML tout whitespace présent entre les éléments de la liste. Si votre code se présente ainsi\u0026nbsp;:\n\n    \u003cul\u003e\n    \t\u003cli\u003eItem One\u003c/li\u003e\u003cli\u003eItem Two\u003c/li\u003e\u003cli\u003eItem Three\u003c/li\u003e\u003cli\u003eItem Four\u003c/li\u003e\u003cli\u003eItem Five\u003c/li\u003e\n    \u003c/ul\u003e\n\nOu pire :\n\n    \u003cul\u003e\n    \t\u003cli\u003eItem One\u003c/li\u003e\n        \u003cli\u003eItem Two\u003c/li\u003e\n        \u003cli\u003eItem Three\u003c/li\u003e\n        \u003cli\u003eItem Four\u003c/li\u003e\n        \u003cli\u003eItem Five\u003c/li\u003e\n    \u003c/ul\u003e\n\nCe problème peut évidemment être résolu en ajoutant `font-size: 0` à l'élément `\u003cul\u003e` puis en augmentant la font-size des éléments de la liste. Mais ces solutions ne sont pas très \"propres\", je recommenderais donc dans ce cas d'utiliser une solution autre que `inline-block`.\n\nSi vous déclarez plusieurs éléments utilisant `inline-block` et que ces éléments ont des hauteurs variables, vous devrez probablement ajouter quelque chose comme `vertical-align: top` pour garantir un alignement régulier. Voici [une page intéressante](http://www.brunildo.org/test/inline-block.html) qui montre quelques problèmes et solutions relatifs à `inline-block`.\n\nJ'ai par ailleurs remarqué que le comportement d'`inline-block` n'était pas le même selon que l'élément était à l'intérieur d'un paragraphe ou pas.\n\n### Compatibilité navigateurs\n\nSans surprise, `inline-block` fonctionne de la même manière avec tous les navigateurs, sauf IE6 et IE7. Si vous devez absolument avoir une compatibilité avec IE7, il vous faudra définir la propriété `display` comme `inline`, puis utiliser la propriété `hasLayout` d'internet explorer.\n\n---\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en français\u003c/h2\u003e\n\n**Sur Block et Inline** :\n\n[Block et Inline](http://www.ultra-fluide.com/ressources/xhtml/block-inline.xhtml), sur Ultra-Fluide.\n\n**Sur Inline-Block** :\n\n[Display inline-block](http://www.alsacreations.com/article/lire/1209-display-inline-block.html), sur Alsacréations.  \n[La propriété CSS display: inline-block](http://jeremie.patonnier.net/post/2010/01/28/La-propri%C3%A9t%C3%A9-CSS-display-inline-block), chez Jérémie.\n"},{"slug":"le-positionnement-css","title":"Le positionnement CSS","author":{"name":"Louis Lazaris","lastname":"Lazaris"},"original":{"date":"13 novembre 2012","site":"Blog Team Treehouse","siteUrl":"https://blog.teamtreehouse.com","postUrl":"https://blog.teamtreehouse.com/css-positioning","copyright":"2012"},"dateCascade":"18 janvier 2014","dateMachine":"2O140118","tags":["css"],"about":["Positionnement"],"excerpt":"Une technique de mise en page CSS qui est là pour durer est le positionnement CSS, c'est à dire l'utilisation de la propriété position","featured":false,"featuredImage":"/images/position_relative-compressor.jpeg","order":null,"content":"\nSi vous avez commencé à vous attaquer à la mise en page CSS, vous utilisez probablement les _floats_ comme moyen essentiel de mise en forme de vos pages. Peut-être avez-vous commencé à expérimenter quelques techniques du futur, avec l'espoir que les navigateurs seront bientôt compatibles.\n\nMais une technique de mise en page CSS qui est là pour durer est le positionnement CSS, c'est à dire l'utilisation de la propriété `position`. Dans cet article, je passerai en revue le positionnement CSS en détail et j'espère que vous en retirerez quelques options supplémentaires pour votre design.\n\n## Positionnement statique\n\nCommençons par les élément HTML positionnés de façon statique\u0026nbsp;:\n\n    .exemple {\n    \tposition: static;\n    }\n\nDans la plupart des cas, il est inutile de le mentionner, `static` étant la valeur par défaut de la propriété `position`. Cela signifie que si vous ne déclarez pas de valeur de position sur cet élément, il sera considéré comme \u0026ldquo;statique\u0026rdquo;. Que signifie cette valeur en termes de comportement de l'élément\u0026nbsp;?\n\nSelon les [spécifications](http://dev.w3.org/csswg/css-position/) de W3C, un élément positionné de manière statique est une \u0026ldquo;boîte normale\u0026rdquo;, positionnée dans ce qu'on appelle un flux normal. Cela signifie qu'un élément statique sera positionné en fonction de son rang par rapport aux autres éléments, dans un flux normal, le changement de son comportement dépendant de sa nature [block ou inline](/articles/la-difference-entre-block-et-inline). D'autres facteurs peuvent aussi affecter la façon dont un élément statique se comporte mais en général ce comportement est aussi simple que possible.\n\n## Positionnement relatif\n\nUne autre valeur possible de la propriété `position` :\n\n    .exemple {\n    \tposition: relative;\n    }\n\nEn quoi est-elle différente de la valeur `static`\u0026nbsp;? Un élément positionné de manière relative se comporte de la même façon qu'un élément statique, sauf qu'il est maintenant dépendant des valeurs de _quatre autres propriétés CSS_. Considérons l'exemple suivant\u0026nbsp;:\n\n    .box1 {\n    \twidth: 100px;\n    \theight: 100px;\n    \tbackground: blue;\n    }\n\n    .box2 {\n    \twidth: 100px;\n    \theight: 100px;\n    \tbackground: green;\n    \tborder: yellow solid;\n    \tposition: relative;\n    \ttop: 20px;\n    \tleft: 20px;\n    }\n\n    .box3 {\n    \twidth: 100px;\n    \theight: 100px;\n    \tbackground: red;\n    }\n\n    .box4 {\n    \twidth: 100px;\n    \theight: 100px;\n    \tbackground: pink;\n    }\n\nNous supposons que ces quatre boîtes sont les seuls éléments de la page, comment vont-ils se comporter\u0026nbsp;? Eh bien, d'abord ils seront disposés sur la page dans l'ordre dans lequel ils apparaissent dans votre HTML, chaque boîte sur une nouvelle ligne. Mais la deuxième boîte (la verte avec une bordure jaune) sera décalée par rapport à sa place originale à cause des déclarations `top` et `left`.\n\nLa deuxième boîte est donc décalée de 20px à partir du haut et de 20px à partir de la gauche par rapport à sa position originale. Vous obtiendriez la même chose en ajoutant une `margin-top` et une `margin-left` de 20px -\u0026nbsp;mais avec une différence significative\u0026nbsp;: décaler la position à l'aide de `top`, `left`, `bottom` ou `right` n'affecte pas le flux des éléments qui l'entourent. Voici à quoi cela ressemble, et pour mieux comprendre vous pouvez jouer avec cette [petite démo](http://jsbin.com/idefal/1/edit)\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/position_relative-compressor.jpeg\" width=\"665\" height=\"447\" alt=\"exemple de positionnement relatif: la deuxième boîte est décalée par rapport aux autres boîtes qui n'ont pas bougé\"/\u003e\u003c/figure\u003e\n\nComme on le voit, un positionnement relatif peut entraîner un chevauchement. La place originale de l'élément est respectée, mais son décalage ne modifiera pas le positionnement des autres boîtes.\n\n## Positionnement absolu\n\nLa troisième valeur que vous pouvez utiliser pour la propriété `position`\u0026nbsp;:\n\n    .exemple {\n    \tposition: absolute;\n    }\n\nUn élément positionné absolument est complètement retiré du flux normal du document et, tout comme `position: relative` il est sujet aux décalages horizontaux et verticaux impliqués par l'utilisation de `top`, `left`, `bottom` et `right`.\n\nLa différence principale tient à son retrait du flux. Cela signifie que l'espace occupé à l'origine par cet élément ne sera plus respecté par les éléments qui l'entourent. Ceux-ci se comporteront comme s'il n'existait plus.\n\n### Contextes de positionnement\n\nLorsque vous décalez un élément positionné de manière relative, les décalages sont relatifs à la place originale de l'élément dans le flux normal. Avec un élément positionné de manière absolue, les décalages sont relatifs au viewport du navigateur ou, pour simplifier, à la fenêtre, ou au corps du document.\n\nMais le contexte de positionnement d'un élément positionné absolument peut être modifié en ajoutant `position: relative` à l'élément parent, ce qui crée un nouveau contexte de positionnement. Si cela vous paraît obscur, voici une [démo](http://jsbin.com/udopih/1/edit).\n\nEt voici à quoi cela ressemble :\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/position_absolute-compressor.jpeg\" width=\"665\" height=\"302\" alt=\"exemple de positionnement absolu: la deuxième boîte est réglée sur positionnement absolu et elle est décalée par rapport à son élément conteneur\"/\u003e\u003c/figure\u003e\n\nL'élément `body` a une bordure noire et l'élément `.container` une bordure orange. On voit que la boîte verte (positionnée en absolu) est décalée à l'intérieur du contexte de son élément parent `.container`, lui-même positionné de manière relative.\n\nRemarquez bien ce qui se passe [si nous supprimons la déclaration](http://jsbin.com/otakoq/1/edit) `position: relative` de l'élément \u0026ldquo;container\u0026rdquo;\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/position_viewport-compressor.jpeg\" width=\"665\" height=\"298\" alt=\"l'élément est maintenant positionné par rapport à la fenêtre et non plus par rapport à son élément parent\"/\u003e\u003c/figure\u003e\n\nDu fait de la suppression du contexte de positionnement explicite, la boîte verte est maintenant décalée _par rapport au viewport_ (contexte de positionnement implicite) et, comme nous l'avons déjà dit, aucun des éléments environnants n'est affecté par le flux de la boîte verte soustraite au flux normal.\n\n## Positionnement fixe\n\nVoici l'option de positionnement suivante :\n\n    .exemple {\n    \tposition: fixed;\n    }\n\nUn élément en positionnement fixe appartient, selon les spécifications de W3C, à la catégorie des éléments en positionnement absolu. Leurs comportements sont en effet très similaires, avec toutefois deux différences essentielles\u0026nbsp;: d'abord le contexte de positionnement est _toujours_ le viewport, le contexte ne changera donc pas si l'on ajoute `position: relative` à l'élément parent. Ensuite, les éléments en position fixe ne bougent plus lorsque le document est scrollé. Regardez l'image ci-dessous, tirée du blog de Treehouse\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/position_fixed-compressor.jpeg\" width=\"665\" height=\"194\" alt=\"exemple de positionnement fixe\"/\u003e\u003c/figure\u003e\n\nAu sommet de la page, un message promotionnel est en position fixe, il reste là même quand vous faites défiler la page.\n\nL'utilisation conjointe du positionnement fixe et de [z-index](/articles/comment-fonctionne-z-index) vous offre des possibilités de mise en page uniques.\n\n## Nouvelles valeurs en CSS3\n\nLes quatre valeurs décrites ci-dessus sont celles que vous utiliserez le plus souvent avec la propriété `position`. Sachez cependant que le spec CSS3 comprend deux nouvelles valeurs\u0026nbsp;: `position: center` et `position: page`.\n\nJe n'entrerai pas dans les détails, car à ma connaissance ces valeurs ne sont actuellement compatibles avec aucun navigateur.\n\n## Le présent et l'avenir du positionnement CSS\n\nIl y a des tonnes d'articles détaillés sur le positionnement, n'hésitez pas à vous y référer si vous voulez mieux comprendre toutes ces techniques.\n\nDans le futur, lorsque des techniques comme [Flexbox](/articles/flexbox-guide-complet), [CSS Grid Layout](/articles/css-grid-layout-guide-complet) et d'autres nouveaux modules seront plus universellement compatibles, il est probable que vous aurez moins recours au positionnement CSS.\n"},{"slug":"de-la-typographie-web","title":"De la Typographie Web","author":{"name":"Jason Santa Maria","lastname":"Santa Maria"},"original":{"date":"17 novembre 2009","site":"A List Apart","siteUrl":"https://alistapart.com/","postUrl":"https://alistapart.com/article/on-web-typography","copyright":"2009"},"dateCascade":"22 décembre 2013","dateMachine":"2O131222","tags":["design","typographie"],"about":["Familles de Polices","Bas de casse (minuscules)","Haut de casse (majuscules)","Graisse","Hauteur X","Readability"],"excerpt":"Être designer demande une compréhension profonde de la typographie et de la sélection et de l'association des polices de caractères. Le grand Jason Santa Maria l'explique avec intelligence et sensibilité.","featured":false,"featuredImage":"/images/grindhouse.jpeg","order":null,"content":"\nOn trouve beaucoup de livres et d’articles sur la Typographie, mais très peu explorent la question de la sélection et de l’association des polices de caractères. Les vannes étant sur le point de s’ouvrir \u003csup id=\"backto1\"\u003e\u003ca href=\"#1\"\u003e(1)\u003c/a\u003e\u003c/sup\u003e et les polices promises à une prochaine liberté d’utilisation sur les sites web, savoir choisir la bonne police est en passe de devenir un nouveau défi pour les designers. Par où commencer\u0026nbsp;?\n\nJusqu’à présent, l’utilisation de polices de caractères autres que celles installées par défaut sur nos ordinateurs impliquait de recourir à des images, à Flash ou à des solutions de contournement. Les navigateurs ont mis la balle dans notre camp avec la mise en oeuvre de la propriété CSS `@font-face` qui permet aux designers de faire un lien vers n’importe quelle police pour l’importer dans une page.\n\nCela a jeté une lumière crue sur la grande préoccupation des fonderies\u0026nbsp;: la plupart des fabricants de polices ont longtemps refusé d’accorder des licences pour l’utilisation de leurs polices de caractères sur le net, craignant un piratage massif. L’implémentation de `@font-face` a permis d’exposer clairement ce problème et a poussé les parties concernées à trouver une solution positive pour tout le monde. Depuis, des solutions existent ou sont en construction, qui vont d’accords de license accordés aux utilisateurs jusqu’à des services tiers tels que [Typekit](https://typekit.com), [Typotheque](https://www.typotheque.com/blog/typotheque_launches_its_web_fonts_service) et [Kernest](http://kernest.com). Les designers ont maintenant l’embarras du choix et les fabricants de polices peuvent gagner de l’argent avec leurs créations. Problème résolu, donc ? Plus ou moins.\n\n## Le meilleur des mondes\n\nNous avons été gâtés. Jusqu’à présent, il est probable que si vous éditiez du texte sur une page web dans une police de caractères système et à une taille raisonnable, le résultat était lisible. De plus, nous connaissons les avantages et les défauts des polices que nous avons été forcés d’utiliser. Mais de nombreuses polices auxquelles nous aurons bientôt accès n’ont jamais été pensées pour les écrans, d’où des soucis à se faire en termes d’esthétique ou de lisibilité.\n\nLes problèmes techniques liés aux polices pour le web sont bien réels, depuis l’incohérence du rendu selon les navigateurs et les plateformes jusqu’aux problèmes inhérents au chargement de fichiers de polices ou de familles de polices\u0026nbsp;: le poids des pages peut monter facilement à plus de 100k. Mais supposons pour l’instant que ces problèmes seront résolus sous peu, et concentrons-nous sur ce que nous aurons à faire après.\n\nIl y a une possibilité sérieuse qu’avec cet accès aux bibliothèques de polices nous n’ouvrions la boîte de Pandore. Beaucoup de gens ont _quelques_ connaissances en matière de typographie, mais mon intuition est que de nombreux designers resteront perplexes face aux nouveaux défis auxquels ils sont confrontés.\n\n## Contexte et signification\n\nÊtre designer web demandera bientôt une compréhension plus profonde de la typogaphie et de la façon dont fonctionnent les polices de caractères. Les options seront sans doute limitées au commencement, mais leur nombre va aller croissant et comme on le sait, un grand pouvoir impose de grandes responsabilités. Ce n’est pas parce que vous _pouvez_ utiliser cette police qui a l’air d’avoir des pattes d’éléphant que vous le _devez_.\n\nLes polices système que nous utilisons communément, telles que Georgia, Verdana et Arial sont devenues tellement omniprésentes qu’il n’est presque plus imaginable de les utiliser en dehors du web. L’expression esthétique qu’il nous était impossible de réaliser en raison d’un choix insuffisant nous laissait le temps de peaufiner la lisibilité. Cela a fait du web un univers du \u0026ldquo;set it and forget it\u0026rdquo; (installez le et n’y pensez plus), en raison de la rapidité de publication, mais aussi de l’absence de contrôle précis sur la typographie, tel qu’il existe pour l’impression classique.\n\n## Exigence\n\nOn peut utiliser une police parce qu’elle a l’air intéressante et cela peut donner des résultats acceptables, mais pratiquer l’art de la typographie implique de comprendre réellement les polices et ce qu’elles signifient. Le choix d’une police acceptable n’est pas compliqué, mais choisir celle qui convient parfaitement, dans un contexte technique et social donné, peut s’avérer difficile.\n\nLa célèbre designer de polices [Zuzana Licko](http://fr.wikipedia.org/wiki/Zuzana_Licko) a dit un jour que \u0026ldquo;nous lisons le mieux ce que nous lisons le plus\u0026rdquo;. Cette notion sonne juste s’agissant d’un comportement acquis, elle révèle aussi le principal défi du typographe : la lecture est un acte personnel et relatif. Lire un long passage en écriture [gothique](http://fr.wikipedia.org/wiki/Écriture_gothique), qui était considéré \u0026ldquo;lisible\u0026rdquo; il y a quelques siècles, nous demanderait aujourd’hui un effort bien plus considérable que si nous le lisions dans une police [sérif](\u003chttp://fr.wikipedia.org/wiki/Empattement_(typographie)\u003e) ou [sans sérif](http://fr.wikipedia.org/wiki/Linéale), sur papier ou en ligne.\n\nAu-delà de la question de la lisibilité, les considérations sur la typographie se réduisent pour l’essentiel à des questions de contraste et de forme. Les détails d’une police injectent du sens dans un design : des lignes douces et l’épaisseur du trait par exemple peuvent servir un contenu délicat ou lui donner élégance et dignité. Ces mêmes attributs peuvent être juxtaposés avec un contenu inattendu pour produire un effet ironique.\n\nVoici maintenant une liste de qualités et quelques méthodes à garder à l’esprit quand vous vous lancerez dans le monde toujours plus vaste des polices de caractères pour le web.\n\n## Le guide à tomber par terre pour choisir et associer des polices\n\nCherchez en premier lieu des polices lisibles - celles que nous utilisons et lisons quotidiennement.\n\n### Contraste\n\nLe contraste est probablement ce que nous devons avoir d’abord à l’esprit. Quand on associe des polices, il est important d’être capable de les distinguer mais le contraste a d’autres fonctions. Des polices très différentes peuvent jouer l’une avec l’autre de façon complémentaire ou au contraire résister l’une à l’autre en créant une certaine tension, alors que des polices qui semblent trop similaires peuvent affaiblir le message et embrouiller le langage du design visuel.\n\n### Les basiques du corps de texte\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/bobulate.png\" width=\"540\" height=\"530\" alt=\"exemple de page bien faite, Bobulate\"/\u003e\u003cfigcaption\u003e\u003ca href=\"http://bobulate.com\"\u003eBobulate.com\u003c/a\u003e utilise \u003ca href=\"https://typekit.com/fonts/skolar-web\"\u003eSkolar\u003c/a\u003e, à travers \u003ca href=\"https://typekit.com\"\u003eTypekit\u003c/a\u003e.\u003c/figcaption\u003e\u003c/figure\u003e\n\nLorsque je choisis des polices, j’aime commencer par celle que j’utiliserai dans mon corps de texte, car c’est sur elle que le lecteur passera le plus de temps. Préférez des polices robustes et lisibles même dans une taille réduite, et ayant un bon contraste entre les caractères.\n\nLes meilleures polices de texte ont de la personnalité, mais pas suffisamment pour nous distraire du contenu. Les polices à forte personnalité conviennent mieux à l’affichage, car elles peuvent devenir lourdes dans de longs passages.\n\n### Lisez-moi\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/legible.png\" width=\"540\" height=\"167\" alt=\"Deux textes identiques dans deux polices différentes\"/\u003e\u003cfigcaption\u003eQuand le texte s’amenuise, hauteur d’x et contraste sont utiles.\u003c/figcaption\u003e\u003c/figure\u003e\n\nLes conventions habituelles concernant le choix des polices s’appliquent pour l’écran, mais en raison de l’écart de qualité entre l’écran et l’imprimerie, ces conventions devraient être suivies de façon encore plus stricte pour l’écran, et même de manière légèrement exagérée. De grandes [hauteurs d’x](http://fr.wikipedia.org/wiki/Hauteur_d%27x) et un corps de caractère robuste rendront votre texte lisible, même à taille réduite. Par exemple, [Verdana](http://fr.wikipedia.org/wiki/Verdana) et [Georgia](\u003chttp://fr.wikipedia.org/wiki/Georgia_(police_d%27écriture)\u003e), toutes deux des polices éprouvées pour l’écran, ont une grande hauteur d’x et un peu plus d’espace entre les lettres ce qui fait que le texte reste clair même lorsqu’il est de petite taille.\n\n### Quel est le message ?\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/grindhouse.jpeg\" width=\"540\" height=\"424\" alt=\"Un pastiche d’affiche de film des années 70\"/\u003e\u003cfigcaption\u003eCette affiche de film utilise beaucoup de polices et de types, à l’imitation des affiches emblématiques des années\u0026nbsp;70.\u003c/figcaption\u003e\u003c/figure\u003e\n\nUne bonne façon de comprendre ce dont vous réalisez le design est de rédiger une description générale des qualités du message que vous souhaitez faire passer, puis de chercher les polices qui incarnent ces qualités. Si vous êtes dans un design sérieux, une police d’affichage fantaisiste écrite à la main ([scripte](\u003chttp://fr.wikipedia.org/wiki/Scripte_(typographie)\u003e)) ne conviendra sans doute pas. Mais une police robuste comme [Franklin Gothic](http://www.myfonts.com/fonts/adobe/franklin-gothic/roman/) pourra transmettre un sentiment de stabilité et de force tout en conférant un air d’importance.\n\nUne seule police peut être assez pour dire ce que vous avez à dire, deux est généralement beaucoup. Si vous en utilisez plus, il faut que ce soit pour de bonnes raisons - comme d’essayer de retrouver l’esthétique de vieilles affiches de [boxe](https://www.google.com/search?q=boxing+poster\u0026tbm=isch), de films ou de musique par exemple.\n\n### Une sans, une sérif\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/bodoni_futura.png\" width=\"540\" height=\"464\" alt=\"Le texte ’Hello’ dans deux polices d’affichage différentes\"/\u003e\u003cfigcaption\u003eBodoni et Futura ont des formes de lettres très différentes, mais leur structure est basée sur les mêmes principes géométriques.\u003c/figcaption\u003e\u003c/figure\u003e\n\nUn des moyens les plus simples pour créer un équilibre et un contraste en typographie est de choisir une association serif / sans-serif. C’est une combinaison simple et facile à gérer qui peut donner un aspect très cohérent à votre texte si vous choisissez les bonnes polices.\n\nSans que ce soit une règle absolue, les polices du même designer fonctionnent généralement bien ensemble. Comme dans deux toiles d’un même artiste, vous pouvez parfois voir la main du designer dans deux polices qu’il a réalisées. [Perpetua](http://www.myfonts.com/fonts/adobe/perpetua/regular/) et [Gill Sans](http://www.myfonts.com/fonts/adobe/gill-sans/regular/) d’Eric Gill fonctionnent bien ensemble car elles partagent les mêmes traits et les mêmes courbes. De la même façon, des polices conçues pour être appariées, comme [Meta Sans](http://www.fontshop.com/fontlist/super_families/ff_meta_sans_ff_meta_serif/) et [Meta Serif](http://metaserif.com), s’associent bien.\n\nUtiliser plus d’une police d’[affichage](http://en.wikipedia.org/wiki/Typeface#Display_type) ou [scripte](\u003chttp://fr.wikipedia.org/wiki/Scripte_(typographie)\u003e) est en général une mauvaise idée. Il y a des exceptions à chaque règle, mais ces polices ont une telle personnalité qu’une seule suffit et deux ne feraient qu’apporter de la confusion.\n\nCherchez des polices conçues avec les mêmes principes. Par exemple, bien que d’aspect très différent, [Futura](\u003chttp://fr.wikipedia.org/wiki/Futura_(police_d%27écriture)\u003e) et [Bodoni](http://en.wikipedia.org/wiki/Bodoni) forment une superbe association parce qu’elles ont été inspirées par les mêmes formes géométriques simples.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/baskerville_futura.png\" width=\"540\" height=\"167\" alt=\"Deux polices contrastées\"/\u003e\u003cfigcaption\u003eBaskerville et Futura, \"vieux\" et \"nouveau\".\u003c/figcaption\u003e\u003c/figure\u003e\n\nSinon, il est possible d’associer deux polices divergentes pour créer un nouveau sens ou une juxtaposition intéressante, à condition que le contraste soit fort. Combiner une [police transitionnelle](http://en.wikipedia.org/wiki/Baskerville) comme [Baskerville](http://www.myfonts.com/fonts/adobe/itc-new-baskerville/roman/) avec une police moderne comme Futura peut créer un expression forte à partir de l’idée de vieux vs nouveau.\n\n### Explorez des styles différents\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/proxima_nova.png\" width=\"540\" height=\"278\" alt=\"Les composantes d’une famille de police\"/\u003e\u003cfigcaption\u003eDes familles de polices comme \u003ca href=\"http://www.marksimonson.com/fonts/view/proxima-nova\"\u003eProxima Nova\u003c/a\u003e de Mark Simonson contiennent des graisses variées, ouvrant un champ de possibilités typographiques.\u003c/figcaption\u003e\u003c/figure\u003e\n\nChoisir des familles de polices comportant une bonne sélection de [graisses](\u003chttp://fr.wikipedia.org/wiki/Graisse_(typographie)\u003e) et de styles vous donne plus de flexibilité sans avoir à recourir à d’autres polices. Utilisez un gras pour contraster avec une police extra-légère ou italique, essayez des majuscules ou des petites capitales avec un peu de d’espacement entre les lettres pour un sous-titre. Si vous choisissez des polices qui ne contiennent qu’une seule graisse, il sera plus difficile de créer le contraste requis pour distinguer visuellement les sections d’un texte.\n\n### À la bibliothèque !\n\nBeaucoup de polices ont un lien avec une période culturelle ou une sous-culture. Selon ce que vous créez, cela peut être un avantage ou un désavantage. Il est toujours bon d’en savoir plus sur une police en s’informant sur le lieu, l’époque, les raisons pour lesquelles elle a été créée. Parfois une police peut avoir le bon \u0026ldquo;look\u0026rdquo; mais évoquer des connotations erronées. Par exemple [Trajan](http://www.myfonts.com/fonts/adobe/trajan/trajan/) a été utilisée pour des films épiques, policiers, romantiques, pour des comédies et... pour [n’importe quel film](http://vimeo.com/432490), bien qu’étant romaine et agée de 1900\u0026nbsp;ans. Les polices en écriture gothique ont longtemps servi aux groupes de heavy metal ou à tout ce qui devait être \u0026ldquo;inquiétant\u0026rdquo; ou \u0026ldquo;dark\u0026rdquo;. Il faut comprendre ces implications culturelles pour les éviter, ou au contraire en faire un bon usage.\n\n### Money, honey\n\nNous avons été tellement habitués aux polices système que de nombreux professionnels rechignent à l’idée de payer pour des polices. Mais même quand vous utilisez les polices que vous trouvez sur votre ordinateur, vous utilisez des polices que vous avez payées, leur prix est inclus dans celui de votre système d’exploitation. Il y a beaucoup de polices gratuites, mais la plupart le sont pour une bonne raison\u0026nbsp;: il leur manque souvent beaucoup de choses, crénage, ligatures, etc. et elles ne sont pas suffisamment robustes pour être utilisées sérieusement. Les polices solides, comme à peu près tout ce qui est de qualité, coûtent généralement quelque chose.\n\n### Suivez votre instinct\n\nParfois une paire de polices semble aller bien ensemble, même si vous ne savez pas pourquoi. Les lignes qui précèdent sont des guides, pas des lois\u0026nbsp;: il y a une myriade de polices et de styles, et vous serez parfois surpris de voir des polices s’associer à l’encontre de toute logique.\n\n### Toujours plus loin !\n\nLe nombre de polices disponibles augmente chaque jour. Si votre police favorite n’est pas encore là, elle le sera bientôt, même si le problème des licences n’est pas résolu de sitôt.\n\nAvec l’arrivée de polices toujours plus nombreuses, nous devons comprendre comment elles peuvent servir au mieux nos designs et les choisir sur des critères autres que la seule nouveauté. Si l’essentiel du web est constitué de texte -\u0026nbsp;ce qu’il est\u0026nbsp;- la typographie peut être en effet un outil très puissant.\n\u003cspan id=\"1\"\u003e\u003c/span\u003e\n\n---\n\n(1) Cet article en avance sur son temps date de 2009.\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003ca href=\"#backto1\" style=\"text-decoration:none\"\u003e↩︎\u003c/a\u003e\n"},{"slug":"emmet-un-turbo-dans-votre-css","title":"Emmet, un turbo dans votre CSS","author":{"name":"Josh Medeski","lastname":"Medeski"},"original":{"date":"16 décembre 2013","site":"envato-tuts+","siteUrl":"https://webdesign.tutsplus.com/","postUrl":"https://webdesign.tutsplus.com/articles/turbo-charge-your-css-with-emmet--webdesign-16511","copyright":"2013"},"dateCascade":"20 décembre 2013","dateMachine":"2O131220","tags":["css"],"about":["Emmet"],"excerpt":"Josh Medeski se concentre ici sur Emmet pour CSS : comment Emmet transforme instantanément de simples abréviations en snippets de code CSS complexes.","featured":false,"featuredImage":"/images/css_best_property_value.png","order":null,"content":"\nLa plupart des articles sur Emmet traitent de son [utilisation pour HTML](/articles/goodbye-zen-coding-hello-emmet/), mais ici nous allons nous concentrer sur CSS. Prêt à mettre un turbo dans votre CSS\u0026nbsp;? On y va\u0026nbsp;!\n\n## Emmet, qu'est-ce que c'est\u0026nbsp;?\n\nEmmet est un ensemble d'abréviations qui s'étendent en html/xml/css, comme des snippets de textes. Vous pouvez installer Emmet sur votre éditeur de texte en allant sur [la page download](http://emmet.io/download/).\n\nUne fois Emmet installé, tapez une abréviation puis la touche qui déclenchera l'action - dans [Sublime Text](http://www.sublimetext.com/) c'est la touche `tab`.\n\n## Pourquoi utiliser Emmet ?\n\nEmmet (qui s'appelait autrefois Zen Coding) utilise des abréviations facilement mémorisables pour faciliter votre travail de codeur. Il vous aidera plus ou moins, en fonction du temps que vous investirez pour apprendre sa syntaxe (simple).\n\nNon seulement il vous fera gagner du temps, mais il rend plus _fun_ le travail d'écriture\u0026nbsp;: il y a quelque chose de magique à regarder quelques caractères se transformer en un code parfaitement formaté\u0026nbsp;!\n\nJe me suis rendu compte qu'Emmet me permettait de mémoriser le code plus facilement. Une abréviation comme `text-transform` devient \"tt\" et `text-align: justify` devient \"taj\". Super simple et utile, non ? Petit à petit vous apprendrez de nouvelles propriétés CSS et n'aurez à mémoriser que leur abréviation. Pas besoin de se soucier des \":\" et des espaces, Emmet s'en charge.\n\n## Emmet et CSS\n\nRegardons maintenant les composants de base des abréviations Emmet, leur fonctionnement et la façon dont il vont accélérer et simplifier votre travail.\n\n### Propriétés\n\nDans CSS vous donnez des valeurs à des propriétés telles que `font-size` , `margin` , `padding` , etc.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/css_best_property_value.png\" alt=\"exemple de couples propriété-valeur dans css\"/\u003e\u003c/figure\u003e\n\nEmmet a créé une abréviation pour chacune des propriétés CSS\u0026nbsp;: `border-bottom` est `bdb` , `border-top` est `bdt`. Ci-dessous, un exemple en action avec `font-size` qui est `fz` .\n\nUne fois tapé l'abréviation, appuyez sur la touche 'tabulation' (ou une autre touche, cela dépend de votre éditeur de texte), Emmet transforme celle-ci en CSS valide et place le curseur là où vous en avez besoin\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/emmet_css_property-1.gif\" alt=\"exemple gif de transformation de fz en font-size\"/\u003e\u003c/figure\u003e\n\n### Valeurs\n\nMaintenant que nous avons vu comment fonctionnent les propriétés, il est temps d'ajouter une valeur. Pour cela, il suffit de taper la propriété abrégée et la valeur. Par exemple, `fz18` donnera `font-size: 18px;` . Pas besoin de taper \"px\" car Emmet l'ajoute par défaut. Si une propriété n'a pas d'unité (comme `font-weight` ), Emmet n'en ajoute pas.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/emmet_css_value.gif\" alt=\"exemple gif de transformation de fz16 en font-size: 16px\"/\u003e\u003c/figure\u003e\n\n### Unités\n\nEt si vous utilisez autre chose que des pixels\u0026nbsp;? Les unités `em` , `rem` , `%` , `ex` , et `px` sont toutes disponibles dans Emmet. Chaque unité a même sa forme abrégée\u0026nbsp;:\n\n- `px` → par défaut\n- `p` → `%`\n- `e` → `em`\n- `r` → `rem`\n- `x` → `ex`\n\nPour utiliser une unité, il suffit de l'ajouter à votre valeur. L'exemple ci-dessous définit une taille de police en `em` .\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/emmet_css_unit.gif\" alt=\"exemple gif de transformation de fz1e en font-size: 1em\"/\u003e\u003c/figure\u003e\n\n### Unités multiples\n\nCertaines propriétés, comme `margin` , peuvent avoir plusieurs valeurs. Dans Emmet, la syntaxe abrégée utilise un tiret séparateur. L'exemple ci-dessous montre comment définir quatre valeurs pour une marge\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/emmet_css_multiple_units.gif\" alt=\"exemple gif de transformation de m10-20-30-40 en margin: 10px 20px 30px 40px\"/\u003e\u003c/figure\u003e\n\n### Couleurs\n\nPour les couleurs, il y a plusieurs façons d'écrire (au choix), qui donnent les résultats suivants\u0026nbsp;:\n\n- `#1` → `#111`\n- `#e0` → `#e0e0e0`\n- `#fc0` → `#ffcc00`\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/emmet_css_colors.gif\" alt=\"exemple gif de transformation de 'c#2' en color: '#222'\"/\u003e\u003c/figure\u003e\n\n### !important\n\nMême si le tag `!important` ne doit être utilisé que de manière parcimonieuse et avisée, Emmet a prévu une abréviation, au cas où. Il suffit d'ajouter un point d'exclamation à votre déclaration\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/emmet_css_important.gif\" alt=\"exemple gif de transformation de p0! en padding: 0 !important\"/\u003e\u003c/figure\u003e\n\n### Propriétés multiples\n\nMaintenant que nous connaissons les bases des fonctions CSS dans Emmet, il est temps de les mettre en oeuvre ensemble. De même que pour les fonctions HTML, on peut ajouter un signe `+` pour chaque déclaration. Et rappelez-vous que si vous vous êtes embrouillé, il suffit de revenir en arrière (Cmd+Z ou Ctrl+Z), corriger la syntaxe et taper `tab` à nouveau.\n\nVoici un exemple où je définis diverses marges et padding dans `body`\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/emmet_css_multiple_properties.gif\" alt=\"exemple gif de transformation de mb10+pt20 en margin bottom: 10px et padding-top: 20px\"/\u003e\u003c/figure\u003e\n\n### Exemple\n\nVous pouvez utiliser toutes ces abréviations ensemble ou séparément, selon ce qui vous semble le plus simple et vous facilite la vie. Pour terminer cette courte présentation, voici un dernier exemple récapitulatif\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/emmet_css_example.gif\" alt=\"exemple gif de transformation de tous les exemples précédents\"/\u003e\u003c/figure\u003e\n\n## Conclusion\n\nEmmet est un outil puissant qui vous permet d'économiser du temps sur du code répétitif, sans avoir à créer manuellement vos propres snippets. Il peut être utilisé avec les principaux éditeurs de texte.\n\nComme pour tout nouvel outil, il y a un temps d'apprentissage, il est court, n'approfondissez pas trop dans un premier temps, apprenez d'abord ce dont vous aurez tout de suite besoin puis visitez régulièrement la documentation. Emmet propose une [anti-sèche](http://docs.emmet.io/cheat-sheet/) avec toutes les fonctions possibles.\n\n### Pour aller plus loin\n\n[Documentation Emmet](http://docs.emmet.io/css-abbreviations/)  \n[Anti-sèche Emmet (syntaxe, HTML, CSS)](http://docs.emmet.io/cheat-sheet/)  \n[Bootstrap en quelques minutes avec Emmet](http://webdesign.tutsplus.com/tutorials/applications/build-bootstrap-in-minutes-using-emmet/) (en anglais)  \n[Goodbye, Zen Coding. Hello, Emmet](/articles/goodbye-zen-coding-hello-emmet/) !  \n[Raccourcis et astuces Emmet](/articles/une-liste-de-raccourcis-emmet/), par Matt MacFadyen et Jordan Moore\n"},{"slug":"goodbye-zen-coding-hello-emmet","title":"Goodbye, Zen Coding. Hello, Emmet!","author":{"name":"Zeno Rocha","lastname":"Rocha"},"original":{"date":"26 mars 2013","site":"","siteUrl":"https://www.smashingmagazine.com/","postUrl":"https://www.smashingmagazine.com/2013/03/goodbye-zen-coding-hello-emmet/","copyright":"2013"},"dateCascade":"20 décembre 2013","dateMachine":"2O131220","tags":["html","css"],"about":["Emmet"],"excerpt":"Emmet, anciennement connu comme Zen Coding, est le plugin d'éditeur de texte qui vous fera gagner le plus de temps.","featured":false,"featuredImage":"/images/authors/zeno-rocha.avif","order":9,"content":"\n[Emmet](http://emmet.io/), anciennement connu comme Zen Coding, est le plugin d'éditeur de texte qui vous fera gagner le plus de temps, ceci en transformant instantanément de simples abréviations en snippets de code complexes.\n\nSi vous préférez regarder une vidéo (en anglais) plutôt que de lire, voici [un résumé de mes astuces préférées](http://www.youtube.com/watch?feature=player_embedded\u0026v=sxW-V24MTXI). (NdT: et pour un article plus centré sur Emmet et CSS, consultez [un turbo dans votre CSS](/articles/emmet-un-turbo-dans-votre-css/)).\n\n## Comment ça marche ?\n\nIl faut bien l'admettre, écrire en HTML demande du temps, avec toutes ces balises, ces attributs, guillemets, parenthèses, etc. La plupart des éditeurs de texte proposent une complétion de code, qui est certes très utile, mais il reste encore beaucoup à taper. Emmet transforme de simples abréviations en code complexe.\n\n## Abréviations HTML\n\n### Initialiser\n\nCommencer avec un nouveau document HTML prend moins d'une seconde. Il suffit de taper `!` ou `html:5` puis faire \"tabulation\" ou \"enter\" selon votre éditeur de texte (dans un document vierge préalablement enregistré avec une extension `.html` ) et vous verrez apparaître un doctype HTML5 structuré avec quelques éléments de base.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/01initializers.gif\" alt=\"exemple gif de transformation de raccourcis en code\"/\u003e\u003c/figure\u003e\n\n- `html:5` ou `!` pour un doctype HTML5\n- `html:xt` pour un doctype transitionnel XHTML\n- `html:4s` pour un doctype strict HTML4\n\n### Ajouter des classes, id, texte et attributs\n\nLa syntaxe d'Emmet pour décrire les éléments reprend les sélecteurs CSS, il est donc facile de s'y habituer. Essayez de combiner un nom d'élément (p.ex. `p` ) et un identifiant (p.ex. `p#description` ).\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/02classes_ids.gif\" alt=\"exemple gif de transformation de p#foo en p id='foo' et p.foo en p class='foo'\"/\u003e\u003c/figure\u003e\n\nVous pouvez mixer classes et id, p.ex. `p.bar#foo` donnera\u0026nbsp;:\n\n    \u003cp class=\"bar\" id=\"foo\"\u003e\u003c/p\u003e\n\nVoyons maintenant comment définir le contenu et les attributs de vos balises HTML. Pour le contenu on utilise des accolades, `h1{foo}` est transformé en\u0026nbsp;:\n\n    \u003ch1\u003efoo\u003c/h1\u003e\n\nLes attributs sont indiqués entre crochets, `a[href=#]` donnera\u0026nbsp;:\n\n    \u003ca href=\"#\"\u003e\u003c/a\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/03texts_attrs.gif\" alt=\"exemple gif de transformation de h1{foo} en h1 et le titre foo\"/\u003e\u003c/figure\u003e\n\n### Emboîtements\n\nEn emboîtant nos abréviations, nous pouvons construire une page entière de code en n'écrivant qu'une seule ligne. L'opérateur \"descendant\" (child), représenté par `\u003e` vous permet d'emboîter les éléments. L'opérateur sibling (pour les éléments de même niveau dans le DOM), représenté par `+` vous permet de placer les éléments les uns à côté des autres. Enfin, l'opérateur ascensionnel, représenté par `^` vous permet de remonter d'un niveau dans l'arbre.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/04nesting.gif\" alt=\"h1+h2 donnent deux éléments consécutifs, p\u003espan donnent deux éléments emboîtés\"/\u003e\u003c/figure\u003e\n\nDans les exemples ci-dessus,\n\n- `h1` et `h2` se suivent, j'utilise donc `+`\n- `span` est enchâssé dans `p` , j'utilise donc `\u003e`\n- après avoir emboîté `span` dans `p` , je veux continuer à écrire mon code sur une seule ligne, je dois sortir de l'emboîtement, ce que je fais en utilisant `^`\n\n### Regroupements\n\nPour profiter vraiment des emboîtements sans que votre code ne devienne une bouillie d'opérateurs, le mieux est de les regrouper - comme en mathématiques - en utilisant des parenthèses. Par exemple `(.foo\u003eh1)+(.bar\u003eh2)` est traduit ainsi\u0026nbsp;:\n\n    \u003cdiv class=\"foo\"\u003e\n\n  \t\t\u003ch1\u003e\u003c/h1\u003e\n\t\u003c/div\u003e\n\t\u003cdiv class=\"bar\"\u003e\n  \t\t\u003ch2\u003e\u003c/h2\u003e\n\t\u003c/div\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/05grouping.gif\" alt=\"exemple gif de transformation des éléments complexes ci-dessus\"/\u003e\u003c/figure\u003e\n\n### Noms d'éléments implicites\n\nPour déclarer un élément et une classe, il suffit de taper `div.item` ce qui génèrera `\u003cdiv class=\"item\"\u003e\u003c/div\u003e`.\n\nAutrefois, on pouvait omettre le nom d'élément pour un `div` , il n'y avait qu'à taper `.item` et cela générait `\u003cdiv class=\"item\"\u003e\u003c/div\u003e`. Emmet est plus intelligent. Il va chercher le nom de l'élément parent à chaque fois que vous utilisez un nom d'élément implicite. Si vous déclarez `.item` à l'intérieur d'une `\u003cul\u003e` , il génèrera `\u003cli class=\"item\"\u003e\u003c/li\u003e` au lieu de `\u003cdiv class=\"item\"\u003e\u003c/div\u003e`.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/06implicit_tags.gif\" alt=\"exemple gif de transformation des éléments ci-dessus, selon le contexte\"/\u003e\u003c/figure\u003e\n\nVoici une liste de noms d'éléments implicites :\n\n- `li` pour `ul` et `ol`\n- `tr` pour `table` , `tbody` , `thead` et `tfoot`\n- `td` pour `tr`\n- `option` pour `select` et `optgroup`\n\n### Multiplication\n\nVous pouvez choisir le nombre de fois qu'un élément doit apparaître, en utilisant l'opératuer `*`. Ainsi, `ul\u003eli*3` est traduit par\u0026nbsp;:\n\n    \u003cul\u003e\n\n  \t\t\u003cli\u003e\u003c/li\u003e\n  \t\t\u003cli\u003e\u003c/li\u003e\n  \t\t\u003cli\u003e\u003c/li\u003e\n\t\u003c/ul\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/07multiplication.gif\" alt=\"exemple gif de transformation des éléments ci-dessus ul et li\"/\u003e\u003c/figure\u003e\n\n### Numérotation\n\nEt si l'on voulait ajouter une numérotation ? Il suffit d'insérer l'opérateur `$` dans le nom de l'élément ou de l'attribut, ou dans la valeur de l'attribut, pour obtenir cette numérotation. Si vous tapez `ul\u003eli.item$*3` , le résultat sera\u0026nbsp;:\n\n    \u003cul\u003e\n\n  \t\t\u003cli class=\"item1\"\u003e\u003c/li\u003e\n  \t\t\u003cli class=\"item2\"\u003e\u003c/li\u003e\n  \t\t\u003cli class=\"item3\"\u003e\u003c/li\u003e\n\t\u003c/ul\u003e\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/08numbering.gif\" alt=\"exemple gif de transformation des éléments ci-dessus ul et li numérotés\"/\u003e\u003c/figure\u003e\n\n---\n\n## Abréviations CSS\n\n### Valeurs\n\nEmmet vous aide également pour CSS. Vous pouvez injecter des valeurs directement dans des abréviations CSS. Imaginons que vous vouliez définir une largeur. Tapez `w100` et cela vous donnera\u0026nbsp;:\n\n    width: 100px;\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/09values.gif\" alt=\"exemple gif de transformation des éléments margin, width, height\"/\u003e\u003c/figure\u003e\n\nIl y a d'autres unités que les pixels. Tapez `h10p+m5e` et voici ce qui sera affiché\u0026nbsp;:\n\n    height: 10%;\n    margin: 5em;\n\n### Opérateurs additionnels\n\nVous connaissez déjà de nombreuses abréviations intuitives, telles que `@f` qui donne\u0026nbsp;:\n\n    @font-face {\n      font-family:;\n      src: url();\n    }\n\nCertaines propriétés, comme `background`, `background-image` , `border-radius` , `font` , `@font-face` , `text-outline` , `text-shadow` possèdent quelques options supplémentaires que vous pouvez activer en utilisant le signe `+`. Par exemple, `@f+` donnera\u0026nbsp;:\n\n    @font-face {\n      font-family: 'FontName';\n      src: url('FileName.eot');\n      src: url('FileName.eot?#iefix') format('embedded-opentype'),\n      url('FileName.woff') format('woff'),\n      url('FileName.ttf') format('truetype'),\n      url('FileName.svg#FontName') format('svg');\n      font-style: normal;\n      font-weight: normal;\n    }\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/10extra.gif\" alt=\"exemple gif de transformation des éléments ci-dessus, deux caractères tapés donnent une liste impressionnante\"/\u003e\u003c/figure\u003e\n\nAmusez-vous à voir ce que ça donne avec d'autres propriétés en tapant leur abréviation et `+` : par exemple `bg+` etc.\n\n### Recherche floue\n\nLe module CSS utilise les correspondances partielles pour retrouver des abréviations inconnues. Lorsque vous tapez une abréviation inexistante, Emmet essaie de trouver la définition de snippet la plus proche, par exemple `ov:h` , `ov-h` , `ovh` et `oh` génèreront le même résultat\u0026nbsp;:\n\n    overflow: hidden;\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/11fuzzy_search.gif\" alt=\"exemple gif de transformation des éléments ci-dessus, plusieurs versions donnent le même résultat\"/\u003e\u003c/figure\u003e\n\n### Préfixes constructeurs\n\nCSS est génial, mais ces préfixes constructeurs sont une vraie plaie. Enfin, plus maintenant : Emmet a des abréviations pour eux aussi. Par exemple, l'abréviation `trs` donnera\u0026nbsp;:\n\n    -webkit-transform: ;\n    -moz-transform: ;\n    -ms-transform: ;\n    -o-transform: ;\n    transform: ;\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/12vendor_prefixes.gif\" alt=\"exemple gif de transformation des éléments ci-dessus, ajout de préfixes constructeurs\"/\u003e\u003c/figure\u003e\n\nVous pouvez également ajouter des préfixes à n'importe quel élément, il suffit d'utiliser le préfixe `-`. Ainsi, `-super-foo`sera traduit par\u0026nbsp;:\n\n    -webkit-super-foo: ;\n    -moz-super-foo: ;\n    -ms-super-foo: ;\n    -o-super-foo: ;\n    super-foo: ;\n\nEt si vous ne voulez pas tous ces préfixes mais seulement certains. Pas de problème, vous pouvez définir exactement la compatibilité navigateur souhaitée. Par exemple, `-wm-trf` donnera\u0026nbsp;:\n\n    -webkit-transform: ;\n    -moz-transform: ;\n    transform: ;\n\navec :\n\n- w → -webkit-\n- m → -moz-\n- s → -ms-\n- o → -o-\n\n### Dégradés\n\nPuis en est à ces caractéristiques ennuyeuses de CSS, nous ne pouvons pas ne pas parler des dégradés. Ces longues définitions peuvent être facilement remplacées par une abréviation concise et à toute épreuve. Tapez `lg(left, #fff 50%, #000)` , et voilà ce que obtiendrez\u0026nbsp;:\n\n    background-image: -webkit-gradient(linear, 0 0, 100% 0, color-stop(0.5, #fff), to(#000));\n    background-image: -webkit-linear-gradient(left, #fff 50%, #000);\n    background-image: -moz-linear-gradient(left, #fff 50%, #000);\n    background-image: -o-linear-gradient(left, #fff 50%, #000);\n    background-image: linear-gradient(left, #fff 50%, #000);\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/13gradient.gif\" alt=\"exemple gif de transformation des éléments complexes ci-dessus\"/\u003e\u003c/figure\u003e\n\n## Extras\n\n### Lorem ipsum\n\nPlus besoin de ces services tiers qui génèrent du texte \"Lorem ipsum\", vous pouvez maintenant le faire directement dans votre éditeur de texte. Utilisez les abréviations `lorem` ou `ipsum` . Vous pouvez même spécifier le nombre de mots dont vous avez besoin, par exemple `lorem10` génèrera\u0026nbsp;:\n\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Libero delectus.\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/14lorem.gif\" alt=\"exemple gif de transformation des éléments ci-dessus, lorem ipsum de longueur variable\"/\u003e\u003c/figure\u003e\n\nLorem peut être concaténé avec les autres éléments, ainsi `p*3\u003elorem5` génèrera\u0026nbsp;:\n\n    \u003cp\u003eLorem ipsum dolor sit amet.\u003c/p\u003e\n    \u003cp\u003eVoluptates esse aliquam asperiores sunt.\u003c/p\u003e\n    \u003cp\u003eFugiat eaque laudantium explicabo omnis!\u003c/p\u003e\n\n## Customization\n\nEmmet propose tout un tas de réglages fins, vous pouvez utiliser trois fichiers pour cela\u0026nbsp;:\n\n- Pour mettre à jour un snippet ou pour en ajouter un de votre cru, éditez [snippets.json](http://docs.emmet.io/customization/snippets/).\n- Pour changer le comportement des filtres et actions d'Emmet, essayez avec [preferences.json](http://docs.emmet.io/customization/preferences/).\n- Pour définir comment vous souhaitez qu'apparaisse le HTML ou le XML généré, éditez [syntaxProfiles.json](http://docs.emmet.io/customization/syntax-profiles/).\n\n## Et plus encore !\n\nCe n'est que le début. Emmet offre bien d'autres fonctions, comme [l'encodage et le décodage d'images](http://docs.emmet.io/actions/base64/), [l'ajout ou la mise à jour des attributs `width` et `height`pour les images](http://docs.emmet.io/actions/update-image-size/), [l'incrementation de nombres](http://docs.emmet.io/actions/inc-dec-number/) etc.\n\nVisitez le [site](http://emmet.io/), consultez la [documentation](http://docs.emmet.io/) et l'[anti-sèche](http://docs.emmet.io/cheat-sheet/) bien pratique.\n\n## Compatibilité éditeurs de texte\n\nSi vous vous demandez \"est-ce que ça marchera avec mon éditeur de texte\", la réponse est \"Oui mon ami\", un grand nombre d'éditeurs de texte sont compatibles et j'espère que le vôtre se trouve dans la liste\u0026nbsp;:\n\n- [Sublime Text 2](https://github.com/sergeche/emmet-sublime)\n- [TextMate 1.x](https://github.com/emmetio/Emmet.tmplugin)\n- [Eclipse/Aptana](https://github.com/emmetio/emmet-eclipse)\n- [Coda 1.6 et 2.x](https://github.com/emmetio/Emmet.codaplugin)\n- [Espresso](https://github.com/emmetio/Emmet.sugar)\n- [Chocolat](https://github.com/sergeche/emmet.chocmixin) (disponible via la boîte de dialogue “Install Mixin”)\n- Komodo Edit/IDE (disponible via Tools → Add-ons)\n- Notepad++\n- PSPad\n- [CodeMirror2/3](https://github.com/emmetio/codemirror)\n- [Brackets](https://github.com/emmetio/brackets-emmet)\n- Textarea\n- [phpstorm](http://www.jetbrains.com/phpstorm/)\n\n### Liens utiles\n\n[Documentation Emmet](http://docs.emmet.io/css-abbreviations/)  \n[Anti-sèche Emmet (syntaxe, HTML, CSS)](http://docs.emmet.io/cheat-sheet/)  \n[Bootstrap en quelques minutes avec Emmet](http://webdesign.tutsplus.com/tutorials/applications/build-bootstrap-in-minutes-using-emmet/) (en anglais)  \n[Emmet, un turbo dans votre CSS](/articles/emmet-un-turbo-dans-votre-css/), par Josh Medeski  \n[Raccourcis et astuces Emmet](/articles/une-liste-de-raccourcis-emmet/), par Matt MacFadyen et Jordan Moore\n"},{"slug":"le-web-95-de-typographie","title":"Le web, 95% de typographie","author":{"name":"Oliver Reichenstein","lastname":"Reichenstein"},"original":{"date":"19 octobre 2006","site":"iA Blog","siteUrl":"http://ia.net/blog/","postUrl":"http://ia.net/blog/the-web-is-all-about-typography-period/","copyright":"2006"},"dateCascade":"11 décembre 2013","dateMachine":"2O131211","tags":["design","typographie"],"about":[],"excerpt":"Un bref rappel par Oliver Reichenstein, fondateur d'Information Architects, de l'importance de la typographie dans le web, ce qu'elle est et ce qu'elle n'est pas. Simple, direct, éclairant et inspirant.","featured":false,"featuredImage":"/images/garamond-specimen-compressor.jpeg","order":null,"content":"\n95% de l’information sur le web est écrite. En bonne logique tout designer web devrait avoir de solides connaissances dans la principale discipline consacrée à donner forme à l’information écrite, à savoir la Typographie.\n\nEn 1969, le célèbre typographe suisse [Emil Ruder](http://fr.wikipedia.org/wiki/Emil_Ruder) écrivait au sujet des matériaux imprimés de son époque ce qu'on pourrait dire de nos sites web contemporains\u0026nbsp;:\n\n\u003e \u003ci\u003eDe nos jours, nous sommes inondés par un tel flot d'information imprimée que la valeur du travail individuel a été dépréciée, nos contemporains harassés n'étant plus à même de suivre tout ce qui est imprimé aujourd’hui. C’est la tâche du typographe de diviser, d’organiser et d’interpréter cette masse d'information imprimée pour faire en sorte que le lecteur trouve ce qui l’intéresse\u003c/i\u003e.\n\nAvec un peu d’imagination (remplacez imprimé par web), cela ressemble à la description de poste d’un designer de l’information. C’est le rôle d’un tel designer de \u0026ldquo;diviser et d’organiser et d’interpréter cette masse d'information imprimée pour faire en sorte que le lecteur trouve ce qui l’intéresse\u0026rdquo;.\n\nLa macro-typographie (structure générale d’un texte) par contraste avec la micro-typographie (aspects détaillés des caractères et de l’espacement des mots) couvre beaucoup d’aspects de ce que nous appelons aujourd’hui le \u0026ldquo;design de l’information\u0026rdquo;. Aujourd’hui, les designers de l’information font pour ainsi dire les tâches que réalisaient les typographes il y a 30 ans\u0026nbsp;:\n\n\u003e \u003ci\u003eLa typographie a un objectif simple, qui est de transmettre l’information par écrit. Il n’existe pas d’argument ou de considération qui puisse absoudre la typographie de ce devoir. Un document imprimé qui ne peut être lu est un produit sans objet\u003c/i\u003e.\n\nOptimiser la typographie consiste à optimiser la lisibilité, l’accessibilité, l’usabilité, l’équilibre graphique général. Organiser des blocs de textes et les combiner avec des images, n’est-ce pas ce font que les graphistes, les spécialistes de l’usabilité, les architectes de l’information\u0026nbsp;? Alors pourquoi est-ce un sujet aussi négligé\u0026nbsp;?\n\n## Trop peu de polices ? Une résolution trop faible ?\n\nLe principal argument –\u0026nbsp;ou la principale récrimination\u0026nbsp;– contre la discipline typographique en ligne est qu’il y a trop peu de polices de caractères disponibles. Le deuxième argument est que la résolution de l’écran est trop faible, ce qui rend difficile la lecture d’un texte pixélisé ou de polices anticrénelées.\n\nLe premier argument est dénué de pertinence\u0026nbsp;: à l’époque de la Renaissance italienne, les typographes n’avaient qu’une seule fonte pour travailler, et pourtant cette période a produit quelques-unes des plus belles réalisations typographiques\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/garamond-specimen-compressor.jpeg\" width=\"1000\" height=\"1616\" alt=\"une magnifique typographie\"/\u003e\u003c/figure\u003e\n\nLe typographe ne devrait pas trop s’en faire quant au choix de polices dont il dispose. En fait, ce choix ne devrait pas être sa préoccupation principale. Il devrait utiliser ce qui est disponible et faire au mieux.\n\n## Choisir une police n’est pas de la typographie\n\nLe second argument ne vaut pas mieux. Au commencement de l’imprimerie, la qualité des caractères d’impression était bien pire que ce que nous voyons sur les écrans actuels. En outre, si elles sont utilisées professionnellement, les polices numériques sont tout à fait lisibles.\n\nLe design d’information ne consiste pas à utiliser de bonnes polices mais à utiliser une bonne typographie -\u0026nbsp;ce qui est très différent. N’importe qui peut utiliser des polices, quelques-uns savent en choisir de bonnes, mais rares sont ceux qui maîtrisent la typographie.\n\n## Considérez le texte comme une interface utilisateur\n\nC’est vrai, la diversité de rendu des polices selon les navigateurs et les plateformes est agaçante et, oui, les problèmes de résolution rendent toute concentration problématique au delà de cinq minutes. Mais enfin, cela fait partie du travail d’un designer de rendre les textes faciles et agréables à lire sur la plupart des navigateurs et des plateformes. Un interlignage correct, un bon espacement des caractères et des mots, des espaces blancs et l’utilisation parcimonieuse de la couleur, tout ceci aide à la lisibilité. Mais ce n’est pas tout. Un grand designer web sait comment travailler avec un texte, pas seulement en tant que contenu mais aussi comme [une interface utilisateur](http://www.cameronmoll.com/archives/001266.html). Jetez un coup d’œil au site de [Khoi Vinh](http://www.subtraction.com), et vous comprendrez ce que je veux dire (\u003cspan aria-hidden=\"true\" data-icon=\"\u0026#9758;\"\u003e\u003c/span\u003e _NdT: la nouvelle version du site est encore plus parlante\u0026nbsp;!_)\u0026nbsp;:\n\n\u003cfigure  role=\"group\"\u003e\u003cimg src=\"/images/koih-compressor.gif\" alt=\"Le site de Khoi Vinh\"/\u003e\u003c/figure\u003e\n\nDes exemples plus célèbres de sites [non ornementaux](http://fr.wikipedia.org/wiki/Ornement_et_Crime) qui traitent le texte comme une interface sont\u0026nbsp;: [Google](http://www.google.com), [Ebay](http://www.ebay.fr), [Craigslist](http://www.craigslist.fr), [Youtube](http://www.youtube.com), [Flickr](http://www.flickr.com), [Digg](http://digg.com), [Reddit](http://www.reddit.com), [Delicious](https://delicious.com). Contrôler la typographie n’est pas seulement une nécessité de base du design, savoir comment traiter un texte comme une interface utilisateur est un facteur-clé de succès pour un site web. Ceux qui réussissent ont su créer à la fois une interface simple ET une identité forte. Mais c’est un autre sujet.\n\n---\n\n#### Suggestions de lectures\u0026nbsp;:\n\n**Emil Ruder**, [Typographie](http://www.amazon.fr/Typographie-Emil-Ruder/dp/3721200438/ref=sr_1_1?s=books\u0026ie=UTF8\u0026qid=1375821709\u0026sr=1-1\u0026keywords=emil+ruder)\u0026nbsp;: une bible pour des générations de typographes et de graphistes qui y ont appris les fondamentaux. Ruder, l'un des grands typographes du XXe siècle était un pionnier. Il abandonna les règles conventionnelles de sa discipline et les remplaça par de nouvelles règles qui satisfaisaient aux exigences de la nouvelle typographie.  \n**Kimberly Elam**, [Grid Systems : Principles of Organizing Type](http://www.amazon.com/o/ASIN/1568984650) (en anglais)\u0026nbsp;: les systèmes de grilles sont le fondement de tout design typographique, et pourtant ils passent souvent pour des solutions rigides et convenues. Peu de designers comprennent réellement la complexité et les richesses potentielles de la composition à partir de grilles (éventuellement subverties...)  \n**Muller-Brockmann**, [Grid Systems : A visual communication manual for graphic designers, typographers and three dimensional designers](http://www.amazon.com/Systems-Graphic-Design-Josef-Muller-Brockmann/dp/3721201450/sr=1-2/qid=1162128429?ie=UTF8\u0026s=books) (en anglais et allemand). Par un professionnel pour les professionnels, voici l'ouvrage définitif sur l'utilisation de systèmes de grilles pour les graphistes. Bien qu'écrite en 1961, cette interprétation est toujours utile aujourd'hui, même pour le design assisté par ordinateur.\n"},{"slug":"box-sizing-pour-les-nuls","title":"Box-sizing pour les nuls","author":{"name":"Paula Borowska","lastname":"Borowska"},"original":{"date":"12 juin 2013","site":"Web Design Views","siteUrl":"https://webdesignviews.com/","postUrl":"https://webdesignviews.com/css-box-sizing/","copyright":"2013"},"dateCascade":"11 décembre 2013","dateMachine":"2O131103","tags":["html","css"],"about":["Box Sizing","Box Model","Padding","Border","Margin"],"excerpt":"Box-sizing est une alternative au modèle de boîte standard. Elle est très simple et peut réellement changer votre travail. Une très bonne introduction par Paula Borowska.","featured":true,"featuredImage":"/images/boxmodel-1-compressor.png","order":5,"content":"\nBox-sizing est une solution alternative au modèle de boîte standard que nous offre CSS. Pour bien comprendre la propriété box-sizing, il faut d'abord bien comprendre le modèle de boîte. En pratique, ils fonctionnent de la même manière mais il y a une différence essentielle —\u0026nbsp;que nous allons approfondir tout à l'heure. Pour l'instant, revoyons notre bon vieux modèle de boîte.\n\n## Le modèle de boîte\n\nCe modèle découle du fait que les éléments HTML sont pour la plupart des boîtes et que CSS utilise ces boîtes pour les agencer dans votre mise en page. Un élément HTML typique comporte une largeur et une hauteur qui définissent la surface de son contenu, et cette surface est elle-même enveloppée dans des padding, des bordures et des marges, comme on le voir sur cette illustration\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/boxmodel-1-compressor.png\" width=\"600\" height=\"300\" alt=\"Le modèle de boîte classique\"/\u003e\u003c/figure\u003e\n\nNotez la relation entre ces propriétés\u0026nbsp;: nous avons d'abord le contenu (Content), défini par sa largeur et sa hauteur, que cette dernière soit automatique ou spécifiée, elle est toujours là. Puis il y a le padding, suivi de la bordure, suivi de la marge. Voici une définition plus précise de chacun de ces éléments\u0026nbsp;:\n\n**Content** : le contenu, c'est à dire le texte ou l'image  \n**Padding** : crée un espace autour du contenu. Cet espace a le même background que la boîte Content.  \n**Border** : une bordure qui entoure le contenu et son padding. Elle peut avoir elle-même son propre background, son épaisseur, sa texture, ses motifs.  \n**Margin** : la marge crée un espace autour des éléments précédents, cet espace est toujours transparent et n'est jamais affecté par les background de ces éléments.\n\nQuand nous définissons les dimensions d'un élément, nous ne définissons en fait que les largeur et hauteur du contenu. Pour calculer la largeur et la hauteur totales de cet élément, nous devons aussi inclure le padding, la bordure et la marge.\n\nVoici un exemple :\n\n    //Exemple de dimension d'un élément\n\n    .box {\n       width: 100px;\n       padding: 10px;\n       border: 5px solid black;\n       margin: 10px;\n    }\n\nLa largeur du contenu est de 100px, toutefois l'élément dans son ensemble a une largeur de 150px car nous devons intégrer les dimensions des autres composantes. Attention, il faut compter deux fois la largeur du padding, de la bordure et de la marge puisqu'elles sont de chaque côté de la boîte du contenu.\n\nDans l'exemple précédent, nous aurions donc\u0026nbsp;:  \n100px (largeur du contenu) + 10px (padding gauche) + 10px (padding droite) + 5px (bordure gauche) + 5px (bordure droite) + 10px (marge gauche) + 10px (marge droite) = 150px (largeur totale de l'élément).\n\n## En quoi Box-Sizing est-il différent ?\n\nCSS Box-sizing suit le modèle de boîte dans la mesure où il intègre la surface du contenu d'abord, puis le padding, puis la bordure, MAIS IL N'INCLUT PAS LES MARGES.\n\nCependant, nous devons définir la largeur ou la hauteur de notre élément, qui est maintenant la largeur ou la hauteur de l'élément **dans son ensemble**. Donc au lieu d'ajouter le padding et la bordure, vous devez les soustraire pour obtenir les dimensions du contenu\u0026nbsp;:\n\nLargeur = la largeur totale de l'élément\net Largeur - padding - bordure = largeur du contenu\n\nDans l'exemple précédent, nous aurions :\n100px (largeur totale de l'élément) - 10px (padding gauche) - 10px (padding droite) - 5px (bordure gauche) - 5px (bordure droite) = 70px (largeur du contenu).\n\nLa logique est donc inversée, et pour mieux la comprendre voici les deux modèles mis côte à côte\u0026nbsp;:\n\n\u003cfigure role=\"group\"\u003e\u003cimg src=\"/images/boxsizing-1-compressor.png\" width=\"600\" height=\"562\" alt=\"comparaison de box model et box sizing\"/\u003e\u003c/figure\u003e\n\n## Comment utiliser Box-Sizing\n\nPour faire fonctionner box-sizing, il nous faut écrire quelques lignes de code afin de \u0026ldquo;l'activer\u0026rdquo;. Ces lignes peuvent être appliquées à un élément en particulier ou à l'ensemble de votre document. Il faut garder à l'esprit les limitations des navigateurs et utiliser les préfixes constructeurs spécifiques, nous y reviendrons plus tard.\n\n    //Déclaration initiale\n\n    .box {\n       box-sizing: border-box; /* Opera/IE 8+ */\n    /* box-sizing est appliqué seulement à cette classe */\n    }\n\n    * {\n     box-sizing: border-box;\n    /* box-sizing est appliqué à tous les éléments */\n    }\n\n## Syntaxe\n\nSyntaxe de base de box-sizing :\n\n    {box-sizing: content-box|border-box|inherit;}\n\nLa syntaxe de base de box-sizing est très simple. Passons en revue les trois valeurs qu'elle peut prendre.\n\n**Content-box** : c'est la valeur par défaut, elle spécifie que les largeur et hauteur définies s'appliquent aux largeur et hauteur du contenu seul, et que le padding, la bordure et les marges sont en dehors de ces dimensions.  \n**Border-box** : les largeur et hauteur spécifiées sont celles de l'élément dans son ensemble, en conséquence les dimensions du padding ou des bordures viennent diminuer les dimensions du contenu.  \n**Inherit** : comme pour toute valeur héritée, la valeur de box-sizing peut dépendre de celle de son élément parent.\n\nNB : Pour compléter cet article, La Cascade a publié un article plus récent intitulé [Contrôler le modèle de boîte](/articles/controler-le-modele-de-boite/) par Ire Aderinokun, lecture conseillée\u0026nbsp;!\n\n## Support navigateurs\n\nÀ ce jour, box-sizing est compatible avec tous les principaux navigateurs. Si vous voulez connaître tous les détails, vous pouvez consulter le site [Can I use](http://caniuse.com/css3-boxsizing) qui est toujours à jour.\n\nLes navigateurs actuels sont compatibles avec box-sizing, mais les versions anciennes ne le sont pas, c'est pourquoi, si vous voulez cibler large, il est important d'utiliser les préfixes\u0026nbsp;! (NdT: les choses évoluent vite, pour être sûr d'utiliser les bons préfixes constructeurs, le mieux est d'utiliser Autoprefixer, pour tout savoir sur cet outil super pratique [voir l'article](https://openclassrooms.com/fr/courses/6106181-simplifiez-vous-le-css-avec-sass/6612156-utilisez-autoprefixer-pour-creer-du-code-adapte-a-tous-les-navigateurs) dans openclassroom).\n\nVoici comment écrire le code :\n\n    //Snippet pour les préfixes de box-sizing\n\n    .box {\n       box-sizing: border-box; /* Opera/IE 8+ */\n       -moz-box-sizing: border-box; /* Firefox, autres Gecko */\n       -webkit-box-sizing: border-box; /* Safari/Chrome, autres WebKit */\n    }\n\n## Min/Max\n\nSi les préfixes max- et min- ne vous sont pas encore familiers, ils doivent le devenir. Pour en savoir plus vous pouvez cliquer [ici](http://www.w3schools.com/cssref/pr_dim_min-width.asp). Comme vous l'avez deviné, min- et max- peuvent être appliqués à la hauteur et à la largeur d'un élément pour définir la taille minimum et maximum de cet élément. Et box-sizing fonctionne avec ces propriétés aussi.\n\n## Alors, pourquoi l'utiliser\u0026nbsp;?\n\nSi vous avez utilisé le modèle de boîte et si vous y êtes habitués, ce nouveau modèle peut vous paraître étrange. Cependant, si vous ne comprenez pas ou si vous n'aimez pas le modèle de boîte, box-sizing est pour vous.\n\nEt il y a encore un grand avantage à l'utiliser\u0026nbsp;: box-sizing est idéal pour les mises en page fluides.\n\nPrenons un exemple simple. Notre mise en page comprend deux éléments div qui devraient avoir pour dimension 50%. Parfait, mais il nous faut encore soustraire 10% de padding pour séparer les deux. Nous faisons donc le calcul et nous changeons les chiffres. Avec box-sizing rien de tout cela\u0026nbsp;! Nous définissons notre largeur et notre padding et le tour est joué.\n\nEn conclusion et pour le dire simplement\u0026nbsp;: les mises en pages ne sont pas toujours simples et s'avèrent souvent des casse-tête. Box-sizing vous fera gagner du temps et vous aidera à coder plus efficacement.\n"}],"tags":[{"slug":"accessibilite","name":"accessibilite","url":"https://fr.wikipedia.org/wiki/Accessibilit%C3%A9_du_web","bgColor":"black","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en français ou en anglais\u003c/h2\u003e\n\n- Le guide [Contribuer sur le web de manière accessible](https://disic.github.io/guide-contribuer_accessible/)\n- [Using ARIA](https://w3c.github.io/using-aria/), un guide pratique réalisé par le W3C pour utiliser ARIA.\n- Le guide ARIA des [bonnes pratiques de construction de sites](https://www.w3.org/WAI/ARIA/apg/patterns/) liste plein de fonctionnalités (accordéon, alertes, caroussel, menus, tables, ...) et donne des exemples.\n- Le site [WebAIM](http://webaim.org/), en anglais, extrêmement complet sur toutes les questions liées à l’accessibilité.\n- [Principes de Conception Inclusive](https://inclusivedesignprinciples.org/fr/) par Heydon Pickering, comme son nom l’indique cette page donne un tas d’exemples sur la façon d’utiliser ARIA pour rendre accessibles des éléments d’interface courants. Très bien faite\u0026nbsp;!\n- [Aural UI of the elements of HTML](http://thepaciellogroup.github.io/AT-browser-tests/), par le groupe Paciello. Tableau super complet décrivant l’interface sonore des éléments HTML : quelle est la compatibilité des éléments HTML avec les screen readers et comment mon site est-il lu par les outils d’accessibilité\u0026nbsp;?\n- [Bibliothèques accessibles](http://www.bibliothequesaccessibles.fr/accessibilite.html) regroupe énormément de ressources sur l’accessibilité dans un site bien fait et agréable à lire (et c’est en français\u0026nbsp;!).\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003ePublications, news :\u003c/h3\u003e\n\n- [Accessiblog](http://accessiblog.fr/), le blog d’Olivier Nourry sur l’accessibilité.\n- [a11ymatters](https://www.a11ymatters.com/), documenting everything through the journey of learning web accessibility.\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003eOutils divers :\u003c/h3\u003e\n\n- Un excellent outil pour tester l’accessibilité de votre site, [Wave accessibility tool](http://wave.webaim.org/).\n- [Tanaguru Contrast-Finder](http://contrast-finder.tanaguru.com/) trouve les bons contrastes de couleurs pour l’accessibilité web.\n- [Colour Contrast](http://snook.ca/technical/colour_contrast/colour.html)\n- [Contrast ratio](http://leaverou.github.io/contrast-ratio/), de Lea Verou, vous donne un ratio de contraste et vous donne votre note aux tests.\n- [Contrast Grid](https://contrast-grid.eightshapes.com/?version=1.1.0\u0026background-colors=\u0026foreground-colors=%23FFFFFF%2C%20White%0D%0A%23F2F2F2%0D%0A%23DDDDDD%0D%0A%23CCCCCC%0D%0A%23888888%0D%0A%23404040%2C%20Charcoal%0D%0A%23000000%2C%20Black%0D%0A%232F78C5%2C%20Effective%20on%20Extremes%0D%0A%230F60B6%2C%20Effective%20on%20Lights%0D%0A%23398EEA%2C%20Ineffective%0D%0A\u0026es-color-form__tile-size=compact\u0026es-color-form__show-contrast=aaa\u0026es-color-form__show-contrast=aa\u0026es-color-form__show-contrast=aa18\u0026es-color-form__show-contrast=dnp) pour tester des tas d'associations de couleurs et d'arrière-plans et leur respect du WCAG 2.0\n"},{"slug":"animation","name":"animation","url":"https://en.wikipedia.org/wiki/CSS_animations","bgColor":"rgba(120, 33, 109, 95%)","color":"white","content":""},{"slug":"couleur","name":"couleur","url":"https://fr.wikipedia.org/wiki/Couleur_du_Web","bgColor":"hsl(10,80%,30%)","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en français\u003c/h2\u003e\n\t\n* [Le cercle chromatique](https://www.google.fr/url?sa=t\u0026rct=j\u0026q=\u0026esrc=s\u0026source=web\u0026cd=1\u0026ved=0CCEQFjAA\u0026url=http%3A%2F%2Fwww.pearson.fr%2Fresources%2Fdownload.cfm%3FGCOI%3D27440100212080%26thefile%3D2413_bases.pdf\u0026ei=9ikMVN_5LITOaIDdgPgE\u0026usg=AFQjCNE7-PEuerZEzNTwtPYY6P5LWvNIug\u0026sig2=Mwg18ecc2Nra2C1xaz0H4A), un superbe pdf à télécharger sur la lumière, les couleurs, les associations de couleurs.\n* [Le cercle chromatique](http://fr.wikipedia.org/wiki/Cercle_chromatique), article de wikipedia\n* [Composition des couleurs](http://www.pearson.fr/resources/titles/27440100473760/extras/9320_chap01.pdf), autre pdf de chez Pearson.\n* [Quelle est la différence entre saturation et pureté ?](http://www.blog-couleur.com/?Quelle-est-la-difference-entre), par Daniel Metz\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en anglais\u003c/h2\u003e\n\n- [Color theory basics, Hue](http://lucaskrech.com/blog/index.php/2010/01/04/color-theory-basics-hue/), par Lucas Krech\n- [Color theory basics, Saturation \u0026 Chroma](http://lucaskrech.com/blog/index.php/2010/01/08/color-theory-basics-saturation-and-chroma/), par Lucas Krech\n- [Chroma in Munsell color system](http://en.wikipedia.org/wiki/Munsell_color_system#Chroma)\n- [Hues, Tints, Tones and Shades, what’s the difference?](http://www.craftsy.com/blog/2013/05/hues-tints-tones-and-shades/) par Paul Heaston\n- [Basic color schemes](http://www.tigercolor.com/color-lab/color-theory/color-theory-intro.htm)\n- [The 28 best tools for choosing your color scheme](http://www.creativebloq.com/colour/tools-colour-schemes-12121430), par Creative Bloq\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eOutils\u003c/h2\u003e\n\n- [Color Template](http://www.rocket-design.fr/color-template/), pour tout savoir sur les couleurs, un très joli site, très complet et instructif.\n- [Adobe Kuler](https://kuler.adobe.com/create/color-wheel/), outil en ligne pour choisir ses couleurs, très complet et inspirant.\n- [Color Scheme Designer](http://colorschemedesigner.com/), comme Kuler, avec un fonctionnement différent, très bien fait.\n- [WebColorData](http://webcolourdata.com/), avec cet outil les couleurs n’auront plus aucun secret pour vous. Entrez l’url d’un site internet et WebColorData référence en un panel les couleurs dominantes trouvées. Vraiment pratique.\n- [Color.io](http://colourco.de/), autre outil très pratique pour choisir une couleur et toute la palette complémentaire.\n- [Pictaculous](http://www.pictaculous.com/), quel schéma de couleurs utiliser avec une image\u0026nbsp;? Uploadez votre image sur Pictaculous, il vous donnera une belle palette de couleurs.\n- [Mudcube colour sphere](http://mudcu.be/sphere/#) vous permet de créer des schémas de couleurs et de vérifier leur accessibilité aux personnes souffrant de déficiences visuelles.\n- [0 to 255](http://0to255.com/), un outil simple pour trouver des variations sur une couleur.\n- [Hex.colorrrs](http://hex.colorrrs.com/), un convertisseur de Hex en RGB, simple, bien fait, visualisation de la couleur en cours de frappe.\n- [Brand Colors](http://brandcolors.net/), une collection de palettes de couleurs des grandes marques.\n- [The colors of motion](http://thecolorsofmotion.com/films), un site créatif par Charlie Clark qui explore l’utilisation des couleurs dans les films. Pas de mots, juste des couleurs. Choisissez un film, cliquez sur une bande de couleur, regardez les images et l’harmonie des couleurs.\n- [Spectrum](http://www.eigenlogik.com/spectrum/mac), une superbe application (Mac) pour créer vos palettes, les triturer, les exporter, intégrer directement une couleur dans CSS, etc.\n- [Contrast Grid](https://contrast-grid.eightshapes.com/?version=1.1.0\u0026background-colors=\u0026foreground-colors=%23FFFFFF%2C%20White%0D%0A%23F2F2F2%0D%0A%23DDDDDD%0D%0A%23CCCCCC%0D%0A%23888888%0D%0A%23404040%2C%20Charcoal%0D%0A%23000000%2C%20Black%0D%0A%232F78C5%2C%20Effective%20on%20Extremes%0D%0A%230F60B6%2C%20Effective%20on%20Lights%0D%0A%23398EEA%2C%20Ineffective%0D%0A\u0026es-color-form__tile-size=compact\u0026es-color-form__show-contrast=aaa\u0026es-color-form__show-contrast=aa\u0026es-color-form__show-contrast=aa18\u0026es-color-form__show-contrast=dnp) pour tester des tas d'associations de couleurs et d'arrière-plans et leur respect du WCAG 2.0\n"},{"slug":"css","name":"css","url":"https://fr.wikipedia.org/wiki/Feuilles_de_style_en_cascade","bgColor":"rgba(36, 75, 221, 80%)","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires\u003c/h2\u003e\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003ePour débuter\u003c/h3\u003e\n\n- [Premiers pas avec CSS](https://developer.mozilla.org/fr/docs/CSS/Premiers_pas), par Mozilla.\n- Le site du zéro (open classrooms) [HTML5 et CSS3](http://fr.openclassrooms.com/informatique/cours/apprenez-a-creer-votre-site-web-avec-html5-et-css3).\n- En anglais, le site très complet de [Shay Howe](http://learn.shayhowe.com/), pour apprendre HTML et CSS.\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003eRéférences à garder à portée de main\u003c/h3\u003e\n\n- [Référence CSS](https://developer.mozilla.org/fr/docs/CSS/Reference?redirectlocale=fr\u0026redirectslug=CSS%2FCSS_Reference), le guide de toutes les propriétés CSS, par Mozilla. À ajouter à vos favoris, pour l’avoir toujours sous la main\u0026nbsp;!\n- Alternative à Référence CSS, mais en anglais, l’[almanach](http://css-tricks.com/almanac/) de CSS-Tricks.\n- Autre alternative, toute récente, en anglais, le [CSS Reference](http://tympanus.net/codrops/css_reference/) de Codrops, super bien fait !\n- Pour CSS Grid, le [Complete CSS Grid Reference](https://tympanus.net/codrops/css_reference/grid/), de Codrops est très complet,\n- et pour Flexbox, le [Complete Flexbox Reference](https://tympanus.net/codrops/css_reference/flexbox/), écrit par Sarah Soueidan est un must.\n- [Les ressources MDN sur CSS Grid](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout), par Rachel Andrew, en cours de traduction\n- Pour tout comprendre de la [syntaxe des propriétés CSS](http://fr.slideshare.net/maxdesign/understanding-the-mysteries-of-the-css-property-value-syntax), les slides (en anglais) de Russ Weakley sont didactiques et drôles.\n- [Code Guide](http://mdo.github.io/code-guide/), les bonnes pratiques et conventions de bases à suivre par tout développeur Front End.\n- [CSS Guidelines](http://cssguidelin.es/), l’indispensable guide de Harry Roberts pour un CSS cohérent, maintenable et partageable (y compris avec vous-même\u0026nbsp;!)\n- [CSS Vocabulary](http://apps.workflower.fi/vocabs/css/en), une liste de toutes les termes à connaître, dans une présentation illustrée intuitive.\n- [Can I Use](http://caniuse.com/#cats=CSS), pour CSS.\n- [HTML5 please](http://html5please.com/), Cherchez une fonctionnalité HTML5, CSS3, etc., vérifiez si elle est sûre d’utilisation, et sinon la façon dont vous pourriez l’utiliser \u0026mdash;\u0026nbsp;avec des polyfills, des fallbacks, ou telles quelles.\n- [WTF, HTML \u0026 CSS?](http://wtfhtmlcss.com/), en anglais, une liste tenue à jour de problèmes et dilemmes liés à HTML, et leurs solutions.\n- [CSS-Triggers](http://csstriggers.com/), en anglais, une liste de toutes les propriétés CSS et de ce qu’elles \"déclenchent\" dans le navigateur, et leur impact sur la performance de votre site.\n"},{"slug":"cssgrid","name":"cssgrid","url":"https://en.wikipedia.org/wiki/CSS_grid_layout","bgColor":"rgba(2, 120, 120, 100%)","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en français\u003c/h2\u003e\n\n- [Grilles CSS](https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout) de MDN\n- [CSS3 Grid Layout](https://www.alsacreations.com/article/lire/1388-CSS3-Grid-Layout.html), par Raphaël Goetter\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en anglais\u003c/h2\u003e\n\n- [Référence Codrops](https://tympanus.net/codrops/css_reference/grid/), par Chen Hui Jing\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eOutils, jeux, antisèches\u003c/h2\u003e\n\n- [CSS Grid Garden](http://cssgridgarden.com/), par l'auteur du génial Flexbox Froggy est un super outil pour apprendre à utiliser CSS Grid en s'amusant\n- [Layoutit!](https://www.layoutit.com/grid), un outil de construction d'interfaces CSS Grid tip top\u0026nbsp;!\n- [Grid by example](http://gridbyexample.com/examples/), par Rachel Andrew, une foule d'exemples pour comprendre CSS Grid Layout.\n- [Layout-Fun with CSS Grid](https://tobireif.com/demos/grid/), expérimentations et explications.\n- [Grid Examples](http://www.gridexamples.com/), un site sur lequel vous pouvez soumettre vos propres projets CSS Grid et vous inspirer de ceux des autres.\n- [Complete CSS Grid Reference](https://tympanus.net/codrops/css_reference/grid/), codrops par Chen Hui Jing\n- [Grid, vidéos](http://gridbyexample.com/video/), Rachel Andrew complète ses exemples par des vidéos pédagogiques (en anglais).\n- [Une antisèche](https://rachelandrew.co.uk/css/cheatsheets/box-alignment) qui met en parallèle Flexbox et CSS Grid, très éclairant et super pratique, par Rachel Andrew.\n- [Une autre antisèche](http://grid.malven.co/) qui présente visuellement tous les concepts de CSS Grid.\n- [Concepts de base de CSS Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout), par MDN\n- [L'outil Grid Inspector de Firefox](https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts) (\u003e=52) permet d'examiner votre grille\u0026nbsp;!\n- [Modern layouts : getting out of our ruts](http://jensimmons.com/presentation/modern-layouts-getting-out-our-ruts), présentation vidéo et ressources par Jen Simmons\n- Quelques [superbes démos](http://labs.jensimmons.com/) de Jen Simmons\n- [formations](https://winkervsbecks.github.io/formations/), par Varun Vachhar, le foot en 4-4-2 ou en 4-3-3 n'auront plus aucun secret pour vous grâce à CSS-Grid.\n- [CSS Grid in Production](https://cssgrid.design/), une page recensant des sites qui utilisent CSS Grid.\n- [CSS Grid sur Codepen](https://codepen.io/search/pens?q=grid+layout\u0026limit=all\u0026type=type-pens), nombreuses démos d'utilisation de CSS Grid sur Codepen\n"},{"slug":"design","name":"design","url":"https://fr.wikipedia.org/wiki/Design","bgColor":"rgba(0, 204, 255, 50%)","color":"black","content":""},{"slug":"dom","name":"dom","url":"https://fr.wikipedia.org/wiki/Document_Object_Model","bgColor":"rgba(180, 50, 38, 100%)","color":"white","content":""},{"slug":"flexbox","name":"flexbox","url":"https://fr.wikipedia.org/wiki/Flex_Box_CSS","bgColor":"rgba(148, 90, 175, 100%)","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eOutils, jeux, antisèches Flexbox en français\u003c/h2\u003e\n\n- [Flexbox Froggy](http://flexboxfroggy.com/), un jeu absolument génial pour apprendre Flexbox\u0026nbsp;!\n- [Jack in the Flexbox](http://jackintheflexbox.tumblr.com/), blog entièrement consacré à Flexbox, par l'excellent Raphaël Goetter.\n- [CSS3 Flexbox Layout module](http://www.alsacreations.com/tuto/lire/1493-css3-flexbox-layout-module.html), par Raphaël Goetter\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en anglais\u003c/h2\u003e\n\n- [W3C, recommandation Flexbox](http://www.w3.org/TR/css3-flexbox/)\n- [Flexbox](http://tympanus.net/codrops/css_reference/flexbox/), in Codrops CSS reference, long article détaillé de Sara Soueidan\n- [Using Flexbox today](http://www.chriswrightdesign.com/experiments/using-flexbox-today/), par Chris Wright\n- [Solved by Flexbox](http://philipwalton.github.io/solved-by-flexbox/), de Philip Walton, une démonstration par l'exemple de tout les problèmes que Flexbox peut résoudre.\n- [Flexbox cheatsheet](http://www.sketchingwithcss.com/samplechapter/cheatsheet.html), l'antisèche de flexbox, exemples pratiques de positionnement.\n- [Flexbox Cheatsheet Cheatsheet](http://jonibologna.com/flexbox-cheatsheet/), par Joni Trythall, antisèche à télécharger, super pratique\u0026nbsp;!\n- [Flexplorer](http://bennettfeely.com/flexplorer/)\n- [Flexbox adventures](http://www.chriswrightdesign.com/experiments/flexbox-adventures/), par Chris Wright\n- [CSS Flexbox Please!](http://demo.agektmr.com/flexbox/)\n- [Flexy Boxes](http://the-echoplex.net/flexyboxes/)\n- [What the Flexbox](http://flexbox.io/#/), série de vidéos gratuites par Wes Bos (en anglais).\n- [L'antisèche Flexbox de Joni Trythall](http://jonibologna.com/content/images/flexboxsheet.pdf), pdf très clair.\n- [Une antisèche](https://rachelandrew.co.uk/css/cheatsheets/box-alignment) qui met en parallèle Flexbox et CSS Grid, très éclairant et super pratique, par Rachel Andrew.\n"},{"slug":"html","name":"html","url":"https://fr.wikipedia.org/wiki/Hypertext_Markup_Language","bgColor":"rgba(200, 64, 32, 100%)","color":"white","content":"\n\u003ch2 id=\"html\"\u003eRessources complémentaires sur HTML\u003c/h2\u003e\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003ePour débuter\u003c/h3\u003e\n\n- [Introduction à HTML](https://developer.mozilla.org/fr/docs/Web/Guide/HTML/Introduction), par Mozilla.\n- [Apprendre le HTML5](http://41mag.fr/apprendre-le-html5-tutoriel-complet), tutoriel complet.\n- Le site du zéro (open classroom) [HTML5 et CSS3](http://fr.openclassrooms.com/informatique/cours/apprenez-a-creer-votre-site-web-avec-html5-et-css3).\n- En anglais, le site très complet de [Shay Howe](http://learn.shayhowe.com/), pour apprendre HTML et CSS.\n- [Code Guide](http://mdo.github.io/code-guide/), les bonnes pratiques et conventions de bases à suivre par tout développeur Front End.\n- [Le validateur de balisage HTML](https://validator.w3.org/nu/), n'oubliez pas de l'utiliser de temps en temps :)\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003ePour approfondir\u003c/h3\u003e\n\n- En anglais, une approche plus pointue de HTML5, [Dive into HTML5](http://diveintohtml5.info) de Mark Pilgrim, une bible\u0026nbsp;!\n- Liste des [caractères Unicode](http://www.fileformat.info/info/unicode/category/So/list.htm).\n- [Caractères spéciaux et entités HTML](http://alexandre.alapetite.fr/doc-alex/alx_special.html)\n- Le [validateur HTML](http://validator.w3.org) de W3C.\n- En anglais, [HTML5 Doctor](http://html5doctor.com/), une mine d’informations et d’explications sur HTML en général et sur les éléments HTML en particulier. Consultez par exemple les éléments listés dans HTML5 Element Index.\n- [HTML5 please](http://html5please.com/), Cherchez une fonctionnalité HTML5, CSS3, etc., vérifiez si elle est sûre d’utilisation, et sinon la façon dont vous pourriez l’utiliser \u0026mdash;\u0026nbsp;avec des polyfills, des fallbacks, ou telles quelles..\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003eCustom Elements, Polymer\u003c/h3\u003e\n\n- [Custom.io](http://customelements.io/), une galerie de custom elements pour vos applications web.\n- [Custom Elements](http://w3c.github.io/webcomponents/spec/custom/) selon le W3C.\n- [Polymer](http://www.polymer-project.org/)\n"},{"slug":"javascript","name":"javascript","url":"https://fr.wikipedia.org/wiki/JavaScript","bgColor":"rgba(239, 216, 27, 70%)","color":"black","content":""},{"slug":"json","name":"json","url":"https://fr.wikipedia.org/wiki/JavaScript_Object_Notation","bgColor":"rgba(15, 101, 12, 90%)","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en français\u003c/h2\u003e\n\n- [JSON, le stockage léger et pratique de données multitypes](https://www.alsacreations.com/article/lire/1675-json-stockage-leger-pratique-donnees-multitypes.html), par alsacréations\n- [JSON et jQuery](https://www.grafikart.fr/tutoriels/jquery/json-77), vidéo par Grafikart\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en anglais\u003c/h2\u003e\n\n- [le site officiel JSON.org](http://json.org/)\n- [L'histoire de JSON](https://www.youtube.com/watch?v=-C-JoyNuQJs), racontée par son créateur Douglas Crockford (vidéo)\n"},{"slug":"outils","name":"outils","url":"","bgColor":"rgba(239, 216, 27, 70%)","color":"black","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en français\u003c/h2\u003e\n\n- [Bash - La variable d'environnement PATH](https://www.commentcamarche.net/faq/3585-bash-la-variable-d-environnement-path)\n- [Bash](https://fr.wikipedia.org/wiki/Bourne-Again_shell)\n"},{"slug":"pseudo-classes","name":"pseudo-classes","url":"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes","bgColor":"rgba(2, 149, 136, 40%)","color":"black","content":""},{"slug":"pseudo-elements","name":"pseudo-elements","url":"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements","bgColor":"rgba(36, 75, 221, 20%)","color":"black","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires sur les pseudo-éléments\u003c/h2\u003e\n\n- [La page MDN sur les pseudo-éléments](https://developer.mozilla.org/fr/docs/Web/CSS/Pseudo-elements)\n- [La page MDN sur :before](https://developer.mozilla.org/fr/docs/Web/CSS/::before)\n- [La page MDN sur :after](https://developer.mozilla.org/fr/docs/Web/CSS/::after)\n- [La page MDN sur :first-letter](https://developer.mozilla.org/fr/docs/Web/CSS/::first-letter)\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en anglais\u003c/h2\u003e\n\n- [La page de Codrops CSS reference, dont une liste de \"pseudo-classes\"](https://tympanus.net/codrops/css_reference/), mêlant pseudo-classes et pseudo-éléments\n- [La page de Codrops CSS reference sur ::after](https://tympanus.net/codrops/css_reference/after/), écrite par Sara Soueidan\n- [La page de Codrops CSS reference sur ::before](https://tympanus.net/codrops/css_reference/before/), écrite par Sara Soueidan\n"},{"slug":"sass","name":"sass","url":"https://fr.wikipedia.org/wiki/Sass_(langage)","bgColor":"rgba(175, 80, 120, 100%)","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en français\u003c/h2\u003e\n\n- [Pourquoi Sass et Compass](http://blog.humancoders.com/pourquoi-sass-et-compass-49/) sont des choix judicieux, par Human coders.\n- Sass, [augmentez votre productivité](http://www.blogduwebdesign.com/ressources-css3/css-sass-augmentez-votre-productivite-dans-vos-integrations/571) par le blog du webdesign.\n\n  \u003cbr/\u003e\u003cbr/\u003e\n  ... et [Sass Guidelines](https://sass-guidelin.es/fr/) de Hugo Giraudel !\n\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en anglais\u003c/h2\u003e\n\n- [Sass for beginners](https://medium.com/@ricardozea/sass-for-beginners-the-friendliest-guide-about-how-to-install-use-sass-on-windows-22ff4a32c1f7), un guide pour installer et utiliser Sass sur Windows\n- Le livre de Hampton Catlin [guide complet de Sass](https://pragprog.com/titles/pg_sass3/pragmatic-guide-to-sass-3/)\n- Le livre de Dan Cederholm [Sass for Web Designers](http://www.abookapart.com/products/sass-for-web-designers)\n- Le livre de Dale Sande et Kianosh Pourian, [Sass in the Real World](https://www.gitbook.io/book/anotheruiguy/sassintherealworld_book-i), disponible gratuitement sur GitBook\n- [Sass reference](http://www.kaelig.fr/bettersassdocs/), une meilleure documentation Sass.\n"},{"slug":"svg","name":"svg","url":"https://fr.wikipedia.org/wiki/Scalable_Vector_Graphics","bgColor":"rgba(255, 179, 56, 95%)","color":"black","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires sur SVG\u003c/h2\u003e\n\n- [SVG Ground](http://svground.fr/svgdom.php), tout, absolument tout sur SVG ! (en français)\n- [La documentation MDN](https://developer.mozilla.org/fr/docs/Web/SVG) (Mozilla Developper Network) sur SVG, en français.\n- [Un tutoriel Mozilla](https://developer.mozilla.org/fr/docs/Web/SVG/Tutoriel) pour commencer SVG, en français.\n- [A compendium of SVG information](http://css-tricks.com/mega-list-svg-information/), par Chris Coyier\u0026nbsp;: une avalanche d’infos, d’articles, de ressources sur SVG. Vous ne pourrez plus dire que vous ne saviez pas\u0026nbsp;!\n- Une [plateforme](http://www.svgeneration.com) (en anglais) sur SVG, dans \"showcase\" vous trouverez des motifs à télécharger.\n- [Snap.svg](http://snapsvg.io/) une bibliothèque JavaScript par Dmitry Baranovskiy.\n- [Démos SVG](http://codepen.io/collection/svfAa/) sur CodePen.\n- [SVG editor](http://petercollingridge.appspot.com/svg-editor), de Peter Collingridge, bon outil pour éditer vos svg, beaucoup d’options d’optimisation pour alléger les fichiers.\n- [Awesome SVG](https://github.com/willianjusten/awesome-svg), de Willian Justen, une liste collaborative de ressources SVG.\n- [Gradients and patterns SVG 1.1](http://www.w3.org/TR/SVG/pservers.html), 2e édition de la spécification.\n- [linearGradient](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient), par Mozilla\n- [radialGradient](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient), par Mozilla\n- [Les dégradés et les motifs SVG 1.0](http://www.yoyodesign.org/doc/w3c/svg1/pservers.html), par yoyodesign, la spécification complète (et assez claire et concise pour une fois)\n- [Les dégradés de couleur](http://svground.fr/degrades.php), par SVGround, la bible du SVG\n"},{"slug":"typographie","name":"typographie","url":"https://fr.wikipedia.org/wiki/Typographie","bgColor":"rgba(50, 50, 228, 90%)","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires sur la typographie\u003c/h2\u003e\n\nSur [Typewolf](http://www.typewolf.com) vous pourrez trouver les typos en action sur des sites de qualité\u0026nbsp;: association entre polices de caractère, interactions de la typo et du design, Typewolf est une vraie source d’inspiration.\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003ePour trouver des polices payantes\u003c/h3\u003e\n\n- [Typekit](https://typekit.com/)\n- [Webtype](http://www.webtype.com/)\n- [Fontdeck](http://fontdeck.com/)\n- [MyFonts](http://www.myfonts.com/)\n- [Fontshop](http://www.fontshop.com/)\n- [Ascender Fonts](http://www.ascenderfonts.com/store/search.aspx?q=Droid+)\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003ePour trouver des polices gratuites\u003c/h3\u003e\n\n- [Font Squirrel](http://www.fontsquirrel.com/)\n- [Googlefonts](http://www.google.com/fonts/)\n- [Typekit](https://typekit.com/)\n- [What’s the closest Google Font?](http://joelcrawfordsmith.com/new/font/avenir) permet de trouver une police gratuite proche de celle sur laquelle vous avez travaillé en local...\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003ePour associer des polices\u003c/h3\u003e\n\n- [Font Pair](http://fontpair.co/), pour associer des polices Google. Très bien fait.\n- [Font Pairing](http://www.ourownthing.co.uk/fontpairing/), une interface très pratique pour associer des polices Google.\n- [Fonts in use](http://fontsinuse.com/), un catalogue de polices de caractères dans leur contexte réel. Bonne interface de recherche et très utile pour trouver les polices qui vont bien ensemble.\n- [Fontwolf](http://www.typewolf.com/), le site de Jeremiah Shoaf, nombreuses polices en contexte réel, bon outil pour chercher de bonnes associations de polices de caractères.\n- [Typ.io](http://www.typ.io/) est une collection de sites avec infos sur les polices utilisées. Très intéressant si vous cherchez des associations de polices.\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003eHTML et CSS\u003c/h3\u003e\n\n- [Métrique des fontes, line-height et vertical-align](https://iamvdo.me/blog/css-avance-metriques-des-fontes-line-height-et-vertical-align), excellent article par Vincent de Oliveira\n- [Caractères spéciaux et entités HTML](http://alexandre.alapetite.fr/doc-alex/alx_special.html)\n\n\u003ch3 class=\"ressourcesComplementaires\"\u003eAutres outils et références\u003c/h3\u003e\n\n- [The Elements of Typographic Style applied to the web](http://webtypography.net/toc/), l’ouvrage fondamental de Robert Bringhurst appliqué au web.\n- [The Elements of Typographic Style](http://www.amazon.fr/exec/obidos/ASIN/0881792128/jalfrezi-21/), par Robert Bringhurst : _si vous ne devez acheter qu’un seul livre sur la typographie, c’est celui-là\u0026nbsp;!_\n- [On Web Typography](http://www.abookapart.com/products/on-web-typography) de Jason Santa Maria est une excellente introduction à la typographie sur le web, et à la typographie en général.\n- [Thinking with Type: A Critical Guide for Designers, Writers, Editors, \u0026 Students](http://www.amazon.fr/Thinking-Type-Critical-Designers-Students/dp/1568989695/ref=pd_sim_eb_1/278-0457922-1340634), d’Ellen Lupton, un beau livre, très clair, très complet.\n- [The Geometry of Type: The Anatomy of 100 Essential Typefaces](http://www.amazon.com/Geometry-Type-Anatomy-Essential-Typefaces/dp/0500241422/ref=sr_1_1), de Stephen Coles analyse la façon dont sont construites 100 polices de caractères parmi les plus connues et c’est passionnant. NB: Aux USA le livre s’appelle \u0026ldquo;The Anatomy of Type\u0026rdquo; mais c’est le même\u0026nbsp;!\n- [Butterick’s practical typography](http://practicaltypography.com/), par Matthew Butterick, un livre en ligne (et en anglais) sur tous les fondamentaux de la typographie.\n- [Typedia](http://typedia.com/) l’encyclopédie communautaire des fontes.\n- [Type-Finder](http://www.type-finder.com/) vous aide à trouver les polices de caractères dont vous avez besoin\u0026nbsp;: un petit questionnaire sur les caractéristiques souhaitées et il vous envoie une sélection de polices correspondantes.\n- [Glyphr](http://glyphrstudio.com/) est un outil en ligne qui vous permet de créer vos propres typo, très simple d’utilisation, design cool.\n- [Kerntype](http://type.method.ac/#), un site amusant pour s’entraîner au crénage (kerning), attention c’est addictif\u0026nbsp;!\n- [Shape Type](http://shape.method.ac/), un autre site pour apprendre en s’amusant, cette fois il s’agit d’apprendre à utiliser les courbes de Bézier pour former les lettres, vraiment très intéressant.\n- [Reference](http://practice.typekit.com/reference/), une liste d’articles, de livres, de sites… établie et mise à jour par Typekit, organisée par sujets (en anglais).\n- [The State of Web Type](http://stateofwebtype.com/beta/), un site toujours à jour sur la compatibilité navigateurs de toutes les fonctionnalités liées à la typographie, depuis les plus simples (font-weight) jusqu’aux plus pointues (kern, smcp, clig…)\n- [WhatFont](http://chengyinliu.com/whatfont.html) disponible pour Google Chrome et Safari vous permet d’avoir toutes les infos sur les polices de caractères utilisées par le site que vous visitez. Hyper utile dès que vous repérez une belle combinaison de fontes, un superbe titre, des italiques magnifiques, etc. Il suffit de cliquer sur le texte et les infos apparaissent.\n- [Fluid Type Scale Calculator](https://www.fluid-type-scale.com/) permet de générer une typographie fluide avec CSS clamp. Entrez vos paramètres, l'outil crée le CSS correspondant.\n"},{"slug":"video","name":"video","url":"https://fr.wikipedia.org/wiki/Vid%C3%A9o","bgColor":"rgba(20, 20, 20, 70%)","color":"white","content":"\n\u003ch2 class=\"ressourcesComplementaires\"\u003eRessources complémentaires en français\u003c/h2\u003e\n\n- [Une vidéo d’arrière-plan sur toute la page en HTML et CSS](http://www.alsacreations.com/tuto/lire/1620-une-video-arriere-plan-sur-toute-la-page.html), la traduction (légèrement adaptée) de l’article de Florent Verschelde par Victor Brito sur Alsacréations.\n"}]},"__N_SSG":true},"page":"/articles","query":{},"buildId":"pXJBZe5G-GTsW2cq_D4I0","isFallback":false,"gsp":true,"scriptLoader":[]}</script><next-route-announcer><p aria-live="assertive" id="__next-route-announcer__" role="alert" style="border: 0px; clip: rect(0px, 0px, 0px, 0px); height: 1px; margin: -1px; overflow: hidden; padding: 0px; position: absolute; width: 1px; white-space: nowrap; overflow-wrap: normal;">La Cascade</p></next-route-announcer><script>mendeleyWebImporter = {
  downloadPdfs(e,t) { return this._call('downloadPdfs', [e,t]); },
  open() { return this._call('open', []); },
  setLoginToken(e) { return this._call('setLoginToken', [e]); },
  _call(methodName, methodArgs) {
    const id = Math.random();
    window.postMessage({ id, token: '0.9586069570237403', methodName, methodArgs }, 'https://la-cascade.io');
    return new Promise(resolve => {
      const listener = window.addEventListener('message', event => {
        const data = event.data;
        if (typeof data !== 'object' || !('result' in data) || data.id !== id) return;
        window.removeEventListener('message', listener);
        resolve(data.result);
      });
    });
  }
};</script><script src="./articles_files/748-504f0504968cf01f.js.téléchargement"></script><script src="./articles_files/[slug]-180cbaa3e5d99e25.js.téléchargement"></script><script src="./articles_files/[slug]-11d8555a8ae9a512.js.téléchargement"></script><script src="./articles_files/index-311f8a8edca58f18.js.téléchargement"></script><script src="./articles_files/tags-9a7270fed1c52c53.js.téléchargement"></script><script src="./articles_files/675-b9e4539e8c0434c4.js.téléchargement"></script><script src="./articles_files/auteurs-c11bcbf0d6ed7a96.js.téléchargement"></script><script src="./articles_files/search-1194e545683efead.js.téléchargement"></script><script src="./articles_files/[slug]-e2a97fc5956bafdd.js.téléchargement"></script></body></html>